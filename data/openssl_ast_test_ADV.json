{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk LEAF_NODE 5 sla_trunk LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 stations LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int num_stations ; VAR_DECL 6 unsigned int num_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 num_stations LEAF_NODE 8 num_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int active_stations ; VAR_DECL 6 unsigned int active_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 active_stations LEAF_NODE 8 active_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int hold_stations ; VAR_DECL 6 unsigned int hold_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 hold_stations LEAF_NODE 8 hold_stations LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 barge_disabled : LEAF_NODE 6 barge_disabled LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 on_hold : LEAF_NODE 6 on_hold LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station_ref LEAF_NODE 5 sla_station_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_station * station ; VAR_DECL 6 struct sla_station * station TYPE 7 struct sla_station * TYPE_NAME 8 struct sla_station LEAF_NODE 9 struct LEAF_NODE 9 sla_station POINTER 8 * LEAF_NODE 9 * NAME 7 station LEAF_NODE 8 station LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } ; CLASS_DEF 2 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } CLASS_DEF 3 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } LEAF_NODE 4 enum CLASS_NAME 4 sla_trunk_state LEAF_NODE 5 sla_trunk_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , LEAF_NODE 5 SLA_TRUNK_STATE_IDLE LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_RINGING LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_UP LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD_BYME LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk_ref LEAF_NODE 5 sla_trunk_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_trunk * trunk ; VAR_DECL 6 struct sla_trunk * trunk TYPE 7 struct sla_trunk * TYPE_NAME 8 struct sla_trunk LEAF_NODE 9 struct LEAF_NODE 9 sla_trunk POINTER 8 * LEAF_NODE 9 * NAME 7 trunk LEAF_NODE 8 trunk LEAF_NODE 6 ; SIMPLE_DECL 5 enum sla_trunk_state state ; VAR_DECL 6 enum sla_trunk_state state TYPE 7 enum sla_trunk_state TYPE_NAME 8 enum sla_trunk_state LEAF_NODE 9 enum LEAF_NODE 9 sla_trunk_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station LEAF_NODE 5 sla_station LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_RWLIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 trunks LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_dial * dial ; VAR_DECL 6 struct ast_dial * dial TYPE 7 struct ast_dial * TYPE_NAME 8 struct ast_dial LEAF_NODE 9 struct LEAF_NODE 9 ast_dial POINTER 8 * LEAF_NODE 9 * NAME 7 dial LEAF_NODE 8 dial LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } ; CLASS_DEF 2 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } CLASS_DEF 3 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } LEAF_NODE 4 enum CLASS_NAME 4 sla_hold_access LEAF_NODE 5 sla_hold_access LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , LEAF_NODE 5 SLA_HOLD_OPEN LEAF_NODE 5 , LEAF_NODE 5 SLA_HOLD_PRIVATE LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 access_counter_file LEAF_NODE 3 access_counter_file PARAMETER_LIST 2 ( char * directory , char * countername , int value , int operand ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * directory TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 directory LEAF_NODE 5 directory LEAF_NODE 3 , PARAMETER_DECL 3 char * countername TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 countername LEAF_NODE 5 countername LEAF_NODE 3 , PARAMETER_DECL 3 int value TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 value LEAF_NODE 5 value LEAF_NODE 3 , PARAMETER_DECL 3 int operand TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 operand LEAF_NODE 5 operand LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ BUFSIZ ] filename ; VAR_DECL 4 char [ BUFSIZ ] filename TYPE 5 char [ BUFSIZ ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ BUFSIZ ] LEAF_NODE 7 [ FIELD 7 BUFSIZ LEAF_NODE 8 BUFSIZ LEAF_NODE 7 ] NAME 5 filename LEAF_NODE 6 filename LEAF_NODE 4 ; SIMPLE_DECL 3 char [ BUFSIZ ] readbuf ; VAR_DECL 4 char [ BUFSIZ ] readbuf TYPE 5 char [ BUFSIZ ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ BUFSIZ ] LEAF_NODE 7 [ FIELD 7 BUFSIZ LEAF_NODE 8 BUFSIZ LEAF_NODE 7 ] NAME 5 readbuf LEAF_NODE 6 readbuf LEAF_NODE 4 ; SIMPLE_DECL 3 FILE * counterfile ; VAR_DECL 4 FILE * counterfile TYPE 5 FILE * TYPE_NAME 6 FILE LEAF_NODE 7 FILE POINTER 6 * LEAF_NODE 7 * NAME 5 counterfile LEAF_NODE 6 counterfile LEAF_NODE 4 ; SIMPLE_DECL 3 int old ; old = 0 , int counter ; counter = 0 ; INIT_DECL_LIST 4 int old ; old = 0 , int counter ; counter = 0 VAR_DECL 5 int old ; old = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 old LEAF_NODE 7 old LEAF_NODE 6 ; INIT 6 old = 0 ASSIGN 7 old = 0 LVAL 8 old NAME 9 old LEAF_NODE 10 old ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , VAR_DECL 5 int counter ; counter = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 counter LEAF_NODE 7 counter LEAF_NODE 6 ; INIT 6 counter = 0 ASSIGN 7 counter = 0 LVAL 8 counter NAME 9 counter LEAF_NODE 10 counter ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 vm_lock_path ( directory ) EXPR 5 vm_lock_path ( directory ) FUNCTION_CALL 6 vm_lock_path ( directory ) CALLEE 7 vm_lock_path LEAF_NODE 8 vm_lock_path LEAF_NODE 7 ( ARGUMENT 7 directory FIELD 8 directory LEAF_NODE 9 directory LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 snprintf ( filename , sizeof ( filename ) , \"%s/%s.counter\" , directory , countername ) ; EXPR 4 snprintf ( filename , sizeof ( filename ) , \"%s/%s.counter\" , directory , countername ) FUNCTION_CALL 5 snprintf ( filename , sizeof ( filename ) , \"%s/%s.counter\" , directory , countername ) CALLEE 6 snprintf LEAF_NODE 7 snprintf LEAF_NODE 6 ( ARGUMENT 6 filename FIELD 7 filename LEAF_NODE 8 filename LEAF_NODE 6 , ARGUMENT 6 sizeof ( filename ) FUNCTION_CALL 7 sizeof ( filename ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 filename FIELD 9 filename LEAF_NODE 10 filename LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 \"%s/%s.counter\" FIELD 7 \"%s/%s.counter\" LEAF_NODE 8 \"%s/%s.counter\" LEAF_NODE 6 , ARGUMENT 6 directory FIELD 7 directory LEAF_NODE 8 directory LEAF_NODE 6 , ARGUMENT 6 countername FIELD 7 countername LEAF_NODE 8 countername LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 operand != 1 EXPR 5 operand != 1 FIELD 6 operand LEAF_NODE 7 operand EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 counterfile = fopen ( filename , \"r\" ) ; EXPR 7 counterfile = fopen ( filename , \"r\" ) ASSIGN 8 counterfile = fopen ( filename , \"r\" ) LVAL 9 counterfile FIELD 10 counterfile LEAF_NODE 11 counterfile ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 fopen ( filename , \"r\" ) FUNCTION_CALL 10 fopen ( filename , \"r\" ) CALLEE 11 fopen LEAF_NODE 12 fopen LEAF_NODE 11 ( ARGUMENT 11 filename FIELD 12 filename LEAF_NODE 13 filename LEAF_NODE 11 , ARGUMENT 11 \"r\" FIELD 12 \"r\" LEAF_NODE 13 \"r\" LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 counterfile EXPR 8 counterfile FIELD 9 counterfile LEAF_NODE 10 counterfile LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 fgets ( readbuf , sizeof ( readbuf ) , counterfile ) EXPR 11 fgets ( readbuf , sizeof ( readbuf ) , counterfile ) FUNCTION_CALL 12 fgets ( readbuf , sizeof ( readbuf ) , counterfile ) CALLEE 13 fgets LEAF_NODE 14 fgets LEAF_NODE 13 ( ARGUMENT 13 readbuf FIELD 14 readbuf LEAF_NODE 15 readbuf LEAF_NODE 13 , ARGUMENT 13 sizeof ( readbuf ) FUNCTION_CALL 14 sizeof ( readbuf ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 readbuf FIELD 16 readbuf LEAF_NODE 17 readbuf LEAF_NODE 15 ) LEAF_NODE 13 , ARGUMENT 13 counterfile FIELD 14 counterfile LEAF_NODE 15 counterfile LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_debug ( 3 , \"Read this string from counter file: %s\\n\" , readbuf ) ; EXPR 13 ast_debug ( 3 , \"Read this string from counter file: %s\\n\" , readbuf ) FUNCTION_CALL 14 ast_debug ( 3 , \"Read this string from counter file: %s\\n\" , readbuf ) CALLEE 15 ast_debug LEAF_NODE 16 ast_debug LEAF_NODE 15 ( ARGUMENT 15 3 FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 15 , ARGUMENT 15 \"Read this string from counter file: %s\\n\" FIELD 16 \"Read this string from counter file: %s\\n\" LEAF_NODE 17 \"Read this string from counter file: %s\\n\" LEAF_NODE 15 , ARGUMENT 15 readbuf FIELD 16 readbuf LEAF_NODE 17 readbuf LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 old = counter = atoi ( readbuf ) ; EXPR 13 old = counter = atoi ( readbuf ) ASSIGN 14 old = counter = atoi ( readbuf ) LVAL 15 old FIELD 16 old LEAF_NODE 17 old ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 counter = atoi ( readbuf ) ASSIGN 16 counter = atoi ( readbuf ) LVAL 17 counter FIELD 18 counter LEAF_NODE 19 counter ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 atoi ( readbuf ) FUNCTION_CALL 18 atoi ( readbuf ) CALLEE 19 atoi LEAF_NODE 20 atoi LEAF_NODE 19 ( ARGUMENT 19 readbuf FIELD 20 readbuf LEAF_NODE 21 readbuf LEAF_NODE 19 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 fclose ( counterfile ) ; EXPR 10 fclose ( counterfile ) FUNCTION_CALL 11 fclose ( counterfile ) CALLEE 12 fclose LEAF_NODE 13 fclose LEAF_NODE 12 ( ARGUMENT 12 counterfile FIELD 13 counterfile LEAF_NODE 14 counterfile LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 operand EXPR 5 operand FIELD 6 operand LEAF_NODE 7 operand LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case 0 : LEAF_NODE 7 case LEAF_NODE 7 0 LEAF_NODE 7 : EXPR_STATEMENT 6 ast_unlock_path ( directory ) ; EXPR 7 ast_unlock_path ( directory ) FUNCTION_CALL 8 ast_unlock_path ( directory ) CALLEE 9 ast_unlock_path LEAF_NODE 10 ast_unlock_path LEAF_NODE 9 ( ARGUMENT 9 directory FIELD 10 directory LEAF_NODE 11 directory LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_debug ( 2 , \"MINIVM Counter %s/%s: Value %d\\n\" , directory , countername , counter ) ; EXPR 7 ast_debug ( 2 , \"MINIVM Counter %s/%s: Value %d\\n\" , directory , countername , counter ) FUNCTION_CALL 8 ast_debug ( 2 , \"MINIVM Counter %s/%s: Value %d\\n\" , directory , countername , counter ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 \"MINIVM Counter %s/%s: Value %d\\n\" FIELD 10 \"MINIVM Counter %s/%s: Value %d\\n\" LEAF_NODE 11 \"MINIVM Counter %s/%s: Value %d\\n\" LEAF_NODE 9 , ARGUMENT 9 directory FIELD 10 directory LEAF_NODE 11 directory LEAF_NODE 9 , ARGUMENT 9 countername FIELD 10 countername LEAF_NODE 11 countername LEAF_NODE 9 , ARGUMENT 9 counter FIELD 10 counter LEAF_NODE 11 counter LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return counter ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 counter EXPR 8 counter FIELD 9 counter LEAF_NODE 10 counter LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case 1 : LEAF_NODE 7 case LEAF_NODE 7 1 LEAF_NODE 7 : EXPR_STATEMENT 6 counter = value ; EXPR 7 counter = value ASSIGN 8 counter = value LVAL 9 counter FIELD 10 counter LEAF_NODE 11 counter ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 value FIELD 10 value LEAF_NODE 11 value LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case 2 : LEAF_NODE 7 case LEAF_NODE 7 2 LEAF_NODE 7 : EXPR_STATEMENT 6 counter += value ; EXPR 7 counter += value ASSIGN 8 counter += value LVAL 9 counter FIELD 10 counter LEAF_NODE 11 counter ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 value FIELD 10 value LEAF_NODE 11 value LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 counter < 0 EXPR 8 counter < 0 FIELD 9 counter LEAF_NODE 10 counter REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 counter = 0 ; EXPR 9 counter = 0 ASSIGN 10 counter = 0 LVAL 11 counter FIELD 12 counter LEAF_NODE 13 counter ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 9 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 counterfile = fopen ( filename , \"w\" ) ; EXPR 4 counterfile = fopen ( filename , \"w\" ) ASSIGN 5 counterfile = fopen ( filename , \"w\" ) LVAL 6 counterfile FIELD 7 counterfile LEAF_NODE 8 counterfile ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 fopen ( filename , \"w\" ) FUNCTION_CALL 7 fopen ( filename , \"w\" ) CALLEE 8 fopen LEAF_NODE 9 fopen LEAF_NODE 8 ( ARGUMENT 8 filename FIELD 9 filename LEAF_NODE 10 filename LEAF_NODE 8 , ARGUMENT 8 \"w\" FIELD 9 \"w\" LEAF_NODE 10 \"w\" LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! counterfile EXPR 5 ! counterfile UNARY_EXPR 6 ! counterfile UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 counterfile LEAF_NODE 8 counterfile LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_ERROR , \"Could not open counter file for writing : %s - %s\\n\" , filename , strerror ( errno ) ) ; EXPR 7 ast_log ( LOG_ERROR , \"Could not open counter file for writing : %s - %s\\n\" , filename , strerror ( errno ) ) FUNCTION_CALL 8 ast_log ( LOG_ERROR , \"Could not open counter file for writing : %s - %s\\n\" , filename , strerror ( errno ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_ERROR FIELD 10 LOG_ERROR LEAF_NODE 11 LOG_ERROR LEAF_NODE 9 , ARGUMENT 9 \"Could not open counter file for writing : %s - %s\\n\" FIELD 10 \"Could not open counter file for writing : %s - %s\\n\" LEAF_NODE 11 \"Could not open counter file for writing : %s - %s\\n\" LEAF_NODE 9 , ARGUMENT 9 filename FIELD 10 filename LEAF_NODE 11 filename LEAF_NODE 9 , ARGUMENT 9 strerror ( errno ) FUNCTION_CALL 10 strerror ( errno ) CALLEE 11 strerror LEAF_NODE 12 strerror LEAF_NODE 11 ( ARGUMENT 11 errno FIELD 12 errno LEAF_NODE 13 errno LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_unlock_path ( directory ) ; EXPR 7 ast_unlock_path ( directory ) FUNCTION_CALL 8 ast_unlock_path ( directory ) CALLEE 9 ast_unlock_path LEAF_NODE 10 ast_unlock_path LEAF_NODE 9 ( ARGUMENT 9 directory FIELD 10 directory LEAF_NODE 11 directory LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 fprintf ( counterfile , \"%d\\n\\n\" , counter ) ; EXPR 4 fprintf ( counterfile , \"%d\\n\\n\" , counter ) FUNCTION_CALL 5 fprintf ( counterfile , \"%d\\n\\n\" , counter ) CALLEE 6 fprintf LEAF_NODE 7 fprintf LEAF_NODE 6 ( ARGUMENT 6 counterfile FIELD 7 counterfile LEAF_NODE 8 counterfile LEAF_NODE 6 , ARGUMENT 6 \"%d\\n\\n\" FIELD 7 \"%d\\n\\n\" LEAF_NODE 8 \"%d\\n\\n\" LEAF_NODE 6 , ARGUMENT 6 counter FIELD 7 counter LEAF_NODE 8 counter LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 fclose ( counterfile ) ; EXPR 4 fclose ( counterfile ) FUNCTION_CALL 5 fclose ( counterfile ) CALLEE 6 fclose LEAF_NODE 7 fclose LEAF_NODE 6 ( ARGUMENT 6 counterfile FIELD 7 counterfile LEAF_NODE 8 counterfile LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_unlock_path ( directory ) ; EXPR 4 ast_unlock_path ( directory ) FUNCTION_CALL 5 ast_unlock_path ( directory ) CALLEE 6 ast_unlock_path LEAF_NODE 7 ast_unlock_path LEAF_NODE 6 ( ARGUMENT 6 directory FIELD 7 directory LEAF_NODE 8 directory LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_debug ( 2 , \"MINIVM Counter %s/%s: Old value %d New value %d\\n\" , directory , countername , old , counter ) ; EXPR 4 ast_debug ( 2 , \"MINIVM Counter %s/%s: Old value %d New value %d\\n\" , directory , countername , old , counter ) FUNCTION_CALL 5 ast_debug ( 2 , \"MINIVM Counter %s/%s: Old value %d New value %d\\n\" , directory , countername , old , counter ) CALLEE 6 ast_debug LEAF_NODE 7 ast_debug LEAF_NODE 6 ( ARGUMENT 6 2 FIELD 7 2 LEAF_NODE 8 2 LEAF_NODE 6 , ARGUMENT 6 \"MINIVM Counter %s/%s: Old value %d New value %d\\n\" FIELD 7 \"MINIVM Counter %s/%s: Old value %d New value %d\\n\" LEAF_NODE 8 \"MINIVM Counter %s/%s: Old value %d New value %d\\n\" LEAF_NODE 6 , ARGUMENT 6 directory FIELD 7 directory LEAF_NODE 8 directory LEAF_NODE 6 , ARGUMENT 6 countername FIELD 7 countername LEAF_NODE 8 countername LEAF_NODE 6 , ARGUMENT 6 old FIELD 7 old LEAF_NODE 8 old LEAF_NODE 6 , ARGUMENT 6 counter FIELD 7 counter LEAF_NODE 8 counter LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return counter ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 counter EXPR 5 counter FIELD 6 counter LEAF_NODE 7 counter LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 0, "project": "openssl_ast_vul_function_test_adv_0", "target": 1}
{"func": "SIMPLE_DECL 1 void * yyscan_t ; VAR_DECL 2 void * yyscan_t TYPE 3 void * TYPE_NAME 4 void LEAF_NODE 5 void POINTER 4 * LEAF_NODE 5 * NAME 3 yyscan_t LEAF_NODE 4 yyscan_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct parse_io BASE_CLASSES { struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; } ; CLASS_DEF 2 struct parse_io BASE_CLASSES { struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; } CLASS_DEF 3 struct parse_io BASE_CLASSES { struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; } LEAF_NODE 4 struct CLASS_NAME 4 parse_io LEAF_NODE 5 parse_io LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; SIMPLE_DECL 5 struct pval * pval ; VAR_DECL 6 struct pval * pval TYPE 7 struct pval * TYPE_NAME 8 struct pval LEAF_NODE 9 struct LEAF_NODE 9 pval POINTER 8 * LEAF_NODE 9 * NAME 7 pval LEAF_NODE 8 pval LEAF_NODE 6 ; SIMPLE_DECL 5 yyscan_t scanner ; VAR_DECL 6 yyscan_t scanner TYPE 7 yyscan_t TYPE_NAME 8 yyscan_t LEAF_NODE 9 yyscan_t NAME 7 scanner LEAF_NODE 8 scanner LEAF_NODE 6 ; SIMPLE_DECL 5 int syntax_error_count ; VAR_DECL 6 int syntax_error_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 syntax_error_count LEAF_NODE 8 syntax_error_count LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int my_lineno ; my_lineno = 1 ; VAR_DECL 2 int my_lineno ; my_lineno = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 my_lineno LEAF_NODE 4 my_lineno LEAF_NODE 3 ; INIT 3 my_lineno = 1 ASSIGN 4 my_lineno = 1 LVAL 5 my_lineno NAME 6 my_lineno LEAF_NODE 7 my_lineno ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int my_col ; my_col = 1 ; VAR_DECL 2 int my_col ; my_col = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 my_col LEAF_NODE 4 my_col LEAF_NODE 3 ; INIT 3 my_col = 1 ASSIGN 4 my_col = 1 LVAL 5 my_col NAME 6 my_col LEAF_NODE 7 my_col ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 char * my_file ; my_file = 0 ; VAR_DECL 2 char * my_file ; my_file = 0 TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 my_file LEAF_NODE 4 my_file LEAF_NODE 3 ; INIT 3 my_file = 0 ASSIGN 4 my_file = 0 LVAL 5 my_file NAME 6 my_file LEAF_NODE 7 my_file ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 char * prev_word ; VAR_DECL 2 char * prev_word TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 prev_word LEAF_NODE 4 prev_word LEAF_NODE 2 ; SIMPLE_DECL 1 int include_stack_index ; include_stack_index = 0 ; VAR_DECL 2 int include_stack_index ; include_stack_index = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 include_stack_index LEAF_NODE 4 include_stack_index LEAF_NODE 3 ; INIT 3 include_stack_index = 0 ASSIGN 4 include_stack_index = 0 LVAL 5 include_stack_index NAME 6 include_stack_index LEAF_NODE 7 include_stack_index ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 400 ] pbcstack ; VAR_DECL 2 char [ 400 ] pbcstack TYPE 3 char [ 400 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 400 ] LEAF_NODE 5 [ FIELD 5 400 LEAF_NODE 6 400 LEAF_NODE 5 ] NAME 3 pbcstack LEAF_NODE 4 pbcstack LEAF_NODE 2 ; SIMPLE_DECL 1 int pbcpos ; pbcpos = 0 ; VAR_DECL 2 int pbcpos ; pbcpos = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 pbcpos LEAF_NODE 4 pbcpos LEAF_NODE 3 ; INIT 3 pbcpos = 0 ASSIGN 4 pbcpos = 0 LVAL 5 pbcpos NAME 6 pbcpos LEAF_NODE 7 pbcpos ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int i ; VAR_DECL 2 int i TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 i LEAF_NODE 4 i LEAF_NODE 2 ;", "idx": 1, "project": "openssl_ast_vul_function_test_adv_32", "target": 1}
{"func": "SIMPLE_DECL 1 size_t yy_size_t ; VAR_DECL 2 size_t yy_size_t TYPE 3 size_t TYPE_NAME 4 size_t LEAF_NODE 5 size_t NAME 3 yy_size_t LEAF_NODE 4 yy_size_t LEAF_NODE 2 ; SIMPLE_DECL 1 void * yyscan_t ; VAR_DECL 2 void * yyscan_t TYPE 3 void * TYPE_NAME 4 void LEAF_NODE 5 void POINTER 4 * LEAF_NODE 5 * NAME 3 yyscan_t LEAF_NODE 4 yyscan_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct yy_buffer_state * YY_BUFFER_STATE ; VAR_DECL 2 struct yy_buffer_state * YY_BUFFER_STATE TYPE 3 struct yy_buffer_state * TYPE_NAME 4 struct yy_buffer_state LEAF_NODE 5 struct LEAF_NODE 5 yy_buffer_state POINTER 4 * LEAF_NODE 5 * NAME 3 YY_BUFFER_STATE LEAF_NODE 4 YY_BUFFER_STATE LEAF_NODE 2 ; SIMPLE_DECL 1 struct yy_buffer_state BASE_CLASSES { FILE * yy_input_file ; char * yy_ch_buf ; char * yy_buf_pos ; yy_size_t yy_buf_size ; int yy_n_chars ; int yy_is_our_buffer ; int yy_is_interactive ; int yy_at_bol ; int yy_bs_lineno ; int yy_bs_column ; int yy_fill_buffer ; int yy_buffer_status ; } ; CLASS_DEF 2 struct yy_buffer_state BASE_CLASSES { FILE * yy_input_file ; char * yy_ch_buf ; char * yy_buf_pos ; yy_size_t yy_buf_size ; int yy_n_chars ; int yy_is_our_buffer ; int yy_is_interactive ; int yy_at_bol ; int yy_bs_lineno ; int yy_bs_column ; int yy_fill_buffer ; int yy_buffer_status ; } CLASS_DEF 3 struct yy_buffer_state BASE_CLASSES { FILE * yy_input_file ; char * yy_ch_buf ; char * yy_buf_pos ; yy_size_t yy_buf_size ; int yy_n_chars ; int yy_is_our_buffer ; int yy_is_interactive ; int yy_at_bol ; int yy_bs_lineno ; int yy_bs_column ; int yy_fill_buffer ; int yy_buffer_status ; } LEAF_NODE 4 struct CLASS_NAME 4 yy_buffer_state LEAF_NODE 5 yy_buffer_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FILE * yy_input_file ; char * yy_ch_buf ; char * yy_buf_pos ; yy_size_t yy_buf_size ; int yy_n_chars ; int yy_is_our_buffer ; int yy_is_interactive ; int yy_at_bol ; int yy_bs_lineno ; int yy_bs_column ; int yy_fill_buffer ; int yy_buffer_status ; SIMPLE_DECL 5 FILE * yy_input_file ; VAR_DECL 6 FILE * yy_input_file TYPE 7 FILE * TYPE_NAME 8 FILE LEAF_NODE 9 FILE POINTER 8 * LEAF_NODE 9 * NAME 7 yy_input_file LEAF_NODE 8 yy_input_file LEAF_NODE 6 ; SIMPLE_DECL 5 char * yy_ch_buf ; VAR_DECL 6 char * yy_ch_buf TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 yy_ch_buf LEAF_NODE 8 yy_ch_buf LEAF_NODE 6 ; SIMPLE_DECL 5 char * yy_buf_pos ; VAR_DECL 6 char * yy_buf_pos TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 yy_buf_pos LEAF_NODE 8 yy_buf_pos LEAF_NODE 6 ; SIMPLE_DECL 5 yy_size_t yy_buf_size ; VAR_DECL 6 yy_size_t yy_buf_size TYPE 7 yy_size_t TYPE_NAME 8 yy_size_t LEAF_NODE 9 yy_size_t NAME 7 yy_buf_size LEAF_NODE 8 yy_buf_size LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_n_chars ; VAR_DECL 6 int yy_n_chars TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_n_chars LEAF_NODE 8 yy_n_chars LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_is_our_buffer ; VAR_DECL 6 int yy_is_our_buffer TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_is_our_buffer LEAF_NODE 8 yy_is_our_buffer LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_is_interactive ; VAR_DECL 6 int yy_is_interactive TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_is_interactive LEAF_NODE 8 yy_is_interactive LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_at_bol ; VAR_DECL 6 int yy_at_bol TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_at_bol LEAF_NODE 8 yy_at_bol LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_bs_lineno ; VAR_DECL 6 int yy_bs_lineno TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_bs_lineno LEAF_NODE 8 yy_bs_lineno LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_bs_column ; VAR_DECL 6 int yy_bs_column TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_bs_column LEAF_NODE 8 yy_bs_column LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_fill_buffer ; VAR_DECL 6 int yy_fill_buffer TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_fill_buffer LEAF_NODE 8 yy_fill_buffer LEAF_NODE 6 ; SIMPLE_DECL 5 int yy_buffer_status ; VAR_DECL 6 int yy_buffer_status TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 yy_buffer_status LEAF_NODE 8 yy_buffer_status LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct parse_io BASE_CLASSES { struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; } ; CLASS_DEF 2 struct parse_io BASE_CLASSES { struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; } CLASS_DEF 3 struct parse_io BASE_CLASSES { struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; } LEAF_NODE 4 struct CLASS_NAME 4 parse_io LEAF_NODE 5 parse_io LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct pval * pval ; yyscan_t scanner ; int syntax_error_count ; SIMPLE_DECL 5 struct pval * pval ; VAR_DECL 6 struct pval * pval TYPE 7 struct pval * TYPE_NAME 8 struct pval LEAF_NODE 9 struct LEAF_NODE 9 pval POINTER 8 * LEAF_NODE 9 * NAME 7 pval LEAF_NODE 8 pval LEAF_NODE 6 ; SIMPLE_DECL 5 yyscan_t scanner ; VAR_DECL 6 yyscan_t scanner TYPE 7 yyscan_t TYPE_NAME 8 yyscan_t LEAF_NODE 9 yyscan_t NAME 7 scanner LEAF_NODE 8 scanner LEAF_NODE 6 ; SIMPLE_DECL 5 int syntax_error_count ; VAR_DECL 6 int syntax_error_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 syntax_error_count LEAF_NODE 8 syntax_error_count LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int my_lineno ; my_lineno = 1 ; VAR_DECL 2 int my_lineno ; my_lineno = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 my_lineno LEAF_NODE 4 my_lineno LEAF_NODE 3 ; INIT 3 my_lineno = 1 ASSIGN 4 my_lineno = 1 LVAL 5 my_lineno NAME 6 my_lineno LEAF_NODE 7 my_lineno ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 int my_col ; my_col = 1 ; VAR_DECL 2 int my_col ; my_col = 1 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 my_col LEAF_NODE 4 my_col LEAF_NODE 3 ; INIT 3 my_col = 1 ASSIGN 4 my_col = 1 LVAL 5 my_col NAME 6 my_col LEAF_NODE 7 my_col ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 2 ; SIMPLE_DECL 1 char * my_file ; my_file = 0 ; VAR_DECL 2 char * my_file ; my_file = 0 TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 my_file LEAF_NODE 4 my_file LEAF_NODE 3 ; INIT 3 my_file = 0 ASSIGN 4 my_file = 0 LVAL 5 my_file NAME 6 my_file LEAF_NODE 7 my_file ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 char * prev_word ; VAR_DECL 2 char * prev_word TYPE 3 char * TYPE_NAME 4 char LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 prev_word LEAF_NODE 4 prev_word LEAF_NODE 2 ; SIMPLE_DECL 1 int include_stack_index ; include_stack_index = 0 ; VAR_DECL 2 int include_stack_index ; include_stack_index = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 include_stack_index LEAF_NODE 4 include_stack_index LEAF_NODE 3 ; INIT 3 include_stack_index = 0 ASSIGN 4 include_stack_index = 0 LVAL 5 include_stack_index NAME 6 include_stack_index LEAF_NODE 7 include_stack_index ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 400 ] pbcstack ; VAR_DECL 2 char [ 400 ] pbcstack TYPE 3 char [ 400 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 400 ] LEAF_NODE 5 [ FIELD 5 400 LEAF_NODE 6 400 LEAF_NODE 5 ] NAME 3 pbcstack LEAF_NODE 4 pbcstack LEAF_NODE 2 ; SIMPLE_DECL 1 int pbcpos ; pbcpos = 0 ; VAR_DECL 2 int pbcpos ; pbcpos = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 pbcpos LEAF_NODE 4 pbcpos LEAF_NODE 3 ; INIT 3 pbcpos = 0 ASSIGN 4 pbcpos = 0 LVAL 5 pbcpos NAME 6 pbcpos LEAF_NODE 7 pbcpos ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 int parencount ; parencount = 0 ; VAR_DECL 2 int parencount ; parencount = 0 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 parencount LEAF_NODE 4 parencount LEAF_NODE 3 ; INIT 3 parencount = 0 ASSIGN 4 parencount = 0 LVAL 5 parencount NAME 6 parencount LEAF_NODE 7 parencount ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 2 ; SIMPLE_DECL 1 struct stackelement BASE_CLASSES { char * fname ; int lineno ; int colno ; glob_t globbuf ; int globbuf_pos ; YY_BUFFER_STATE bufstate ; } ; CLASS_DEF 2 struct stackelement BASE_CLASSES { char * fname ; int lineno ; int colno ; glob_t globbuf ; int globbuf_pos ; YY_BUFFER_STATE bufstate ; } CLASS_DEF 3 struct stackelement BASE_CLASSES { char * fname ; int lineno ; int colno ; glob_t globbuf ; int globbuf_pos ; YY_BUFFER_STATE bufstate ; } LEAF_NODE 4 struct CLASS_NAME 4 stackelement LEAF_NODE 5 stackelement LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char * fname ; int lineno ; int colno ; glob_t globbuf ; int globbuf_pos ; YY_BUFFER_STATE bufstate ; SIMPLE_DECL 5 char * fname ; VAR_DECL 6 char * fname TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 fname LEAF_NODE 8 fname LEAF_NODE 6 ; SIMPLE_DECL 5 int lineno ; VAR_DECL 6 int lineno TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 lineno LEAF_NODE 8 lineno LEAF_NODE 6 ; SIMPLE_DECL 5 int colno ; VAR_DECL 6 int colno TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 colno LEAF_NODE 8 colno LEAF_NODE 6 ; SIMPLE_DECL 5 glob_t globbuf ; VAR_DECL 6 glob_t globbuf TYPE 7 glob_t TYPE_NAME 8 glob_t LEAF_NODE 9 glob_t NAME 7 globbuf LEAF_NODE 8 globbuf LEAF_NODE 6 ; SIMPLE_DECL 5 int globbuf_pos ; VAR_DECL 6 int globbuf_pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 globbuf_pos LEAF_NODE 8 globbuf_pos LEAF_NODE 6 ; SIMPLE_DECL 5 YY_BUFFER_STATE bufstate ; VAR_DECL 6 YY_BUFFER_STATE bufstate TYPE 7 YY_BUFFER_STATE TYPE_NAME 8 YY_BUFFER_STATE LEAF_NODE 9 YY_BUFFER_STATE NAME 7 bufstate LEAF_NODE 8 bufstate LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stackelement [ MAX_INCLUDE_DEPTH ] include_stack ; VAR_DECL 2 struct stackelement [ MAX_INCLUDE_DEPTH ] include_stack TYPE 3 struct stackelement [ MAX_INCLUDE_DEPTH ] TYPE_NAME 4 struct stackelement LEAF_NODE 5 struct LEAF_NODE 5 stackelement TYPE_SUFFIX 4 [ MAX_INCLUDE_DEPTH ] LEAF_NODE 5 [ FIELD 5 MAX_INCLUDE_DEPTH LEAF_NODE 6 MAX_INCLUDE_DEPTH LEAF_NODE 5 ] NAME 3 include_stack LEAF_NODE 4 include_stack LEAF_NODE 2 ; SIMPLE_DECL 1 const char * ast_config_AST_CONFIG_DIR ; VAR_DECL 2 const char * ast_config_AST_CONFIG_DIR TYPE 3 const char * TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 ast_config_AST_CONFIG_DIR LEAF_NODE 4 ast_config_AST_CONFIG_DIR LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 setup_filestack LEAF_NODE 3 setup_filestack PARAMETER_LIST 2 ( char * fnamebuf2 , int fnamebuf_siz , glob_t * globbuf , int globpos , yyscan_t yyscanner , int create ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * fnamebuf2 TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 fnamebuf2 LEAF_NODE 5 fnamebuf2 LEAF_NODE 3 , PARAMETER_DECL 3 int fnamebuf_siz TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 fnamebuf_siz LEAF_NODE 5 fnamebuf_siz LEAF_NODE 3 , PARAMETER_DECL 3 glob_t * globbuf TYPE 4 glob_t * TYPE_NAME 5 glob_t LEAF_NODE 6 glob_t POINTER 5 * LEAF_NODE 6 * NAME 4 globbuf LEAF_NODE 5 globbuf LEAF_NODE 3 , PARAMETER_DECL 3 int globpos TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 globpos LEAF_NODE 5 globpos LEAF_NODE 3 , PARAMETER_DECL 3 yyscan_t yyscanner TYPE 4 yyscan_t TYPE_NAME 5 yyscan_t LEAF_NODE 6 yyscan_t NAME 4 yyscanner LEAF_NODE 5 yyscanner LEAF_NODE 3 , PARAMETER_DECL 3 int create TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 create LEAF_NODE 5 create LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct yyguts_t * yyg ; yyg = ( struct yyguts_t * ) yyscanner ; VAR_DECL 4 struct yyguts_t * yyg ; yyg = ( struct yyguts_t * ) yyscanner TYPE 5 struct yyguts_t * TYPE_NAME 6 struct yyguts_t LEAF_NODE 7 struct LEAF_NODE 7 yyguts_t POINTER 6 * LEAF_NODE 7 * NAME 5 yyg LEAF_NODE 6 yyg LEAF_NODE 5 ; INIT 5 yyg = ( struct yyguts_t * ) yyscanner ASSIGN 6 yyg = ( struct yyguts_t * ) yyscanner LVAL 7 yyg NAME 8 yyg LEAF_NODE 9 yyg ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( struct yyguts_t * ) yyscanner LEAF_NODE 8 ( TYPE_NAME 8 struct yyguts_t LEAF_NODE 9 struct LEAF_NODE 9 yyguts_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 yyscanner LEAF_NODE 9 yyscanner LEAF_NODE 4 ; SIMPLE_DECL 3 int error , int i ; INIT_DECL_LIST 4 int error , int i VAR_DECL 5 int error TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 error LEAF_NODE 7 error LEAF_NODE 5 , VAR_DECL 5 int i TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 i LEAF_NODE 7 i LEAF_NODE 4 ; SIMPLE_DECL 3 FILE * in1 ; VAR_DECL 4 FILE * in1 TYPE 5 FILE * TYPE_NAME 6 FILE LEAF_NODE 7 FILE POINTER 6 * LEAF_NODE 7 * NAME 5 in1 LEAF_NODE 6 in1 LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 2048 ] fnamebuf ; VAR_DECL 4 char [ 2048 ] fnamebuf TYPE 5 char [ 2048 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 2048 ] LEAF_NODE 7 [ FIELD 7 2048 LEAF_NODE 8 2048 LEAF_NODE 7 ] NAME 5 fnamebuf LEAF_NODE 6 fnamebuf LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 globbuf && globbuf -> gl_pathv && globbuf -> gl_pathc > 0 EXPR 5 globbuf && globbuf -> gl_pathv && globbuf -> gl_pathc > 0 AND 6 globbuf && globbuf -> gl_pathv && globbuf -> gl_pathc > 0 EXPR 7 globbuf FIELD 8 globbuf LEAF_NODE 9 globbuf LEAF_NODE 7 && EXPR 7 globbuf -> gl_pathv && globbuf -> gl_pathc > 0 AND 8 globbuf -> gl_pathv && globbuf -> gl_pathc > 0 EXPR 9 globbuf -> gl_pathv FIELD 10 globbuf -> gl_pathv LEAF_NODE 11 globbuf LEAF_NODE 11 -> LEAF_NODE 11 gl_pathv LEAF_NODE 9 && EXPR 9 globbuf -> gl_pathc > 0 FIELD 10 globbuf -> gl_pathc LEAF_NODE 11 globbuf LEAF_NODE 11 -> LEAF_NODE 11 gl_pathc REL_OPERATOR 10 > LEAF_NODE 11 > FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 strncpy ( fnamebuf , globbuf -> gl_pathv [ globpos ] , fnamebuf_siz ) ; EXPR 6 strncpy ( fnamebuf , globbuf -> gl_pathv [ globpos ] , fnamebuf_siz ) FUNCTION_CALL 7 strncpy ( fnamebuf , globbuf -> gl_pathv [ globpos ] , fnamebuf_siz ) CALLEE 8 strncpy LEAF_NODE 9 strncpy LEAF_NODE 8 ( ARGUMENT 8 fnamebuf FIELD 9 fnamebuf LEAF_NODE 10 fnamebuf LEAF_NODE 8 , ARGUMENT 8 globbuf -> gl_pathv [ globpos ] FIELD 9 globbuf -> gl_pathv [ globpos ] LEAF_NODE 10 globbuf LEAF_NODE 10 -> LEAF_NODE 10 gl_pathv LEAF_NODE 10 [ EXPR 10 globpos FIELD 11 globpos LEAF_NODE 12 globpos LEAF_NODE 10 ] LEAF_NODE 8 , ARGUMENT 8 fnamebuf_siz FIELD 9 fnamebuf_siz LEAF_NODE 10 fnamebuf_siz LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 ast_copy_string ( fnamebuf , globbuf -> gl_pathv [ globpos ] , fnamebuf_siz ) ; EXPR 4 ast_copy_string ( fnamebuf , globbuf -> gl_pathv [ globpos ] , fnamebuf_siz ) FUNCTION_CALL 5 ast_copy_string ( fnamebuf , globbuf -> gl_pathv [ globpos ] , fnamebuf_siz ) CALLEE 6 ast_copy_string LEAF_NODE 7 ast_copy_string LEAF_NODE 6 ( ARGUMENT 6 fnamebuf FIELD 7 fnamebuf LEAF_NODE 8 fnamebuf LEAF_NODE 6 , ARGUMENT 6 globbuf -> gl_pathv [ globpos ] FIELD 7 globbuf -> gl_pathv [ globpos ] LEAF_NODE 8 globbuf LEAF_NODE 8 -> LEAF_NODE 8 gl_pathv LEAF_NODE 8 [ EXPR 8 globpos FIELD 9 globpos LEAF_NODE 10 globpos LEAF_NODE 8 ] LEAF_NODE 6 , ARGUMENT 6 fnamebuf_siz FIELD 7 fnamebuf_siz LEAF_NODE 8 fnamebuf_siz LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_ERROR , \"Include file name not present!\\n\" ) ; EXPR 7 ast_log ( LOG_ERROR , \"Include file name not present!\\n\" ) FUNCTION_CALL 8 ast_log ( LOG_ERROR , \"Include file name not present!\\n\" ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_ERROR FIELD 10 LOG_ERROR LEAF_NODE 11 LOG_ERROR LEAF_NODE 9 , ARGUMENT 9 \"Include file name not present!\\n\" FIELD 10 \"Include file name not present!\\n\" LEAF_NODE 11 \"Include file name not present!\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return DESTINATION ; KEYWORD 7 return LEAF_NODE 8 return LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 i = 0 ; EXPR 5 i = 0 ASSIGN 6 i = 0 LVAL 7 i FIELD 8 i LEAF_NODE 9 i ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 i < include_stack_index EXPR 5 i < include_stack_index FIELD 6 i LEAF_NODE 7 i REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 include_stack_index LEAF_NODE 7 include_stack_index LEAF_NODE 4 ; FOR_EXPR 4 i ++ EXPR 5 i ++ FIELD 6 i ++ LEAF_NODE 7 i LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! strcmp ( fnamebuf , include_stack [ i ] . fname ) EXPR 8 ! strcmp ( fnamebuf , include_stack [ i ] . fname ) UNARY_EXPR 9 ! strcmp ( fnamebuf , include_stack [ i ] . fname ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 strcmp ( fnamebuf , include_stack [ i ] . fname ) CALLEE 11 strcmp LEAF_NODE 12 strcmp LEAF_NODE 11 ( ARGUMENT 11 fnamebuf FIELD 12 fnamebuf LEAF_NODE 13 fnamebuf LEAF_NODE 11 , ARGUMENT 11 include_stack [ i ] . fname FIELD 12 include_stack [ i ] . fname LEAF_NODE 13 include_stack LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 13 . LEAF_NODE 13 fname LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"File=%s, line=%d, column=%d: Nice Try!!! But %s has already been included (perhaps by another file), and would cause an infinite loop of file inclusions!!! Include directive ignored\\n\" , my_file , my_lineno , my_col , fnamebuf ) ; EXPR 10 ast_log ( LOG_ERROR , \"File=%s, line=%d, column=%d: Nice Try!!! But %s has already been included (perhaps by another file), and would cause an infinite loop of file inclusions!!! Include directive ignored\\n\" , my_file , my_lineno , my_col , fnamebuf ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"File=%s, line=%d, column=%d: Nice Try!!! But %s has already been included (perhaps by another file), and would cause an infinite loop of file inclusions!!! Include directive ignored\\n\" , my_file , my_lineno , my_col , fnamebuf ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"File=%s, line=%d, column=%d: Nice Try!!! But %s has already been included (perhaps by another file), and would cause an infinite loop of file inclusions!!! Include directive ignored\\n\" FIELD 13 \"File=%s, line=%d, column=%d: Nice Try!!! But %s has already been included (perhaps by another file), and would cause an infinite loop of file inclusions!!! Include directive ignored\\n\" LEAF_NODE 14 \"File=%s, line=%d, column=%d: Nice Try!!! But %s has already been included (perhaps by another file), and would cause an infinite loop of file inclusions!!! Include directive ignored\\n\" LEAF_NODE 12 , ARGUMENT 12 my_file FIELD 13 my_file LEAF_NODE 14 my_file LEAF_NODE 12 , ARGUMENT 12 my_lineno FIELD 13 my_lineno LEAF_NODE 14 my_lineno LEAF_NODE 12 , ARGUMENT 12 my_col FIELD 13 my_col LEAF_NODE 14 my_col LEAF_NODE 12 , ARGUMENT 12 fnamebuf FIELD 13 fnamebuf LEAF_NODE 14 fnamebuf LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 error = 1 ; EXPR 4 error = 1 ASSIGN 5 error = 1 LVAL 6 error FIELD 7 error LEAF_NODE 8 error ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 i == include_stack_index EXPR 5 i == include_stack_index FIELD 6 i LEAF_NODE 7 i EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 include_stack_index LEAF_NODE 7 include_stack_index LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 error = 0 ; EXPR 6 error = 0 ASSIGN 7 error = 0 LVAL 8 error FIELD 9 error LEAF_NODE 10 error ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! error EXPR 5 ! error UNARY_EXPR 6 ! error UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 error LEAF_NODE 8 error LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 fnamebuf [ 0 ] != '/' EXPR 8 fnamebuf [ 0 ] != '/' FIELD 9 fnamebuf [ 0 ] LEAF_NODE 10 fnamebuf LEAF_NODE 10 [ EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 10 ] EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 '/' LEAF_NODE 10 '/' LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 snprintf ( fnamebuf2 , fnamebuf_siz , \"%s/%s\" , ast_config_AST_CONFIG_DIR , fnamebuf ) ; EXPR 9 snprintf ( fnamebuf2 , fnamebuf_siz , \"%s/%s\" , ast_config_AST_CONFIG_DIR , fnamebuf ) FUNCTION_CALL 10 snprintf ( fnamebuf2 , fnamebuf_siz , \"%s/%s\" , ast_config_AST_CONFIG_DIR , fnamebuf ) CALLEE 11 snprintf LEAF_NODE 12 snprintf LEAF_NODE 11 ( ARGUMENT 11 fnamebuf2 FIELD 12 fnamebuf2 LEAF_NODE 13 fnamebuf2 LEAF_NODE 11 , ARGUMENT 11 fnamebuf_siz FIELD 12 fnamebuf_siz LEAF_NODE 13 fnamebuf_siz LEAF_NODE 11 , ARGUMENT 11 \"%s/%s\" FIELD 12 \"%s/%s\" LEAF_NODE 13 \"%s/%s\" LEAF_NODE 11 , ARGUMENT 11 ast_config_AST_CONFIG_DIR FIELD 12 ast_config_AST_CONFIG_DIR LEAF_NODE 13 ast_config_AST_CONFIG_DIR LEAF_NODE 11 , ARGUMENT 11 fnamebuf FIELD 12 fnamebuf LEAF_NODE 13 fnamebuf LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 strncpy ( fnamebuf2 , fnamebuf , fnamebuf_siz ) ; EXPR 9 strncpy ( fnamebuf2 , fnamebuf , fnamebuf_siz ) FUNCTION_CALL 10 strncpy ( fnamebuf2 , fnamebuf , fnamebuf_siz ) CALLEE 11 strncpy LEAF_NODE 12 strncpy LEAF_NODE 11 ( ARGUMENT 11 fnamebuf2 FIELD 12 fnamebuf2 LEAF_NODE 13 fnamebuf2 LEAF_NODE 11 , ARGUMENT 11 fnamebuf FIELD 12 fnamebuf LEAF_NODE 13 fnamebuf LEAF_NODE 11 , ARGUMENT 11 fnamebuf_siz FIELD 12 fnamebuf_siz LEAF_NODE 13 fnamebuf_siz LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 6 ast_copy_string ( fnamebuf2 , fnamebuf , fnamebuf_siz ) ; EXPR 7 ast_copy_string ( fnamebuf2 , fnamebuf , fnamebuf_siz ) FUNCTION_CALL 8 ast_copy_string ( fnamebuf2 , fnamebuf , fnamebuf_siz ) CALLEE 9 ast_copy_string LEAF_NODE 10 ast_copy_string LEAF_NODE 9 ( ARGUMENT 9 fnamebuf2 FIELD 10 fnamebuf2 LEAF_NODE 11 fnamebuf2 LEAF_NODE 9 , ARGUMENT 9 fnamebuf FIELD 10 fnamebuf LEAF_NODE 11 fnamebuf LEAF_NODE 9 , ARGUMENT 9 fnamebuf_siz FIELD 10 fnamebuf_siz LEAF_NODE 11 fnamebuf_siz LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 in1 = fopen ( fnamebuf2 , \"r\" ) ; EXPR 7 in1 = fopen ( fnamebuf2 , \"r\" ) ASSIGN 8 in1 = fopen ( fnamebuf2 , \"r\" ) LVAL 9 in1 FIELD 10 in1 LEAF_NODE 11 in1 ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 fopen ( fnamebuf2 , \"r\" ) FUNCTION_CALL 10 fopen ( fnamebuf2 , \"r\" ) CALLEE 11 fopen LEAF_NODE 12 fopen LEAF_NODE 11 ( ARGUMENT 11 fnamebuf2 FIELD 12 fnamebuf2 LEAF_NODE 13 fnamebuf2 LEAF_NODE 11 , ARGUMENT 11 \"r\" FIELD 12 \"r\" LEAF_NODE 13 \"r\" LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! in1 EXPR 8 ! in1 UNARY_EXPR 9 ! in1 UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 in1 LEAF_NODE 11 in1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"File=%s, line=%d, column=%d: Couldn't find the include file: %s; ignoring the Include directive!\\n\" , my_file , my_lineno , my_col , fnamebuf2 ) ; EXPR 10 ast_log ( LOG_ERROR , \"File=%s, line=%d, column=%d: Couldn't find the include file: %s; ignoring the Include directive!\\n\" , my_file , my_lineno , my_col , fnamebuf2 ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"File=%s, line=%d, column=%d: Couldn't find the include file: %s; ignoring the Include directive!\\n\" , my_file , my_lineno , my_col , fnamebuf2 ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"File=%s, line=%d, column=%d: Couldn't find the include file: %s; ignoring the Include directive!\\n\" FIELD 13 \"File=%s, line=%d, column=%d: Couldn't find the include file: %s; ignoring the Include directive!\\n\" LEAF_NODE 14 \"File=%s, line=%d, column=%d: Couldn't find the include file: %s; ignoring the Include directive!\\n\" LEAF_NODE 12 , ARGUMENT 12 my_file FIELD 13 my_file LEAF_NODE 14 my_file LEAF_NODE 12 , ARGUMENT 12 my_lineno FIELD 13 my_lineno LEAF_NODE 14 my_lineno LEAF_NODE 12 , ARGUMENT 12 my_col FIELD 13 my_col LEAF_NODE 14 my_col LEAF_NODE 12 , ARGUMENT 12 fnamebuf2 FIELD 13 fnamebuf2 LEAF_NODE 14 fnamebuf2 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SIMPLE_DECL 9 char * buffer ; VAR_DECL 10 char * buffer TYPE 11 char * TYPE_NAME 12 char LEAF_NODE 13 char POINTER 12 * LEAF_NODE 13 * NAME 11 buffer LEAF_NODE 12 buffer LEAF_NODE 10 ; SIMPLE_DECL 9 struct stat stats ; VAR_DECL 10 struct stat stats TYPE 11 struct stat TYPE_NAME 12 struct stat LEAF_NODE 13 struct LEAF_NODE 13 stat NAME 11 stats LEAF_NODE 12 stats LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 stat ( fnamebuf2 , & stats ) EXPR 11 stat ( fnamebuf2 , & stats ) FUNCTION_CALL 12 stat ( fnamebuf2 , & stats ) CALLEE 13 stat LEAF_NODE 14 stat LEAF_NODE 13 ( ARGUMENT 13 fnamebuf2 FIELD 14 fnamebuf2 LEAF_NODE 15 fnamebuf2 LEAF_NODE 13 , ARGUMENT 13 & stats UNARY_EXPR 14 & stats UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 stats LEAF_NODE 16 stats LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_WARNING , \"Failed to populate stats from file '%s'\\n\" , fnamebuf2 ) ; EXPR 13 ast_log ( LOG_WARNING , \"Failed to populate stats from file '%s'\\n\" , fnamebuf2 ) FUNCTION_CALL 14 ast_log ( LOG_WARNING , \"Failed to populate stats from file '%s'\\n\" , fnamebuf2 ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_WARNING FIELD 16 LOG_WARNING LEAF_NODE 17 LOG_WARNING LEAF_NODE 15 , ARGUMENT 15 \"Failed to populate stats from file '%s'\\n\" FIELD 16 \"Failed to populate stats from file '%s'\\n\" LEAF_NODE 17 \"Failed to populate stats from file '%s'\\n\" LEAF_NODE 15 , ARGUMENT 15 fnamebuf2 FIELD 16 fnamebuf2 LEAF_NODE 17 fnamebuf2 LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 buffer = ( char * ) malloc ( stats . st_size + 1 ) ; EXPR 10 buffer = ( char * ) malloc ( stats . st_size + 1 ) ASSIGN 11 buffer = ( char * ) malloc ( stats . st_size + 1 ) LVAL 12 buffer FIELD 13 buffer LEAF_NODE 14 buffer ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( char * ) malloc ( stats . st_size + 1 ) LEAF_NODE 13 ( TYPE_NAME 13 char LEAF_NODE 14 char LEAF_NODE 13 * LEAF_NODE 13 ) FUNCTION_CALL 13 malloc ( stats . st_size + 1 ) CALLEE 14 malloc LEAF_NODE 15 malloc LEAF_NODE 14 ( ARGUMENT 14 stats . st_size + 1 FIELD 15 stats . st_size LEAF_NODE 16 stats LEAF_NODE 16 . LEAF_NODE 16 st_size LEAF_NODE 15 + FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 fread ( buffer , 1 , stats . st_size , in1 ) != stats . st_size EXPR 11 fread ( buffer , 1 , stats . st_size , in1 ) != stats . st_size FUNCTION_CALL 12 fread ( buffer , 1 , stats . st_size , in1 ) CALLEE 13 fread LEAF_NODE 14 fread LEAF_NODE 13 ( ARGUMENT 13 buffer FIELD 14 buffer LEAF_NODE 15 buffer LEAF_NODE 13 , ARGUMENT 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 , ARGUMENT 13 stats . st_size FIELD 14 stats . st_size LEAF_NODE 15 stats LEAF_NODE 15 . LEAF_NODE 15 st_size LEAF_NODE 13 , ARGUMENT 13 in1 FIELD 14 in1 LEAF_NODE 15 in1 LEAF_NODE 13 ) EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 stats . st_size LEAF_NODE 13 stats LEAF_NODE 13 . LEAF_NODE 13 st_size LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_ERROR , \"fread() failed: %s\\n\" , strerror ( errno ) ) ; EXPR 13 ast_log ( LOG_ERROR , \"fread() failed: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 14 ast_log ( LOG_ERROR , \"fread() failed: %s\\n\" , strerror ( errno ) ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_ERROR FIELD 16 LOG_ERROR LEAF_NODE 17 LOG_ERROR LEAF_NODE 15 , ARGUMENT 15 \"fread() failed: %s\\n\" FIELD 16 \"fread() failed: %s\\n\" LEAF_NODE 17 \"fread() failed: %s\\n\" LEAF_NODE 15 , ARGUMENT 15 strerror ( errno ) FUNCTION_CALL 16 strerror ( errno ) CALLEE 17 strerror LEAF_NODE 18 strerror LEAF_NODE 17 ( ARGUMENT 17 errno FIELD 18 errno LEAF_NODE 19 errno LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 buffer [ stats . st_size ] = 0 ; EXPR 10 buffer [ stats . st_size ] = 0 ASSIGN 11 buffer [ stats . st_size ] = 0 LVAL 12 buffer [ stats . st_size ] FIELD 13 buffer [ stats . st_size ] LEAF_NODE 14 buffer LEAF_NODE 14 [ EXPR 14 stats . st_size FIELD 15 stats . st_size LEAF_NODE 16 stats LEAF_NODE 16 . LEAF_NODE 16 st_size LEAF_NODE 14 ] ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_debug ( 1 , \" --Read in included file %s, %d chars\\n\" , fnamebuf2 , ( int ) stats . st_size ) ; EXPR 10 ast_debug ( 1 , \" --Read in included file %s, %d chars\\n\" , fnamebuf2 , ( int ) stats . st_size ) FUNCTION_CALL 11 ast_debug ( 1 , \" --Read in included file %s, %d chars\\n\" , fnamebuf2 , ( int ) stats . st_size ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 \" --Read in included file %s, %d chars\\n\" FIELD 13 \" --Read in included file %s, %d chars\\n\" LEAF_NODE 14 \" --Read in included file %s, %d chars\\n\" LEAF_NODE 12 , ARGUMENT 12 fnamebuf2 FIELD 13 fnamebuf2 LEAF_NODE 14 fnamebuf2 LEAF_NODE 12 , ARGUMENT 12 ( int ) stats . st_size LEAF_NODE 13 ( TYPE_NAME 13 int LEAF_NODE 14 int LEAF_NODE 13 ) FIELD 13 stats . st_size LEAF_NODE 14 stats LEAF_NODE 14 . LEAF_NODE 14 st_size LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 fclose ( in1 ) ; EXPR 10 fclose ( in1 ) FUNCTION_CALL 11 fclose ( in1 ) CALLEE 12 fclose LEAF_NODE 13 fclose LEAF_NODE 12 ( ARGUMENT 12 in1 FIELD 13 in1 LEAF_NODE 14 in1 LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 include_stack [ include_stack_index ] . fname EXPR 11 include_stack [ include_stack_index ] . fname FIELD 12 include_stack [ include_stack_index ] . fname LEAF_NODE 13 include_stack LEAF_NODE 13 [ EXPR 13 include_stack_index FIELD 14 include_stack_index LEAF_NODE 15 include_stack_index LEAF_NODE 13 ] LEAF_NODE 13 . LEAF_NODE 13 fname LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 free ( include_stack [ include_stack_index ] . fname ) ; EXPR 13 free ( include_stack [ include_stack_index ] . fname ) FUNCTION_CALL 14 free ( include_stack [ include_stack_index ] . fname ) CALLEE 15 free LEAF_NODE 16 free LEAF_NODE 15 ( ARGUMENT 15 include_stack [ include_stack_index ] . fname FIELD 16 include_stack [ include_stack_index ] . fname LEAF_NODE 17 include_stack LEAF_NODE 17 [ EXPR 17 include_stack_index FIELD 18 include_stack_index LEAF_NODE 19 include_stack_index LEAF_NODE 17 ] LEAF_NODE 17 . LEAF_NODE 17 fname LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 include_stack [ include_stack_index ] . fname = 0 ; EXPR 13 include_stack [ include_stack_index ] . fname = 0 ASSIGN 14 include_stack [ include_stack_index ] . fname = 0 LVAL 15 include_stack [ include_stack_index ] . fname FIELD 16 include_stack [ include_stack_index ] . fname LEAF_NODE 17 include_stack LEAF_NODE 17 [ EXPR 17 include_stack_index FIELD 18 include_stack_index LEAF_NODE 19 include_stack_index LEAF_NODE 17 ] LEAF_NODE 17 . LEAF_NODE 17 fname ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 include_stack [ include_stack_index ] . fname = strdup ( S_OR ( my_file , \"<none>\" ) ) ; EXPR 10 include_stack [ include_stack_index ] . fname = strdup ( S_OR ( my_file , \"<none>\" ) ) ASSIGN 11 include_stack [ include_stack_index ] . fname = strdup ( S_OR ( my_file , \"<none>\" ) ) LVAL 12 include_stack [ include_stack_index ] . fname FIELD 13 include_stack [ include_stack_index ] . fname LEAF_NODE 14 include_stack LEAF_NODE 14 [ EXPR 14 include_stack_index FIELD 15 include_stack_index LEAF_NODE 16 include_stack_index LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 fname ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strdup ( S_OR ( my_file , \"<none>\" ) ) FUNCTION_CALL 13 strdup ( S_OR ( my_file , \"<none>\" ) ) CALLEE 14 strdup LEAF_NODE 15 strdup LEAF_NODE 14 ( ARGUMENT 14 S_OR ( my_file , \"<none>\" ) FUNCTION_CALL 15 S_OR ( my_file , \"<none>\" ) CALLEE 16 S_OR LEAF_NODE 17 S_OR LEAF_NODE 16 ( ARGUMENT 16 my_file FIELD 17 my_file LEAF_NODE 18 my_file LEAF_NODE 16 , ARGUMENT 16 \"<none>\" FIELD 17 \"<none>\" LEAF_NODE 18 \"<none>\" LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 include_stack [ include_stack_index ] . lineno = my_lineno ; EXPR 10 include_stack [ include_stack_index ] . lineno = my_lineno ASSIGN 11 include_stack [ include_stack_index ] . lineno = my_lineno LVAL 12 include_stack [ include_stack_index ] . lineno FIELD 13 include_stack [ include_stack_index ] . lineno LEAF_NODE 14 include_stack LEAF_NODE 14 [ EXPR 14 include_stack_index FIELD 15 include_stack_index LEAF_NODE 16 include_stack_index LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 lineno ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 my_lineno FIELD 13 my_lineno LEAF_NODE 14 my_lineno LEAF_NODE 10 ; EXPR_STATEMENT 9 include_stack [ include_stack_index ] . colno = my_col + yyleng ; EXPR 10 include_stack [ include_stack_index ] . colno = my_col + yyleng ASSIGN 11 include_stack [ include_stack_index ] . colno = my_col + yyleng LVAL 12 include_stack [ include_stack_index ] . colno FIELD 13 include_stack [ include_stack_index ] . colno LEAF_NODE 14 include_stack LEAF_NODE 14 [ EXPR 14 include_stack_index FIELD 15 include_stack_index LEAF_NODE 16 include_stack_index LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 colno ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 my_col + yyleng FIELD 13 my_col LEAF_NODE 14 my_col LEAF_NODE 13 + FIELD 13 yyleng LEAF_NODE 14 yyleng LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 my_file EXPR 11 my_file FIELD 12 my_file LEAF_NODE 13 my_file LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 free ( my_file ) ; EXPR 12 free ( my_file ) FUNCTION_CALL 13 free ( my_file ) CALLEE 14 free LEAF_NODE 15 free LEAF_NODE 14 ( ARGUMENT 14 my_file FIELD 15 my_file LEAF_NODE 16 my_file LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 my_file = strdup ( fnamebuf2 ) ; EXPR 10 my_file = strdup ( fnamebuf2 ) ASSIGN 11 my_file = strdup ( fnamebuf2 ) LVAL 12 my_file FIELD 13 my_file LEAF_NODE 14 my_file ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strdup ( fnamebuf2 ) FUNCTION_CALL 13 strdup ( fnamebuf2 ) CALLEE 14 strdup LEAF_NODE 15 strdup LEAF_NODE 14 ( ARGUMENT 14 fnamebuf2 FIELD 15 fnamebuf2 LEAF_NODE 16 fnamebuf2 LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 create EXPR 11 create FIELD 12 create LEAF_NODE 13 create LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 include_stack [ include_stack_index ] . globbuf = * globbuf ; EXPR 12 include_stack [ include_stack_index ] . globbuf = * globbuf ASSIGN 13 include_stack [ include_stack_index ] . globbuf = * globbuf LVAL 14 include_stack [ include_stack_index ] . globbuf FIELD 15 include_stack [ include_stack_index ] . globbuf LEAF_NODE 16 include_stack LEAF_NODE 16 [ EXPR 16 include_stack_index FIELD 17 include_stack_index LEAF_NODE 18 include_stack_index LEAF_NODE 16 ] LEAF_NODE 16 . LEAF_NODE 16 globbuf ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 * globbuf UNARY_EXPR 15 * globbuf UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 globbuf LEAF_NODE 17 globbuf LEAF_NODE 12 ; EXPR_STATEMENT 9 include_stack [ include_stack_index ] . globbuf_pos = 0 ; EXPR 10 include_stack [ include_stack_index ] . globbuf_pos = 0 ASSIGN 11 include_stack [ include_stack_index ] . globbuf_pos = 0 LVAL 12 include_stack [ include_stack_index ] . globbuf_pos FIELD 13 include_stack [ include_stack_index ] . globbuf_pos LEAF_NODE 14 include_stack LEAF_NODE 14 [ EXPR 14 include_stack_index FIELD 15 include_stack_index LEAF_NODE 16 include_stack_index LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 globbuf_pos ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 include_stack [ include_stack_index ] . bufstate = YY_CURRENT_BUFFER ; EXPR 10 include_stack [ include_stack_index ] . bufstate = YY_CURRENT_BUFFER ASSIGN 11 include_stack [ include_stack_index ] . bufstate = YY_CURRENT_BUFFER LVAL 12 include_stack [ include_stack_index ] . bufstate FIELD 13 include_stack [ include_stack_index ] . bufstate LEAF_NODE 14 include_stack LEAF_NODE 14 [ EXPR 14 include_stack_index FIELD 15 include_stack_index LEAF_NODE 16 include_stack_index LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 bufstate ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 YY_CURRENT_BUFFER FIELD 13 YY_CURRENT_BUFFER LEAF_NODE 14 YY_CURRENT_BUFFER LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 create EXPR 11 create FIELD 12 create LEAF_NODE 13 create LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 include_stack_index ++ ; EXPR 12 include_stack_index ++ FIELD 13 include_stack_index ++ LEAF_NODE 14 include_stack_index LEAF_NODE 14 ++ LEAF_NODE 12 ; EXPR_STATEMENT 9 ael_yy_switch_to_buffer ( ael_yy_scan_string ( buffer , yyscanner ) , yyscanner ) ; EXPR 10 ael_yy_switch_to_buffer ( ael_yy_scan_string ( buffer , yyscanner ) , yyscanner ) FUNCTION_CALL 11 ael_yy_switch_to_buffer ( ael_yy_scan_string ( buffer , yyscanner ) , yyscanner ) CALLEE 12 ael_yy_switch_to_buffer LEAF_NODE 13 ael_yy_switch_to_buffer LEAF_NODE 12 ( ARGUMENT 12 ael_yy_scan_string ( buffer , yyscanner ) FUNCTION_CALL 13 ael_yy_scan_string ( buffer , yyscanner ) CALLEE 14 ael_yy_scan_string LEAF_NODE 15 ael_yy_scan_string LEAF_NODE 14 ( ARGUMENT 14 buffer FIELD 15 buffer LEAF_NODE 16 buffer LEAF_NODE 14 , ARGUMENT 14 yyscanner FIELD 15 yyscanner LEAF_NODE 16 yyscanner LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 yyscanner FIELD 13 yyscanner LEAF_NODE 14 yyscanner LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 free ( buffer ) ; EXPR 10 free ( buffer ) FUNCTION_CALL 11 free ( buffer ) CALLEE 12 free LEAF_NODE 13 free LEAF_NODE 12 ( ARGUMENT 12 buffer FIELD 13 buffer LEAF_NODE 14 buffer LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 my_lineno = 1 ; EXPR 10 my_lineno = 1 ASSIGN 11 my_lineno = 1 LVAL 12 my_lineno FIELD 13 my_lineno LEAF_NODE 14 my_lineno ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; EXPR_STATEMENT 9 my_col = 1 ; EXPR 10 my_col = 1 ASSIGN 11 my_col = 1 LVAL 12 my_col FIELD 13 my_col LEAF_NODE 14 my_col ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; EXPR_STATEMENT 9 BEGIN ( INITIAL ) ; EXPR 10 BEGIN ( INITIAL ) FUNCTION_CALL 11 BEGIN ( INITIAL ) CALLEE 12 BEGIN LEAF_NODE 13 BEGIN LEAF_NODE 12 ( ARGUMENT 12 INITIAL FIELD 13 INITIAL LEAF_NODE 14 INITIAL LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 2, "project": "openssl_ast_vul_function_test_adv_28", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } ; CLASS_DEF 2 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } CLASS_DEF 3 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp_codecs LEAF_NODE 5 ast_rtp_codecs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; SIMPLE_DECL 5 ast_rwlock_t codecs_lock ; VAR_DECL 6 ast_rwlock_t codecs_lock TYPE 7 ast_rwlock_t TYPE_NAME 8 ast_rwlock_t LEAF_NODE 9 ast_rwlock_t NAME 7 codecs_lock LEAF_NODE 8 codecs_lock LEAF_NODE 6 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 payload_mapping_rx LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 payload_mapping_tx LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int framing ; VAR_DECL 6 unsigned int framing TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 framing LEAF_NODE 8 framing LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp_payload_type BASE_CLASSES { struct ast_format * format ; int asterisk_format ; int rtp_code ; int payload ; unsigned int primary_mapping : 1 ; struct timeval when_retired ; } ; CLASS_DEF 2 struct ast_rtp_payload_type BASE_CLASSES { struct ast_format * format ; int asterisk_format ; int rtp_code ; int payload ; unsigned int primary_mapping : 1 ; struct timeval when_retired ; } CLASS_DEF 3 struct ast_rtp_payload_type BASE_CLASSES { struct ast_format * format ; int asterisk_format ; int rtp_code ; int payload ; unsigned int primary_mapping : 1 ; struct timeval when_retired ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp_payload_type LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_format * format ; int asterisk_format ; int rtp_code ; int payload ; unsigned int primary_mapping : 1 ; struct timeval when_retired ; SIMPLE_DECL 5 struct ast_format * format ; VAR_DECL 6 struct ast_format * format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 format LEAF_NODE 8 format LEAF_NODE 6 ; SIMPLE_DECL 5 int asterisk_format ; VAR_DECL 6 int asterisk_format TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 asterisk_format LEAF_NODE 8 asterisk_format LEAF_NODE 6 ; SIMPLE_DECL 5 int rtp_code ; VAR_DECL 6 int rtp_code TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtp_code LEAF_NODE 8 rtp_code LEAF_NODE 6 ; SIMPLE_DECL 5 int payload ; VAR_DECL 6 int payload TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 payload LEAF_NODE 8 payload LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 primary_mapping : LEAF_NODE 6 primary_mapping LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct timeval when_retired ; VAR_DECL 6 struct timeval when_retired TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 when_retired LEAF_NODE 8 when_retired LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp_payload_type * [ AST_RTP_MAX_PT ] static_RTP_PT ; VAR_DECL 2 struct ast_rtp_payload_type * [ AST_RTP_MAX_PT ] static_RTP_PT TYPE 3 struct ast_rtp_payload_type * [ AST_RTP_MAX_PT ] TYPE_NAME 4 struct ast_rtp_payload_type LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type POINTER 4 * LEAF_NODE 5 * TYPE_SUFFIX 4 [ AST_RTP_MAX_PT ] LEAF_NODE 5 [ FIELD 5 AST_RTP_MAX_PT LEAF_NODE 6 AST_RTP_MAX_PT LEAF_NODE 5 ] NAME 3 static_RTP_PT LEAF_NODE 4 static_RTP_PT LEAF_NODE 2 ; SIMPLE_DECL 1 ast_rwlock_t static_RTP_PT_lock ; VAR_DECL 2 ast_rwlock_t static_RTP_PT_lock TYPE 3 ast_rwlock_t TYPE_NAME 4 ast_rwlock_t LEAF_NODE 5 ast_rwlock_t NAME 3 static_RTP_PT_lock LEAF_NODE 4 static_RTP_PT_lock LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 struct ast_rtp_payload_type * TYPE_NAME 3 struct ast_rtp_payload_type LEAF_NODE 4 struct LEAF_NODE 4 ast_rtp_payload_type LEAF_NODE 3 * FUNCTION_NAME 2 ast_rtp_codecs_get_payload LEAF_NODE 3 ast_rtp_codecs_get_payload PARAMETER_LIST 2 ( struct ast_rtp_codecs * codecs , int payload ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_rtp_codecs * codecs TYPE 4 struct ast_rtp_codecs * TYPE_NAME 5 struct ast_rtp_codecs LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_codecs POINTER 5 * LEAF_NODE 6 * NAME 4 codecs LEAF_NODE 5 codecs LEAF_NODE 3 , PARAMETER_DECL 3 int payload TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 payload LEAF_NODE 5 payload LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_rtp_payload_type * type ; type = NULL ; VAR_DECL 4 struct ast_rtp_payload_type * type ; type = NULL TYPE 5 struct ast_rtp_payload_type * TYPE_NAME 6 struct ast_rtp_payload_type LEAF_NODE 7 struct LEAF_NODE 7 ast_rtp_payload_type POINTER 6 * LEAF_NODE 7 * NAME 5 type LEAF_NODE 6 type LEAF_NODE 5 ; INIT 5 type = NULL ASSIGN 6 type = NULL LVAL 7 type NAME 8 type LEAF_NODE 9 type ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 payload < 0 || payload >= AST_RTP_MAX_PT EXPR 5 payload < 0 || payload >= AST_RTP_MAX_PT OR 6 payload < 0 || payload >= AST_RTP_MAX_PT EXPR 7 payload < 0 FIELD 8 payload LEAF_NODE 9 payload REL_OPERATOR 8 < LEAF_NODE 9 < FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 || EXPR 7 payload >= AST_RTP_MAX_PT FIELD 8 payload LEAF_NODE 9 payload REL_OPERATOR 8 >= LEAF_NODE 9 >= FIELD 8 AST_RTP_MAX_PT LEAF_NODE 9 AST_RTP_MAX_PT LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_rwlock_rdlock ( & codecs -> codecs_lock ) ; EXPR 4 ast_rwlock_rdlock ( & codecs -> codecs_lock ) FUNCTION_CALL 5 ast_rwlock_rdlock ( & codecs -> codecs_lock ) CALLEE 6 ast_rwlock_rdlock LEAF_NODE 7 ast_rwlock_rdlock LEAF_NODE 6 ( ARGUMENT 6 & codecs -> codecs_lock UNARY_EXPR 7 & codecs -> codecs_lock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 codecs -> codecs_lock LEAF_NODE 9 codecs LEAF_NODE 9 -> LEAF_NODE 9 codecs_lock LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 payload < AST_VECTOR_SIZE ( & codecs -> payload_mapping_rx ) EXPR 5 payload < AST_VECTOR_SIZE ( & codecs -> payload_mapping_rx ) FIELD 6 payload LEAF_NODE 7 payload REL_OPERATOR 6 < LEAF_NODE 7 < FUNCTION_CALL 6 AST_VECTOR_SIZE ( & codecs -> payload_mapping_rx ) CALLEE 7 AST_VECTOR_SIZE LEAF_NODE 8 AST_VECTOR_SIZE LEAF_NODE 7 ( ARGUMENT 7 & codecs -> payload_mapping_rx UNARY_EXPR 8 & codecs -> payload_mapping_rx UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 codecs -> payload_mapping_rx LEAF_NODE 10 codecs LEAF_NODE 10 -> LEAF_NODE 10 payload_mapping_rx LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 type = AST_VECTOR_GET ( & codecs -> payload_mapping_rx , payload ) ; EXPR 7 type = AST_VECTOR_GET ( & codecs -> payload_mapping_rx , payload ) ASSIGN 8 type = AST_VECTOR_GET ( & codecs -> payload_mapping_rx , payload ) LVAL 9 type FIELD 10 type LEAF_NODE 11 type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 AST_VECTOR_GET ( & codecs -> payload_mapping_rx , payload ) FUNCTION_CALL 10 AST_VECTOR_GET ( & codecs -> payload_mapping_rx , payload ) CALLEE 11 AST_VECTOR_GET LEAF_NODE 12 AST_VECTOR_GET LEAF_NODE 11 ( ARGUMENT 11 & codecs -> payload_mapping_rx UNARY_EXPR 12 & codecs -> payload_mapping_rx UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 codecs -> payload_mapping_rx LEAF_NODE 14 codecs LEAF_NODE 14 -> LEAF_NODE 14 payload_mapping_rx LEAF_NODE 11 , ARGUMENT 11 payload FIELD 12 payload LEAF_NODE 13 payload LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_bump ( type ) ; EXPR 7 ao2_bump ( type ) FUNCTION_CALL 8 ao2_bump ( type ) CALLEE 9 ao2_bump LEAF_NODE 10 ao2_bump LEAF_NODE 9 ( ARGUMENT 9 type FIELD 10 type LEAF_NODE 11 type LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_rwlock_unlock ( & codecs -> codecs_lock ) ; EXPR 4 ast_rwlock_unlock ( & codecs -> codecs_lock ) FUNCTION_CALL 5 ast_rwlock_unlock ( & codecs -> codecs_lock ) CALLEE 6 ast_rwlock_unlock LEAF_NODE 7 ast_rwlock_unlock LEAF_NODE 6 ( ARGUMENT 6 & codecs -> codecs_lock UNARY_EXPR 7 & codecs -> codecs_lock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 codecs -> codecs_lock LEAF_NODE 9 codecs LEAF_NODE 9 -> LEAF_NODE 9 codecs_lock LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! type EXPR 5 ! type UNARY_EXPR 6 ! type UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 type LEAF_NODE 8 type LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_rwlock_rdlock ( & static_RTP_PT_lock ) ; EXPR 7 ast_rwlock_rdlock ( & static_RTP_PT_lock ) FUNCTION_CALL 8 ast_rwlock_rdlock ( & static_RTP_PT_lock ) CALLEE 9 ast_rwlock_rdlock LEAF_NODE 10 ast_rwlock_rdlock LEAF_NODE 9 ( ARGUMENT 9 & static_RTP_PT_lock UNARY_EXPR 10 & static_RTP_PT_lock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 static_RTP_PT_lock LEAF_NODE 12 static_RTP_PT_lock LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 type = ao2_bump ( static_RTP_PT [ payload ] ) ; EXPR 7 type = ao2_bump ( static_RTP_PT [ payload ] ) ASSIGN 8 type = ao2_bump ( static_RTP_PT [ payload ] ) LVAL 9 type FIELD 10 type LEAF_NODE 11 type ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ao2_bump ( static_RTP_PT [ payload ] ) FUNCTION_CALL 10 ao2_bump ( static_RTP_PT [ payload ] ) CALLEE 11 ao2_bump LEAF_NODE 12 ao2_bump LEAF_NODE 11 ( ARGUMENT 11 static_RTP_PT [ payload ] FIELD 12 static_RTP_PT [ payload ] LEAF_NODE 13 static_RTP_PT LEAF_NODE 13 [ EXPR 13 payload FIELD 14 payload LEAF_NODE 15 payload LEAF_NODE 13 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_rwlock_unlock ( & static_RTP_PT_lock ) ; EXPR 7 ast_rwlock_unlock ( & static_RTP_PT_lock ) FUNCTION_CALL 8 ast_rwlock_unlock ( & static_RTP_PT_lock ) CALLEE 9 ast_rwlock_unlock LEAF_NODE 10 ast_rwlock_unlock LEAF_NODE 9 ( ARGUMENT 9 & static_RTP_PT_lock UNARY_EXPR 10 & static_RTP_PT_lock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 static_RTP_PT_lock LEAF_NODE 12 static_RTP_PT_lock LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return type ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 type EXPR 5 type FIELD 6 type LEAF_NODE 7 type LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 3, "project": "openssl_ast_vul_function_test_adv_37", "target": 1}
{"func": "SIMPLE_DECL 1 enum ast_rtp_property BASE_CLASSES { AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , } ; CLASS_DEF 2 enum ast_rtp_property BASE_CLASSES { AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , } CLASS_DEF 3 enum ast_rtp_property BASE_CLASSES { AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , } LEAF_NODE 4 enum CLASS_NAME 4 ast_rtp_property LEAF_NODE 5 ast_rtp_property LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , LEAF_NODE 5 AST_RTP_PROPERTY_NAT LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_DTMF LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_DTMF_COMPENSATE LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_STUN LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_RTCP LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_ASYMMETRIC_CODEC LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_RETRANS_RECV LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_RETRANS_SEND LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_REMB LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_MAX LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } ; CLASS_DEF 2 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } CLASS_DEF 3 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp_codecs LEAF_NODE 5 ast_rtp_codecs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; SIMPLE_DECL 5 ast_rwlock_t codecs_lock ; VAR_DECL 6 ast_rwlock_t codecs_lock TYPE 7 ast_rwlock_t TYPE_NAME 8 ast_rwlock_t LEAF_NODE 9 ast_rwlock_t NAME 7 codecs_lock LEAF_NODE 8 codecs_lock LEAF_NODE 6 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 payload_mapping_rx LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 payload_mapping_tx LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int framing ; VAR_DECL 6 unsigned int framing TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 framing LEAF_NODE 8 framing LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp_instance BASE_CLASSES { struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; } ; CLASS_DEF 2 struct ast_rtp_instance BASE_CLASSES { struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; } CLASS_DEF 3 struct ast_rtp_instance BASE_CLASSES { struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp_instance LEAF_NODE 5 ast_rtp_instance LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; SIMPLE_DECL 5 struct ast_rtp_engine * engine ; VAR_DECL 6 struct ast_rtp_engine * engine TYPE 7 struct ast_rtp_engine * TYPE_NAME 8 struct ast_rtp_engine LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_engine POINTER 8 * LEAF_NODE 9 * NAME 7 engine LEAF_NODE 8 engine LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int [ AST_RTP_PROPERTY_MAX ] properties ; VAR_DECL 6 int [ AST_RTP_PROPERTY_MAX ] properties TYPE 7 int [ AST_RTP_PROPERTY_MAX ] TYPE_NAME 8 int LEAF_NODE 9 int TYPE_SUFFIX 8 [ AST_RTP_PROPERTY_MAX ] LEAF_NODE 9 [ FIELD 9 AST_RTP_PROPERTY_MAX LEAF_NODE 10 AST_RTP_PROPERTY_MAX LEAF_NODE 9 ] NAME 7 properties LEAF_NODE 8 properties LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr local_address ; VAR_DECL 6 struct ast_sockaddr local_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 local_address LEAF_NODE 8 local_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr requested_target_address ; VAR_DECL 6 struct ast_sockaddr requested_target_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 requested_target_address LEAF_NODE 8 requested_target_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr incoming_source_address ; VAR_DECL 6 struct ast_sockaddr incoming_source_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 incoming_source_address LEAF_NODE 8 incoming_source_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp_instance * bridged ; VAR_DECL 6 struct ast_rtp_instance * bridged TYPE 7 struct ast_rtp_instance * TYPE_NAME 8 struct ast_rtp_instance LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_instance POINTER 8 * LEAF_NODE 9 * NAME 7 bridged LEAF_NODE 8 bridged LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp_codecs codecs ; VAR_DECL 6 struct ast_rtp_codecs codecs TYPE 7 struct ast_rtp_codecs TYPE_NAME 8 struct ast_rtp_codecs LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_codecs NAME 7 codecs LEAF_NODE 8 codecs LEAF_NODE 6 ; SIMPLE_DECL 5 int timeout ; VAR_DECL 6 int timeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timeout LEAF_NODE 8 timeout LEAF_NODE 6 ; SIMPLE_DECL 5 int holdtimeout ; VAR_DECL 6 int holdtimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 holdtimeout LEAF_NODE 8 holdtimeout LEAF_NODE 6 ; SIMPLE_DECL 5 int keepalive ; VAR_DECL 6 int keepalive TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 keepalive LEAF_NODE 8 keepalive LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp_glue * glue ; VAR_DECL 6 struct ast_rtp_glue * glue TYPE 7 struct ast_rtp_glue * TYPE_NAME 8 struct ast_rtp_glue LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_glue POINTER 8 * LEAF_NODE 9 * NAME 7 glue LEAF_NODE 8 glue LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_srtp * srtp ; VAR_DECL 6 struct ast_srtp * srtp TYPE 7 struct ast_srtp * TYPE_NAME 8 struct ast_srtp LEAF_NODE 9 struct LEAF_NODE 9 ast_srtp POINTER 8 * LEAF_NODE 9 * NAME 7 srtp LEAF_NODE 8 srtp LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_srtp * rtcp_srtp ; VAR_DECL 6 struct ast_srtp * rtcp_srtp TYPE 7 struct ast_srtp * TYPE_NAME 8 struct ast_srtp LEAF_NODE 9 struct LEAF_NODE 9 ast_srtp POINTER 8 * LEAF_NODE 9 * NAME 7 rtcp_srtp LEAF_NODE 8 rtcp_srtp LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_UNIQUEID ] channel_uniqueid ; VAR_DECL 6 char [ AST_MAX_UNIQUEID ] channel_uniqueid TYPE 7 char [ AST_MAX_UNIQUEID ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_UNIQUEID ] LEAF_NODE 9 [ FIELD 9 AST_MAX_UNIQUEID LEAF_NODE 10 AST_MAX_UNIQUEID LEAF_NODE 9 ] NAME 7 channel_uniqueid LEAF_NODE 8 channel_uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 time_t last_tx ; VAR_DECL 6 time_t last_tx TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 last_tx LEAF_NODE 8 last_tx LEAF_NODE 6 ; SIMPLE_DECL 5 time_t last_rx ; VAR_DECL 6 time_t last_rx TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 last_rx LEAF_NODE 8 last_rx LEAF_NODE 6 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 enum LEAF_NODE 5 ast_rtp_extension_direction LEAF_NODE 5 ) LEAF_NODE 5 extmap_enabled LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 extmap_negotiated LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 rtp_extmap LEAF_NODE 5 ) LEAF_NODE 5 extmap_unique_ids LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sched_thread BASE_CLASSES { pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; } ; CLASS_DEF 2 struct sched_thread BASE_CLASSES { pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; } CLASS_DEF 3 struct sched_thread BASE_CLASSES { pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sched_thread LEAF_NODE 5 sched_thread LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; SIMPLE_DECL 5 pthread_t thread ; VAR_DECL 6 pthread_t thread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 thread LEAF_NODE 8 thread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_cond_t cond ; VAR_DECL 6 ast_cond_t cond TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 cond LEAF_NODE 8 cond LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_sched_context BASE_CLASSES { ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; } ; CLASS_DEF 2 struct ast_sched_context BASE_CLASSES { ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; } CLASS_DEF 3 struct ast_sched_context BASE_CLASSES { ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_sched_context LEAF_NODE 5 ast_sched_context LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int eventcnt ; VAR_DECL 6 unsigned int eventcnt TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 eventcnt LEAF_NODE 8 eventcnt LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int highwater ; VAR_DECL 6 unsigned int highwater TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 highwater LEAF_NODE 8 highwater LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int tie_breaker ; VAR_DECL 6 unsigned int tie_breaker TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 tie_breaker LEAF_NODE 8 tie_breaker LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_heap * sched_heap ; VAR_DECL 6 struct ast_heap * sched_heap TYPE 7 struct ast_heap * TYPE_NAME 8 struct ast_heap LEAF_NODE 9 struct LEAF_NODE 9 ast_heap POINTER 8 * LEAF_NODE 9 * NAME 7 sched_heap LEAF_NODE 8 sched_heap LEAF_NODE 6 ; SIMPLE_DECL 5 struct sched_thread * sched_thread ; VAR_DECL 6 struct sched_thread * sched_thread TYPE 7 struct sched_thread * TYPE_NAME 8 struct sched_thread LEAF_NODE 9 struct LEAF_NODE 9 sched_thread POINTER 8 * LEAF_NODE 9 * NAME 7 sched_thread LEAF_NODE 8 sched_thread LEAF_NODE 6 ; SIMPLE_DECL 5 struct sched * currently_executing ; VAR_DECL 6 struct sched * currently_executing TYPE 7 struct sched * TYPE_NAME 8 struct sched LEAF_NODE 9 struct LEAF_NODE 9 sched POINTER 8 * LEAF_NODE 9 * NAME 7 currently_executing LEAF_NODE 8 currently_executing LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_t executing_thread_id ; VAR_DECL 6 pthread_t executing_thread_id TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 executing_thread_id LEAF_NODE 8 executing_thread_id LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sched LEAF_NODE 5 ) LEAF_NODE 5 schedc LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int schedccnt ; VAR_DECL 6 unsigned int schedccnt TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 schedccnt LEAF_NODE 8 schedccnt LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sched_id LEAF_NODE 5 ) LEAF_NODE 5 id_queue LEAF_NODE 5 ; SIMPLE_DECL 5 int id_queue_size ; VAR_DECL 6 int id_queue_size TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id_queue_size LEAF_NODE 8 id_queue_size LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_format BASE_CLASSES { const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; } ; CLASS_DEF 2 struct ast_format BASE_CLASSES { const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; } CLASS_DEF 3 struct ast_format BASE_CLASSES { const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_format LEAF_NODE 5 ast_format LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; SIMPLE_DECL 5 const char * name ; VAR_DECL 6 const char * name TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_codec * codec ; VAR_DECL 6 struct ast_codec * codec TYPE 7 struct ast_codec * TYPE_NAME 8 struct ast_codec LEAF_NODE 9 struct LEAF_NODE 9 ast_codec POINTER 8 * LEAF_NODE 9 * NAME 7 codec LEAF_NODE 8 codec LEAF_NODE 6 ; SIMPLE_DECL 5 void * attribute_data ; VAR_DECL 6 void * attribute_data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 attribute_data LEAF_NODE 8 attribute_data LEAF_NODE 6 ; SIMPLE_DECL 5 const struct ast_format_interface * interface ; VAR_DECL 6 const struct ast_format_interface * interface TYPE 7 const struct ast_format_interface * TYPE_NAME 8 const struct ast_format_interface LEAF_NODE 9 const LEAF_NODE 9 struct LEAF_NODE 9 ast_format_interface POINTER 8 * LEAF_NODE 9 * NAME 7 interface LEAF_NODE 8 interface LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int channel_count ; VAR_DECL 6 unsigned int channel_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 channel_count LEAF_NODE 8 channel_count LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_rtp_dtmf_mode BASE_CLASSES { AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , } ; CLASS_DEF 2 enum ast_rtp_dtmf_mode BASE_CLASSES { AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , } CLASS_DEF 3 enum ast_rtp_dtmf_mode BASE_CLASSES { AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , } LEAF_NODE 4 enum CLASS_NAME 4 ast_rtp_dtmf_mode LEAF_NODE 5 ast_rtp_dtmf_mode LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , LEAF_NODE 5 AST_RTP_DTMF_MODE_NONE LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_DTMF_MODE_RFC2833 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_DTMF_MODE_INBAND LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum strict_rtp_state BASE_CLASSES { STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , } ; CLASS_DEF 2 enum strict_rtp_state BASE_CLASSES { STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , } CLASS_DEF 3 enum strict_rtp_state BASE_CLASSES { STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , } LEAF_NODE 4 enum CLASS_NAME 4 strict_rtp_state LEAF_NODE 5 strict_rtp_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , LEAF_NODE 5 STRICT_RTP_OPEN LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 STRICT_RTP_LEARN LEAF_NODE 5 , LEAF_NODE 5 STRICT_RTP_CLOSED LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct rtp_learning_info BASE_CLASSES { struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; } ; CLASS_DEF 2 struct rtp_learning_info BASE_CLASSES { struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; } CLASS_DEF 3 struct rtp_learning_info BASE_CLASSES { struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; } LEAF_NODE 4 struct CLASS_NAME 4 rtp_learning_info LEAF_NODE 5 rtp_learning_info LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; SIMPLE_DECL 5 struct ast_sockaddr proposed_address ; VAR_DECL 6 struct ast_sockaddr proposed_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 proposed_address LEAF_NODE 8 proposed_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval start ; VAR_DECL 6 struct timeval start TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval received ; VAR_DECL 6 struct timeval received TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 received LEAF_NODE 8 received LEAF_NODE 6 ; SIMPLE_DECL 5 int max_seq ; VAR_DECL 6 int max_seq TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 max_seq LEAF_NODE 8 max_seq LEAF_NODE 6 ; SIMPLE_DECL 5 int packets ; VAR_DECL 6 int packets TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 packets LEAF_NODE 8 packets LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_media_type stream_type ; VAR_DECL 6 enum ast_media_type stream_type TYPE 7 enum ast_media_type TYPE_NAME 8 enum ast_media_type LEAF_NODE 9 enum LEAF_NODE 9 ast_media_type NAME 7 stream_type LEAF_NODE 8 stream_type LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_rtp_instance_rtcp BASE_CLASSES { AST_RTP_INSTANCE_RTCP_DISABLED = 0 , AST_RTP_INSTANCE_RTCP_STANDARD , AST_RTP_INSTANCE_RTCP_MUX , } ; CLASS_DEF 2 enum ast_rtp_instance_rtcp BASE_CLASSES { AST_RTP_INSTANCE_RTCP_DISABLED = 0 , AST_RTP_INSTANCE_RTCP_STANDARD , AST_RTP_INSTANCE_RTCP_MUX , } CLASS_DEF 3 enum ast_rtp_instance_rtcp BASE_CLASSES { AST_RTP_INSTANCE_RTCP_DISABLED = 0 , AST_RTP_INSTANCE_RTCP_STANDARD , AST_RTP_INSTANCE_RTCP_MUX , } LEAF_NODE 4 enum CLASS_NAME 4 ast_rtp_instance_rtcp LEAF_NODE 5 ast_rtp_instance_rtcp LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RTP_INSTANCE_RTCP_DISABLED = 0 , AST_RTP_INSTANCE_RTCP_STANDARD , AST_RTP_INSTANCE_RTCP_MUX , LEAF_NODE 5 AST_RTP_INSTANCE_RTCP_DISABLED LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_INSTANCE_RTCP_STANDARD LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_INSTANCE_RTCP_MUX LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtcp BASE_CLASSES { int rtcp_info ; int s ; struct ast_sockaddr us ; struct ast_sockaddr them ; unsigned int soc ; unsigned int spc ; unsigned int themrxlsr ; struct timeval rxlsr ; struct timeval txlsr ; unsigned int expected_prior ; unsigned int received_prior ; int schedid ; unsigned int rr_count ; unsigned int sr_count ; unsigned int lastsrtxcount ; double accumulated_transit ; double rtt ; unsigned int reported_jitter ; unsigned int reported_lost ; double reported_maxjitter ; double reported_minjitter ; double reported_normdev_jitter ; double reported_stdev_jitter ; unsigned int reported_jitter_count ; double reported_maxlost ; double reported_minlost ; double reported_normdev_lost ; double reported_stdev_lost ; unsigned int reported_lost_count ; double rxlost ; double maxrxlost ; double minrxlost ; double normdev_rxlost ; double stdev_rxlost ; unsigned int rxlost_count ; double maxrxjitter ; double minrxjitter ; double normdev_rxjitter ; double stdev_rxjitter ; unsigned int rxjitter_count ; double maxrtt ; double minrtt ; double normdevrtt ; double stdevrtt ; unsigned int rtt_count ; int firseq ; struct dtls_details dtls ; char * local_addr_str ; enum ast_rtp_instance_rtcp type ; unsigned char [ 512 + AST_FRIENDLY_OFFSET ] frame_buf ; } ; CLASS_DEF 2 struct ast_rtcp BASE_CLASSES { int rtcp_info ; int s ; struct ast_sockaddr us ; struct ast_sockaddr them ; unsigned int soc ; unsigned int spc ; unsigned int themrxlsr ; struct timeval rxlsr ; struct timeval txlsr ; unsigned int expected_prior ; unsigned int received_prior ; int schedid ; unsigned int rr_count ; unsigned int sr_count ; unsigned int lastsrtxcount ; double accumulated_transit ; double rtt ; unsigned int reported_jitter ; unsigned int reported_lost ; double reported_maxjitter ; double reported_minjitter ; double reported_normdev_jitter ; double reported_stdev_jitter ; unsigned int reported_jitter_count ; double reported_maxlost ; double reported_minlost ; double reported_normdev_lost ; double reported_stdev_lost ; unsigned int reported_lost_count ; double rxlost ; double maxrxlost ; double minrxlost ; double normdev_rxlost ; double stdev_rxlost ; unsigned int rxlost_count ; double maxrxjitter ; double minrxjitter ; double normdev_rxjitter ; double stdev_rxjitter ; unsigned int rxjitter_count ; double maxrtt ; double minrtt ; double normdevrtt ; double stdevrtt ; unsigned int rtt_count ; int firseq ; struct dtls_details dtls ; char * local_addr_str ; enum ast_rtp_instance_rtcp type ; unsigned char [ 512 + AST_FRIENDLY_OFFSET ] frame_buf ; } CLASS_DEF 3 struct ast_rtcp BASE_CLASSES { int rtcp_info ; int s ; struct ast_sockaddr us ; struct ast_sockaddr them ; unsigned int soc ; unsigned int spc ; unsigned int themrxlsr ; struct timeval rxlsr ; struct timeval txlsr ; unsigned int expected_prior ; unsigned int received_prior ; int schedid ; unsigned int rr_count ; unsigned int sr_count ; unsigned int lastsrtxcount ; double accumulated_transit ; double rtt ; unsigned int reported_jitter ; unsigned int reported_lost ; double reported_maxjitter ; double reported_minjitter ; double reported_normdev_jitter ; double reported_stdev_jitter ; unsigned int reported_jitter_count ; double reported_maxlost ; double reported_minlost ; double reported_normdev_lost ; double reported_stdev_lost ; unsigned int reported_lost_count ; double rxlost ; double maxrxlost ; double minrxlost ; double normdev_rxlost ; double stdev_rxlost ; unsigned int rxlost_count ; double maxrxjitter ; double minrxjitter ; double normdev_rxjitter ; double stdev_rxjitter ; unsigned int rxjitter_count ; double maxrtt ; double minrtt ; double normdevrtt ; double stdevrtt ; unsigned int rtt_count ; int firseq ; struct dtls_details dtls ; char * local_addr_str ; enum ast_rtp_instance_rtcp type ; unsigned char [ 512 + AST_FRIENDLY_OFFSET ] frame_buf ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtcp LEAF_NODE 5 ast_rtcp LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int rtcp_info ; int s ; struct ast_sockaddr us ; struct ast_sockaddr them ; unsigned int soc ; unsigned int spc ; unsigned int themrxlsr ; struct timeval rxlsr ; struct timeval txlsr ; unsigned int expected_prior ; unsigned int received_prior ; int schedid ; unsigned int rr_count ; unsigned int sr_count ; unsigned int lastsrtxcount ; double accumulated_transit ; double rtt ; unsigned int reported_jitter ; unsigned int reported_lost ; double reported_maxjitter ; double reported_minjitter ; double reported_normdev_jitter ; double reported_stdev_jitter ; unsigned int reported_jitter_count ; double reported_maxlost ; double reported_minlost ; double reported_normdev_lost ; double reported_stdev_lost ; unsigned int reported_lost_count ; double rxlost ; double maxrxlost ; double minrxlost ; double normdev_rxlost ; double stdev_rxlost ; unsigned int rxlost_count ; double maxrxjitter ; double minrxjitter ; double normdev_rxjitter ; double stdev_rxjitter ; unsigned int rxjitter_count ; double maxrtt ; double minrtt ; double normdevrtt ; double stdevrtt ; unsigned int rtt_count ; int firseq ; struct dtls_details dtls ; char * local_addr_str ; enum ast_rtp_instance_rtcp type ; unsigned char [ 512 + AST_FRIENDLY_OFFSET ] frame_buf ; SIMPLE_DECL 5 int rtcp_info ; VAR_DECL 6 int rtcp_info TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtcp_info LEAF_NODE 8 rtcp_info LEAF_NODE 6 ; SIMPLE_DECL 5 int s ; VAR_DECL 6 int s TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 s LEAF_NODE 8 s LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr us ; VAR_DECL 6 struct ast_sockaddr us TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 us LEAF_NODE 8 us LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr them ; VAR_DECL 6 struct ast_sockaddr them TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 them LEAF_NODE 8 them LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int soc ; VAR_DECL 6 unsigned int soc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 soc LEAF_NODE 8 soc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int spc ; VAR_DECL 6 unsigned int spc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 spc LEAF_NODE 8 spc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int themrxlsr ; VAR_DECL 6 unsigned int themrxlsr TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 themrxlsr LEAF_NODE 8 themrxlsr LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval rxlsr ; VAR_DECL 6 struct timeval rxlsr TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 rxlsr LEAF_NODE 8 rxlsr LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval txlsr ; VAR_DECL 6 struct timeval txlsr TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 txlsr LEAF_NODE 8 txlsr LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int expected_prior ; VAR_DECL 6 unsigned int expected_prior TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 expected_prior LEAF_NODE 8 expected_prior LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int received_prior ; VAR_DECL 6 unsigned int received_prior TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 received_prior LEAF_NODE 8 received_prior LEAF_NODE 6 ; SIMPLE_DECL 5 int schedid ; VAR_DECL 6 int schedid TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 schedid LEAF_NODE 8 schedid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rr_count ; VAR_DECL 6 unsigned int rr_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rr_count LEAF_NODE 8 rr_count LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int sr_count ; VAR_DECL 6 unsigned int sr_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 sr_count LEAF_NODE 8 sr_count LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastsrtxcount ; VAR_DECL 6 unsigned int lastsrtxcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastsrtxcount LEAF_NODE 8 lastsrtxcount LEAF_NODE 6 ; SIMPLE_DECL 5 double accumulated_transit ; VAR_DECL 6 double accumulated_transit TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 accumulated_transit LEAF_NODE 8 accumulated_transit LEAF_NODE 6 ; SIMPLE_DECL 5 double rtt ; VAR_DECL 6 double rtt TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 rtt LEAF_NODE 8 rtt LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int reported_jitter ; VAR_DECL 6 unsigned int reported_jitter TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 reported_jitter LEAF_NODE 8 reported_jitter LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int reported_lost ; VAR_DECL 6 unsigned int reported_lost TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 reported_lost LEAF_NODE 8 reported_lost LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_maxjitter ; VAR_DECL 6 double reported_maxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_maxjitter LEAF_NODE 8 reported_maxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_minjitter ; VAR_DECL 6 double reported_minjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_minjitter LEAF_NODE 8 reported_minjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_normdev_jitter ; VAR_DECL 6 double reported_normdev_jitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_normdev_jitter LEAF_NODE 8 reported_normdev_jitter LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_stdev_jitter ; VAR_DECL 6 double reported_stdev_jitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_stdev_jitter LEAF_NODE 8 reported_stdev_jitter LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int reported_jitter_count ; VAR_DECL 6 unsigned int reported_jitter_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 reported_jitter_count LEAF_NODE 8 reported_jitter_count LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_maxlost ; VAR_DECL 6 double reported_maxlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_maxlost LEAF_NODE 8 reported_maxlost LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_minlost ; VAR_DECL 6 double reported_minlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_minlost LEAF_NODE 8 reported_minlost LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_normdev_lost ; VAR_DECL 6 double reported_normdev_lost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_normdev_lost LEAF_NODE 8 reported_normdev_lost LEAF_NODE 6 ; SIMPLE_DECL 5 double reported_stdev_lost ; VAR_DECL 6 double reported_stdev_lost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 reported_stdev_lost LEAF_NODE 8 reported_stdev_lost LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int reported_lost_count ; VAR_DECL 6 unsigned int reported_lost_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 reported_lost_count LEAF_NODE 8 reported_lost_count LEAF_NODE 6 ; SIMPLE_DECL 5 double rxlost ; VAR_DECL 6 double rxlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 rxlost LEAF_NODE 8 rxlost LEAF_NODE 6 ; SIMPLE_DECL 5 double maxrxlost ; VAR_DECL 6 double maxrxlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 maxrxlost LEAF_NODE 8 maxrxlost LEAF_NODE 6 ; SIMPLE_DECL 5 double minrxlost ; VAR_DECL 6 double minrxlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 minrxlost LEAF_NODE 8 minrxlost LEAF_NODE 6 ; SIMPLE_DECL 5 double normdev_rxlost ; VAR_DECL 6 double normdev_rxlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 normdev_rxlost LEAF_NODE 8 normdev_rxlost LEAF_NODE 6 ; SIMPLE_DECL 5 double stdev_rxlost ; VAR_DECL 6 double stdev_rxlost TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 stdev_rxlost LEAF_NODE 8 stdev_rxlost LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxlost_count ; VAR_DECL 6 unsigned int rxlost_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxlost_count LEAF_NODE 8 rxlost_count LEAF_NODE 6 ; SIMPLE_DECL 5 double maxrxjitter ; VAR_DECL 6 double maxrxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 maxrxjitter LEAF_NODE 8 maxrxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double minrxjitter ; VAR_DECL 6 double minrxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 minrxjitter LEAF_NODE 8 minrxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double normdev_rxjitter ; VAR_DECL 6 double normdev_rxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 normdev_rxjitter LEAF_NODE 8 normdev_rxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double stdev_rxjitter ; VAR_DECL 6 double stdev_rxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 stdev_rxjitter LEAF_NODE 8 stdev_rxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxjitter_count ; VAR_DECL 6 unsigned int rxjitter_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxjitter_count LEAF_NODE 8 rxjitter_count LEAF_NODE 6 ; SIMPLE_DECL 5 double maxrtt ; VAR_DECL 6 double maxrtt TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 maxrtt LEAF_NODE 8 maxrtt LEAF_NODE 6 ; SIMPLE_DECL 5 double minrtt ; VAR_DECL 6 double minrtt TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 minrtt LEAF_NODE 8 minrtt LEAF_NODE 6 ; SIMPLE_DECL 5 double normdevrtt ; VAR_DECL 6 double normdevrtt TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 normdevrtt LEAF_NODE 8 normdevrtt LEAF_NODE 6 ; SIMPLE_DECL 5 double stdevrtt ; VAR_DECL 6 double stdevrtt TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 stdevrtt LEAF_NODE 8 stdevrtt LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rtt_count ; VAR_DECL 6 unsigned int rtt_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rtt_count LEAF_NODE 8 rtt_count LEAF_NODE 6 ; SIMPLE_DECL 5 int firseq ; VAR_DECL 6 int firseq TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 firseq LEAF_NODE 8 firseq LEAF_NODE 6 ; SIMPLE_DECL 5 struct dtls_details dtls ; VAR_DECL 6 struct dtls_details dtls TYPE 7 struct dtls_details TYPE_NAME 8 struct dtls_details LEAF_NODE 9 struct LEAF_NODE 9 dtls_details NAME 7 dtls LEAF_NODE 8 dtls LEAF_NODE 6 ; SIMPLE_DECL 5 char * local_addr_str ; VAR_DECL 6 char * local_addr_str TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 local_addr_str LEAF_NODE 8 local_addr_str LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_instance_rtcp type ; VAR_DECL 6 enum ast_rtp_instance_rtcp type TYPE 7 enum ast_rtp_instance_rtcp TYPE_NAME 8 enum ast_rtp_instance_rtcp LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_instance_rtcp NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 512 + AST_FRIENDLY_OFFSET ] frame_buf ; VAR_DECL 6 unsigned char [ 512 + AST_FRIENDLY_OFFSET ] frame_buf TYPE 7 unsigned char [ 512 + AST_FRIENDLY_OFFSET ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 512 + AST_FRIENDLY_OFFSET ] LEAF_NODE 9 [ FIELD 9 512 LEAF_NODE 10 512 LEAF_NODE 9 + FIELD 9 AST_FRIENDLY_OFFSET LEAF_NODE 10 AST_FRIENDLY_OFFSET LEAF_NODE 9 ] NAME 7 frame_buf LEAF_NODE 8 frame_buf LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp BASE_CLASSES { int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; } ; CLASS_DEF 2 struct ast_rtp BASE_CLASSES { int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; } CLASS_DEF 3 struct ast_rtp BASE_CLASSES { int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp LEAF_NODE 5 ast_rtp LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; SIMPLE_DECL 5 int s ; VAR_DECL 6 int s TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 s LEAF_NODE 8 s LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame f ; VAR_DECL 6 struct ast_frame f TYPE 7 struct ast_frame TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame NAME 7 f LEAF_NODE 8 f LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; VAR_DECL 6 unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata TYPE 7 unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 8192 + AST_FRIENDLY_OFFSET ] LEAF_NODE 9 [ FIELD 9 8192 LEAF_NODE 10 8192 LEAF_NODE 9 + FIELD 9 AST_FRIENDLY_OFFSET LEAF_NODE 10 AST_FRIENDLY_OFFSET LEAF_NODE 9 ] NAME 7 rawdata LEAF_NODE 8 rawdata LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ssrc ; VAR_DECL 6 unsigned int ssrc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ssrc LEAF_NODE 8 ssrc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int themssrc ; VAR_DECL 6 unsigned int themssrc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 themssrc LEAF_NODE 8 themssrc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxssrc ; VAR_DECL 6 unsigned int rxssrc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxssrc LEAF_NODE 8 rxssrc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastts ; VAR_DECL 6 unsigned int lastts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastts LEAF_NODE 8 lastts LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastrxts ; VAR_DECL 6 unsigned int lastrxts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastrxts LEAF_NODE 8 lastrxts LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastividtimestamp ; VAR_DECL 6 unsigned int lastividtimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastividtimestamp LEAF_NODE 8 lastividtimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastovidtimestamp ; VAR_DECL 6 unsigned int lastovidtimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastovidtimestamp LEAF_NODE 8 lastovidtimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastitexttimestamp ; VAR_DECL 6 unsigned int lastitexttimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastitexttimestamp LEAF_NODE 8 lastitexttimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastotexttimestamp ; VAR_DECL 6 unsigned int lastotexttimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastotexttimestamp LEAF_NODE 8 lastotexttimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lasteventseqn ; VAR_DECL 6 unsigned int lasteventseqn TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lasteventseqn LEAF_NODE 8 lasteventseqn LEAF_NODE 6 ; SIMPLE_DECL 5 int lastrxseqno ; VAR_DECL 6 int lastrxseqno TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 lastrxseqno LEAF_NODE 8 lastrxseqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned short seedrxseqno ; VAR_DECL 6 unsigned short seedrxseqno TYPE 7 unsigned short TYPE_NAME 8 unsigned short LEAF_NODE 9 unsigned LEAF_NODE 9 short NAME 7 seedrxseqno LEAF_NODE 8 seedrxseqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int seedrxts ; VAR_DECL 6 unsigned int seedrxts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 seedrxts LEAF_NODE 8 seedrxts LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxcount ; VAR_DECL 6 unsigned int rxcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxcount LEAF_NODE 8 rxcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxoctetcount ; VAR_DECL 6 unsigned int rxoctetcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxoctetcount LEAF_NODE 8 rxoctetcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int txcount ; VAR_DECL 6 unsigned int txcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 txcount LEAF_NODE 8 txcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int txoctetcount ; VAR_DECL 6 unsigned int txoctetcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 txoctetcount LEAF_NODE 8 txoctetcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int cycles ; VAR_DECL 6 unsigned int cycles TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 cycles LEAF_NODE 8 cycles LEAF_NODE 6 ; SIMPLE_DECL 5 double rxjitter ; VAR_DECL 6 double rxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 rxjitter LEAF_NODE 8 rxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double rxtransit ; VAR_DECL 6 double rxtransit TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 rxtransit LEAF_NODE 8 rxtransit LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format lasttxformat ; VAR_DECL 6 struct ast_format lasttxformat TYPE 7 struct ast_format TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format NAME 7 lasttxformat LEAF_NODE 8 lasttxformat LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format lastrxformat ; VAR_DECL 6 struct ast_format lastrxformat TYPE 7 struct ast_format TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format NAME 7 lastrxformat LEAF_NODE 8 lastrxformat LEAF_NODE 6 ; SIMPLE_DECL 5 int rtptimeout ; VAR_DECL 6 int rtptimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtptimeout LEAF_NODE 8 rtptimeout LEAF_NODE 6 ; SIMPLE_DECL 5 int rtpholdtimeout ; VAR_DECL 6 int rtpholdtimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtpholdtimeout LEAF_NODE 8 rtpholdtimeout LEAF_NODE 6 ; SIMPLE_DECL 5 int rtpkeepalive ; VAR_DECL 6 int rtpkeepalive TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtpkeepalive LEAF_NODE 8 rtpkeepalive LEAF_NODE 6 ; SIMPLE_DECL 5 char resp ; VAR_DECL 6 char resp TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 resp LEAF_NODE 8 resp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int last_seqno ; VAR_DECL 6 unsigned int last_seqno TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 last_seqno LEAF_NODE 8 last_seqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int last_end_timestamp ; VAR_DECL 6 unsigned int last_end_timestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 last_end_timestamp LEAF_NODE 8 last_end_timestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int dtmf_duration ; VAR_DECL 6 unsigned int dtmf_duration TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 dtmf_duration LEAF_NODE 8 dtmf_duration LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int dtmf_timeout ; VAR_DECL 6 unsigned int dtmf_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 dtmf_timeout LEAF_NODE 8 dtmf_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int dtmfsamples ; VAR_DECL 6 unsigned int dtmfsamples TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 dtmfsamples LEAF_NODE 8 dtmfsamples LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_dtmf_mode dtmfmode ; VAR_DECL 6 enum ast_rtp_dtmf_mode dtmfmode TYPE 7 enum ast_rtp_dtmf_mode TYPE_NAME 8 enum ast_rtp_dtmf_mode LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_dtmf_mode NAME 7 dtmfmode LEAF_NODE 8 dtmfmode LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastdigitts ; VAR_DECL 6 unsigned int lastdigitts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastdigitts LEAF_NODE 8 lastdigitts LEAF_NODE 6 ; SIMPLE_DECL 5 char sending_digit ; VAR_DECL 6 char sending_digit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 sending_digit LEAF_NODE 8 sending_digit LEAF_NODE 6 ; SIMPLE_DECL 5 char send_digit ; VAR_DECL 6 char send_digit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 send_digit LEAF_NODE 8 send_digit LEAF_NODE 6 ; SIMPLE_DECL 5 int send_payload ; VAR_DECL 6 int send_payload TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 send_payload LEAF_NODE 8 send_payload LEAF_NODE 6 ; SIMPLE_DECL 5 int send_duration ; VAR_DECL 6 int send_duration TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 send_duration LEAF_NODE 8 send_duration LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval rxcore ; VAR_DECL 6 struct timeval rxcore TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 rxcore LEAF_NODE 8 rxcore LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval txcore ; VAR_DECL 6 struct timeval txcore TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 txcore LEAF_NODE 8 txcore LEAF_NODE 6 ; SIMPLE_DECL 5 double drxcore ; VAR_DECL 6 double drxcore TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 drxcore LEAF_NODE 8 drxcore LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval lastrx ; VAR_DECL 6 struct timeval lastrx TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 lastrx LEAF_NODE 8 lastrx LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval dtmfmute ; VAR_DECL 6 struct timeval dtmfmute TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 dtmfmute LEAF_NODE 8 dtmfmute LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_smoother * smoother ; VAR_DECL 6 struct ast_smoother * smoother TYPE 7 struct ast_smoother * TYPE_NAME 8 struct ast_smoother LEAF_NODE 9 struct LEAF_NODE 9 ast_smoother POINTER 8 * LEAF_NODE 9 * NAME 7 smoother LEAF_NODE 8 smoother LEAF_NODE 6 ; SIMPLE_DECL 5 int * ioid ; VAR_DECL 6 int * ioid TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 ioid LEAF_NODE 8 ioid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned short seqno ; VAR_DECL 6 unsigned short seqno TYPE 7 unsigned short TYPE_NAME 8 unsigned short LEAF_NODE 9 unsigned LEAF_NODE 9 short NAME 7 seqno LEAF_NODE 8 seqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned short rxseqno ; VAR_DECL 6 unsigned short rxseqno TYPE 7 unsigned short TYPE_NAME 8 unsigned short LEAF_NODE 9 unsigned LEAF_NODE 9 short NAME 7 rxseqno LEAF_NODE 8 rxseqno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sched_context * sched ; VAR_DECL 6 struct ast_sched_context * sched TYPE 7 struct ast_sched_context * TYPE_NAME 8 struct ast_sched_context LEAF_NODE 9 struct LEAF_NODE 9 ast_sched_context POINTER 8 * LEAF_NODE 9 * NAME 7 sched LEAF_NODE 8 sched LEAF_NODE 6 ; SIMPLE_DECL 5 struct io_context * io ; VAR_DECL 6 struct io_context * io TYPE 7 struct io_context * TYPE_NAME 8 struct io_context LEAF_NODE 9 struct LEAF_NODE 9 io_context POINTER 8 * LEAF_NODE 9 * NAME 7 io LEAF_NODE 8 io LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtcp * rtcp ; VAR_DECL 6 struct ast_rtcp * rtcp TYPE 7 struct ast_rtcp * TYPE_NAME 8 struct ast_rtcp LEAF_NODE 9 struct LEAF_NODE 9 ast_rtcp POINTER 8 * LEAF_NODE 9 * NAME 7 rtcp LEAF_NODE 8 rtcp LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp * bridged ; VAR_DECL 6 struct ast_rtp * bridged TYPE 7 struct ast_rtp * TYPE_NAME 8 struct ast_rtp LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp POINTER 8 * LEAF_NODE 9 * NAME 7 bridged LEAF_NODE 8 bridged LEAF_NODE 6 ; SIMPLE_DECL 5 enum strict_rtp_state strict_rtp_state ; VAR_DECL 6 enum strict_rtp_state strict_rtp_state TYPE 7 enum strict_rtp_state TYPE_NAME 8 enum strict_rtp_state LEAF_NODE 9 enum LEAF_NODE 9 strict_rtp_state NAME 7 strict_rtp_state LEAF_NODE 8 strict_rtp_state LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr strict_rtp_address ; VAR_DECL 6 struct ast_sockaddr strict_rtp_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 strict_rtp_address LEAF_NODE 8 strict_rtp_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct rtp_learning_info rtp_source_learn ; VAR_DECL 6 struct rtp_learning_info rtp_source_learn TYPE 7 struct rtp_learning_info TYPE_NAME 8 struct rtp_learning_info LEAF_NODE 9 struct LEAF_NODE 9 rtp_learning_info NAME 7 rtp_source_learn LEAF_NODE 8 rtp_source_learn LEAF_NODE 6 ; SIMPLE_DECL 5 struct rtp_learning_info alt_source_learn ; VAR_DECL 6 struct rtp_learning_info alt_source_learn TYPE 7 struct rtp_learning_info TYPE_NAME 8 struct rtp_learning_info LEAF_NODE 9 struct LEAF_NODE 9 rtp_learning_info NAME 7 alt_source_learn LEAF_NODE 8 alt_source_learn LEAF_NODE 6 ; SIMPLE_DECL 5 struct rtp_red * red ; VAR_DECL 6 struct rtp_red * red TYPE 7 struct rtp_red * TYPE_NAME 8 struct rtp_red LEAF_NODE 9 struct LEAF_NODE 9 rtp_red POINTER 8 * LEAF_NODE 9 * NAME 7 red LEAF_NODE 8 red LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_cond_t cond ; VAR_DECL 6 ast_cond_t cond TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 cond LEAF_NODE 8 cond LEAF_NODE 6 ; SIMPLE_DECL 5 pj_ice_sess * ice ; VAR_DECL 6 pj_ice_sess * ice TYPE 7 pj_ice_sess * TYPE_NAME 8 pj_ice_sess LEAF_NODE 9 pj_ice_sess POINTER 8 * LEAF_NODE 9 * NAME 7 ice LEAF_NODE 8 ice LEAF_NODE 6 ; SIMPLE_DECL 5 pj_turn_sock * turn_rtp ; VAR_DECL 6 pj_turn_sock * turn_rtp TYPE 7 pj_turn_sock * TYPE_NAME 8 pj_turn_sock LEAF_NODE 9 pj_turn_sock POINTER 8 * LEAF_NODE 9 * NAME 7 turn_rtp LEAF_NODE 8 turn_rtp LEAF_NODE 6 ; SIMPLE_DECL 5 pj_turn_sock * turn_rtcp ; VAR_DECL 6 pj_turn_sock * turn_rtcp TYPE 7 pj_turn_sock * TYPE_NAME 8 pj_turn_sock LEAF_NODE 9 pj_turn_sock POINTER 8 * LEAF_NODE 9 * NAME 7 turn_rtcp LEAF_NODE 8 turn_rtcp LEAF_NODE 6 ; SIMPLE_DECL 5 pj_turn_state_t turn_state ; VAR_DECL 6 pj_turn_state_t turn_state TYPE 7 pj_turn_state_t TYPE_NAME 8 pj_turn_state_t LEAF_NODE 9 pj_turn_state_t NAME 7 turn_state LEAF_NODE 8 turn_state LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 passthrough : LEAF_NODE 6 passthrough LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 ice_started : LEAF_NODE 6 ice_started LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 256 ] remote_ufrag ; VAR_DECL 6 char [ 256 ] remote_ufrag TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 remote_ufrag LEAF_NODE 8 remote_ufrag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] remote_passwd ; VAR_DECL 6 char [ 256 ] remote_passwd TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 remote_passwd LEAF_NODE 8 remote_passwd LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] local_ufrag ; VAR_DECL 6 char [ 256 ] local_ufrag TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 local_ufrag LEAF_NODE 8 local_ufrag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] local_passwd ; VAR_DECL 6 char [ 256 ] local_passwd TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 local_passwd LEAF_NODE 8 local_passwd LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * local_candidates ; VAR_DECL 6 struct ao2_container * local_candidates TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 local_candidates LEAF_NODE 8 local_candidates LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * remote_candidates ; VAR_DECL 6 struct ao2_container * remote_candidates TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 remote_candidates LEAF_NODE 8 remote_candidates LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_CTX * ssl_ctx ; VAR_DECL 6 SSL_CTX * ssl_ctx TYPE 7 SSL_CTX * TYPE_NAME 8 SSL_CTX LEAF_NODE 9 SSL_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 ssl_ctx LEAF_NODE 8 ssl_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 SSL * ssl ; VAR_DECL 6 SSL * ssl TYPE 7 SSL * TYPE_NAME 8 SSL LEAF_NODE 9 SSL POINTER 8 * LEAF_NODE 9 * NAME 7 ssl LEAF_NODE 8 ssl LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * read_bio ; VAR_DECL 6 BIO * read_bio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 read_bio LEAF_NODE 8 read_bio LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * write_bio ; VAR_DECL 6 BIO * write_bio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 write_bio LEAF_NODE 8 write_bio LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_dtls_setup dtls_setup ; VAR_DECL 6 enum ast_rtp_dtls_setup dtls_setup TYPE 7 enum ast_rtp_dtls_setup TYPE_NAME 8 enum ast_rtp_dtls_setup LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_dtls_setup NAME 7 dtls_setup LEAF_NODE 8 dtls_setup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_srtp_suite suite ; VAR_DECL 6 enum ast_srtp_suite suite TYPE 7 enum ast_srtp_suite TYPE_NAME 8 enum ast_srtp_suite LEAF_NODE 9 enum LEAF_NODE 9 ast_srtp_suite NAME 7 suite LEAF_NODE 8 suite LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 160 ] local_fingerprint ; VAR_DECL 6 char [ 160 ] local_fingerprint TYPE 7 char [ 160 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 160 ] LEAF_NODE 9 [ FIELD 9 160 LEAF_NODE 10 160 LEAF_NODE 9 ] NAME 7 local_fingerprint LEAF_NODE 8 local_fingerprint LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; VAR_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint TYPE 7 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ EVP_MAX_MD_SIZE ] LEAF_NODE 9 [ FIELD 9 EVP_MAX_MD_SIZE LEAF_NODE 10 EVP_MAX_MD_SIZE LEAF_NODE 9 ] NAME 7 remote_fingerprint LEAF_NODE 8 remote_fingerprint LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_dtls_connection connection ; VAR_DECL 6 enum ast_rtp_dtls_connection connection TYPE 7 enum ast_rtp_dtls_connection TYPE_NAME 8 enum ast_rtp_dtls_connection LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_dtls_connection NAME 7 connection LEAF_NODE 8 connection LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 dtls_failure : LEAF_NODE 6 dtls_failure LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int rekey ; VAR_DECL 6 unsigned int rekey TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rekey LEAF_NODE 8 rekey LEAF_NODE 6 ; SIMPLE_DECL 5 int rekeyid ; VAR_DECL 6 int rekeyid TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rekeyid LEAF_NODE 8 rekeyid LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static struct ast_frame * LEAF_NODE 3 static TYPE_NAME 3 struct ast_frame LEAF_NODE 4 struct LEAF_NODE 4 ast_frame LEAF_NODE 3 * FUNCTION_NAME 2 ast_rtcp_interpret LEAF_NODE 3 ast_rtcp_interpret PARAMETER_LIST 2 ( struct ast_rtp_instance * instance , const unsigned char * rtcpdata , size_t size , struct ast_sockaddr * addr ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_rtp_instance * instance TYPE 4 struct ast_rtp_instance * TYPE_NAME 5 struct ast_rtp_instance LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_instance POINTER 5 * LEAF_NODE 6 * NAME 4 instance LEAF_NODE 5 instance LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * rtcpdata TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 rtcpdata LEAF_NODE 5 rtcpdata LEAF_NODE 3 , PARAMETER_DECL 3 size_t size TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 size LEAF_NODE 5 size LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_sockaddr * addr TYPE 4 struct ast_sockaddr * TYPE_NAME 5 struct ast_sockaddr LEAF_NODE 6 struct LEAF_NODE 6 ast_sockaddr POINTER 5 * LEAF_NODE 6 * NAME 4 addr LEAF_NODE 5 addr LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_rtp_instance * transport ; transport = instance ; VAR_DECL 4 struct ast_rtp_instance * transport ; transport = instance TYPE 5 struct ast_rtp_instance * TYPE_NAME 6 struct ast_rtp_instance LEAF_NODE 7 struct LEAF_NODE 7 ast_rtp_instance POINTER 6 * LEAF_NODE 7 * NAME 5 transport LEAF_NODE 6 transport LEAF_NODE 5 ; INIT 5 transport = instance ASSIGN 6 transport = instance LVAL 7 transport NAME 8 transport LEAF_NODE 9 transport ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 instance FIELD 8 instance LEAF_NODE 9 instance LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_rtp * transport_rtp ; transport_rtp = ast_rtp_instance_get_data ( instance ) ; VAR_DECL 4 struct ast_rtp * transport_rtp ; transport_rtp = ast_rtp_instance_get_data ( instance ) TYPE 5 struct ast_rtp * TYPE_NAME 6 struct ast_rtp LEAF_NODE 7 struct LEAF_NODE 7 ast_rtp POINTER 6 * LEAF_NODE 7 * NAME 5 transport_rtp LEAF_NODE 6 transport_rtp LEAF_NODE 5 ; INIT 5 transport_rtp = ast_rtp_instance_get_data ( instance ) ASSIGN 6 transport_rtp = ast_rtp_instance_get_data ( instance ) LVAL 7 transport_rtp NAME 8 transport_rtp LEAF_NODE 9 transport_rtp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ast_rtp_instance_get_data ( instance ) FUNCTION_CALL 8 ast_rtp_instance_get_data ( instance ) CALLEE 9 ast_rtp_instance_get_data LEAF_NODE 10 ast_rtp_instance_get_data LEAF_NODE 9 ( ARGUMENT 9 instance FIELD 10 instance LEAF_NODE 11 instance LEAF_NODE 9 ) LEAF_NODE 4 ; LEAF_NODE 3 unsigned LEAF_NODE 3 int LEAF_NODE 3 * LEAF_NODE 3 rtcpheader LEAF_NODE 3 = LEAF_NODE 3 ( LEAF_NODE 3 unsigned LEAF_NODE 3 int LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 rtcpdata LEAF_NODE 3 ) LEAF_NODE 3 ; SIMPLE_DECL 3 unsigned int packetwords ; VAR_DECL 4 unsigned int packetwords TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 packetwords LEAF_NODE 6 packetwords LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int position ; VAR_DECL 4 unsigned int position TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 position LEAF_NODE 6 position LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int first_word ; VAR_DECL 4 unsigned int first_word TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 first_word LEAF_NODE 6 first_word LEAF_NODE 4 ; SIMPLE_DECL 3 unsigned int ssrc_seen ; VAR_DECL 4 unsigned int ssrc_seen TYPE 5 unsigned int TYPE_NAME 6 unsigned int LEAF_NODE 7 unsigned LEAF_NODE 7 int NAME 5 ssrc_seen LEAF_NODE 6 ssrc_seen LEAF_NODE 4 ; SIMPLE_DECL 3 int report_counter ; report_counter = 0 ; VAR_DECL 4 int report_counter ; report_counter = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 report_counter LEAF_NODE 6 report_counter LEAF_NODE 5 ; INIT 5 report_counter = 0 ASSIGN 6 report_counter = 0 LVAL 7 report_counter NAME 8 report_counter LEAF_NODE 9 report_counter ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_rtp_rtcp_report_block * report_block ; VAR_DECL 4 struct ast_rtp_rtcp_report_block * report_block TYPE 5 struct ast_rtp_rtcp_report_block * TYPE_NAME 6 struct ast_rtp_rtcp_report_block LEAF_NODE 7 struct LEAF_NODE 7 ast_rtp_rtcp_report_block POINTER 6 * LEAF_NODE 7 * NAME 5 report_block LEAF_NODE 6 report_block LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_frame * f ; f = & ast_null_frame ; VAR_DECL 4 struct ast_frame * f ; f = & ast_null_frame TYPE 5 struct ast_frame * TYPE_NAME 6 struct ast_frame LEAF_NODE 7 struct LEAF_NODE 7 ast_frame POINTER 6 * LEAF_NODE 7 * NAME 5 f LEAF_NODE 6 f LEAF_NODE 5 ; INIT 5 f = & ast_null_frame ASSIGN 6 f = & ast_null_frame LVAL 7 f NAME 8 f LEAF_NODE 9 f ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 & ast_null_frame UNARY_EXPR 8 & ast_null_frame UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 ast_null_frame LEAF_NODE 10 ast_null_frame LEAF_NODE 4 ; EXPR_STATEMENT 3 packetwords = size / 4 ; EXPR 4 packetwords = size / 4 ASSIGN 5 packetwords = size / 4 LVAL 6 packetwords FIELD 7 packetwords LEAF_NODE 8 packetwords ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 size / 4 FIELD 7 size LEAF_NODE 8 size LEAF_NODE 7 / FIELD 7 4 LEAF_NODE 8 4 LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_debug ( 1 , \"Got RTCP report of %zu bytes from %s\\n\" , size , ast_sockaddr_stringify ( addr ) ) ; EXPR 4 ast_debug ( 1 , \"Got RTCP report of %zu bytes from %s\\n\" , size , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 5 ast_debug ( 1 , \"Got RTCP report of %zu bytes from %s\\n\" , size , ast_sockaddr_stringify ( addr ) ) CALLEE 6 ast_debug LEAF_NODE 7 ast_debug LEAF_NODE 6 ( ARGUMENT 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 , ARGUMENT 6 \"Got RTCP report of %zu bytes from %s\\n\" FIELD 7 \"Got RTCP report of %zu bytes from %s\\n\" LEAF_NODE 8 \"Got RTCP report of %zu bytes from %s\\n\" LEAF_NODE 6 , ARGUMENT 6 size FIELD 7 size LEAF_NODE 8 size LEAF_NODE 6 , ARGUMENT 6 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 7 ast_sockaddr_stringify ( addr ) CALLEE 8 ast_sockaddr_stringify LEAF_NODE 9 ast_sockaddr_stringify LEAF_NODE 8 ( ARGUMENT 8 addr FIELD 9 addr LEAF_NODE 10 addr LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 packetwords < RTCP_HEADER_SSRC_LENGTH EXPR 5 packetwords < RTCP_HEADER_SSRC_LENGTH FIELD 6 packetwords LEAF_NODE 7 packetwords REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 RTCP_HEADER_SSRC_LENGTH LEAF_NODE 7 RTCP_HEADER_SSRC_LENGTH LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_debug ( 1 , \"%p -- RTCP from %s: Frame size (%u words) is too short\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , packetwords ) ; EXPR 7 ast_debug ( 1 , \"%p -- RTCP from %s: Frame size (%u words) is too short\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , packetwords ) FUNCTION_CALL 8 ast_debug ( 1 , \"%p -- RTCP from %s: Frame size (%u words) is too short\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , packetwords ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"%p -- RTCP from %s: Frame size (%u words) is too short\\n\" FIELD 10 \"%p -- RTCP from %s: Frame size (%u words) is too short\\n\" LEAF_NODE 11 \"%p -- RTCP from %s: Frame size (%u words) is too short\\n\" LEAF_NODE 9 , ARGUMENT 9 transport_rtp FIELD 10 transport_rtp LEAF_NODE 11 transport_rtp LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 10 ast_sockaddr_stringify ( addr ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 addr FIELD 12 addr LEAF_NODE 13 addr LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 packetwords FIELD 10 packetwords LEAF_NODE 11 packetwords LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return & ast_null_frame ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 & ast_null_frame EXPR 8 & ast_null_frame UNARY_EXPR 9 & ast_null_frame UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ast_null_frame LEAF_NODE 11 ast_null_frame LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 position = 0 ; EXPR 4 position = 0 ASSIGN 5 position = 0 LVAL 6 position FIELD 7 position LEAF_NODE 8 position ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 first_word = ntohl ( rtcpheader [ position ] ) ; EXPR 4 first_word = ntohl ( rtcpheader [ position ] ) ASSIGN 5 first_word = ntohl ( rtcpheader [ position ] ) LVAL 6 first_word FIELD 7 first_word LEAF_NODE 8 first_word ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ntohl ( rtcpheader [ position ] ) FUNCTION_CALL 7 ntohl ( rtcpheader [ position ] ) CALLEE 8 ntohl LEAF_NODE 9 ntohl LEAF_NODE 8 ( ARGUMENT 8 rtcpheader [ position ] FIELD 9 rtcpheader [ position ] LEAF_NODE 10 rtcpheader LEAF_NODE 10 [ EXPR 10 position FIELD 11 position LEAF_NODE 12 position LEAF_NODE 10 ] LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( first_word & RTCP_VALID_MASK ) != RTCP_VALID_VALUE EXPR 5 ( first_word & RTCP_VALID_MASK ) != RTCP_VALID_VALUE LEAF_NODE 6 ( FIELD 6 first_word LEAF_NODE 7 first_word LEAF_NODE 6 & FIELD 6 RTCP_VALID_MASK LEAF_NODE 7 RTCP_VALID_MASK LEAF_NODE 6 ) EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 RTCP_VALID_VALUE LEAF_NODE 7 RTCP_VALID_VALUE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_debug ( 1 , \"%p -- RTCP from %s: Failed first packet validity check\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) ) ; EXPR 7 ast_debug ( 1 , \"%p -- RTCP from %s: Failed first packet validity check\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 8 ast_debug ( 1 , \"%p -- RTCP from %s: Failed first packet validity check\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"%p -- RTCP from %s: Failed first packet validity check\\n\" FIELD 10 \"%p -- RTCP from %s: Failed first packet validity check\\n\" LEAF_NODE 11 \"%p -- RTCP from %s: Failed first packet validity check\\n\" LEAF_NODE 9 , ARGUMENT 9 transport_rtp FIELD 10 transport_rtp LEAF_NODE 11 transport_rtp LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 10 ast_sockaddr_stringify ( addr ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 addr FIELD 12 addr LEAF_NODE 13 addr LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return & ast_null_frame ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 & ast_null_frame EXPR 8 & ast_null_frame UNARY_EXPR 9 & ast_null_frame UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ast_null_frame LEAF_NODE 11 ast_null_frame LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 do LEAF_NODE 5 do LEAF_NODE 4 ( CONDITION 4 ( first_word & RTCP_VERSION_MASK_SHIFTED ) == RTCP_VERSION_SHIFTED EXPR 5 ( first_word & RTCP_VERSION_MASK_SHIFTED ) == RTCP_VERSION_SHIFTED LEAF_NODE 6 ( FIELD 6 first_word LEAF_NODE 7 first_word LEAF_NODE 6 & FIELD 6 RTCP_VERSION_MASK_SHIFTED LEAF_NODE 7 RTCP_VERSION_MASK_SHIFTED LEAF_NODE 6 ) EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 RTCP_VERSION_SHIFTED LEAF_NODE 7 RTCP_VERSION_SHIFTED LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 position += ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 ; EXPR 7 position += ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 ASSIGN 8 position += ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 LVAL 9 position FIELD 10 position LEAF_NODE 11 position ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 LEAF_NODE 10 ( LEAF_NODE 10 ( FIELD 10 first_word LEAF_NODE 11 first_word LEAF_NODE 10 >> FIELD 10 RTCP_LENGTH_SHIFT LEAF_NODE 11 RTCP_LENGTH_SHIFT LEAF_NODE 10 ) LEAF_NODE 10 & FIELD 10 RTCP_LENGTH_MASK LEAF_NODE 11 RTCP_LENGTH_MASK LEAF_NODE 10 ) LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 packetwords <= position EXPR 8 packetwords <= position FIELD 9 packetwords LEAF_NODE 10 packetwords REL_OPERATOR 9 <= LEAF_NODE 10 <= FIELD 9 position LEAF_NODE 10 position LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 first_word = ntohl ( rtcpheader [ position ] ) ; EXPR 7 first_word = ntohl ( rtcpheader [ position ] ) ASSIGN 8 first_word = ntohl ( rtcpheader [ position ] ) LVAL 9 first_word FIELD 10 first_word LEAF_NODE 11 first_word ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ntohl ( rtcpheader [ position ] ) FUNCTION_CALL 10 ntohl ( rtcpheader [ position ] ) CALLEE 11 ntohl LEAF_NODE 12 ntohl LEAF_NODE 11 ( ARGUMENT 11 rtcpheader [ position ] FIELD 12 rtcpheader [ position ] LEAF_NODE 13 rtcpheader LEAF_NODE 13 [ EXPR 13 position FIELD 14 position LEAF_NODE 15 position LEAF_NODE 13 ] LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 position != packetwords EXPR 5 position != packetwords FIELD 6 position LEAF_NODE 7 position EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 packetwords LEAF_NODE 7 packetwords LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_debug ( 1 , \"%p -- RTCP from %s: Failed packet version or length check\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) ) ; EXPR 7 ast_debug ( 1 , \"%p -- RTCP from %s: Failed packet version or length check\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 8 ast_debug ( 1 , \"%p -- RTCP from %s: Failed packet version or length check\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"%p -- RTCP from %s: Failed packet version or length check\\n\" FIELD 10 \"%p -- RTCP from %s: Failed packet version or length check\\n\" LEAF_NODE 11 \"%p -- RTCP from %s: Failed packet version or length check\\n\" LEAF_NODE 9 , ARGUMENT 9 transport_rtp FIELD 10 transport_rtp LEAF_NODE 11 transport_rtp LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 10 ast_sockaddr_stringify ( addr ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 addr FIELD 12 addr LEAF_NODE 13 addr LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return & ast_null_frame ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 & ast_null_frame EXPR 8 & ast_null_frame UNARY_EXPR 9 & ast_null_frame UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 ast_null_frame LEAF_NODE 11 ast_null_frame LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ssrc_seen = transport_rtp -> strict_rtp_state == STRICT_RTP_OPEN ; EXPR 4 ssrc_seen = transport_rtp -> strict_rtp_state == STRICT_RTP_OPEN ASSIGN 5 ssrc_seen = transport_rtp -> strict_rtp_state == STRICT_RTP_OPEN LVAL 6 ssrc_seen FIELD 7 ssrc_seen LEAF_NODE 8 ssrc_seen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 transport_rtp -> strict_rtp_state == STRICT_RTP_OPEN FIELD 7 transport_rtp -> strict_rtp_state LEAF_NODE 8 transport_rtp LEAF_NODE 8 -> LEAF_NODE 8 strict_rtp_state EQ_OPERATOR 7 == LEAF_NODE 8 == FIELD 7 STRICT_RTP_OPEN LEAF_NODE 8 STRICT_RTP_OPEN LEAF_NODE 4 ; EXPR_STATEMENT 3 position = 0 ; EXPR 4 position = 0 ASSIGN 5 position = 0 LVAL 6 position FIELD 7 position LEAF_NODE 8 position ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 position < packetwords EXPR 5 position < packetwords FIELD 6 position LEAF_NODE 7 position REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 packetwords LEAF_NODE 7 packetwords LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 unsigned int i ; VAR_DECL 7 unsigned int i TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 i LEAF_NODE 9 i LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int pt ; VAR_DECL 7 unsigned int pt TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 pt LEAF_NODE 9 pt LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int rc ; VAR_DECL 7 unsigned int rc TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 rc LEAF_NODE 9 rc LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int ssrc ; VAR_DECL 7 unsigned int ssrc TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 ssrc LEAF_NODE 9 ssrc LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int ssrc_valid ; VAR_DECL 7 unsigned int ssrc_valid TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 ssrc_valid LEAF_NODE 9 ssrc_valid LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int length ; VAR_DECL 7 unsigned int length TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 length LEAF_NODE 9 length LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int min_length ; VAR_DECL 7 unsigned int min_length TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 min_length LEAF_NODE 9 min_length LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_json * message_blob ; VAR_DECL 7 struct ast_json * message_blob TYPE 8 struct ast_json * TYPE_NAME 9 struct ast_json LEAF_NODE 10 struct LEAF_NODE 10 ast_json POINTER 9 * LEAF_NODE 10 * NAME 8 message_blob LEAF_NODE 9 message_blob LEAF_NODE 7 ; LEAF_NODE 6 RAII_VAR LEAF_NODE 6 ( LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_rtcp_report LEAF_NODE 6 * LEAF_NODE 6 , LEAF_NODE 6 rtcp_report LEAF_NODE 6 , LEAF_NODE 6 NULL LEAF_NODE 6 , LEAF_NODE 6 ao2_cleanup LEAF_NODE 6 ) LEAF_NODE 6 ; SIMPLE_DECL 6 struct ast_rtp_instance * child ; VAR_DECL 7 struct ast_rtp_instance * child TYPE 8 struct ast_rtp_instance * TYPE_NAME 9 struct ast_rtp_instance LEAF_NODE 10 struct LEAF_NODE 10 ast_rtp_instance POINTER 9 * LEAF_NODE 10 * NAME 8 child LEAF_NODE 9 child LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_rtp * rtp ; VAR_DECL 7 struct ast_rtp * rtp TYPE 8 struct ast_rtp * TYPE_NAME 9 struct ast_rtp LEAF_NODE 10 struct LEAF_NODE 10 ast_rtp POINTER 9 * LEAF_NODE 10 * NAME 8 rtp LEAF_NODE 9 rtp LEAF_NODE 7 ; EXPR_STATEMENT 6 i = position ; EXPR 7 i = position ASSIGN 8 i = position LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 position FIELD 10 position LEAF_NODE 11 position LEAF_NODE 7 ; EXPR_STATEMENT 6 first_word = ntohl ( rtcpheader [ i ] ) ; EXPR 7 first_word = ntohl ( rtcpheader [ i ] ) ASSIGN 8 first_word = ntohl ( rtcpheader [ i ] ) LVAL 9 first_word FIELD 10 first_word LEAF_NODE 11 first_word ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ntohl ( rtcpheader [ i ] ) FUNCTION_CALL 10 ntohl ( rtcpheader [ i ] ) CALLEE 11 ntohl LEAF_NODE 12 ntohl LEAF_NODE 11 ( ARGUMENT 11 rtcpheader [ i ] FIELD 12 rtcpheader [ i ] LEAF_NODE 13 rtcpheader LEAF_NODE 13 [ EXPR 13 i FIELD 14 i LEAF_NODE 15 i LEAF_NODE 13 ] LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pt = ( first_word >> RTCP_PAYLOAD_TYPE_SHIFT ) & RTCP_PAYLOAD_TYPE_MASK ; EXPR 7 pt = ( first_word >> RTCP_PAYLOAD_TYPE_SHIFT ) & RTCP_PAYLOAD_TYPE_MASK ASSIGN 8 pt = ( first_word >> RTCP_PAYLOAD_TYPE_SHIFT ) & RTCP_PAYLOAD_TYPE_MASK LVAL 9 pt FIELD 10 pt LEAF_NODE 11 pt ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( first_word >> RTCP_PAYLOAD_TYPE_SHIFT ) & RTCP_PAYLOAD_TYPE_MASK LEAF_NODE 10 ( FIELD 10 first_word LEAF_NODE 11 first_word LEAF_NODE 10 >> FIELD 10 RTCP_PAYLOAD_TYPE_SHIFT LEAF_NODE 11 RTCP_PAYLOAD_TYPE_SHIFT LEAF_NODE 10 ) LEAF_NODE 10 & FIELD 10 RTCP_PAYLOAD_TYPE_MASK LEAF_NODE 11 RTCP_PAYLOAD_TYPE_MASK LEAF_NODE 7 ; EXPR_STATEMENT 6 rc = ( first_word >> RTCP_REPORT_COUNT_SHIFT ) & RTCP_REPORT_COUNT_MASK ; EXPR 7 rc = ( first_word >> RTCP_REPORT_COUNT_SHIFT ) & RTCP_REPORT_COUNT_MASK ASSIGN 8 rc = ( first_word >> RTCP_REPORT_COUNT_SHIFT ) & RTCP_REPORT_COUNT_MASK LVAL 9 rc FIELD 10 rc LEAF_NODE 11 rc ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( first_word >> RTCP_REPORT_COUNT_SHIFT ) & RTCP_REPORT_COUNT_MASK LEAF_NODE 10 ( FIELD 10 first_word LEAF_NODE 11 first_word LEAF_NODE 10 >> FIELD 10 RTCP_REPORT_COUNT_SHIFT LEAF_NODE 11 RTCP_REPORT_COUNT_SHIFT LEAF_NODE 10 ) LEAF_NODE 10 & FIELD 10 RTCP_REPORT_COUNT_MASK LEAF_NODE 11 RTCP_REPORT_COUNT_MASK LEAF_NODE 7 ; EXPR_STATEMENT 6 length = ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 ; EXPR 7 length = ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 ASSIGN 8 length = ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 LVAL 9 length FIELD 10 length LEAF_NODE 11 length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( ( first_word >> RTCP_LENGTH_SHIFT ) & RTCP_LENGTH_MASK ) + 1 LEAF_NODE 10 ( LEAF_NODE 10 ( FIELD 10 first_word LEAF_NODE 11 first_word LEAF_NODE 10 >> FIELD 10 RTCP_LENGTH_SHIFT LEAF_NODE 11 RTCP_LENGTH_SHIFT LEAF_NODE 10 ) LEAF_NODE 10 & FIELD 10 RTCP_LENGTH_MASK LEAF_NODE 11 RTCP_LENGTH_MASK LEAF_NODE 10 ) LEAF_NODE 10 + FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; EXPR_STATEMENT 6 min_length = RTCP_HEADER_SSRC_LENGTH ; EXPR 7 min_length = RTCP_HEADER_SSRC_LENGTH ASSIGN 8 min_length = RTCP_HEADER_SSRC_LENGTH LVAL 9 min_length FIELD 10 min_length LEAF_NODE 11 min_length ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 RTCP_HEADER_SSRC_LENGTH FIELD 10 RTCP_HEADER_SSRC_LENGTH LEAF_NODE 11 RTCP_HEADER_SSRC_LENGTH LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 pt EXPR 8 pt FIELD 9 pt LEAF_NODE 10 pt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case RTCP_PT_SR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_SR LEAF_NODE 10 : EXPR_STATEMENT 9 min_length += RTCP_SR_BLOCK_WORD_LENGTH ; EXPR 10 min_length += RTCP_SR_BLOCK_WORD_LENGTH ASSIGN 11 min_length += RTCP_SR_BLOCK_WORD_LENGTH LVAL 12 min_length FIELD 13 min_length LEAF_NODE 14 min_length ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 RTCP_SR_BLOCK_WORD_LENGTH FIELD 13 RTCP_SR_BLOCK_WORD_LENGTH LEAF_NODE 14 RTCP_SR_BLOCK_WORD_LENGTH LEAF_NODE 10 ; LABEL 9 case RTCP_PT_RR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_RR LEAF_NODE 10 : EXPR_STATEMENT 9 min_length += ( rc * RTCP_RR_BLOCK_WORD_LENGTH ) ; EXPR 10 min_length += ( rc * RTCP_RR_BLOCK_WORD_LENGTH ) ASSIGN 11 min_length += ( rc * RTCP_RR_BLOCK_WORD_LENGTH ) LVAL 12 min_length FIELD 13 min_length LEAF_NODE 14 min_length ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 ( rc * RTCP_RR_BLOCK_WORD_LENGTH ) LEAF_NODE 13 ( FIELD 13 rc LEAF_NODE 14 rc LEAF_NODE 13 * FIELD 13 RTCP_RR_BLOCK_WORD_LENGTH LEAF_NODE 14 RTCP_RR_BLOCK_WORD_LENGTH LEAF_NODE 13 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_FUR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_FUR LEAF_NODE 10 : LABEL 9 case RTCP_PT_PSFB : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_PSFB LEAF_NODE 10 : JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_SDES : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_SDES LEAF_NODE 10 : LABEL 9 case RTCP_PT_BYE : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_BYE LEAF_NODE 10 : EXPR_STATEMENT 9 min_length = length ; EXPR 10 min_length = length ASSIGN 11 min_length = length LVAL 12 min_length FIELD 13 min_length LEAF_NODE 14 min_length ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 length FIELD 13 length LEAF_NODE 14 length LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : EXPR_STATEMENT 9 ast_debug ( 1 , \"%p -- RTCP from %s: %u(%s) skipping record\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) ) ; EXPR 10 ast_debug ( 1 , \"%p -- RTCP from %s: %u(%s) skipping record\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) ) FUNCTION_CALL 11 ast_debug ( 1 , \"%p -- RTCP from %s: %u(%s) skipping record\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 \"%p -- RTCP from %s: %u(%s) skipping record\\n\" FIELD 13 \"%p -- RTCP from %s: %u(%s) skipping record\\n\" LEAF_NODE 14 \"%p -- RTCP from %s: %u(%s) skipping record\\n\" LEAF_NODE 12 , ARGUMENT 12 transport_rtp FIELD 13 transport_rtp LEAF_NODE 14 transport_rtp LEAF_NODE 12 , ARGUMENT 12 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 13 ast_sockaddr_stringify ( addr ) CALLEE 14 ast_sockaddr_stringify LEAF_NODE 15 ast_sockaddr_stringify LEAF_NODE 14 ( ARGUMENT 14 addr FIELD 15 addr LEAF_NODE 16 addr LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 pt FIELD 13 pt LEAF_NODE 14 pt LEAF_NODE 12 , ARGUMENT 12 rtcp_payload_type2str ( pt ) FUNCTION_CALL 13 rtcp_payload_type2str ( pt ) CALLEE 14 rtcp_payload_type2str LEAF_NODE 15 rtcp_payload_type2str LEAF_NODE 14 ( ARGUMENT 14 pt FIELD 15 pt LEAF_NODE 16 pt LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rtcp_debug_test_addr ( addr ) EXPR 11 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 12 rtcp_debug_test_addr ( addr ) CALLEE 13 rtcp_debug_test_addr LEAF_NODE 14 rtcp_debug_test_addr LEAF_NODE 13 ( ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_verbose ( \"\\n\" ) ; EXPR 13 ast_verbose ( \"\\n\" ) FUNCTION_CALL 14 ast_verbose ( \"\\n\" ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"\\n\" FIELD 16 \"\\n\" LEAF_NODE 17 \"\\n\" LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ast_verbose ( \"RTCP from %s: %u(%s) skipping record\\n\" , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) ) ; EXPR 13 ast_verbose ( \"RTCP from %s: %u(%s) skipping record\\n\" , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) ) FUNCTION_CALL 14 ast_verbose ( \"RTCP from %s: %u(%s) skipping record\\n\" , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"RTCP from %s: %u(%s) skipping record\\n\" FIELD 16 \"RTCP from %s: %u(%s) skipping record\\n\" LEAF_NODE 17 \"RTCP from %s: %u(%s) skipping record\\n\" LEAF_NODE 15 , ARGUMENT 15 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 16 ast_sockaddr_stringify ( addr ) CALLEE 17 ast_sockaddr_stringify LEAF_NODE 18 ast_sockaddr_stringify LEAF_NODE 17 ( ARGUMENT 17 addr FIELD 18 addr LEAF_NODE 19 addr LEAF_NODE 17 ) LEAF_NODE 15 , ARGUMENT 15 pt FIELD 16 pt LEAF_NODE 17 pt LEAF_NODE 15 , ARGUMENT 15 rtcp_payload_type2str ( pt ) FUNCTION_CALL 16 rtcp_payload_type2str ( pt ) CALLEE 17 rtcp_payload_type2str LEAF_NODE 18 rtcp_payload_type2str LEAF_NODE 17 ( ARGUMENT 17 pt FIELD 18 pt LEAF_NODE 19 pt LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 position += length ; EXPR 10 position += length ASSIGN 11 position += length LVAL 12 position FIELD 13 position LEAF_NODE 14 position ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 length FIELD 13 length LEAF_NODE 14 length LEAF_NODE 10 ; JUMP_STATEMENT 9 continue DESTINATION ; KEYWORD 10 continue LEAF_NODE 11 continue LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 length < min_length EXPR 8 length < min_length FIELD 9 length LEAF_NODE 10 length REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 min_length LEAF_NODE 10 min_length LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_debug ( 1 , \"%p -- RTCP from %s: %u(%s) length field less than expected minimum. Min:%u Got:%u\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) , min_length - 1 , length - 1 ) ; EXPR 10 ast_debug ( 1 , \"%p -- RTCP from %s: %u(%s) length field less than expected minimum. Min:%u Got:%u\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) , min_length - 1 , length - 1 ) FUNCTION_CALL 11 ast_debug ( 1 , \"%p -- RTCP from %s: %u(%s) length field less than expected minimum. Min:%u Got:%u\\n\" , transport_rtp , ast_sockaddr_stringify ( addr ) , pt , rtcp_payload_type2str ( pt ) , min_length - 1 , length - 1 ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 \"%p -- RTCP from %s: %u(%s) length field less than expected minimum. Min:%u Got:%u\\n\" FIELD 13 \"%p -- RTCP from %s: %u(%s) length field less than expected minimum. Min:%u Got:%u\\n\" LEAF_NODE 14 \"%p -- RTCP from %s: %u(%s) length field less than expected minimum. Min:%u Got:%u\\n\" LEAF_NODE 12 , ARGUMENT 12 transport_rtp FIELD 13 transport_rtp LEAF_NODE 14 transport_rtp LEAF_NODE 12 , ARGUMENT 12 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 13 ast_sockaddr_stringify ( addr ) CALLEE 14 ast_sockaddr_stringify LEAF_NODE 15 ast_sockaddr_stringify LEAF_NODE 14 ( ARGUMENT 14 addr FIELD 15 addr LEAF_NODE 16 addr LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 pt FIELD 13 pt LEAF_NODE 14 pt LEAF_NODE 12 , ARGUMENT 12 rtcp_payload_type2str ( pt ) FUNCTION_CALL 13 rtcp_payload_type2str ( pt ) CALLEE 14 rtcp_payload_type2str LEAF_NODE 15 rtcp_payload_type2str LEAF_NODE 14 ( ARGUMENT 14 pt FIELD 15 pt LEAF_NODE 16 pt LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 min_length - 1 FIELD 13 min_length LEAF_NODE 14 min_length LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 length - 1 FIELD 13 length LEAF_NODE 14 length LEAF_NODE 13 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return & ast_null_frame ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 & ast_null_frame EXPR 11 & ast_null_frame UNARY_EXPR 12 & ast_null_frame UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 ast_null_frame LEAF_NODE 14 ast_null_frame LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ssrc_valid = 1 ; EXPR 7 ssrc_valid = 1 ASSIGN 8 ssrc_valid = 1 LVAL 9 ssrc_valid FIELD 10 ssrc_valid LEAF_NODE 11 ssrc_valid ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 pt EXPR 8 pt FIELD 9 pt LEAF_NODE 10 pt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case RTCP_PT_SR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_SR LEAF_NODE 10 : LABEL 9 case RTCP_PT_RR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_RR LEAF_NODE 10 : EXPR_STATEMENT 9 rtcp_report = ast_rtp_rtcp_report_alloc ( rc ) ; EXPR 10 rtcp_report = ast_rtp_rtcp_report_alloc ( rc ) ASSIGN 11 rtcp_report = ast_rtp_rtcp_report_alloc ( rc ) LVAL 12 rtcp_report FIELD 13 rtcp_report LEAF_NODE 14 rtcp_report ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ast_rtp_rtcp_report_alloc ( rc ) FUNCTION_CALL 13 ast_rtp_rtcp_report_alloc ( rc ) CALLEE 14 ast_rtp_rtcp_report_alloc LEAF_NODE 15 ast_rtp_rtcp_report_alloc LEAF_NODE 14 ( ARGUMENT 14 rc FIELD 15 rc LEAF_NODE 16 rc LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! rtcp_report EXPR 11 ! rtcp_report UNARY_EXPR 12 ! rtcp_report UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FIELD 13 rtcp_report LEAF_NODE 14 rtcp_report LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 JUMP_STATEMENT 12 return & ast_null_frame ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 & ast_null_frame EXPR 14 & ast_null_frame UNARY_EXPR 15 & ast_null_frame UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ast_null_frame LEAF_NODE 17 ast_null_frame LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 rtcp_report -> reception_report_count = rc ; EXPR 10 rtcp_report -> reception_report_count = rc ASSIGN 11 rtcp_report -> reception_report_count = rc LVAL 12 rtcp_report -> reception_report_count FIELD 13 rtcp_report -> reception_report_count LEAF_NODE 14 rtcp_report LEAF_NODE 14 -> LEAF_NODE 14 reception_report_count ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 rc FIELD 13 rc LEAF_NODE 14 rc LEAF_NODE 10 ; EXPR_STATEMENT 9 ssrc = ntohl ( rtcpheader [ i + 1 ] ) ; EXPR 10 ssrc = ntohl ( rtcpheader [ i + 1 ] ) ASSIGN 11 ssrc = ntohl ( rtcpheader [ i + 1 ] ) LVAL 12 ssrc FIELD 13 ssrc LEAF_NODE 14 ssrc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ntohl ( rtcpheader [ i + 1 ] ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i + 1 ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i + 1 ] FIELD 15 rtcpheader [ i + 1 ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i + 1 FIELD 17 i LEAF_NODE 18 i LEAF_NODE 17 + FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 rtcp_report -> ssrc = ssrc ; EXPR 10 rtcp_report -> ssrc = ssrc ASSIGN 11 rtcp_report -> ssrc = ssrc LVAL 12 rtcp_report -> ssrc FIELD 13 rtcp_report -> ssrc LEAF_NODE 14 rtcp_report LEAF_NODE 14 -> LEAF_NODE 14 ssrc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ssrc FIELD 13 ssrc LEAF_NODE 14 ssrc LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_FUR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_FUR LEAF_NODE 10 : LABEL 9 case RTCP_PT_PSFB : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_PSFB LEAF_NODE 10 : EXPR_STATEMENT 9 ssrc = ntohl ( rtcpheader [ i + 1 ] ) ; EXPR 10 ssrc = ntohl ( rtcpheader [ i + 1 ] ) ASSIGN 11 ssrc = ntohl ( rtcpheader [ i + 1 ] ) LVAL 12 ssrc FIELD 13 ssrc LEAF_NODE 14 ssrc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ntohl ( rtcpheader [ i + 1 ] ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i + 1 ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i + 1 ] FIELD 15 rtcpheader [ i + 1 ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i + 1 FIELD 17 i LEAF_NODE 18 i LEAF_NODE 17 + FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_SDES : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_SDES LEAF_NODE 10 : LABEL 9 case RTCP_PT_BYE : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_BYE LEAF_NODE 10 : LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : EXPR_STATEMENT 9 ssrc = 0 ; EXPR 10 ssrc = 0 ASSIGN 11 ssrc = 0 LVAL 12 ssrc FIELD 13 ssrc LEAF_NODE 14 ssrc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 ssrc_valid = 0 ; EXPR 10 ssrc_valid = 0 ASSIGN 11 ssrc_valid = 0 LVAL 12 ssrc_valid FIELD 13 ssrc_valid LEAF_NODE 14 ssrc_valid ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 rtcp_debug_test_addr ( addr ) EXPR 8 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 9 rtcp_debug_test_addr ( addr ) CALLEE 10 rtcp_debug_test_addr LEAF_NODE 11 rtcp_debug_test_addr LEAF_NODE 10 ( ARGUMENT 10 addr FIELD 11 addr LEAF_NODE 12 addr LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_verbose ( \"\\n\" ) ; EXPR 10 ast_verbose ( \"\\n\" ) FUNCTION_CALL 11 ast_verbose ( \"\\n\" ) CALLEE 12 ast_verbose LEAF_NODE 13 ast_verbose LEAF_NODE 12 ( ARGUMENT 12 \"\\n\" FIELD 13 \"\\n\" LEAF_NODE 14 \"\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_verbose ( \"RTCP from %s\\n\" , ast_sockaddr_stringify ( addr ) ) ; EXPR 10 ast_verbose ( \"RTCP from %s\\n\" , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 11 ast_verbose ( \"RTCP from %s\\n\" , ast_sockaddr_stringify ( addr ) ) CALLEE 12 ast_verbose LEAF_NODE 13 ast_verbose LEAF_NODE 12 ( ARGUMENT 12 \"RTCP from %s\\n\" FIELD 13 \"RTCP from %s\\n\" LEAF_NODE 14 \"RTCP from %s\\n\" LEAF_NODE 12 , ARGUMENT 12 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 13 ast_sockaddr_stringify ( addr ) CALLEE 14 ast_sockaddr_stringify LEAF_NODE 15 ast_sockaddr_stringify LEAF_NODE 14 ( ARGUMENT 14 addr FIELD 15 addr LEAF_NODE 16 addr LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_verbose ( \"PT: %u(%s)\\n\" , pt , rtcp_payload_type2str ( pt ) ) ; EXPR 10 ast_verbose ( \"PT: %u(%s)\\n\" , pt , rtcp_payload_type2str ( pt ) ) FUNCTION_CALL 11 ast_verbose ( \"PT: %u(%s)\\n\" , pt , rtcp_payload_type2str ( pt ) ) CALLEE 12 ast_verbose LEAF_NODE 13 ast_verbose LEAF_NODE 12 ( ARGUMENT 12 \"PT: %u(%s)\\n\" FIELD 13 \"PT: %u(%s)\\n\" LEAF_NODE 14 \"PT: %u(%s)\\n\" LEAF_NODE 12 , ARGUMENT 12 pt FIELD 13 pt LEAF_NODE 14 pt LEAF_NODE 12 , ARGUMENT 12 rtcp_payload_type2str ( pt ) FUNCTION_CALL 13 rtcp_payload_type2str ( pt ) CALLEE 14 rtcp_payload_type2str LEAF_NODE 15 rtcp_payload_type2str LEAF_NODE 14 ( ARGUMENT 14 pt FIELD 15 pt LEAF_NODE 16 pt LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_verbose ( \"Reception reports: %u\\n\" , rc ) ; EXPR 10 ast_verbose ( \"Reception reports: %u\\n\" , rc ) FUNCTION_CALL 11 ast_verbose ( \"Reception reports: %u\\n\" , rc ) CALLEE 12 ast_verbose LEAF_NODE 13 ast_verbose LEAF_NODE 12 ( ARGUMENT 12 \"Reception reports: %u\\n\" FIELD 13 \"Reception reports: %u\\n\" LEAF_NODE 14 \"Reception reports: %u\\n\" LEAF_NODE 12 , ARGUMENT 12 rc FIELD 13 rc LEAF_NODE 14 rc LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_verbose ( \"SSRC of sender: %u\\n\" , ssrc ) ; EXPR 10 ast_verbose ( \"SSRC of sender: %u\\n\" , ssrc ) FUNCTION_CALL 11 ast_verbose ( \"SSRC of sender: %u\\n\" , ssrc ) CALLEE 12 ast_verbose LEAF_NODE 13 ast_verbose LEAF_NODE 12 ( ARGUMENT 12 \"SSRC of sender: %u\\n\" FIELD 13 \"SSRC of sender: %u\\n\" LEAF_NODE 14 \"SSRC of sender: %u\\n\" LEAF_NODE 12 , ARGUMENT 12 ssrc FIELD 13 ssrc LEAF_NODE 14 ssrc LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ssrc_valid EXPR 8 ssrc_valid FIELD 9 ssrc_valid LEAF_NODE 10 ssrc_valid LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 child = rtp_find_instance_by_ssrc ( transport , transport_rtp , ssrc ) ; EXPR 10 child = rtp_find_instance_by_ssrc ( transport , transport_rtp , ssrc ) ASSIGN 11 child = rtp_find_instance_by_ssrc ( transport , transport_rtp , ssrc ) LVAL 12 child FIELD 13 child LEAF_NODE 14 child ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 rtp_find_instance_by_ssrc ( transport , transport_rtp , ssrc ) FUNCTION_CALL 13 rtp_find_instance_by_ssrc ( transport , transport_rtp , ssrc ) CALLEE 14 rtp_find_instance_by_ssrc LEAF_NODE 15 rtp_find_instance_by_ssrc LEAF_NODE 14 ( ARGUMENT 14 transport FIELD 15 transport LEAF_NODE 16 transport LEAF_NODE 14 , ARGUMENT 14 transport_rtp FIELD 15 transport_rtp LEAF_NODE 16 transport_rtp LEAF_NODE 14 , ARGUMENT 14 ssrc FIELD 15 ssrc LEAF_NODE 16 ssrc LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 child && child != transport EXPR 11 child && child != transport AND 12 child && child != transport EXPR 13 child FIELD 14 child LEAF_NODE 15 child LEAF_NODE 13 && EXPR 13 child != transport FIELD 14 child LEAF_NODE 15 child EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 transport LEAF_NODE 15 transport LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ao2_lock ( child ) ; EXPR 13 ao2_lock ( child ) FUNCTION_CALL 14 ao2_lock ( child ) CALLEE 15 ao2_lock LEAF_NODE 16 ao2_lock LEAF_NODE 15 ( ARGUMENT 15 child FIELD 16 child LEAF_NODE 17 child LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 instance = child ; EXPR 13 instance = child ASSIGN 14 instance = child LVAL 15 instance FIELD 16 instance LEAF_NODE 17 instance ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 child FIELD 16 child LEAF_NODE 17 child LEAF_NODE 13 ; EXPR_STATEMENT 12 rtp = ast_rtp_instance_get_data ( instance ) ; EXPR 13 rtp = ast_rtp_instance_get_data ( instance ) ASSIGN 14 rtp = ast_rtp_instance_get_data ( instance ) LVAL 15 rtp FIELD 16 rtp LEAF_NODE 17 rtp ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ast_rtp_instance_get_data ( instance ) FUNCTION_CALL 16 ast_rtp_instance_get_data ( instance ) CALLEE 17 ast_rtp_instance_get_data LEAF_NODE 18 ast_rtp_instance_get_data LEAF_NODE 17 ( ARGUMENT 17 instance FIELD 18 instance LEAF_NODE 19 instance LEAF_NODE 17 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 child = NULL ; EXPR 13 child = NULL ASSIGN 14 child = NULL LVAL 15 child FIELD 16 child LEAF_NODE 17 child ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 13 ; EXPR_STATEMENT 12 rtp = transport_rtp ; EXPR 13 rtp = transport_rtp ASSIGN 14 rtp = transport_rtp LVAL 15 rtp FIELD 16 rtp LEAF_NODE 17 rtp ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 transport_rtp FIELD 16 transport_rtp LEAF_NODE 17 transport_rtp LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 child = NULL ; EXPR 10 child = NULL ASSIGN 11 child = NULL LVAL 12 child FIELD 13 child LEAF_NODE 14 child ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 10 ; EXPR_STATEMENT 9 rtp = transport_rtp ; EXPR 10 rtp = transport_rtp ASSIGN 11 rtp = transport_rtp LVAL 12 rtp FIELD 13 rtp LEAF_NODE 14 rtp ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 transport_rtp FIELD 13 transport_rtp LEAF_NODE 14 transport_rtp LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ssrc_valid && rtp -> themssrc_valid EXPR 8 ssrc_valid && rtp -> themssrc_valid AND 9 ssrc_valid && rtp -> themssrc_valid EXPR 10 ssrc_valid FIELD 11 ssrc_valid LEAF_NODE 12 ssrc_valid LEAF_NODE 10 && EXPR 10 rtp -> themssrc_valid FIELD 11 rtp -> themssrc_valid LEAF_NODE 12 rtp LEAF_NODE 12 -> LEAF_NODE 12 themssrc_valid LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ssrc != rtp -> themssrc EXPR 11 ssrc != rtp -> themssrc FIELD 12 ssrc LEAF_NODE 13 ssrc EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 rtp -> themssrc LEAF_NODE 13 rtp LEAF_NODE 13 -> LEAF_NODE 13 themssrc LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 position += length ; EXPR 13 position += length ASSIGN 14 position += length LVAL 15 position FIELD 16 position LEAF_NODE 17 position ASSIGN_OP 15 += LEAF_NODE 16 += RVAL 15 length FIELD 16 length LEAF_NODE 17 length LEAF_NODE 13 ; EXPR_STATEMENT 12 ast_debug ( 1 , \"%p -- RTCP from %s: Skipping record, received SSRC '%u' != expected '%u'\\n\" , rtp , ast_sockaddr_stringify ( addr ) , ssrc , rtp -> themssrc ) ; EXPR 13 ast_debug ( 1 , \"%p -- RTCP from %s: Skipping record, received SSRC '%u' != expected '%u'\\n\" , rtp , ast_sockaddr_stringify ( addr ) , ssrc , rtp -> themssrc ) FUNCTION_CALL 14 ast_debug ( 1 , \"%p -- RTCP from %s: Skipping record, received SSRC '%u' != expected '%u'\\n\" , rtp , ast_sockaddr_stringify ( addr ) , ssrc , rtp -> themssrc ) CALLEE 15 ast_debug LEAF_NODE 16 ast_debug LEAF_NODE 15 ( ARGUMENT 15 1 FIELD 16 1 LEAF_NODE 17 1 LEAF_NODE 15 , ARGUMENT 15 \"%p -- RTCP from %s: Skipping record, received SSRC '%u' != expected '%u'\\n\" FIELD 16 \"%p -- RTCP from %s: Skipping record, received SSRC '%u' != expected '%u'\\n\" LEAF_NODE 17 \"%p -- RTCP from %s: Skipping record, received SSRC '%u' != expected '%u'\\n\" LEAF_NODE 15 , ARGUMENT 15 rtp FIELD 16 rtp LEAF_NODE 17 rtp LEAF_NODE 15 , ARGUMENT 15 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 16 ast_sockaddr_stringify ( addr ) CALLEE 17 ast_sockaddr_stringify LEAF_NODE 18 ast_sockaddr_stringify LEAF_NODE 17 ( ARGUMENT 17 addr FIELD 18 addr LEAF_NODE 19 addr LEAF_NODE 17 ) LEAF_NODE 15 , ARGUMENT 15 ssrc FIELD 16 ssrc LEAF_NODE 17 ssrc LEAF_NODE 15 , ARGUMENT 15 rtp -> themssrc FIELD 16 rtp -> themssrc LEAF_NODE 17 rtp LEAF_NODE 17 -> LEAF_NODE 17 themssrc LEAF_NODE 15 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 child EXPR 14 child FIELD 15 child LEAF_NODE 16 child LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ao2_unlock ( child ) ; EXPR 16 ao2_unlock ( child ) FUNCTION_CALL 17 ao2_unlock ( child ) CALLEE 18 ao2_unlock LEAF_NODE 19 ao2_unlock LEAF_NODE 18 ( ARGUMENT 18 child FIELD 19 child LEAF_NODE 20 child LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } JUMP_STATEMENT 12 continue DESTINATION ; KEYWORD 13 continue LEAF_NODE 14 continue LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 ssrc_seen = 1 ; EXPR 10 ssrc_seen = 1 ASSIGN 11 ssrc_seen = 1 LVAL 12 ssrc_seen FIELD 13 ssrc_seen LEAF_NODE 14 ssrc_seen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ssrc_seen && ast_rtp_instance_get_prop ( instance , AST_RTP_PROPERTY_NAT ) EXPR 8 ssrc_seen && ast_rtp_instance_get_prop ( instance , AST_RTP_PROPERTY_NAT ) AND 9 ssrc_seen && ast_rtp_instance_get_prop ( instance , AST_RTP_PROPERTY_NAT ) EXPR 10 ssrc_seen FIELD 11 ssrc_seen LEAF_NODE 12 ssrc_seen LEAF_NODE 10 && EXPR 10 ast_rtp_instance_get_prop ( instance , AST_RTP_PROPERTY_NAT ) FUNCTION_CALL 11 ast_rtp_instance_get_prop ( instance , AST_RTP_PROPERTY_NAT ) CALLEE 12 ast_rtp_instance_get_prop LEAF_NODE 13 ast_rtp_instance_get_prop LEAF_NODE 12 ( ARGUMENT 12 instance FIELD 13 instance LEAF_NODE 14 instance LEAF_NODE 12 , ARGUMENT 12 AST_RTP_PROPERTY_NAT FIELD 13 AST_RTP_PROPERTY_NAT LEAF_NODE 14 AST_RTP_PROPERTY_NAT LEAF_NODE 12 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ast_sockaddr_cmp ( & rtp -> rtcp -> them , addr ) EXPR 11 ast_sockaddr_cmp ( & rtp -> rtcp -> them , addr ) FUNCTION_CALL 12 ast_sockaddr_cmp ( & rtp -> rtcp -> them , addr ) CALLEE 13 ast_sockaddr_cmp LEAF_NODE 14 ast_sockaddr_cmp LEAF_NODE 13 ( ARGUMENT 13 & rtp -> rtcp -> them UNARY_EXPR 14 & rtp -> rtcp -> them UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 rtp -> rtcp -> them LEAF_NODE 16 rtp LEAF_NODE 16 -> LEAF_NODE 16 rtcp LEAF_NODE 16 -> LEAF_NODE 16 them LEAF_NODE 13 , ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_sockaddr_copy ( & rtp -> rtcp -> them , addr ) ; EXPR 13 ast_sockaddr_copy ( & rtp -> rtcp -> them , addr ) FUNCTION_CALL 14 ast_sockaddr_copy ( & rtp -> rtcp -> them , addr ) CALLEE 15 ast_sockaddr_copy LEAF_NODE 16 ast_sockaddr_copy LEAF_NODE 15 ( ARGUMENT 15 & rtp -> rtcp -> them UNARY_EXPR 16 & rtp -> rtcp -> them UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 rtp -> rtcp -> them LEAF_NODE 18 rtp LEAF_NODE 18 -> LEAF_NODE 18 rtcp LEAF_NODE 18 -> LEAF_NODE 18 them LEAF_NODE 15 , ARGUMENT 15 addr FIELD 16 addr LEAF_NODE 17 addr LEAF_NODE 15 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 rtpdebug EXPR 14 rtpdebug FIELD 15 rtpdebug LEAF_NODE 16 rtpdebug LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ast_debug ( 0 , \"RTCP NAT: Got RTCP from other end. Now sending to address %s\\n\" , ast_sockaddr_stringify ( addr ) ) ; EXPR 16 ast_debug ( 0 , \"RTCP NAT: Got RTCP from other end. Now sending to address %s\\n\" , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 17 ast_debug ( 0 , \"RTCP NAT: Got RTCP from other end. Now sending to address %s\\n\" , ast_sockaddr_stringify ( addr ) ) CALLEE 18 ast_debug LEAF_NODE 19 ast_debug LEAF_NODE 18 ( ARGUMENT 18 0 FIELD 19 0 LEAF_NODE 20 0 LEAF_NODE 18 , ARGUMENT 18 \"RTCP NAT: Got RTCP from other end. Now sending to address %s\\n\" FIELD 19 \"RTCP NAT: Got RTCP from other end. Now sending to address %s\\n\" LEAF_NODE 20 \"RTCP NAT: Got RTCP from other end. Now sending to address %s\\n\" LEAF_NODE 18 , ARGUMENT 18 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 19 ast_sockaddr_stringify ( addr ) CALLEE 20 ast_sockaddr_stringify LEAF_NODE 21 ast_sockaddr_stringify LEAF_NODE 20 ( ARGUMENT 20 addr FIELD 21 addr LEAF_NODE 22 addr LEAF_NODE 20 ) LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } LEAF_NODE 11 } LEAF_NODE 8 } EXPR_STATEMENT 6 i += RTCP_HEADER_SSRC_LENGTH ; EXPR 7 i += RTCP_HEADER_SSRC_LENGTH ASSIGN 8 i += RTCP_HEADER_SSRC_LENGTH LVAL 9 i FIELD 10 i LEAF_NODE 11 i ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 RTCP_HEADER_SSRC_LENGTH FIELD 10 RTCP_HEADER_SSRC_LENGTH LEAF_NODE 11 RTCP_HEADER_SSRC_LENGTH LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 pt EXPR 8 pt FIELD 9 pt LEAF_NODE 10 pt LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case RTCP_PT_SR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_SR LEAF_NODE 10 : EXPR_STATEMENT 9 gettimeofday ( & rtp -> rtcp -> rxlsr , NULL ) ; EXPR 10 gettimeofday ( & rtp -> rtcp -> rxlsr , NULL ) FUNCTION_CALL 11 gettimeofday ( & rtp -> rtcp -> rxlsr , NULL ) CALLEE 12 gettimeofday LEAF_NODE 13 gettimeofday LEAF_NODE 12 ( ARGUMENT 12 & rtp -> rtcp -> rxlsr UNARY_EXPR 13 & rtp -> rtcp -> rxlsr UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 rtp -> rtcp -> rxlsr LEAF_NODE 15 rtp LEAF_NODE 15 -> LEAF_NODE 15 rtcp LEAF_NODE 15 -> LEAF_NODE 15 rxlsr LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 rtp -> rtcp -> themrxlsr = ( ( ntohl ( rtcpheader [ i ] ) & 0x0000ffff ) << 16 ) | ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xffff0000 ) >> 16 ) ; EXPR 10 rtp -> rtcp -> themrxlsr = ( ( ntohl ( rtcpheader [ i ] ) & 0x0000ffff ) << 16 ) | ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xffff0000 ) >> 16 ) ASSIGN 11 rtp -> rtcp -> themrxlsr = ( ( ntohl ( rtcpheader [ i ] ) & 0x0000ffff ) << 16 ) | ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xffff0000 ) >> 16 ) LVAL 12 rtp -> rtcp -> themrxlsr FIELD 13 rtp -> rtcp -> themrxlsr LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 rtcp LEAF_NODE 14 -> LEAF_NODE 14 themrxlsr ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( ( ntohl ( rtcpheader [ i ] ) & 0x0000ffff ) << 16 ) | ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xffff0000 ) >> 16 ) BIT_OR 13 ( ( ntohl ( rtcpheader [ i ] ) & 0x0000ffff ) << 16 ) | ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xffff0000 ) >> 16 ) BIT_OR_ELEM 14 ( ( ntohl ( rtcpheader [ i ] ) & 0x0000ffff ) << 16 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FUNCTION_CALL 15 ntohl ( rtcpheader [ i ] ) CALLEE 16 ntohl LEAF_NODE 17 ntohl LEAF_NODE 16 ( ARGUMENT 16 rtcpheader [ i ] FIELD 17 rtcpheader [ i ] LEAF_NODE 18 rtcpheader LEAF_NODE 18 [ EXPR 18 i FIELD 19 i LEAF_NODE 20 i LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 15 & FIELD 15 0x0000ffff LEAF_NODE 16 0x0000ffff LEAF_NODE 15 ) LEAF_NODE 15 << FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 14 | BIT_OR_ELEM 14 ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xffff0000 ) >> 16 ) LEAF_NODE 15 ( LEAF_NODE 15 ( FUNCTION_CALL 15 ntohl ( rtcpheader [ i + 1 ] ) CALLEE 16 ntohl LEAF_NODE 17 ntohl LEAF_NODE 16 ( ARGUMENT 16 rtcpheader [ i + 1 ] FIELD 17 rtcpheader [ i + 1 ] LEAF_NODE 18 rtcpheader LEAF_NODE 18 [ EXPR 18 i + 1 FIELD 19 i LEAF_NODE 20 i LEAF_NODE 19 + FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 ] LEAF_NODE 16 ) LEAF_NODE 15 & FIELD 15 0xffff0000 LEAF_NODE 16 0xffff0000 LEAF_NODE 15 ) LEAF_NODE 15 >> FIELD 15 16 LEAF_NODE 16 16 LEAF_NODE 15 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 rtp -> rtcp -> spc = ntohl ( rtcpheader [ i + 3 ] ) ; EXPR 10 rtp -> rtcp -> spc = ntohl ( rtcpheader [ i + 3 ] ) ASSIGN 11 rtp -> rtcp -> spc = ntohl ( rtcpheader [ i + 3 ] ) LVAL 12 rtp -> rtcp -> spc FIELD 13 rtp -> rtcp -> spc LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 rtcp LEAF_NODE 14 -> LEAF_NODE 14 spc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ntohl ( rtcpheader [ i + 3 ] ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i + 3 ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i + 3 ] FIELD 15 rtcpheader [ i + 3 ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i + 3 FIELD 17 i LEAF_NODE 18 i LEAF_NODE 17 + FIELD 17 3 LEAF_NODE 18 3 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 rtp -> rtcp -> soc = ntohl ( rtcpheader [ i + 4 ] ) ; EXPR 10 rtp -> rtcp -> soc = ntohl ( rtcpheader [ i + 4 ] ) ASSIGN 11 rtp -> rtcp -> soc = ntohl ( rtcpheader [ i + 4 ] ) LVAL 12 rtp -> rtcp -> soc FIELD 13 rtp -> rtcp -> soc LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 rtcp LEAF_NODE 14 -> LEAF_NODE 14 soc ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ntohl ( rtcpheader [ i + 4 ] ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i + 4 ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i + 4 ] FIELD 15 rtcpheader [ i + 4 ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i + 4 FIELD 17 i LEAF_NODE 18 i LEAF_NODE 17 + FIELD 17 4 LEAF_NODE 18 4 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 rtcp_report -> type = RTCP_PT_SR ; EXPR 10 rtcp_report -> type = RTCP_PT_SR ASSIGN 11 rtcp_report -> type = RTCP_PT_SR LVAL 12 rtcp_report -> type FIELD 13 rtcp_report -> type LEAF_NODE 14 rtcp_report LEAF_NODE 14 -> LEAF_NODE 14 type ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 RTCP_PT_SR FIELD 13 RTCP_PT_SR LEAF_NODE 14 RTCP_PT_SR LEAF_NODE 10 ; EXPR_STATEMENT 9 rtcp_report -> sender_information . packet_count = rtp -> rtcp -> spc ; EXPR 10 rtcp_report -> sender_information . packet_count = rtp -> rtcp -> spc ASSIGN 11 rtcp_report -> sender_information . packet_count = rtp -> rtcp -> spc LVAL 12 rtcp_report -> sender_information . packet_count FIELD 13 rtcp_report -> sender_information . packet_count LEAF_NODE 14 rtcp_report LEAF_NODE 14 -> LEAF_NODE 14 sender_information LEAF_NODE 14 . LEAF_NODE 14 packet_count ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 rtp -> rtcp -> spc FIELD 13 rtp -> rtcp -> spc LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 rtcp LEAF_NODE 14 -> LEAF_NODE 14 spc LEAF_NODE 10 ; EXPR_STATEMENT 9 rtcp_report -> sender_information . octet_count = rtp -> rtcp -> soc ; EXPR 10 rtcp_report -> sender_information . octet_count = rtp -> rtcp -> soc ASSIGN 11 rtcp_report -> sender_information . octet_count = rtp -> rtcp -> soc LVAL 12 rtcp_report -> sender_information . octet_count FIELD 13 rtcp_report -> sender_information . octet_count LEAF_NODE 14 rtcp_report LEAF_NODE 14 -> LEAF_NODE 14 sender_information LEAF_NODE 14 . LEAF_NODE 14 octet_count ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 rtp -> rtcp -> soc FIELD 13 rtp -> rtcp -> soc LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 rtcp LEAF_NODE 14 -> LEAF_NODE 14 soc LEAF_NODE 10 ; EXPR_STATEMENT 9 ntp2timeval ( ( unsigned int ) ntohl ( rtcpheader [ i ] ) , ( unsigned int ) ntohl ( rtcpheader [ i + 1 ] ) , & rtcp_report -> sender_information . ntp_timestamp ) ; EXPR 10 ntp2timeval ( ( unsigned int ) ntohl ( rtcpheader [ i ] ) , ( unsigned int ) ntohl ( rtcpheader [ i + 1 ] ) , & rtcp_report -> sender_information . ntp_timestamp ) FUNCTION_CALL 11 ntp2timeval ( ( unsigned int ) ntohl ( rtcpheader [ i ] ) , ( unsigned int ) ntohl ( rtcpheader [ i + 1 ] ) , & rtcp_report -> sender_information . ntp_timestamp ) CALLEE 12 ntp2timeval LEAF_NODE 13 ntp2timeval LEAF_NODE 12 ( ARGUMENT 12 ( unsigned int ) ntohl ( rtcpheader [ i ] ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i ] FIELD 15 rtcpheader [ i ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i FIELD 17 i LEAF_NODE 18 i LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 ( unsigned int ) ntohl ( rtcpheader [ i + 1 ] ) LEAF_NODE 13 ( TYPE_NAME 13 unsigned int LEAF_NODE 14 unsigned LEAF_NODE 14 int LEAF_NODE 13 ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i + 1 ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i + 1 ] FIELD 15 rtcpheader [ i + 1 ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i + 1 FIELD 17 i LEAF_NODE 18 i LEAF_NODE 17 + FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 & rtcp_report -> sender_information . ntp_timestamp UNARY_EXPR 13 & rtcp_report -> sender_information . ntp_timestamp UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 rtcp_report -> sender_information . ntp_timestamp LEAF_NODE 15 rtcp_report LEAF_NODE 15 -> LEAF_NODE 15 sender_information LEAF_NODE 15 . LEAF_NODE 15 ntp_timestamp LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 rtcp_report -> sender_information . rtp_timestamp = ntohl ( rtcpheader [ i + 2 ] ) ; EXPR 10 rtcp_report -> sender_information . rtp_timestamp = ntohl ( rtcpheader [ i + 2 ] ) ASSIGN 11 rtcp_report -> sender_information . rtp_timestamp = ntohl ( rtcpheader [ i + 2 ] ) LVAL 12 rtcp_report -> sender_information . rtp_timestamp FIELD 13 rtcp_report -> sender_information . rtp_timestamp LEAF_NODE 14 rtcp_report LEAF_NODE 14 -> LEAF_NODE 14 sender_information LEAF_NODE 14 . LEAF_NODE 14 rtp_timestamp ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ntohl ( rtcpheader [ i + 2 ] ) FUNCTION_CALL 13 ntohl ( rtcpheader [ i + 2 ] ) CALLEE 14 ntohl LEAF_NODE 15 ntohl LEAF_NODE 14 ( ARGUMENT 14 rtcpheader [ i + 2 ] FIELD 15 rtcpheader [ i + 2 ] LEAF_NODE 16 rtcpheader LEAF_NODE 16 [ EXPR 16 i + 2 FIELD 17 i LEAF_NODE 18 i LEAF_NODE 17 + FIELD 17 2 LEAF_NODE 18 2 LEAF_NODE 16 ] LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rtcp_debug_test_addr ( addr ) EXPR 11 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 12 rtcp_debug_test_addr ( addr ) CALLEE 13 rtcp_debug_test_addr LEAF_NODE 14 rtcp_debug_test_addr LEAF_NODE 13 ( ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_verbose ( \"NTP timestamp: %u.%06u\\n\" , ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_sec , ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_usec ) ; EXPR 13 ast_verbose ( \"NTP timestamp: %u.%06u\\n\" , ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_sec , ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_usec ) FUNCTION_CALL 14 ast_verbose ( \"NTP timestamp: %u.%06u\\n\" , ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_sec , ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_usec ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"NTP timestamp: %u.%06u\\n\" FIELD 16 \"NTP timestamp: %u.%06u\\n\" LEAF_NODE 17 \"NTP timestamp: %u.%06u\\n\" LEAF_NODE 15 , ARGUMENT 15 ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_sec LEAF_NODE 16 ( TYPE_NAME 16 unsigned int LEAF_NODE 17 unsigned LEAF_NODE 17 int LEAF_NODE 16 ) FIELD 16 rtcp_report -> sender_information . ntp_timestamp . tv_sec LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 sender_information LEAF_NODE 17 . LEAF_NODE 17 ntp_timestamp LEAF_NODE 17 . LEAF_NODE 17 tv_sec LEAF_NODE 15 , ARGUMENT 15 ( unsigned int ) rtcp_report -> sender_information . ntp_timestamp . tv_usec LEAF_NODE 16 ( TYPE_NAME 16 unsigned int LEAF_NODE 17 unsigned LEAF_NODE 17 int LEAF_NODE 16 ) FIELD 16 rtcp_report -> sender_information . ntp_timestamp . tv_usec LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 sender_information LEAF_NODE 17 . LEAF_NODE 17 ntp_timestamp LEAF_NODE 17 . LEAF_NODE 17 tv_usec LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ast_verbose ( \"RTP timestamp: %u\\n\" , rtcp_report -> sender_information . rtp_timestamp ) ; EXPR 13 ast_verbose ( \"RTP timestamp: %u\\n\" , rtcp_report -> sender_information . rtp_timestamp ) FUNCTION_CALL 14 ast_verbose ( \"RTP timestamp: %u\\n\" , rtcp_report -> sender_information . rtp_timestamp ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"RTP timestamp: %u\\n\" FIELD 16 \"RTP timestamp: %u\\n\" LEAF_NODE 17 \"RTP timestamp: %u\\n\" LEAF_NODE 15 , ARGUMENT 15 rtcp_report -> sender_information . rtp_timestamp FIELD 16 rtcp_report -> sender_information . rtp_timestamp LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 sender_information LEAF_NODE 17 . LEAF_NODE 17 rtp_timestamp LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ast_verbose ( \"SPC: %u\\tSOC: %u\\n\" , rtcp_report -> sender_information . packet_count , rtcp_report -> sender_information . octet_count ) ; EXPR 13 ast_verbose ( \"SPC: %u\\tSOC: %u\\n\" , rtcp_report -> sender_information . packet_count , rtcp_report -> sender_information . octet_count ) FUNCTION_CALL 14 ast_verbose ( \"SPC: %u\\tSOC: %u\\n\" , rtcp_report -> sender_information . packet_count , rtcp_report -> sender_information . octet_count ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"SPC: %u\\tSOC: %u\\n\" FIELD 16 \"SPC: %u\\tSOC: %u\\n\" LEAF_NODE 17 \"SPC: %u\\tSOC: %u\\n\" LEAF_NODE 15 , ARGUMENT 15 rtcp_report -> sender_information . packet_count FIELD 16 rtcp_report -> sender_information . packet_count LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 sender_information LEAF_NODE 17 . LEAF_NODE 17 packet_count LEAF_NODE 15 , ARGUMENT 15 rtcp_report -> sender_information . octet_count FIELD 16 rtcp_report -> sender_information . octet_count LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 sender_information LEAF_NODE 17 . LEAF_NODE 17 octet_count LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 i += RTCP_SR_BLOCK_WORD_LENGTH ; EXPR 10 i += RTCP_SR_BLOCK_WORD_LENGTH ASSIGN 11 i += RTCP_SR_BLOCK_WORD_LENGTH LVAL 12 i FIELD 13 i LEAF_NODE 14 i ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 RTCP_SR_BLOCK_WORD_LENGTH FIELD 13 RTCP_SR_BLOCK_WORD_LENGTH LEAF_NODE 14 RTCP_SR_BLOCK_WORD_LENGTH LEAF_NODE 10 ; LABEL 9 case RTCP_PT_RR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_RR LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rtcp_report -> type != RTCP_PT_SR EXPR 11 rtcp_report -> type != RTCP_PT_SR FIELD 12 rtcp_report -> type LEAF_NODE 13 rtcp_report LEAF_NODE 13 -> LEAF_NODE 13 type EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 RTCP_PT_SR LEAF_NODE 13 RTCP_PT_SR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 rtcp_report -> type = RTCP_PT_RR ; EXPR 13 rtcp_report -> type = RTCP_PT_RR ASSIGN 14 rtcp_report -> type = RTCP_PT_RR LVAL 15 rtcp_report -> type FIELD 16 rtcp_report -> type LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 type ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 RTCP_PT_RR FIELD 16 RTCP_PT_RR LEAF_NODE 17 RTCP_PT_RR LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rc > 0 EXPR 11 rc > 0 FIELD 12 rc LEAF_NODE 13 rc REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 report_block = ast_calloc ( 1 , sizeof ( * report_block ) ) ; EXPR 13 report_block = ast_calloc ( 1 , sizeof ( * report_block ) ) ASSIGN 14 report_block = ast_calloc ( 1 , sizeof ( * report_block ) ) LVAL 15 report_block FIELD 16 report_block LEAF_NODE 17 report_block ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ast_calloc ( 1 , sizeof ( * report_block ) ) FUNCTION_CALL 16 ast_calloc ( 1 , sizeof ( * report_block ) ) CALLEE 17 ast_calloc LEAF_NODE 18 ast_calloc LEAF_NODE 17 ( ARGUMENT 17 1 FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 , ARGUMENT 17 sizeof ( * report_block ) FUNCTION_CALL 18 sizeof ( * report_block ) CALLEE 19 sizeof LEAF_NODE 20 sizeof LEAF_NODE 19 ( ARGUMENT 19 * report_block UNARY_EXPR 20 * report_block UNARY_OPERATOR 21 * LEAF_NODE 22 * FIELD 21 report_block LEAF_NODE 22 report_block LEAF_NODE 19 ) LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 ! report_block EXPR 14 ! report_block UNARY_EXPR 15 ! report_block UNARY_OPERATOR 16 ! LEAF_NODE 17 ! FIELD 16 report_block LEAF_NODE 17 report_block LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 SELECTION 15 KEYWORD 16 if LEAF_NODE 17 if LEAF_NODE 16 ( CONDITION 16 child EXPR 17 child FIELD 18 child LEAF_NODE 19 child LEAF_NODE 16 ) STATEMENTS 16 LEAF_NODE 17 { STATEMENTS 17 EXPR_STATEMENT 18 ao2_unlock ( child ) ; EXPR 19 ao2_unlock ( child ) FUNCTION_CALL 20 ao2_unlock ( child ) CALLEE 21 ao2_unlock LEAF_NODE 22 ao2_unlock LEAF_NODE 21 ( ARGUMENT 21 child FIELD 22 child LEAF_NODE 23 child LEAF_NODE 21 ) LEAF_NODE 19 ; LEAF_NODE 17 } JUMP_STATEMENT 15 return & ast_null_frame ; KEYWORD 16 return LEAF_NODE 17 return DESTINATION 16 & ast_null_frame EXPR 17 & ast_null_frame UNARY_EXPR 18 & ast_null_frame UNARY_OPERATOR 19 & LEAF_NODE 20 & FIELD 19 ast_null_frame LEAF_NODE 20 ast_null_frame LEAF_NODE 16 ; LEAF_NODE 14 } EXPR_STATEMENT 12 rtcp_report -> report_block [ report_counter ] = report_block ; EXPR 13 rtcp_report -> report_block [ report_counter ] = report_block ASSIGN 14 rtcp_report -> report_block [ report_counter ] = report_block LVAL 15 rtcp_report -> report_block [ report_counter ] FIELD 16 rtcp_report -> report_block [ report_counter ] LEAF_NODE 17 rtcp_report LEAF_NODE 17 -> LEAF_NODE 17 report_block LEAF_NODE 17 [ EXPR 17 report_counter FIELD 18 report_counter LEAF_NODE 19 report_counter LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 report_block FIELD 16 report_block LEAF_NODE 17 report_block LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> source_ssrc = ntohl ( rtcpheader [ i ] ) ; EXPR 13 report_block -> source_ssrc = ntohl ( rtcpheader [ i ] ) ASSIGN 14 report_block -> source_ssrc = ntohl ( rtcpheader [ i ] ) LVAL 15 report_block -> source_ssrc FIELD 16 report_block -> source_ssrc LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 source_ssrc ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ntohl ( rtcpheader [ i ] ) FUNCTION_CALL 16 ntohl ( rtcpheader [ i ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i ] FIELD 18 rtcpheader [ i ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i FIELD 20 i LEAF_NODE 21 i LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> lost_count . packets = ntohl ( rtcpheader [ i + 1 ] ) & 0x00ffffff ; EXPR 13 report_block -> lost_count . packets = ntohl ( rtcpheader [ i + 1 ] ) & 0x00ffffff ASSIGN 14 report_block -> lost_count . packets = ntohl ( rtcpheader [ i + 1 ] ) & 0x00ffffff LVAL 15 report_block -> lost_count . packets FIELD 16 report_block -> lost_count . packets LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 lost_count LEAF_NODE 17 . LEAF_NODE 17 packets ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ntohl ( rtcpheader [ i + 1 ] ) & 0x00ffffff FUNCTION_CALL 16 ntohl ( rtcpheader [ i + 1 ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i + 1 ] FIELD 18 rtcpheader [ i + 1 ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i + 1 FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 + FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 16 & FIELD 16 0x00ffffff LEAF_NODE 17 0x00ffffff LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> lost_count . fraction = ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xff000000 ) >> 24 ) ; EXPR 13 report_block -> lost_count . fraction = ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xff000000 ) >> 24 ) ASSIGN 14 report_block -> lost_count . fraction = ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xff000000 ) >> 24 ) LVAL 15 report_block -> lost_count . fraction FIELD 16 report_block -> lost_count . fraction LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 lost_count LEAF_NODE 17 . LEAF_NODE 17 fraction ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( ( ntohl ( rtcpheader [ i + 1 ] ) & 0xff000000 ) >> 24 ) LEAF_NODE 16 ( LEAF_NODE 16 ( FUNCTION_CALL 16 ntohl ( rtcpheader [ i + 1 ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i + 1 ] FIELD 18 rtcpheader [ i + 1 ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i + 1 FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 + FIELD 20 1 LEAF_NODE 21 1 LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 16 & FIELD 16 0xff000000 LEAF_NODE 17 0xff000000 LEAF_NODE 16 ) LEAF_NODE 16 >> FIELD 16 24 LEAF_NODE 17 24 LEAF_NODE 16 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> highest_seq_no = ntohl ( rtcpheader [ i + 2 ] ) ; EXPR 13 report_block -> highest_seq_no = ntohl ( rtcpheader [ i + 2 ] ) ASSIGN 14 report_block -> highest_seq_no = ntohl ( rtcpheader [ i + 2 ] ) LVAL 15 report_block -> highest_seq_no FIELD 16 report_block -> highest_seq_no LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 highest_seq_no ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ntohl ( rtcpheader [ i + 2 ] ) FUNCTION_CALL 16 ntohl ( rtcpheader [ i + 2 ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i + 2 ] FIELD 18 rtcpheader [ i + 2 ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i + 2 FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 + FIELD 20 2 LEAF_NODE 21 2 LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> ia_jitter = ntohl ( rtcpheader [ i + 3 ] ) ; EXPR 13 report_block -> ia_jitter = ntohl ( rtcpheader [ i + 3 ] ) ASSIGN 14 report_block -> ia_jitter = ntohl ( rtcpheader [ i + 3 ] ) LVAL 15 report_block -> ia_jitter FIELD 16 report_block -> ia_jitter LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 ia_jitter ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ntohl ( rtcpheader [ i + 3 ] ) FUNCTION_CALL 16 ntohl ( rtcpheader [ i + 3 ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i + 3 ] FIELD 18 rtcpheader [ i + 3 ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i + 3 FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 + FIELD 20 3 LEAF_NODE 21 3 LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> lsr = ntohl ( rtcpheader [ i + 4 ] ) ; EXPR 13 report_block -> lsr = ntohl ( rtcpheader [ i + 4 ] ) ASSIGN 14 report_block -> lsr = ntohl ( rtcpheader [ i + 4 ] ) LVAL 15 report_block -> lsr FIELD 16 report_block -> lsr LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 lsr ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ntohl ( rtcpheader [ i + 4 ] ) FUNCTION_CALL 16 ntohl ( rtcpheader [ i + 4 ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i + 4 ] FIELD 18 rtcpheader [ i + 4 ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i + 4 FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 + FIELD 20 4 LEAF_NODE 21 4 LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 report_block -> dlsr = ntohl ( rtcpheader [ i + 5 ] ) ; EXPR 13 report_block -> dlsr = ntohl ( rtcpheader [ i + 5 ] ) ASSIGN 14 report_block -> dlsr = ntohl ( rtcpheader [ i + 5 ] ) LVAL 15 report_block -> dlsr FIELD 16 report_block -> dlsr LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 dlsr ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ntohl ( rtcpheader [ i + 5 ] ) FUNCTION_CALL 16 ntohl ( rtcpheader [ i + 5 ] ) CALLEE 17 ntohl LEAF_NODE 18 ntohl LEAF_NODE 17 ( ARGUMENT 17 rtcpheader [ i + 5 ] FIELD 18 rtcpheader [ i + 5 ] LEAF_NODE 19 rtcpheader LEAF_NODE 19 [ EXPR 19 i + 5 FIELD 20 i LEAF_NODE 21 i LEAF_NODE 20 + FIELD 20 5 LEAF_NODE 21 5 LEAF_NODE 19 ] LEAF_NODE 17 ) LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 report_block -> lsr && update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) && rtcp_debug_test_addr ( addr ) EXPR 14 report_block -> lsr && update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) && rtcp_debug_test_addr ( addr ) AND 15 report_block -> lsr && update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) && rtcp_debug_test_addr ( addr ) EXPR 16 report_block -> lsr FIELD 17 report_block -> lsr LEAF_NODE 18 report_block LEAF_NODE 18 -> LEAF_NODE 18 lsr LEAF_NODE 16 && EXPR 16 update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) && rtcp_debug_test_addr ( addr ) AND 17 update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) && rtcp_debug_test_addr ( addr ) EXPR 18 update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) FUNCTION_CALL 19 update_rtt_stats ( rtp , report_block -> lsr , report_block -> dlsr ) CALLEE 20 update_rtt_stats LEAF_NODE 21 update_rtt_stats LEAF_NODE 20 ( ARGUMENT 20 rtp FIELD 21 rtp LEAF_NODE 22 rtp LEAF_NODE 20 , ARGUMENT 20 report_block -> lsr FIELD 21 report_block -> lsr LEAF_NODE 22 report_block LEAF_NODE 22 -> LEAF_NODE 22 lsr LEAF_NODE 20 , ARGUMENT 20 report_block -> dlsr FIELD 21 report_block -> dlsr LEAF_NODE 22 report_block LEAF_NODE 22 -> LEAF_NODE 22 dlsr LEAF_NODE 20 ) LEAF_NODE 18 && EXPR 18 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 19 rtcp_debug_test_addr ( addr ) CALLEE 20 rtcp_debug_test_addr LEAF_NODE 21 rtcp_debug_test_addr LEAF_NODE 20 ( ARGUMENT 20 addr FIELD 21 addr LEAF_NODE 22 addr LEAF_NODE 20 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 SIMPLE_DECL 15 struct timeval now ; VAR_DECL 16 struct timeval now TYPE 17 struct timeval TYPE_NAME 18 struct timeval LEAF_NODE 19 struct LEAF_NODE 19 timeval NAME 17 now LEAF_NODE 18 now LEAF_NODE 16 ; SIMPLE_DECL 15 unsigned int lsr_now , unsigned int lsw , unsigned int msw ; INIT_DECL_LIST 16 unsigned int lsr_now , unsigned int lsw , unsigned int msw VAR_DECL 17 unsigned int lsr_now TYPE 18 unsigned int TYPE_NAME 19 unsigned int LEAF_NODE 20 unsigned LEAF_NODE 20 int NAME 18 lsr_now LEAF_NODE 19 lsr_now LEAF_NODE 17 , INIT_DECL_LIST 17 unsigned int lsw , unsigned int msw VAR_DECL 18 unsigned int lsw TYPE 19 unsigned int TYPE_NAME 20 unsigned int LEAF_NODE 21 unsigned LEAF_NODE 21 int NAME 19 lsw LEAF_NODE 20 lsw LEAF_NODE 18 , VAR_DECL 18 unsigned int msw TYPE 19 unsigned int TYPE_NAME 20 unsigned int LEAF_NODE 21 unsigned LEAF_NODE 21 int NAME 19 msw LEAF_NODE 20 msw LEAF_NODE 16 ; EXPR_STATEMENT 15 gettimeofday ( & now , NULL ) ; EXPR 16 gettimeofday ( & now , NULL ) FUNCTION_CALL 17 gettimeofday ( & now , NULL ) CALLEE 18 gettimeofday LEAF_NODE 19 gettimeofday LEAF_NODE 18 ( ARGUMENT 18 & now UNARY_EXPR 19 & now UNARY_OPERATOR 20 & LEAF_NODE 21 & FIELD 20 now LEAF_NODE 21 now LEAF_NODE 18 , ARGUMENT 18 NULL FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 timeval2ntp ( now , & msw , & lsw ) ; EXPR 16 timeval2ntp ( now , & msw , & lsw ) FUNCTION_CALL 17 timeval2ntp ( now , & msw , & lsw ) CALLEE 18 timeval2ntp LEAF_NODE 19 timeval2ntp LEAF_NODE 18 ( ARGUMENT 18 now FIELD 19 now LEAF_NODE 20 now LEAF_NODE 18 , ARGUMENT 18 & msw UNARY_EXPR 19 & msw UNARY_OPERATOR 20 & LEAF_NODE 21 & FIELD 20 msw LEAF_NODE 21 msw LEAF_NODE 18 , ARGUMENT 18 & lsw UNARY_EXPR 19 & lsw UNARY_OPERATOR 20 & LEAF_NODE 21 & FIELD 20 lsw LEAF_NODE 21 lsw LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 lsr_now = ( ( ( msw & 0xffff ) << 16 ) | ( ( lsw & 0xffff0000 ) >> 16 ) ) ; EXPR 16 lsr_now = ( ( ( msw & 0xffff ) << 16 ) | ( ( lsw & 0xffff0000 ) >> 16 ) ) ASSIGN 17 lsr_now = ( ( ( msw & 0xffff ) << 16 ) | ( ( lsw & 0xffff0000 ) >> 16 ) ) LVAL 18 lsr_now FIELD 19 lsr_now LEAF_NODE 20 lsr_now ASSIGN_OP 18 = LEAF_NODE 19 = RVAL 18 ( ( ( msw & 0xffff ) << 16 ) | ( ( lsw & 0xffff0000 ) >> 16 ) ) LEAF_NODE 19 ( BIT_OR 19 ( ( msw & 0xffff ) << 16 ) | ( ( lsw & 0xffff0000 ) >> 16 ) BIT_OR_ELEM 20 ( ( msw & 0xffff ) << 16 ) LEAF_NODE 21 ( LEAF_NODE 21 ( FIELD 21 msw LEAF_NODE 22 msw LEAF_NODE 21 & FIELD 21 0xffff LEAF_NODE 22 0xffff LEAF_NODE 21 ) LEAF_NODE 21 << FIELD 21 16 LEAF_NODE 22 16 LEAF_NODE 21 ) LEAF_NODE 20 | BIT_OR_ELEM 20 ( ( lsw & 0xffff0000 ) >> 16 ) LEAF_NODE 21 ( LEAF_NODE 21 ( FIELD 21 lsw LEAF_NODE 22 lsw LEAF_NODE 21 & FIELD 21 0xffff0000 LEAF_NODE 22 0xffff0000 LEAF_NODE 21 ) LEAF_NODE 21 >> FIELD 21 16 LEAF_NODE 22 16 LEAF_NODE 21 ) LEAF_NODE 19 ) LEAF_NODE 16 ; LEAF_NODE 15 ast_verbose LEAF_NODE 15 ( LEAF_NODE 15 \"Internal RTCP NTP clock skew detected: \" LEAF_NODE 15 \"lsr=%u, now=%u, dlsr=%u (%u:%03ums), \" LEAF_NODE 15 \"diff=%u\\n\" LEAF_NODE 15 , LEAF_NODE 15 report_block LEAF_NODE 15 -> LEAF_NODE 15 lsr LEAF_NODE 15 , LEAF_NODE 15 lsr_now LEAF_NODE 15 , LEAF_NODE 15 report_block LEAF_NODE 15 -> LEAF_NODE 15 dlsr LEAF_NODE 15 , LEAF_NODE 15 report_block LEAF_NODE 15 -> LEAF_NODE 15 dlsr LEAF_NODE 15 / LEAF_NODE 15 65536 LEAF_NODE 15 , LEAF_NODE 15 ( LEAF_NODE 15 report_block LEAF_NODE 15 -> LEAF_NODE 15 dlsr LEAF_NODE 15 % LEAF_NODE 15 65536 LEAF_NODE 15 ) LEAF_NODE 15 * LEAF_NODE 15 1000 LEAF_NODE 15 / LEAF_NODE 15 65536 LEAF_NODE 15 , LEAF_NODE 15 report_block LEAF_NODE 15 -> LEAF_NODE 15 dlsr LEAF_NODE 15 - LEAF_NODE 15 ( LEAF_NODE 15 lsr_now LEAF_NODE 15 - LEAF_NODE 15 report_block LEAF_NODE 15 -> LEAF_NODE 15 lsr LEAF_NODE 15 ) LEAF_NODE 15 ) LEAF_NODE 15 ; LEAF_NODE 14 } EXPR_STATEMENT 12 update_jitter_stats ( rtp , report_block -> ia_jitter ) ; EXPR 13 update_jitter_stats ( rtp , report_block -> ia_jitter ) FUNCTION_CALL 14 update_jitter_stats ( rtp , report_block -> ia_jitter ) CALLEE 15 update_jitter_stats LEAF_NODE 16 update_jitter_stats LEAF_NODE 15 ( ARGUMENT 15 rtp FIELD 16 rtp LEAF_NODE 17 rtp LEAF_NODE 15 , ARGUMENT 15 report_block -> ia_jitter FIELD 16 report_block -> ia_jitter LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 ia_jitter LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 update_lost_stats ( rtp , report_block -> lost_count . packets ) ; EXPR 13 update_lost_stats ( rtp , report_block -> lost_count . packets ) FUNCTION_CALL 14 update_lost_stats ( rtp , report_block -> lost_count . packets ) CALLEE 15 update_lost_stats LEAF_NODE 16 update_lost_stats LEAF_NODE 15 ( ARGUMENT 15 rtp FIELD 16 rtp LEAF_NODE 17 rtp LEAF_NODE 15 , ARGUMENT 15 report_block -> lost_count . packets FIELD 16 report_block -> lost_count . packets LEAF_NODE 17 report_block LEAF_NODE 17 -> LEAF_NODE 17 lost_count LEAF_NODE 17 . LEAF_NODE 17 packets LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 rtp -> rtcp -> reported_jitter_count ++ ; EXPR 13 rtp -> rtcp -> reported_jitter_count ++ FIELD 14 rtp -> rtcp -> reported_jitter_count ++ LEAF_NODE 15 rtp LEAF_NODE 15 -> LEAF_NODE 15 rtcp LEAF_NODE 15 -> LEAF_NODE 15 reported_jitter_count LEAF_NODE 15 ++ LEAF_NODE 13 ; SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 rtcp_debug_test_addr ( addr ) EXPR 14 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 15 rtcp_debug_test_addr ( addr ) CALLEE 16 rtcp_debug_test_addr LEAF_NODE 17 rtcp_debug_test_addr LEAF_NODE 16 ( ARGUMENT 16 addr FIELD 17 addr LEAF_NODE 18 addr LEAF_NODE 16 ) LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ast_verbose ( \" Fraction lost: %d\\n\" , report_block -> lost_count . fraction ) ; EXPR 16 ast_verbose ( \" Fraction lost: %d\\n\" , report_block -> lost_count . fraction ) FUNCTION_CALL 17 ast_verbose ( \" Fraction lost: %d\\n\" , report_block -> lost_count . fraction ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" Fraction lost: %d\\n\" FIELD 19 \" Fraction lost: %d\\n\" LEAF_NODE 20 \" Fraction lost: %d\\n\" LEAF_NODE 18 , ARGUMENT 18 report_block -> lost_count . fraction FIELD 19 report_block -> lost_count . fraction LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 lost_count LEAF_NODE 20 . LEAF_NODE 20 fraction LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" Packets lost so far: %u\\n\" , report_block -> lost_count . packets ) ; EXPR 16 ast_verbose ( \" Packets lost so far: %u\\n\" , report_block -> lost_count . packets ) FUNCTION_CALL 17 ast_verbose ( \" Packets lost so far: %u\\n\" , report_block -> lost_count . packets ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" Packets lost so far: %u\\n\" FIELD 19 \" Packets lost so far: %u\\n\" LEAF_NODE 20 \" Packets lost so far: %u\\n\" LEAF_NODE 18 , ARGUMENT 18 report_block -> lost_count . packets FIELD 19 report_block -> lost_count . packets LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 lost_count LEAF_NODE 20 . LEAF_NODE 20 packets LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" Highest sequence number: %u\\n\" , report_block -> highest_seq_no & 0x0000ffff ) ; EXPR 16 ast_verbose ( \" Highest sequence number: %u\\n\" , report_block -> highest_seq_no & 0x0000ffff ) FUNCTION_CALL 17 ast_verbose ( \" Highest sequence number: %u\\n\" , report_block -> highest_seq_no & 0x0000ffff ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" Highest sequence number: %u\\n\" FIELD 19 \" Highest sequence number: %u\\n\" LEAF_NODE 20 \" Highest sequence number: %u\\n\" LEAF_NODE 18 , ARGUMENT 18 report_block -> highest_seq_no & 0x0000ffff FIELD 19 report_block -> highest_seq_no LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 highest_seq_no LEAF_NODE 19 & FIELD 19 0x0000ffff LEAF_NODE 20 0x0000ffff LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" Sequence number cycles: %u\\n\" , report_block -> highest_seq_no >> 16 ) ; EXPR 16 ast_verbose ( \" Sequence number cycles: %u\\n\" , report_block -> highest_seq_no >> 16 ) FUNCTION_CALL 17 ast_verbose ( \" Sequence number cycles: %u\\n\" , report_block -> highest_seq_no >> 16 ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" Sequence number cycles: %u\\n\" FIELD 19 \" Sequence number cycles: %u\\n\" LEAF_NODE 20 \" Sequence number cycles: %u\\n\" LEAF_NODE 18 , ARGUMENT 18 report_block -> highest_seq_no >> 16 FIELD 19 report_block -> highest_seq_no LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 highest_seq_no LEAF_NODE 19 >> FIELD 19 16 LEAF_NODE 20 16 LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" Interarrival jitter: %u\\n\" , report_block -> ia_jitter ) ; EXPR 16 ast_verbose ( \" Interarrival jitter: %u\\n\" , report_block -> ia_jitter ) FUNCTION_CALL 17 ast_verbose ( \" Interarrival jitter: %u\\n\" , report_block -> ia_jitter ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" Interarrival jitter: %u\\n\" FIELD 19 \" Interarrival jitter: %u\\n\" LEAF_NODE 20 \" Interarrival jitter: %u\\n\" LEAF_NODE 18 , ARGUMENT 18 report_block -> ia_jitter FIELD 19 report_block -> ia_jitter LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 ia_jitter LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" Last SR(our NTP): %lu.%010lu\\n\" , ( unsigned long ) ( report_block -> lsr ) >> 16 , ( ( unsigned long ) ( report_block -> lsr ) << 16 ) * 4096 ) ; EXPR 16 ast_verbose ( \" Last SR(our NTP): %lu.%010lu\\n\" , ( unsigned long ) ( report_block -> lsr ) >> 16 , ( ( unsigned long ) ( report_block -> lsr ) << 16 ) * 4096 ) FUNCTION_CALL 17 ast_verbose ( \" Last SR(our NTP): %lu.%010lu\\n\" , ( unsigned long ) ( report_block -> lsr ) >> 16 , ( ( unsigned long ) ( report_block -> lsr ) << 16 ) * 4096 ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" Last SR(our NTP): %lu.%010lu\\n\" FIELD 19 \" Last SR(our NTP): %lu.%010lu\\n\" LEAF_NODE 20 \" Last SR(our NTP): %lu.%010lu\\n\" LEAF_NODE 18 , ARGUMENT 18 ( unsigned long ) ( report_block -> lsr ) >> 16 LEAF_NODE 19 ( TYPE_NAME 19 unsigned long LEAF_NODE 20 unsigned LEAF_NODE 20 long LEAF_NODE 19 ) LEAF_NODE 19 ( FIELD 19 report_block -> lsr LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 lsr LEAF_NODE 19 ) LEAF_NODE 19 >> FIELD 19 16 LEAF_NODE 20 16 LEAF_NODE 18 , ARGUMENT 18 ( ( unsigned long ) ( report_block -> lsr ) << 16 ) * 4096 LEAF_NODE 19 ( LEAF_NODE 19 ( TYPE_NAME 19 unsigned long LEAF_NODE 20 unsigned LEAF_NODE 20 long LEAF_NODE 19 ) LEAF_NODE 19 ( FIELD 19 report_block -> lsr LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 lsr LEAF_NODE 19 ) LEAF_NODE 19 << FIELD 19 16 LEAF_NODE 20 16 LEAF_NODE 19 ) LEAF_NODE 19 * FIELD 19 4096 LEAF_NODE 20 4096 LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" DLSR: %4.4f (sec)\\n\" , ( double ) report_block -> dlsr / 65536.0 ) ; EXPR 16 ast_verbose ( \" DLSR: %4.4f (sec)\\n\" , ( double ) report_block -> dlsr / 65536.0 ) FUNCTION_CALL 17 ast_verbose ( \" DLSR: %4.4f (sec)\\n\" , ( double ) report_block -> dlsr / 65536.0 ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" DLSR: %4.4f (sec)\\n\" FIELD 19 \" DLSR: %4.4f (sec)\\n\" LEAF_NODE 20 \" DLSR: %4.4f (sec)\\n\" LEAF_NODE 18 , ARGUMENT 18 ( double ) report_block -> dlsr / 65536.0 LEAF_NODE 19 ( TYPE_NAME 19 double LEAF_NODE 20 double LEAF_NODE 19 ) FIELD 19 report_block -> dlsr LEAF_NODE 20 report_block LEAF_NODE 20 -> LEAF_NODE 20 dlsr LEAF_NODE 19 / FIELD 19 65536.0 LEAF_NODE 20 65536.0 LEAF_NODE 18 ) LEAF_NODE 16 ; EXPR_STATEMENT 15 ast_verbose ( \" RTT: %4.4f(sec)\\n\" , rtp -> rtcp -> rtt ) ; EXPR 16 ast_verbose ( \" RTT: %4.4f(sec)\\n\" , rtp -> rtcp -> rtt ) FUNCTION_CALL 17 ast_verbose ( \" RTT: %4.4f(sec)\\n\" , rtp -> rtcp -> rtt ) CALLEE 18 ast_verbose LEAF_NODE 19 ast_verbose LEAF_NODE 18 ( ARGUMENT 18 \" RTT: %4.4f(sec)\\n\" FIELD 19 \" RTT: %4.4f(sec)\\n\" LEAF_NODE 20 \" RTT: %4.4f(sec)\\n\" LEAF_NODE 18 , ARGUMENT 18 rtp -> rtcp -> rtt FIELD 19 rtp -> rtcp -> rtt LEAF_NODE 20 rtp LEAF_NODE 20 -> LEAF_NODE 20 rtcp LEAF_NODE 20 -> LEAF_NODE 20 rtt LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } EXPR_STATEMENT 12 report_counter ++ ; EXPR 13 report_counter ++ FIELD 14 report_counter ++ LEAF_NODE 15 report_counter LEAF_NODE 15 ++ LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 message_blob = ast_json_pack ( \"{s: s, s: s, s: f}\" , \"from\" , ast_sockaddr_stringify ( addr ) , \"to\" , transport_rtp -> rtcp -> local_addr_str , \"rtt\" , rtp -> rtcp -> rtt ) ; EXPR 10 message_blob = ast_json_pack ( \"{s: s, s: s, s: f}\" , \"from\" , ast_sockaddr_stringify ( addr ) , \"to\" , transport_rtp -> rtcp -> local_addr_str , \"rtt\" , rtp -> rtcp -> rtt ) ASSIGN 11 message_blob = ast_json_pack ( \"{s: s, s: s, s: f}\" , \"from\" , ast_sockaddr_stringify ( addr ) , \"to\" , transport_rtp -> rtcp -> local_addr_str , \"rtt\" , rtp -> rtcp -> rtt ) LVAL 12 message_blob FIELD 13 message_blob LEAF_NODE 14 message_blob ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ast_json_pack ( \"{s: s, s: s, s: f}\" , \"from\" , ast_sockaddr_stringify ( addr ) , \"to\" , transport_rtp -> rtcp -> local_addr_str , \"rtt\" , rtp -> rtcp -> rtt ) FUNCTION_CALL 13 ast_json_pack ( \"{s: s, s: s, s: f}\" , \"from\" , ast_sockaddr_stringify ( addr ) , \"to\" , transport_rtp -> rtcp -> local_addr_str , \"rtt\" , rtp -> rtcp -> rtt ) CALLEE 14 ast_json_pack LEAF_NODE 15 ast_json_pack LEAF_NODE 14 ( ARGUMENT 14 \"{s: s, s: s, s: f}\" FIELD 15 \"{s: s, s: s, s: f}\" LEAF_NODE 16 \"{s: s, s: s, s: f}\" LEAF_NODE 14 , ARGUMENT 14 \"from\" FIELD 15 \"from\" LEAF_NODE 16 \"from\" LEAF_NODE 14 , ARGUMENT 14 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 15 ast_sockaddr_stringify ( addr ) CALLEE 16 ast_sockaddr_stringify LEAF_NODE 17 ast_sockaddr_stringify LEAF_NODE 16 ( ARGUMENT 16 addr FIELD 17 addr LEAF_NODE 18 addr LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 \"to\" FIELD 15 \"to\" LEAF_NODE 16 \"to\" LEAF_NODE 14 , ARGUMENT 14 transport_rtp -> rtcp -> local_addr_str FIELD 15 transport_rtp -> rtcp -> local_addr_str LEAF_NODE 16 transport_rtp LEAF_NODE 16 -> LEAF_NODE 16 rtcp LEAF_NODE 16 -> LEAF_NODE 16 local_addr_str LEAF_NODE 14 , ARGUMENT 14 \"rtt\" FIELD 15 \"rtt\" LEAF_NODE 16 \"rtt\" LEAF_NODE 14 , ARGUMENT 14 rtp -> rtcp -> rtt FIELD 15 rtp -> rtcp -> rtt LEAF_NODE 16 rtp LEAF_NODE 16 -> LEAF_NODE 16 rtcp LEAF_NODE 16 -> LEAF_NODE 16 rtt LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_rtp_publish_rtcp_message ( instance , ast_rtp_rtcp_received_type ( ) , rtcp_report , message_blob ) ; EXPR 10 ast_rtp_publish_rtcp_message ( instance , ast_rtp_rtcp_received_type ( ) , rtcp_report , message_blob ) FUNCTION_CALL 11 ast_rtp_publish_rtcp_message ( instance , ast_rtp_rtcp_received_type ( ) , rtcp_report , message_blob ) CALLEE 12 ast_rtp_publish_rtcp_message LEAF_NODE 13 ast_rtp_publish_rtcp_message LEAF_NODE 12 ( ARGUMENT 12 instance FIELD 13 instance LEAF_NODE 14 instance LEAF_NODE 12 , ARGUMENT 12 ast_rtp_rtcp_received_type ( ) FUNCTION_CALL 13 ast_rtp_rtcp_received_type ( ) CALLEE 14 ast_rtp_rtcp_received_type LEAF_NODE 15 ast_rtp_rtcp_received_type LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 rtcp_report FIELD 13 rtcp_report LEAF_NODE 14 rtcp_report LEAF_NODE 12 , ARGUMENT 12 message_blob FIELD 13 message_blob LEAF_NODE 14 message_blob LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_json_unref ( message_blob ) ; EXPR 10 ast_json_unref ( message_blob ) FUNCTION_CALL 11 ast_json_unref ( message_blob ) CALLEE 12 ast_json_unref LEAF_NODE 13 ast_json_unref LEAF_NODE 12 ( ARGUMENT 12 message_blob FIELD 13 message_blob LEAF_NODE 14 message_blob LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . frametype = AST_FRAME_RTCP ; EXPR 10 transport_rtp -> f . frametype = AST_FRAME_RTCP ASSIGN 11 transport_rtp -> f . frametype = AST_FRAME_RTCP LVAL 12 transport_rtp -> f . frametype FIELD 13 transport_rtp -> f . frametype LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 frametype ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_FRAME_RTCP FIELD 13 AST_FRAME_RTCP LEAF_NODE 14 AST_FRAME_RTCP LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . data . ptr = rtp -> rtcp -> frame_buf + AST_FRIENDLY_OFFSET ; EXPR 10 transport_rtp -> f . data . ptr = rtp -> rtcp -> frame_buf + AST_FRIENDLY_OFFSET ASSIGN 11 transport_rtp -> f . data . ptr = rtp -> rtcp -> frame_buf + AST_FRIENDLY_OFFSET LVAL 12 transport_rtp -> f . data . ptr FIELD 13 transport_rtp -> f . data . ptr LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 data LEAF_NODE 14 . LEAF_NODE 14 ptr ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 rtp -> rtcp -> frame_buf + AST_FRIENDLY_OFFSET FIELD 13 rtp -> rtcp -> frame_buf LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 rtcp LEAF_NODE 14 -> LEAF_NODE 14 frame_buf LEAF_NODE 13 + FIELD 13 AST_FRIENDLY_OFFSET LEAF_NODE 14 AST_FRIENDLY_OFFSET LEAF_NODE 10 ; LEAF_NODE 9 memcpy LEAF_NODE 9 ( LEAF_NODE 9 transport_rtp LEAF_NODE 9 -> LEAF_NODE 9 f LEAF_NODE 9 . LEAF_NODE 9 data LEAF_NODE 9 . LEAF_NODE 9 ptr LEAF_NODE 9 , LEAF_NODE 9 rtcp_report LEAF_NODE 9 , LEAF_NODE 9 sizeof LEAF_NODE 9 ( LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_rtcp_report LEAF_NODE 9 ) LEAF_NODE 9 ) LEAF_NODE 9 ; LEAF_NODE 9 transport_rtp LEAF_NODE 9 -> LEAF_NODE 9 f LEAF_NODE 9 . LEAF_NODE 9 datalen LEAF_NODE 9 = LEAF_NODE 9 sizeof LEAF_NODE 9 ( LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_rtcp_report LEAF_NODE 9 ) LEAF_NODE 9 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rc > 0 EXPR 11 rc > 0 FIELD 12 rc LEAF_NODE 13 rc REL_OPERATOR 12 > LEAF_NODE 13 > FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SIMPLE_DECL 12 struct ast_rtp_rtcp_report * rtcp_report2 ; VAR_DECL 13 struct ast_rtp_rtcp_report * rtcp_report2 TYPE 14 struct ast_rtp_rtcp_report * TYPE_NAME 15 struct ast_rtp_rtcp_report LEAF_NODE 16 struct LEAF_NODE 16 ast_rtp_rtcp_report POINTER 15 * LEAF_NODE 16 * NAME 14 rtcp_report2 LEAF_NODE 15 rtcp_report2 LEAF_NODE 13 ; LEAF_NODE 12 report_block LEAF_NODE 12 = LEAF_NODE 12 transport_rtp LEAF_NODE 12 -> LEAF_NODE 12 f LEAF_NODE 12 . LEAF_NODE 12 data LEAF_NODE 12 . LEAF_NODE 12 ptr LEAF_NODE 12 + LEAF_NODE 12 transport_rtp LEAF_NODE 12 -> LEAF_NODE 12 f LEAF_NODE 12 . LEAF_NODE 12 datalen LEAF_NODE 12 + LEAF_NODE 12 sizeof LEAF_NODE 12 ( LEAF_NODE 12 struct LEAF_NODE 12 ast_rtp_rtcp_report_block LEAF_NODE 12 * LEAF_NODE 12 ) LEAF_NODE 12 ; LEAF_NODE 12 memcpy LEAF_NODE 12 ( LEAF_NODE 12 report_block LEAF_NODE 12 , LEAF_NODE 12 rtcp_report LEAF_NODE 12 -> LEAF_NODE 12 report_block LEAF_NODE 12 [ LEAF_NODE 12 report_counter LEAF_NODE 12 - LEAF_NODE 12 1 LEAF_NODE 12 ] LEAF_NODE 12 , LEAF_NODE 12 sizeof LEAF_NODE 12 ( LEAF_NODE 12 struct LEAF_NODE 12 ast_rtp_rtcp_report_block LEAF_NODE 12 ) LEAF_NODE 12 ) LEAF_NODE 12 ; EXPR_STATEMENT 12 rtcp_report2 = ( struct ast_rtp_rtcp_report * ) transport_rtp -> f . data . ptr ; EXPR 13 rtcp_report2 = ( struct ast_rtp_rtcp_report * ) transport_rtp -> f . data . ptr ASSIGN 14 rtcp_report2 = ( struct ast_rtp_rtcp_report * ) transport_rtp -> f . data . ptr LVAL 15 rtcp_report2 FIELD 16 rtcp_report2 LEAF_NODE 17 rtcp_report2 ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ( struct ast_rtp_rtcp_report * ) transport_rtp -> f . data . ptr LEAF_NODE 16 ( TYPE_NAME 16 struct ast_rtp_rtcp_report LEAF_NODE 17 struct LEAF_NODE 17 ast_rtp_rtcp_report LEAF_NODE 16 * LEAF_NODE 16 ) FIELD 16 transport_rtp -> f . data . ptr LEAF_NODE 17 transport_rtp LEAF_NODE 17 -> LEAF_NODE 17 f LEAF_NODE 17 . LEAF_NODE 17 data LEAF_NODE 17 . LEAF_NODE 17 ptr LEAF_NODE 13 ; EXPR_STATEMENT 12 rtcp_report2 -> report_block [ report_counter - 1 ] = report_block ; EXPR 13 rtcp_report2 -> report_block [ report_counter - 1 ] = report_block ASSIGN 14 rtcp_report2 -> report_block [ report_counter - 1 ] = report_block LVAL 15 rtcp_report2 -> report_block [ report_counter - 1 ] FIELD 16 rtcp_report2 -> report_block [ report_counter - 1 ] LEAF_NODE 17 rtcp_report2 LEAF_NODE 17 -> LEAF_NODE 17 report_block LEAF_NODE 17 [ EXPR 17 report_counter - 1 FIELD 18 report_counter LEAF_NODE 19 report_counter LEAF_NODE 18 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 17 ] ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 report_block FIELD 16 report_block LEAF_NODE 17 report_block LEAF_NODE 13 ; LEAF_NODE 12 transport_rtp LEAF_NODE 12 -> LEAF_NODE 12 f LEAF_NODE 12 . LEAF_NODE 12 datalen LEAF_NODE 12 += LEAF_NODE 12 sizeof LEAF_NODE 12 ( LEAF_NODE 12 struct LEAF_NODE 12 ast_rtp_rtcp_report_block LEAF_NODE 12 ) LEAF_NODE 12 ; LEAF_NODE 11 } EXPR_STATEMENT 9 transport_rtp -> f . offset = AST_FRIENDLY_OFFSET ; EXPR 10 transport_rtp -> f . offset = AST_FRIENDLY_OFFSET ASSIGN 11 transport_rtp -> f . offset = AST_FRIENDLY_OFFSET LVAL 12 transport_rtp -> f . offset FIELD 13 transport_rtp -> f . offset LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 offset ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_FRIENDLY_OFFSET FIELD 13 AST_FRIENDLY_OFFSET LEAF_NODE 14 AST_FRIENDLY_OFFSET LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . samples = 0 ; EXPR 10 transport_rtp -> f . samples = 0 ASSIGN 11 transport_rtp -> f . samples = 0 LVAL 12 transport_rtp -> f . samples FIELD 13 transport_rtp -> f . samples LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 samples ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . mallocd = 0 ; EXPR 10 transport_rtp -> f . mallocd = 0 ASSIGN 11 transport_rtp -> f . mallocd = 0 LVAL 12 transport_rtp -> f . mallocd FIELD 13 transport_rtp -> f . mallocd LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 mallocd ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . delivery . tv_sec = 0 ; EXPR 10 transport_rtp -> f . delivery . tv_sec = 0 ASSIGN 11 transport_rtp -> f . delivery . tv_sec = 0 LVAL 12 transport_rtp -> f . delivery . tv_sec FIELD 13 transport_rtp -> f . delivery . tv_sec LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 delivery LEAF_NODE 14 . LEAF_NODE 14 tv_sec ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . delivery . tv_usec = 0 ; EXPR 10 transport_rtp -> f . delivery . tv_usec = 0 ASSIGN 11 transport_rtp -> f . delivery . tv_usec = 0 LVAL 12 transport_rtp -> f . delivery . tv_usec FIELD 13 transport_rtp -> f . delivery . tv_usec LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 delivery LEAF_NODE 14 . LEAF_NODE 14 tv_usec ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . src = \"RTP\" ; EXPR 10 transport_rtp -> f . src = \"RTP\" ASSIGN 11 transport_rtp -> f . src = \"RTP\" LVAL 12 transport_rtp -> f . src FIELD 13 transport_rtp -> f . src LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 src ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 \"RTP\" FIELD 13 \"RTP\" LEAF_NODE 14 \"RTP\" LEAF_NODE 10 ; EXPR_STATEMENT 9 f = & transport_rtp -> f ; EXPR 10 f = & transport_rtp -> f ASSIGN 11 f = & transport_rtp -> f LVAL 12 f FIELD 13 f LEAF_NODE 14 f ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & transport_rtp -> f UNARY_EXPR 13 & transport_rtp -> f UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 transport_rtp -> f LEAF_NODE 15 transport_rtp LEAF_NODE 15 -> LEAF_NODE 15 f LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_FUR : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_FUR LEAF_NODE 10 : LABEL 9 case RTCP_PT_PSFB : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_PSFB LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rtcp_debug_test_addr ( addr ) EXPR 11 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 12 rtcp_debug_test_addr ( addr ) CALLEE 13 rtcp_debug_test_addr LEAF_NODE 14 rtcp_debug_test_addr LEAF_NODE 13 ( ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_verbose ( \"Received an RTCP Fast Update Request\\n\" ) ; EXPR 13 ast_verbose ( \"Received an RTCP Fast Update Request\\n\" ) FUNCTION_CALL 14 ast_verbose ( \"Received an RTCP Fast Update Request\\n\" ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"Received an RTCP Fast Update Request\\n\" FIELD 16 \"Received an RTCP Fast Update Request\\n\" LEAF_NODE 17 \"Received an RTCP Fast Update Request\\n\" LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 transport_rtp -> f . frametype = AST_FRAME_CONTROL ; EXPR 10 transport_rtp -> f . frametype = AST_FRAME_CONTROL ASSIGN 11 transport_rtp -> f . frametype = AST_FRAME_CONTROL LVAL 12 transport_rtp -> f . frametype FIELD 13 transport_rtp -> f . frametype LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 frametype ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_FRAME_CONTROL FIELD 13 AST_FRAME_CONTROL LEAF_NODE 14 AST_FRAME_CONTROL LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . subclass . integer = AST_CONTROL_VIDUPDATE ; EXPR 10 transport_rtp -> f . subclass . integer = AST_CONTROL_VIDUPDATE ASSIGN 11 transport_rtp -> f . subclass . integer = AST_CONTROL_VIDUPDATE LVAL 12 transport_rtp -> f . subclass . integer FIELD 13 transport_rtp -> f . subclass . integer LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 subclass LEAF_NODE 14 . LEAF_NODE 14 integer ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_CONTROL_VIDUPDATE FIELD 13 AST_CONTROL_VIDUPDATE LEAF_NODE 14 AST_CONTROL_VIDUPDATE LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . datalen = 0 ; EXPR 10 transport_rtp -> f . datalen = 0 ASSIGN 11 transport_rtp -> f . datalen = 0 LVAL 12 transport_rtp -> f . datalen FIELD 13 transport_rtp -> f . datalen LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 datalen ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . samples = 0 ; EXPR 10 transport_rtp -> f . samples = 0 ASSIGN 11 transport_rtp -> f . samples = 0 LVAL 12 transport_rtp -> f . samples FIELD 13 transport_rtp -> f . samples LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 samples ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . mallocd = 0 ; EXPR 10 transport_rtp -> f . mallocd = 0 ASSIGN 11 transport_rtp -> f . mallocd = 0 LVAL 12 transport_rtp -> f . mallocd FIELD 13 transport_rtp -> f . mallocd LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 mallocd ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 transport_rtp -> f . src = \"RTP\" ; EXPR 10 transport_rtp -> f . src = \"RTP\" ASSIGN 11 transport_rtp -> f . src = \"RTP\" LVAL 12 transport_rtp -> f . src FIELD 13 transport_rtp -> f . src LEAF_NODE 14 transport_rtp LEAF_NODE 14 -> LEAF_NODE 14 f LEAF_NODE 14 . LEAF_NODE 14 src ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 \"RTP\" FIELD 13 \"RTP\" LEAF_NODE 14 \"RTP\" LEAF_NODE 10 ; EXPR_STATEMENT 9 f = & transport_rtp -> f ; EXPR 10 f = & transport_rtp -> f ASSIGN 11 f = & transport_rtp -> f LVAL 12 f FIELD 13 f LEAF_NODE 14 f ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & transport_rtp -> f UNARY_EXPR 13 & transport_rtp -> f UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 transport_rtp -> f LEAF_NODE 15 transport_rtp LEAF_NODE 15 -> LEAF_NODE 15 f LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_SDES : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_SDES LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rtcp_debug_test_addr ( addr ) EXPR 11 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 12 rtcp_debug_test_addr ( addr ) CALLEE 13 rtcp_debug_test_addr LEAF_NODE 14 rtcp_debug_test_addr LEAF_NODE 13 ( ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_verbose ( \"Received an SDES from %s\\n\" , ast_sockaddr_stringify ( addr ) ) ; EXPR 13 ast_verbose ( \"Received an SDES from %s\\n\" , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 14 ast_verbose ( \"Received an SDES from %s\\n\" , ast_sockaddr_stringify ( addr ) ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"Received an SDES from %s\\n\" FIELD 16 \"Received an SDES from %s\\n\" LEAF_NODE 17 \"Received an SDES from %s\\n\" LEAF_NODE 15 , ARGUMENT 15 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 16 ast_sockaddr_stringify ( addr ) CALLEE 17 ast_sockaddr_stringify LEAF_NODE 18 ast_sockaddr_stringify LEAF_NODE 17 ( ARGUMENT 17 addr FIELD 18 addr LEAF_NODE 19 addr LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case RTCP_PT_BYE : LEAF_NODE 10 case LEAF_NODE 10 RTCP_PT_BYE LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 rtcp_debug_test_addr ( addr ) EXPR 11 rtcp_debug_test_addr ( addr ) FUNCTION_CALL 12 rtcp_debug_test_addr ( addr ) CALLEE 13 rtcp_debug_test_addr LEAF_NODE 14 rtcp_debug_test_addr LEAF_NODE 13 ( ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_verbose ( \"Received a BYE from %s\\n\" , ast_sockaddr_stringify ( addr ) ) ; EXPR 13 ast_verbose ( \"Received a BYE from %s\\n\" , ast_sockaddr_stringify ( addr ) ) FUNCTION_CALL 14 ast_verbose ( \"Received a BYE from %s\\n\" , ast_sockaddr_stringify ( addr ) ) CALLEE 15 ast_verbose LEAF_NODE 16 ast_verbose LEAF_NODE 15 ( ARGUMENT 15 \"Received a BYE from %s\\n\" FIELD 16 \"Received a BYE from %s\\n\" LEAF_NODE 17 \"Received a BYE from %s\\n\" LEAF_NODE 15 , ARGUMENT 15 ast_sockaddr_stringify ( addr ) FUNCTION_CALL 16 ast_sockaddr_stringify ( addr ) CALLEE 17 ast_sockaddr_stringify LEAF_NODE 18 ast_sockaddr_stringify LEAF_NODE 17 ( ARGUMENT 17 addr FIELD 18 addr LEAF_NODE 19 addr LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 position += length ; EXPR 7 position += length ASSIGN 8 position += length LVAL 9 position FIELD 10 position LEAF_NODE 11 position ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 length FIELD 10 length LEAF_NODE 11 length LEAF_NODE 7 ; EXPR_STATEMENT 6 rtp -> rtcp -> rtcp_info = 1 ; EXPR 7 rtp -> rtcp -> rtcp_info = 1 ASSIGN 8 rtp -> rtcp -> rtcp_info = 1 LVAL 9 rtp -> rtcp -> rtcp_info FIELD 10 rtp -> rtcp -> rtcp_info LEAF_NODE 11 rtp LEAF_NODE 11 -> LEAF_NODE 11 rtcp LEAF_NODE 11 -> LEAF_NODE 11 rtcp_info ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 child EXPR 8 child FIELD 9 child LEAF_NODE 10 child LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ao2_unlock ( child ) ; EXPR 10 ao2_unlock ( child ) FUNCTION_CALL 11 ao2_unlock ( child ) CALLEE 12 ao2_unlock LEAF_NODE 13 ao2_unlock LEAF_NODE 12 ( ARGUMENT 12 child FIELD 13 child LEAF_NODE 14 child LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } JUMP_STATEMENT 3 return f ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 f EXPR 5 f FIELD 6 f LEAF_NODE 7 f LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 4, "project": "openssl_ast_vul_function_test_adv_41", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 AST_OPTIONAL_API_NAME TYPE_NAME 3 AST_OPTIONAL_API_NAME LEAF_NODE 4 AST_OPTIONAL_API_NAME FUNCTION_NAME 2 ( ast_websocket_uri_cb ) LEAF_NODE 3 ( LEAF_NODE 3 ast_websocket_uri_cb LEAF_NODE 3 ) PARAMETER_LIST 2 ( struct ast_tcptls_session_instance * ser , const struct ast_http_uri * urih , const char * uri , enum ast_http_method method , struct ast_variable * get_vars , struct ast_variable * headers ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_tcptls_session_instance * ser TYPE 4 struct ast_tcptls_session_instance * TYPE_NAME 5 struct ast_tcptls_session_instance LEAF_NODE 6 struct LEAF_NODE 6 ast_tcptls_session_instance POINTER 5 * LEAF_NODE 6 * NAME 4 ser LEAF_NODE 5 ser LEAF_NODE 3 , PARAMETER_DECL 3 const struct ast_http_uri * urih TYPE 4 const struct ast_http_uri * TYPE_NAME 5 const struct ast_http_uri LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 ast_http_uri POINTER 5 * LEAF_NODE 6 * NAME 4 urih LEAF_NODE 5 urih LEAF_NODE 3 , PARAMETER_DECL 3 const char * uri TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 uri LEAF_NODE 5 uri LEAF_NODE 3 , PARAMETER_DECL 3 enum ast_http_method method TYPE 4 enum ast_http_method TYPE_NAME 5 enum ast_http_method LEAF_NODE 6 enum LEAF_NODE 6 ast_http_method NAME 4 method LEAF_NODE 5 method LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_variable * get_vars TYPE 4 struct ast_variable * TYPE_NAME 5 struct ast_variable LEAF_NODE 6 struct LEAF_NODE 6 ast_variable POINTER 5 * LEAF_NODE 6 * NAME 4 get_vars LEAF_NODE 5 get_vars LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_variable * headers TYPE 4 struct ast_variable * TYPE_NAME 5 struct ast_variable LEAF_NODE 6 struct LEAF_NODE 6 ast_variable POINTER 5 * LEAF_NODE 6 * NAME 4 headers LEAF_NODE 5 headers LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_variable * v ; VAR_DECL 4 struct ast_variable * v TYPE 5 struct ast_variable * TYPE_NAME 6 struct ast_variable LEAF_NODE 7 struct LEAF_NODE 7 ast_variable POINTER 6 * LEAF_NODE 7 * NAME 5 v LEAF_NODE 6 v LEAF_NODE 4 ; SIMPLE_DECL 3 const char * upgrade ; upgrade = NULL , const char * key ; key = NULL , const char * key1 ; key1 = NULL , const char * key2 ; key2 = NULL , const char * protos ; protos = NULL ; INIT_DECL_LIST 4 const char * upgrade ; upgrade = NULL , const char * key ; key = NULL , const char * key1 ; key1 = NULL , const char * key2 ; key2 = NULL , const char * protos ; protos = NULL VAR_DECL 5 const char * upgrade ; upgrade = NULL TYPE 6 const char * TYPE_NAME 7 const char LEAF_NODE 8 const LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 upgrade LEAF_NODE 7 upgrade LEAF_NODE 6 ; INIT 6 upgrade = NULL ASSIGN 7 upgrade = NULL LVAL 8 upgrade NAME 9 upgrade LEAF_NODE 10 upgrade ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , INIT_DECL_LIST 5 const char * key ; key = NULL , const char * key1 ; key1 = NULL , const char * key2 ; key2 = NULL , const char * protos ; protos = NULL VAR_DECL 6 const char * key ; key = NULL TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 7 ; INIT 7 key = NULL ASSIGN 8 key = NULL LVAL 9 key NAME 10 key LEAF_NODE 11 key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 6 , INIT_DECL_LIST 6 const char * key1 ; key1 = NULL , const char * key2 ; key2 = NULL , const char * protos ; protos = NULL VAR_DECL 7 const char * key1 ; key1 = NULL TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 key1 LEAF_NODE 9 key1 LEAF_NODE 8 ; INIT 8 key1 = NULL ASSIGN 9 key1 = NULL LVAL 10 key1 NAME 11 key1 LEAF_NODE 12 key1 ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 NULL FIELD 11 NULL LEAF_NODE 12 NULL LEAF_NODE 7 , INIT_DECL_LIST 7 const char * key2 ; key2 = NULL , const char * protos ; protos = NULL VAR_DECL 8 const char * key2 ; key2 = NULL TYPE 9 const char * TYPE_NAME 10 const char LEAF_NODE 11 const LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 key2 LEAF_NODE 10 key2 LEAF_NODE 9 ; INIT 9 key2 = NULL ASSIGN 10 key2 = NULL LVAL 11 key2 NAME 12 key2 LEAF_NODE 13 key2 ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 8 , VAR_DECL 8 const char * protos ; protos = NULL TYPE 9 const char * TYPE_NAME 10 const char LEAF_NODE 11 const LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 protos LEAF_NODE 10 protos LEAF_NODE 9 ; INIT 9 protos = NULL ASSIGN 10 protos = NULL LVAL 11 protos NAME 12 protos LEAF_NODE 13 protos ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 char * requested_protocols ; requested_protocols = NULL , char * protocol ; protocol = NULL ; INIT_DECL_LIST 4 char * requested_protocols ; requested_protocols = NULL , char * protocol ; protocol = NULL VAR_DECL 5 char * requested_protocols ; requested_protocols = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 requested_protocols LEAF_NODE 7 requested_protocols LEAF_NODE 6 ; INIT 6 requested_protocols = NULL ASSIGN 7 requested_protocols = NULL LVAL 8 requested_protocols NAME 9 requested_protocols LEAF_NODE 10 requested_protocols ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , VAR_DECL 5 char * protocol ; protocol = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 protocol LEAF_NODE 7 protocol LEAF_NODE 6 ; INIT 6 protocol = NULL ASSIGN 7 protocol = NULL LVAL 8 protocol NAME 9 protocol LEAF_NODE 10 protocol ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int version ; version = 0 , int flags ; flags = 1 ; INIT_DECL_LIST 4 int version ; version = 0 , int flags ; flags = 1 VAR_DECL 5 int version ; version = 0 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 version LEAF_NODE 7 version LEAF_NODE 6 ; INIT 6 version = 0 ASSIGN 7 version = 0 LVAL 8 version NAME 9 version LEAF_NODE 10 version ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 , VAR_DECL 5 int flags ; flags = 1 TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 flags LEAF_NODE 7 flags LEAF_NODE 6 ; INIT 6 flags = 1 ASSIGN 7 flags = 1 LVAL 8 flags NAME 9 flags LEAF_NODE 10 flags ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_websocket_protocol * protocol_handler ; protocol_handler = NULL ; VAR_DECL 4 struct ast_websocket_protocol * protocol_handler ; protocol_handler = NULL TYPE 5 struct ast_websocket_protocol * TYPE_NAME 6 struct ast_websocket_protocol LEAF_NODE 7 struct LEAF_NODE 7 ast_websocket_protocol POINTER 6 * LEAF_NODE 7 * NAME 5 protocol_handler LEAF_NODE 6 protocol_handler LEAF_NODE 5 ; INIT 5 protocol_handler = NULL ASSIGN 6 protocol_handler = NULL LVAL 7 protocol_handler NAME 8 protocol_handler LEAF_NODE 9 protocol_handler ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_websocket * session ; VAR_DECL 4 struct ast_websocket * session TYPE 5 struct ast_websocket * TYPE_NAME 6 struct ast_websocket LEAF_NODE 7 struct LEAF_NODE 7 ast_websocket POINTER 6 * LEAF_NODE 7 * NAME 5 session LEAF_NODE 6 session LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_websocket_server * server ; VAR_DECL 4 struct ast_websocket_server * server TYPE 5 struct ast_websocket_server * TYPE_NAME 6 struct ast_websocket_server LEAF_NODE 7 struct LEAF_NODE 7 ast_websocket_server POINTER 6 * LEAF_NODE 7 * NAME 5 server LEAF_NODE 6 server LEAF_NODE 4 ; EXPR_STATEMENT 3 SCOPED_MODULE_USE ( ast_module_info -> self ) ; EXPR 4 SCOPED_MODULE_USE ( ast_module_info -> self ) FUNCTION_CALL 5 SCOPED_MODULE_USE ( ast_module_info -> self ) CALLEE 6 SCOPED_MODULE_USE LEAF_NODE 7 SCOPED_MODULE_USE LEAF_NODE 6 ( ARGUMENT 6 ast_module_info -> self FIELD 7 ast_module_info -> self LEAF_NODE 8 ast_module_info LEAF_NODE 8 -> LEAF_NODE 8 self LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 method != AST_HTTP_GET EXPR 5 method != AST_HTTP_GET FIELD 6 method LEAF_NODE 7 method EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 AST_HTTP_GET LEAF_NODE 7 AST_HTTP_GET LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_http_error ( ser , 501 , \"Not Implemented\" , \"Attempt to use unimplemented / unsupported method\" ) ; EXPR 7 ast_http_error ( ser , 501 , \"Not Implemented\" , \"Attempt to use unimplemented / unsupported method\" ) FUNCTION_CALL 8 ast_http_error ( ser , 501 , \"Not Implemented\" , \"Attempt to use unimplemented / unsupported method\" ) CALLEE 9 ast_http_error LEAF_NODE 10 ast_http_error LEAF_NODE 9 ( ARGUMENT 9 ser FIELD 10 ser LEAF_NODE 11 ser LEAF_NODE 9 , ARGUMENT 9 501 FIELD 10 501 LEAF_NODE 11 501 LEAF_NODE 9 , ARGUMENT 9 \"Not Implemented\" FIELD 10 \"Not Implemented\" LEAF_NODE 11 \"Not Implemented\" LEAF_NODE 9 , ARGUMENT 9 \"Attempt to use unimplemented / unsupported method\" FIELD 10 \"Attempt to use unimplemented / unsupported method\" LEAF_NODE 11 \"Attempt to use unimplemented / unsupported method\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 server = urih -> data ; EXPR 4 server = urih -> data ASSIGN 5 server = urih -> data LVAL 6 server FIELD 7 server LEAF_NODE 8 server ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 urih -> data FIELD 7 urih -> data LEAF_NODE 8 urih LEAF_NODE 8 -> LEAF_NODE 8 data LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 v = headers ; EXPR 5 v = headers ASSIGN 6 v = headers LVAL 7 v FIELD 8 v LEAF_NODE 9 v ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 headers FIELD 8 headers LEAF_NODE 9 headers LEAF_NODE 5 ; CONDITION 4 v EXPR 5 v FIELD 6 v LEAF_NODE 7 v LEAF_NODE 4 ; FOR_EXPR 4 v = v -> next EXPR 5 v = v -> next ASSIGN 6 v = v -> next LVAL 7 v FIELD 8 v LEAF_NODE 9 v ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 v -> next FIELD 8 v -> next LEAF_NODE 9 v LEAF_NODE 9 -> LEAF_NODE 9 next LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! strcasecmp ( v -> name , \"Upgrade\" ) EXPR 8 ! strcasecmp ( v -> name , \"Upgrade\" ) UNARY_EXPR 9 ! strcasecmp ( v -> name , \"Upgrade\" ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 strcasecmp ( v -> name , \"Upgrade\" ) CALLEE 11 strcasecmp LEAF_NODE 12 strcasecmp LEAF_NODE 11 ( ARGUMENT 11 v -> name FIELD 12 v -> name LEAF_NODE 13 v LEAF_NODE 13 -> LEAF_NODE 13 name LEAF_NODE 11 , ARGUMENT 11 \"Upgrade\" FIELD 12 \"Upgrade\" LEAF_NODE 13 \"Upgrade\" LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 upgrade = v -> value ; EXPR 10 upgrade = v -> value ASSIGN 11 upgrade = v -> value LVAL 12 upgrade FIELD 13 upgrade LEAF_NODE 14 upgrade ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 v -> value FIELD 13 v -> value LEAF_NODE 14 v LEAF_NODE 14 -> LEAF_NODE 14 value LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key\" ) EXPR 10 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key\" ) UNARY_EXPR 11 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key\" ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 strcasecmp ( v -> name , \"Sec-WebSocket-Key\" ) CALLEE 13 strcasecmp LEAF_NODE 14 strcasecmp LEAF_NODE 13 ( ARGUMENT 13 v -> name FIELD 14 v -> name LEAF_NODE 15 v LEAF_NODE 15 -> LEAF_NODE 15 name LEAF_NODE 13 , ARGUMENT 13 \"Sec-WebSocket-Key\" FIELD 14 \"Sec-WebSocket-Key\" LEAF_NODE 15 \"Sec-WebSocket-Key\" LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 key = v -> value ; EXPR 12 key = v -> value ASSIGN 13 key = v -> value LVAL 14 key FIELD 15 key LEAF_NODE 16 key ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 v -> value FIELD 15 v -> value LEAF_NODE 16 v LEAF_NODE 16 -> LEAF_NODE 16 value LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key1\" ) EXPR 10 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key1\" ) UNARY_EXPR 11 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key1\" ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 strcasecmp ( v -> name , \"Sec-WebSocket-Key1\" ) CALLEE 13 strcasecmp LEAF_NODE 14 strcasecmp LEAF_NODE 13 ( ARGUMENT 13 v -> name FIELD 14 v -> name LEAF_NODE 15 v LEAF_NODE 15 -> LEAF_NODE 15 name LEAF_NODE 13 , ARGUMENT 13 \"Sec-WebSocket-Key1\" FIELD 14 \"Sec-WebSocket-Key1\" LEAF_NODE 15 \"Sec-WebSocket-Key1\" LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 key1 = v -> value ; EXPR 12 key1 = v -> value ASSIGN 13 key1 = v -> value LVAL 14 key1 FIELD 15 key1 LEAF_NODE 16 key1 ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 v -> value FIELD 15 v -> value LEAF_NODE 16 v LEAF_NODE 16 -> LEAF_NODE 16 value LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key2\" ) EXPR 10 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key2\" ) UNARY_EXPR 11 ! strcasecmp ( v -> name , \"Sec-WebSocket-Key2\" ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 strcasecmp ( v -> name , \"Sec-WebSocket-Key2\" ) CALLEE 13 strcasecmp LEAF_NODE 14 strcasecmp LEAF_NODE 13 ( ARGUMENT 13 v -> name FIELD 14 v -> name LEAF_NODE 15 v LEAF_NODE 15 -> LEAF_NODE 15 name LEAF_NODE 13 , ARGUMENT 13 \"Sec-WebSocket-Key2\" FIELD 14 \"Sec-WebSocket-Key2\" LEAF_NODE 15 \"Sec-WebSocket-Key2\" LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 key2 = v -> value ; EXPR 12 key2 = v -> value ASSIGN 13 key2 = v -> value LVAL 14 key2 FIELD 15 key2 LEAF_NODE 16 key2 ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 v -> value FIELD 15 v -> value LEAF_NODE 16 v LEAF_NODE 16 -> LEAF_NODE 16 value LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! strcasecmp ( v -> name , \"Sec-WebSocket-Protocol\" ) EXPR 10 ! strcasecmp ( v -> name , \"Sec-WebSocket-Protocol\" ) UNARY_EXPR 11 ! strcasecmp ( v -> name , \"Sec-WebSocket-Protocol\" ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 strcasecmp ( v -> name , \"Sec-WebSocket-Protocol\" ) CALLEE 13 strcasecmp LEAF_NODE 14 strcasecmp LEAF_NODE 13 ( ARGUMENT 13 v -> name FIELD 14 v -> name LEAF_NODE 15 v LEAF_NODE 15 -> LEAF_NODE 15 name LEAF_NODE 13 , ARGUMENT 13 \"Sec-WebSocket-Protocol\" FIELD 14 \"Sec-WebSocket-Protocol\" LEAF_NODE 15 \"Sec-WebSocket-Protocol\" LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 protos = v -> value ; EXPR 12 protos = v -> value ASSIGN 13 protos = v -> value LVAL 14 protos FIELD 15 protos LEAF_NODE 16 protos ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 v -> value FIELD 15 v -> value LEAF_NODE 16 v LEAF_NODE 16 -> LEAF_NODE 16 value LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! strcasecmp ( v -> name , \"Sec-WebSocket-Version\" ) EXPR 10 ! strcasecmp ( v -> name , \"Sec-WebSocket-Version\" ) UNARY_EXPR 11 ! strcasecmp ( v -> name , \"Sec-WebSocket-Version\" ) UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FUNCTION_CALL 12 strcasecmp ( v -> name , \"Sec-WebSocket-Version\" ) CALLEE 13 strcasecmp LEAF_NODE 14 strcasecmp LEAF_NODE 13 ( ARGUMENT 13 v -> name FIELD 14 v -> name LEAF_NODE 15 v LEAF_NODE 15 -> LEAF_NODE 15 name LEAF_NODE 13 , ARGUMENT 13 \"Sec-WebSocket-Version\" FIELD 14 \"Sec-WebSocket-Version\" LEAF_NODE 15 \"Sec-WebSocket-Version\" LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 sscanf ( v -> value , \"%30d\" , & version ) != 1 EXPR 13 sscanf ( v -> value , \"%30d\" , & version ) != 1 FUNCTION_CALL 14 sscanf ( v -> value , \"%30d\" , & version ) CALLEE 15 sscanf LEAF_NODE 16 sscanf LEAF_NODE 15 ( ARGUMENT 15 v -> value FIELD 16 v -> value LEAF_NODE 17 v LEAF_NODE 17 -> LEAF_NODE 17 value LEAF_NODE 15 , ARGUMENT 15 \"%30d\" FIELD 16 \"%30d\" LEAF_NODE 17 \"%30d\" LEAF_NODE 15 , ARGUMENT 15 & version UNARY_EXPR 16 & version UNARY_OPERATOR 17 & LEAF_NODE 18 & FIELD 17 version LEAF_NODE 18 version LEAF_NODE 15 ) EQ_OPERATOR 14 != LEAF_NODE 15 != FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 version = 0 ; EXPR 15 version = 0 ASSIGN 16 version = 0 LVAL 17 version FIELD 18 version LEAF_NODE 19 version ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 0 FIELD 18 0 LEAF_NODE 19 0 LEAF_NODE 15 ; LEAF_NODE 13 } LEAF_NODE 10 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! upgrade || strcasecmp ( upgrade , \"websocket\" ) EXPR 5 ! upgrade || strcasecmp ( upgrade , \"websocket\" ) OR 6 ! upgrade || strcasecmp ( upgrade , \"websocket\" ) EXPR 7 ! upgrade UNARY_EXPR 8 ! upgrade UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 upgrade LEAF_NODE 10 upgrade LEAF_NODE 7 || EXPR 7 strcasecmp ( upgrade , \"websocket\" ) FUNCTION_CALL 8 strcasecmp ( upgrade , \"websocket\" ) CALLEE 9 strcasecmp LEAF_NODE 10 strcasecmp LEAF_NODE 9 ( ARGUMENT 9 upgrade FIELD 10 upgrade LEAF_NODE 11 upgrade LEAF_NODE 9 , ARGUMENT 9 \"websocket\" FIELD 10 \"websocket\" LEAF_NODE 11 \"websocket\" LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - did not request WebSocket\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 7 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - did not request WebSocket\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - did not request WebSocket\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"WebSocket connection from '%s' could not be accepted - did not request WebSocket\\n\" FIELD 10 \"WebSocket connection from '%s' could not be accepted - did not request WebSocket\\n\" LEAF_NODE 11 \"WebSocket connection from '%s' could not be accepted - did not request WebSocket\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 10 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 & ser -> remote_address UNARY_EXPR 12 & ser -> remote_address UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 ser -> remote_address LEAF_NODE 14 ser LEAF_NODE 14 -> LEAF_NODE 14 remote_address LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_http_error ( ser , 426 , \"Upgrade Required\" , NULL ) ; EXPR 7 ast_http_error ( ser , 426 , \"Upgrade Required\" , NULL ) FUNCTION_CALL 8 ast_http_error ( ser , 426 , \"Upgrade Required\" , NULL ) CALLEE 9 ast_http_error LEAF_NODE 10 ast_http_error LEAF_NODE 9 ( ARGUMENT 9 ser FIELD 10 ser LEAF_NODE 11 ser LEAF_NODE 9 , ARGUMENT 9 426 FIELD 10 426 LEAF_NODE 11 426 LEAF_NODE 9 , ARGUMENT 9 \"Upgrade Required\" FIELD 10 \"Upgrade Required\" LEAF_NODE 11 \"Upgrade Required\" LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ast_strlen_zero ( protos ) EXPR 7 ast_strlen_zero ( protos ) FUNCTION_CALL 8 ast_strlen_zero ( protos ) CALLEE 9 ast_strlen_zero LEAF_NODE 10 ast_strlen_zero LEAF_NODE 9 ( ARGUMENT 9 protos FIELD 10 protos LEAF_NODE 11 protos LEAF_NODE 9 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 protocol_handler = one_protocol ( server ) ; EXPR 9 protocol_handler = one_protocol ( server ) ASSIGN 10 protocol_handler = one_protocol ( server ) LVAL 11 protocol_handler FIELD 12 protocol_handler LEAF_NODE 13 protocol_handler ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 one_protocol ( server ) FUNCTION_CALL 12 one_protocol ( server ) CALLEE 13 one_protocol LEAF_NODE 14 one_protocol LEAF_NODE 13 ( ARGUMENT 13 server FIELD 14 server LEAF_NODE 15 server LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! protocol_handler EXPR 10 ! protocol_handler UNARY_EXPR 11 ! protocol_handler UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 protocol_handler LEAF_NODE 13 protocol_handler LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - no protocols requested\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 12 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - no protocols requested\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 13 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - no protocols requested\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 14 ast_log LEAF_NODE 15 ast_log LEAF_NODE 14 ( ARGUMENT 14 LOG_WARNING FIELD 15 LOG_WARNING LEAF_NODE 16 LOG_WARNING LEAF_NODE 14 , ARGUMENT 14 \"WebSocket connection from '%s' could not be accepted - no protocols requested\\n\" FIELD 15 \"WebSocket connection from '%s' could not be accepted - no protocols requested\\n\" LEAF_NODE 16 \"WebSocket connection from '%s' could not be accepted - no protocols requested\\n\" LEAF_NODE 14 , ARGUMENT 14 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 15 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 16 ast_sockaddr_stringify LEAF_NODE 17 ast_sockaddr_stringify LEAF_NODE 16 ( ARGUMENT 16 & ser -> remote_address UNARY_EXPR 17 & ser -> remote_address UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 ser -> remote_address LEAF_NODE 19 ser LEAF_NODE 19 -> LEAF_NODE 19 remote_address LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 websocket_function_request ( ser ) ; EXPR 12 websocket_function_request ( ser ) FUNCTION_CALL 13 websocket_function_request ( ser ) CALLEE 14 websocket_function_request LEAF_NODE 15 websocket_function_request LEAF_NODE 14 ( ARGUMENT 14 ser FIELD 15 ser LEAF_NODE 16 ser LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 return 0 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 0 EXPR 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ; LEAF_NODE 10 } LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 key1 && key2 EXPR 7 key1 && key2 AND 8 key1 && key2 EXPR 9 key1 FIELD 10 key1 LEAF_NODE 11 key1 LEAF_NODE 9 && EXPR 9 key2 FIELD 10 key2 LEAF_NODE 11 key2 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - unsupported version '00/76' chosen\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 9 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - unsupported version '00/76' chosen\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 10 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - unsupported version '00/76' chosen\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 11 ast_log LEAF_NODE 12 ast_log LEAF_NODE 11 ( ARGUMENT 11 LOG_WARNING FIELD 12 LOG_WARNING LEAF_NODE 13 LOG_WARNING LEAF_NODE 11 , ARGUMENT 11 \"WebSocket connection from '%s' could not be accepted - unsupported version '00/76' chosen\\n\" FIELD 12 \"WebSocket connection from '%s' could not be accepted - unsupported version '00/76' chosen\\n\" LEAF_NODE 13 \"WebSocket connection from '%s' could not be accepted - unsupported version '00/76' chosen\\n\" LEAF_NODE 11 , ARGUMENT 11 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 12 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 13 ast_sockaddr_stringify LEAF_NODE 14 ast_sockaddr_stringify LEAF_NODE 13 ( ARGUMENT 13 & ser -> remote_address UNARY_EXPR 14 & ser -> remote_address UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 ser -> remote_address LEAF_NODE 16 ser LEAF_NODE 16 -> LEAF_NODE 16 remote_address LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 9 ; EXPR_STATEMENT 8 websocket_function_request ( ser ) ; EXPR 9 websocket_function_request ( ser ) FUNCTION_CALL 10 websocket_function_request ( ser ) CALLEE 11 websocket_function_request LEAF_NODE 12 websocket_function_request LEAF_NODE 11 ( ARGUMENT 11 ser FIELD 12 ser LEAF_NODE 13 ser LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! protocol_handler && protos EXPR 5 ! protocol_handler && protos AND 6 ! protocol_handler && protos EXPR 7 ! protocol_handler UNARY_EXPR 8 ! protocol_handler UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 protocol_handler LEAF_NODE 10 protocol_handler LEAF_NODE 7 && EXPR 7 protos FIELD 8 protos LEAF_NODE 9 protos LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 requested_protocols = ast_strdupa ( protos ) ; EXPR 7 requested_protocols = ast_strdupa ( protos ) ASSIGN 8 requested_protocols = ast_strdupa ( protos ) LVAL 9 requested_protocols FIELD 10 requested_protocols LEAF_NODE 11 requested_protocols ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_strdupa ( protos ) FUNCTION_CALL 10 ast_strdupa ( protos ) CALLEE 11 ast_strdupa LEAF_NODE 12 ast_strdupa LEAF_NODE 11 ( ARGUMENT 11 protos FIELD 12 protos LEAF_NODE 13 protos LEAF_NODE 11 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 ! protocol_handler && ( protocol = strsep ( & requested_protocols , \",\" ) ) EXPR 8 ! protocol_handler && ( protocol = strsep ( & requested_protocols , \",\" ) ) AND 9 ! protocol_handler && ( protocol = strsep ( & requested_protocols , \",\" ) ) EXPR 10 ! protocol_handler UNARY_EXPR 11 ! protocol_handler UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 protocol_handler LEAF_NODE 13 protocol_handler LEAF_NODE 10 && EXPR 10 ( protocol = strsep ( & requested_protocols , \",\" ) ) LEAF_NODE 11 ( ASSIGN 11 protocol = strsep ( & requested_protocols , \",\" ) LVAL 12 protocol FIELD 13 protocol LEAF_NODE 14 protocol ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 strsep ( & requested_protocols , \",\" ) FUNCTION_CALL 13 strsep ( & requested_protocols , \",\" ) CALLEE 14 strsep LEAF_NODE 15 strsep LEAF_NODE 14 ( ARGUMENT 14 & requested_protocols UNARY_EXPR 15 & requested_protocols UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 requested_protocols LEAF_NODE 17 requested_protocols LEAF_NODE 14 , ARGUMENT 14 \",\" FIELD 15 \",\" LEAF_NODE 16 \",\" LEAF_NODE 14 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 protocol_handler = ao2_find ( server -> protocols , ast_strip ( protocol ) , OBJ_KEY ) ; EXPR 10 protocol_handler = ao2_find ( server -> protocols , ast_strip ( protocol ) , OBJ_KEY ) ASSIGN 11 protocol_handler = ao2_find ( server -> protocols , ast_strip ( protocol ) , OBJ_KEY ) LVAL 12 protocol_handler FIELD 13 protocol_handler LEAF_NODE 14 protocol_handler ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ao2_find ( server -> protocols , ast_strip ( protocol ) , OBJ_KEY ) FUNCTION_CALL 13 ao2_find ( server -> protocols , ast_strip ( protocol ) , OBJ_KEY ) CALLEE 14 ao2_find LEAF_NODE 15 ao2_find LEAF_NODE 14 ( ARGUMENT 14 server -> protocols FIELD 15 server -> protocols LEAF_NODE 16 server LEAF_NODE 16 -> LEAF_NODE 16 protocols LEAF_NODE 14 , ARGUMENT 14 ast_strip ( protocol ) FUNCTION_CALL 15 ast_strip ( protocol ) CALLEE 16 ast_strip LEAF_NODE 17 ast_strip LEAF_NODE 16 ( ARGUMENT 16 protocol FIELD 17 protocol LEAF_NODE 18 protocol LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 OBJ_KEY FIELD 15 OBJ_KEY LEAF_NODE 16 OBJ_KEY LEAF_NODE 14 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! protocol_handler EXPR 5 ! protocol_handler UNARY_EXPR 6 ! protocol_handler UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 protocol_handler LEAF_NODE 8 protocol_handler LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - no protocols out of '%s' supported\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , protos ) ; EXPR 7 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - no protocols out of '%s' supported\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , protos ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - no protocols out of '%s' supported\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , protos ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"WebSocket connection from '%s' could not be accepted - no protocols out of '%s' supported\\n\" FIELD 10 \"WebSocket connection from '%s' could not be accepted - no protocols out of '%s' supported\\n\" LEAF_NODE 11 \"WebSocket connection from '%s' could not be accepted - no protocols out of '%s' supported\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 10 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 & ser -> remote_address UNARY_EXPR 12 & ser -> remote_address UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 ser -> remote_address LEAF_NODE 14 ser LEAF_NODE 14 -> LEAF_NODE 14 remote_address LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 protos FIELD 10 protos LEAF_NODE 11 protos LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 websocket_function_request ( ser ) ; EXPR 7 websocket_function_request ( ser ) FUNCTION_CALL 8 websocket_function_request ( ser ) CALLEE 9 websocket_function_request LEAF_NODE 10 websocket_function_request LEAF_NODE 9 ( ARGUMENT 9 ser FIELD 10 ser LEAF_NODE 11 ser LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 version == 7 || version == 8 || version == 13 EXPR 5 version == 7 || version == 8 || version == 13 OR 6 version == 7 || version == 8 || version == 13 EXPR 7 version == 7 FIELD 8 version LEAF_NODE 9 version EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 7 LEAF_NODE 9 7 LEAF_NODE 7 || EXPR 7 version == 8 || version == 13 OR 8 version == 8 || version == 13 EXPR 9 version == 8 FIELD 10 version LEAF_NODE 11 version EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 8 LEAF_NODE 11 8 LEAF_NODE 9 || EXPR 9 version == 13 FIELD 10 version LEAF_NODE 11 version EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 13 LEAF_NODE 11 13 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char [ 64 ] base64 ; VAR_DECL 7 char [ 64 ] base64 TYPE 8 char [ 64 ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ 64 ] LEAF_NODE 10 [ FIELD 10 64 LEAF_NODE 11 64 LEAF_NODE 10 ] NAME 8 base64 LEAF_NODE 9 base64 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! key || strlen ( key ) + strlen ( WEBSOCKET_GUID ) + 1 > 8192 EXPR 8 ! key || strlen ( key ) + strlen ( WEBSOCKET_GUID ) + 1 > 8192 OR 9 ! key || strlen ( key ) + strlen ( WEBSOCKET_GUID ) + 1 > 8192 EXPR 10 ! key UNARY_EXPR 11 ! key UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 key LEAF_NODE 13 key LEAF_NODE 10 || EXPR 10 strlen ( key ) + strlen ( WEBSOCKET_GUID ) + 1 > 8192 FUNCTION_CALL 11 strlen ( key ) CALLEE 12 strlen LEAF_NODE 13 strlen LEAF_NODE 12 ( ARGUMENT 12 key FIELD 13 key LEAF_NODE 14 key LEAF_NODE 12 ) LEAF_NODE 11 + FUNCTION_CALL 11 strlen ( WEBSOCKET_GUID ) CALLEE 12 strlen LEAF_NODE 13 strlen LEAF_NODE 12 ( ARGUMENT 12 WEBSOCKET_GUID FIELD 13 WEBSOCKET_GUID LEAF_NODE 14 WEBSOCKET_GUID LEAF_NODE 12 ) LEAF_NODE 11 + FIELD 11 1 LEAF_NODE 12 1 REL_OPERATOR 11 > LEAF_NODE 12 > FIELD 11 8192 LEAF_NODE 12 8192 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 websocket_function_request ( ser ) ; EXPR 10 websocket_function_request ( ser ) FUNCTION_CALL 11 websocket_function_request ( ser ) CALLEE 12 websocket_function_request LEAF_NODE 13 websocket_function_request LEAF_NODE 12 ( ARGUMENT 12 ser FIELD 13 ser LEAF_NODE 14 ser LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ao2_ref ( protocol_handler , - 1 ) ; EXPR 10 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 11 ao2_ref ( protocol_handler , - 1 ) CALLEE 12 ao2_ref LEAF_NODE 13 ao2_ref LEAF_NODE 12 ( ARGUMENT 12 protocol_handler FIELD 13 protocol_handler LEAF_NODE 14 protocol_handler LEAF_NODE 12 , ARGUMENT 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ast_http_body_discard ( ser ) EXPR 8 ast_http_body_discard ( ser ) FUNCTION_CALL 9 ast_http_body_discard ( ser ) CALLEE 10 ast_http_body_discard LEAF_NODE 11 ast_http_body_discard LEAF_NODE 10 ( ARGUMENT 10 ser FIELD 11 ser LEAF_NODE 12 ser LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 websocket_function_request ( ser ) ; EXPR 10 websocket_function_request ( ser ) FUNCTION_CALL 11 websocket_function_request ( ser ) CALLEE 12 websocket_function_request LEAF_NODE 13 websocket_function_request LEAF_NODE 12 ( ARGUMENT 12 ser FIELD 13 ser LEAF_NODE 14 ser LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ao2_ref ( protocol_handler , - 1 ) ; EXPR 10 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 11 ao2_ref ( protocol_handler , - 1 ) CALLEE 12 ao2_ref LEAF_NODE 13 ao2_ref LEAF_NODE 12 ( ARGUMENT 12 protocol_handler FIELD 13 protocol_handler LEAF_NODE 14 protocol_handler LEAF_NODE 12 , ARGUMENT 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ( session = ao2_alloc ( sizeof ( * session ) + AST_UUID_STR_LEN + 1 , session_destroy_fn ) ) EXPR 8 ! ( session = ao2_alloc ( sizeof ( * session ) + AST_UUID_STR_LEN + 1 , session_destroy_fn ) ) UNARY_EXPR 9 ! ( session = ao2_alloc ( sizeof ( * session ) + AST_UUID_STR_LEN + 1 , session_destroy_fn ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! LEAF_NODE 10 ( ASSIGN 10 session = ao2_alloc ( sizeof ( * session ) + AST_UUID_STR_LEN + 1 , session_destroy_fn ) LVAL 11 session FIELD 12 session LEAF_NODE 13 session ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ao2_alloc ( sizeof ( * session ) + AST_UUID_STR_LEN + 1 , session_destroy_fn ) FUNCTION_CALL 12 ao2_alloc ( sizeof ( * session ) + AST_UUID_STR_LEN + 1 , session_destroy_fn ) CALLEE 13 ao2_alloc LEAF_NODE 14 ao2_alloc LEAF_NODE 13 ( ARGUMENT 13 sizeof ( * session ) + AST_UUID_STR_LEN + 1 FUNCTION_CALL 14 sizeof ( * session ) CALLEE 15 sizeof LEAF_NODE 16 sizeof LEAF_NODE 15 ( ARGUMENT 15 * session UNARY_EXPR 16 * session UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 session LEAF_NODE 18 session LEAF_NODE 15 ) LEAF_NODE 14 + FIELD 14 AST_UUID_STR_LEN LEAF_NODE 15 AST_UUID_STR_LEN LEAF_NODE 14 + FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 , ARGUMENT 13 session_destroy_fn FIELD 14 session_destroy_fn LEAF_NODE 15 session_destroy_fn LEAF_NODE 13 ) LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 10 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"WebSocket connection from '%s' could not be accepted\\n\" FIELD 13 \"WebSocket connection from '%s' could not be accepted\\n\" LEAF_NODE 14 \"WebSocket connection from '%s' could not be accepted\\n\" LEAF_NODE 12 , ARGUMENT 12 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 13 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 14 ast_sockaddr_stringify LEAF_NODE 15 ast_sockaddr_stringify LEAF_NODE 14 ( ARGUMENT 14 & ser -> remote_address UNARY_EXPR 15 & ser -> remote_address UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ser -> remote_address LEAF_NODE 17 ser LEAF_NODE 17 -> LEAF_NODE 17 remote_address LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 websocket_function_request ( ser ) ; EXPR 10 websocket_function_request ( ser ) FUNCTION_CALL 11 websocket_function_request ( ser ) CALLEE 12 websocket_function_request LEAF_NODE 13 websocket_function_request LEAF_NODE 12 ( ARGUMENT 12 ser FIELD 13 ser LEAF_NODE 14 ser LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ao2_ref ( protocol_handler , - 1 ) ; EXPR 10 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 11 ao2_ref ( protocol_handler , - 1 ) CALLEE 12 ao2_ref LEAF_NODE 13 ao2_ref LEAF_NODE 12 ( ARGUMENT 12 protocol_handler FIELD 13 protocol_handler LEAF_NODE 14 protocol_handler LEAF_NODE 12 , ARGUMENT 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 session -> timeout = AST_DEFAULT_WEBSOCKET_WRITE_TIMEOUT ; EXPR 7 session -> timeout = AST_DEFAULT_WEBSOCKET_WRITE_TIMEOUT ASSIGN 8 session -> timeout = AST_DEFAULT_WEBSOCKET_WRITE_TIMEOUT LVAL 9 session -> timeout FIELD 10 session -> timeout LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 timeout ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 AST_DEFAULT_WEBSOCKET_WRITE_TIMEOUT FIELD 10 AST_DEFAULT_WEBSOCKET_WRITE_TIMEOUT LEAF_NODE 11 AST_DEFAULT_WEBSOCKET_WRITE_TIMEOUT LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ast_uuid_generate_str ( session -> session_id , sizeof ( session -> session_id ) ) EXPR 8 ! ast_uuid_generate_str ( session -> session_id , sizeof ( session -> session_id ) ) UNARY_EXPR 9 ! ast_uuid_generate_str ( session -> session_id , sizeof ( session -> session_id ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ast_uuid_generate_str ( session -> session_id , sizeof ( session -> session_id ) ) CALLEE 11 ast_uuid_generate_str LEAF_NODE 12 ast_uuid_generate_str LEAF_NODE 11 ( ARGUMENT 11 session -> session_id FIELD 12 session -> session_id LEAF_NODE 13 session LEAF_NODE 13 -> LEAF_NODE 13 session_id LEAF_NODE 11 , ARGUMENT 11 sizeof ( session -> session_id ) FUNCTION_CALL 12 sizeof ( session -> session_id ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 session -> session_id FIELD 14 session -> session_id LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 session_id LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to generate a session id\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 10 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to generate a session id\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to generate a session id\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"WebSocket connection from '%s' could not be accepted - failed to generate a session id\\n\" FIELD 13 \"WebSocket connection from '%s' could not be accepted - failed to generate a session id\\n\" LEAF_NODE 14 \"WebSocket connection from '%s' could not be accepted - failed to generate a session id\\n\" LEAF_NODE 12 , ARGUMENT 12 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 13 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 14 ast_sockaddr_stringify LEAF_NODE 15 ast_sockaddr_stringify LEAF_NODE 14 ( ARGUMENT 14 & ser -> remote_address UNARY_EXPR 15 & ser -> remote_address UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ser -> remote_address LEAF_NODE 17 ser LEAF_NODE 17 -> LEAF_NODE 17 remote_address LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_http_error ( ser , 500 , \"Internal Server Error\" , \"Allocation failed\" ) ; EXPR 10 ast_http_error ( ser , 500 , \"Internal Server Error\" , \"Allocation failed\" ) FUNCTION_CALL 11 ast_http_error ( ser , 500 , \"Internal Server Error\" , \"Allocation failed\" ) CALLEE 12 ast_http_error LEAF_NODE 13 ast_http_error LEAF_NODE 12 ( ARGUMENT 12 ser FIELD 13 ser LEAF_NODE 14 ser LEAF_NODE 12 , ARGUMENT 12 500 FIELD 13 500 LEAF_NODE 14 500 LEAF_NODE 12 , ARGUMENT 12 \"Internal Server Error\" FIELD 13 \"Internal Server Error\" LEAF_NODE 14 \"Internal Server Error\" LEAF_NODE 12 , ARGUMENT 12 \"Allocation failed\" FIELD 13 \"Allocation failed\" LEAF_NODE 14 \"Allocation failed\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ao2_ref ( protocol_handler , - 1 ) ; EXPR 10 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 11 ao2_ref ( protocol_handler , - 1 ) CALLEE 12 ao2_ref LEAF_NODE 13 ao2_ref LEAF_NODE 12 ( ARGUMENT 12 protocol_handler FIELD 13 protocol_handler LEAF_NODE 14 protocol_handler LEAF_NODE 12 , ARGUMENT 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 protocol_handler -> session_attempted && protocol_handler -> session_attempted ( ser , get_vars , headers , session -> session_id ) EXPR 8 protocol_handler -> session_attempted && protocol_handler -> session_attempted ( ser , get_vars , headers , session -> session_id ) AND 9 protocol_handler -> session_attempted && protocol_handler -> session_attempted ( ser , get_vars , headers , session -> session_id ) EXPR 10 protocol_handler -> session_attempted FIELD 11 protocol_handler -> session_attempted LEAF_NODE 12 protocol_handler LEAF_NODE 12 -> LEAF_NODE 12 session_attempted LEAF_NODE 10 && EXPR 10 protocol_handler -> session_attempted ( ser , get_vars , headers , session -> session_id ) FUNCTION_CALL 11 protocol_handler -> session_attempted ( ser , get_vars , headers , session -> session_id ) CALLEE 12 protocol_handler -> session_attempted LEAF_NODE 13 protocol_handler LEAF_NODE 13 -> LEAF_NODE 13 session_attempted LEAF_NODE 12 ( ARGUMENT 12 ser FIELD 13 ser LEAF_NODE 14 ser LEAF_NODE 12 , ARGUMENT 12 get_vars FIELD 13 get_vars LEAF_NODE 14 get_vars LEAF_NODE 12 , ARGUMENT 12 headers FIELD 13 headers LEAF_NODE 14 headers LEAF_NODE 12 , ARGUMENT 12 session -> session_id FIELD 13 session -> session_id LEAF_NODE 14 session LEAF_NODE 14 -> LEAF_NODE 14 session_id LEAF_NODE 12 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_debug ( 3 , \"WebSocket connection from '%s' rejected by protocol handler '%s'\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , protocol_handler -> name ) ; EXPR 10 ast_debug ( 3 , \"WebSocket connection from '%s' rejected by protocol handler '%s'\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , protocol_handler -> name ) FUNCTION_CALL 11 ast_debug ( 3 , \"WebSocket connection from '%s' rejected by protocol handler '%s'\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , protocol_handler -> name ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 3 FIELD 13 3 LEAF_NODE 14 3 LEAF_NODE 12 , ARGUMENT 12 \"WebSocket connection from '%s' rejected by protocol handler '%s'\\n\" FIELD 13 \"WebSocket connection from '%s' rejected by protocol handler '%s'\\n\" LEAF_NODE 14 \"WebSocket connection from '%s' rejected by protocol handler '%s'\\n\" LEAF_NODE 12 , ARGUMENT 12 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 13 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 14 ast_sockaddr_stringify LEAF_NODE 15 ast_sockaddr_stringify LEAF_NODE 14 ( ARGUMENT 14 & ser -> remote_address UNARY_EXPR 15 & ser -> remote_address UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 ser -> remote_address LEAF_NODE 17 ser LEAF_NODE 17 -> LEAF_NODE 17 remote_address LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 protocol_handler -> name FIELD 13 protocol_handler -> name LEAF_NODE 14 protocol_handler LEAF_NODE 14 -> LEAF_NODE 14 name LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 websocket_function_request ( ser ) ; EXPR 10 websocket_function_request ( ser ) FUNCTION_CALL 11 websocket_function_request ( ser ) CALLEE 12 websocket_function_request LEAF_NODE 13 websocket_function_request LEAF_NODE 12 ( ARGUMENT 12 ser FIELD 13 ser LEAF_NODE 14 ser LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ao2_ref ( protocol_handler , - 1 ) ; EXPR 10 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 11 ao2_ref ( protocol_handler , - 1 ) CALLEE 12 ao2_ref LEAF_NODE 13 ao2_ref LEAF_NODE 12 ( ARGUMENT 12 protocol_handler FIELD 13 protocol_handler LEAF_NODE 14 protocol_handler LEAF_NODE 12 , ARGUMENT 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 protocol EXPR 8 protocol FIELD 9 protocol LEAF_NODE 10 protocol LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LEAF_NODE 9 ast_iostream_printf LEAF_NODE 9 ( LEAF_NODE 9 ser LEAF_NODE 9 -> LEAF_NODE 9 stream LEAF_NODE 9 , LEAF_NODE 9 \"HTTP/1.1 101 Switching Protocols\\r\\n\" LEAF_NODE 9 \"Upgrade: %s\\r\\n\" LEAF_NODE 9 \"Connection: Upgrade\\r\\n\" LEAF_NODE 9 \"Sec-WebSocket-Accept: %s\\r\\n\" LEAF_NODE 9 \"Sec-WebSocket-Protocol: %s\\r\\n\\r\\n\" LEAF_NODE 9 , LEAF_NODE 9 upgrade LEAF_NODE 9 , LEAF_NODE 9 websocket_combine_key LEAF_NODE 9 ( LEAF_NODE 9 key LEAF_NODE 9 , LEAF_NODE 9 base64 LEAF_NODE 9 , LEAF_NODE 9 sizeof LEAF_NODE 9 ( LEAF_NODE 9 base64 LEAF_NODE 9 ) LEAF_NODE 9 ) LEAF_NODE 9 , LEAF_NODE 9 protocol LEAF_NODE 9 ) LEAF_NODE 9 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LEAF_NODE 9 ast_iostream_printf LEAF_NODE 9 ( LEAF_NODE 9 ser LEAF_NODE 9 -> LEAF_NODE 9 stream LEAF_NODE 9 , LEAF_NODE 9 \"HTTP/1.1 101 Switching Protocols\\r\\n\" LEAF_NODE 9 \"Upgrade: %s\\r\\n\" LEAF_NODE 9 \"Connection: Upgrade\\r\\n\" LEAF_NODE 9 \"Sec-WebSocket-Accept: %s\\r\\n\\r\\n\" LEAF_NODE 9 , LEAF_NODE 9 upgrade LEAF_NODE 9 , LEAF_NODE 9 websocket_combine_key LEAF_NODE 9 ( LEAF_NODE 9 key LEAF_NODE 9 , LEAF_NODE 9 base64 LEAF_NODE 9 , LEAF_NODE 9 sizeof LEAF_NODE 9 ( LEAF_NODE 9 base64 LEAF_NODE 9 ) LEAF_NODE 9 ) LEAF_NODE 9 ) LEAF_NODE 9 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - unsupported version '%d' chosen\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , version ? version : 75 ) ; EXPR 7 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - unsupported version '%d' chosen\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , version ? version : 75 ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - unsupported version '%d' chosen\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) , version ? version : 75 ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"WebSocket connection from '%s' could not be accepted - unsupported version '%d' chosen\\n\" FIELD 10 \"WebSocket connection from '%s' could not be accepted - unsupported version '%d' chosen\\n\" LEAF_NODE 11 \"WebSocket connection from '%s' could not be accepted - unsupported version '%d' chosen\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 10 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 & ser -> remote_address UNARY_EXPR 12 & ser -> remote_address UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 ser -> remote_address LEAF_NODE 14 ser LEAF_NODE 14 -> LEAF_NODE 14 remote_address LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 version ? version : 75 COND_EXPR 10 version ? version : 75 CONDITION 11 version FIELD 12 version LEAF_NODE 13 version LEAF_NODE 11 ? EXPR 11 version FIELD 12 version LEAF_NODE 13 version LEAF_NODE 11 : FIELD 11 75 LEAF_NODE 12 75 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 websocket_function_request ( ser ) ; EXPR 7 websocket_function_request ( ser ) FUNCTION_CALL 8 websocket_function_request ( ser ) CALLEE 9 websocket_function_request LEAF_NODE 10 websocket_function_request LEAF_NODE 9 ( ARGUMENT 9 ser FIELD 10 ser LEAF_NODE 11 ser LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_ref ( protocol_handler , - 1 ) ; EXPR 7 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 8 ao2_ref ( protocol_handler , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 protocol_handler FIELD 10 protocol_handler LEAF_NODE 11 protocol_handler LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 setsockopt ( ast_iostream_get_fd ( ser -> stream ) , SOL_SOCKET , SO_KEEPALIVE , & flags , sizeof ( flags ) ) EXPR 5 setsockopt ( ast_iostream_get_fd ( ser -> stream ) , SOL_SOCKET , SO_KEEPALIVE , & flags , sizeof ( flags ) ) FUNCTION_CALL 6 setsockopt ( ast_iostream_get_fd ( ser -> stream ) , SOL_SOCKET , SO_KEEPALIVE , & flags , sizeof ( flags ) ) CALLEE 7 setsockopt LEAF_NODE 8 setsockopt LEAF_NODE 7 ( ARGUMENT 7 ast_iostream_get_fd ( ser -> stream ) FUNCTION_CALL 8 ast_iostream_get_fd ( ser -> stream ) CALLEE 9 ast_iostream_get_fd LEAF_NODE 10 ast_iostream_get_fd LEAF_NODE 9 ( ARGUMENT 9 ser -> stream FIELD 10 ser -> stream LEAF_NODE 11 ser LEAF_NODE 11 -> LEAF_NODE 11 stream LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 SOL_SOCKET FIELD 8 SOL_SOCKET LEAF_NODE 9 SOL_SOCKET LEAF_NODE 7 , ARGUMENT 7 SO_KEEPALIVE FIELD 8 SO_KEEPALIVE LEAF_NODE 9 SO_KEEPALIVE LEAF_NODE 7 , ARGUMENT 7 & flags UNARY_EXPR 8 & flags UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 flags LEAF_NODE 10 flags LEAF_NODE 7 , ARGUMENT 7 sizeof ( flags ) FUNCTION_CALL 8 sizeof ( flags ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 flags FIELD 10 flags LEAF_NODE 11 flags LEAF_NODE 9 ) LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to enable keepalive\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 7 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to enable keepalive\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to enable keepalive\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"WebSocket connection from '%s' could not be accepted - failed to enable keepalive\\n\" FIELD 10 \"WebSocket connection from '%s' could not be accepted - failed to enable keepalive\\n\" LEAF_NODE 11 \"WebSocket connection from '%s' could not be accepted - failed to enable keepalive\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 10 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 & ser -> remote_address UNARY_EXPR 12 & ser -> remote_address UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 ser -> remote_address LEAF_NODE 14 ser LEAF_NODE 14 -> LEAF_NODE 14 remote_address LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 websocket_function_request ( ser ) ; EXPR 7 websocket_function_request ( ser ) FUNCTION_CALL 8 websocket_function_request ( ser ) CALLEE 9 websocket_function_request LEAF_NODE 10 websocket_function_request LEAF_NODE 9 ( ARGUMENT 9 ser FIELD 10 ser LEAF_NODE 11 ser LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_ref ( session , - 1 ) ; EXPR 7 ao2_ref ( session , - 1 ) FUNCTION_CALL 8 ao2_ref ( session , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 session FIELD 10 session LEAF_NODE 11 session LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_ref ( protocol_handler , - 1 ) ; EXPR 7 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 8 ao2_ref ( protocol_handler , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 protocol_handler FIELD 10 protocol_handler LEAF_NODE 11 protocol_handler LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_getsockname ( ast_iostream_get_fd ( ser -> stream ) , & session -> local_address ) EXPR 5 ast_getsockname ( ast_iostream_get_fd ( ser -> stream ) , & session -> local_address ) FUNCTION_CALL 6 ast_getsockname ( ast_iostream_get_fd ( ser -> stream ) , & session -> local_address ) CALLEE 7 ast_getsockname LEAF_NODE 8 ast_getsockname LEAF_NODE 7 ( ARGUMENT 7 ast_iostream_get_fd ( ser -> stream ) FUNCTION_CALL 8 ast_iostream_get_fd ( ser -> stream ) CALLEE 9 ast_iostream_get_fd LEAF_NODE 10 ast_iostream_get_fd LEAF_NODE 9 ( ARGUMENT 9 ser -> stream FIELD 10 ser -> stream LEAF_NODE 11 ser LEAF_NODE 11 -> LEAF_NODE 11 stream LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 & session -> local_address UNARY_EXPR 8 & session -> local_address UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 session -> local_address LEAF_NODE 10 session LEAF_NODE 10 -> LEAF_NODE 10 local_address LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to get local address\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) ; EXPR 7 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to get local address\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"WebSocket connection from '%s' could not be accepted - failed to get local address\\n\" , ast_sockaddr_stringify ( & ser -> remote_address ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"WebSocket connection from '%s' could not be accepted - failed to get local address\\n\" FIELD 10 \"WebSocket connection from '%s' could not be accepted - failed to get local address\\n\" LEAF_NODE 11 \"WebSocket connection from '%s' could not be accepted - failed to get local address\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_stringify ( & ser -> remote_address ) FUNCTION_CALL 10 ast_sockaddr_stringify ( & ser -> remote_address ) CALLEE 11 ast_sockaddr_stringify LEAF_NODE 12 ast_sockaddr_stringify LEAF_NODE 11 ( ARGUMENT 11 & ser -> remote_address UNARY_EXPR 12 & ser -> remote_address UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 ser -> remote_address LEAF_NODE 14 ser LEAF_NODE 14 -> LEAF_NODE 14 remote_address LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 websocket_function_request ( ser ) ; EXPR 7 websocket_function_request ( ser ) FUNCTION_CALL 8 websocket_function_request ( ser ) CALLEE 9 websocket_function_request LEAF_NODE 10 websocket_function_request LEAF_NODE 9 ( ARGUMENT 9 ser FIELD 10 ser LEAF_NODE 11 ser LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_ref ( session , - 1 ) ; EXPR 7 ao2_ref ( session , - 1 ) FUNCTION_CALL 8 ao2_ref ( session , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 session FIELD 10 session LEAF_NODE 11 session LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_ref ( protocol_handler , - 1 ) ; EXPR 7 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 8 ao2_ref ( protocol_handler , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 protocol_handler FIELD 10 protocol_handler LEAF_NODE 11 protocol_handler LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 ast_verb LEAF_NODE 3 ( LEAF_NODE 3 2 LEAF_NODE 3 , LEAF_NODE 3 \"WebSocket connection from '%s' for protocol '%s' accepted using version '%d'\\n\" LEAF_NODE 3 , LEAF_NODE 3 ast_sockaddr_stringify LEAF_NODE 3 ( LEAF_NODE 3 & LEAF_NODE 3 ser LEAF_NODE 3 -> LEAF_NODE 3 remote_address LEAF_NODE 3 ) LEAF_NODE 3 , LEAF_NODE 3 protocol LEAF_NODE 3 ? LEAF_NODE 3 : LEAF_NODE 3 \"\" LEAF_NODE 3 , LEAF_NODE 3 version LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 session -> stream = ser -> stream ; EXPR 4 session -> stream = ser -> stream ASSIGN 5 session -> stream = ser -> stream LVAL 6 session -> stream FIELD 7 session -> stream LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 stream ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ser -> stream FIELD 7 ser -> stream LEAF_NODE 8 ser LEAF_NODE 8 -> LEAF_NODE 8 stream LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_sockaddr_copy ( & session -> remote_address , & ser -> remote_address ) ; EXPR 4 ast_sockaddr_copy ( & session -> remote_address , & ser -> remote_address ) FUNCTION_CALL 5 ast_sockaddr_copy ( & session -> remote_address , & ser -> remote_address ) CALLEE 6 ast_sockaddr_copy LEAF_NODE 7 ast_sockaddr_copy LEAF_NODE 6 ( ARGUMENT 6 & session -> remote_address UNARY_EXPR 7 & session -> remote_address UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 session -> remote_address LEAF_NODE 9 session LEAF_NODE 9 -> LEAF_NODE 9 remote_address LEAF_NODE 6 , ARGUMENT 6 & ser -> remote_address UNARY_EXPR 7 & ser -> remote_address UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 ser -> remote_address LEAF_NODE 9 ser LEAF_NODE 9 -> LEAF_NODE 9 remote_address LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 session -> opcode = - 1 ; EXPR 4 session -> opcode = - 1 ASSIGN 5 session -> opcode = - 1 LVAL 6 session -> opcode FIELD 7 session -> opcode LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 opcode ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 session -> reconstruct = DEFAULT_RECONSTRUCTION_CEILING ; EXPR 4 session -> reconstruct = DEFAULT_RECONSTRUCTION_CEILING ASSIGN 5 session -> reconstruct = DEFAULT_RECONSTRUCTION_CEILING LVAL 6 session -> reconstruct FIELD 7 session -> reconstruct LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 reconstruct ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 DEFAULT_RECONSTRUCTION_CEILING FIELD 7 DEFAULT_RECONSTRUCTION_CEILING LEAF_NODE 8 DEFAULT_RECONSTRUCTION_CEILING LEAF_NODE 4 ; EXPR_STATEMENT 3 session -> secure = ast_iostream_get_ssl ( ser -> stream ) ? 1 : 0 ; EXPR 4 session -> secure = ast_iostream_get_ssl ( ser -> stream ) ? 1 : 0 ASSIGN 5 session -> secure = ast_iostream_get_ssl ( ser -> stream ) ? 1 : 0 LVAL 6 session -> secure FIELD 7 session -> secure LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 secure ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_iostream_get_ssl ( ser -> stream ) ? 1 : 0 COND_EXPR 7 ast_iostream_get_ssl ( ser -> stream ) ? 1 : 0 CONDITION 8 ast_iostream_get_ssl ( ser -> stream ) FUNCTION_CALL 9 ast_iostream_get_ssl ( ser -> stream ) CALLEE 10 ast_iostream_get_ssl LEAF_NODE 11 ast_iostream_get_ssl LEAF_NODE 10 ( ARGUMENT 10 ser -> stream FIELD 11 ser -> stream LEAF_NODE 12 ser LEAF_NODE 12 -> LEAF_NODE 12 stream LEAF_NODE 10 ) LEAF_NODE 8 ? EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 8 : FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_iostream_set_exclusive_input ( session -> stream , 0 ) ; EXPR 4 ast_iostream_set_exclusive_input ( session -> stream , 0 ) FUNCTION_CALL 5 ast_iostream_set_exclusive_input ( session -> stream , 0 ) CALLEE 6 ast_iostream_set_exclusive_input LEAF_NODE 7 ast_iostream_set_exclusive_input LEAF_NODE 6 ( ARGUMENT 6 session -> stream FIELD 7 session -> stream LEAF_NODE 8 session LEAF_NODE 8 -> LEAF_NODE 8 stream LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 protocol_handler -> session_established ( session , get_vars , headers ) ; EXPR 4 protocol_handler -> session_established ( session , get_vars , headers ) FUNCTION_CALL 5 protocol_handler -> session_established ( session , get_vars , headers ) CALLEE 6 protocol_handler -> session_established LEAF_NODE 7 protocol_handler LEAF_NODE 7 -> LEAF_NODE 7 session_established LEAF_NODE 6 ( ARGUMENT 6 session FIELD 7 session LEAF_NODE 8 session LEAF_NODE 6 , ARGUMENT 6 get_vars FIELD 7 get_vars LEAF_NODE 8 get_vars LEAF_NODE 6 , ARGUMENT 6 headers FIELD 7 headers LEAF_NODE 8 headers LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ao2_ref ( protocol_handler , - 1 ) ; EXPR 4 ao2_ref ( protocol_handler , - 1 ) FUNCTION_CALL 5 ao2_ref ( protocol_handler , - 1 ) CALLEE 6 ao2_ref LEAF_NODE 7 ao2_ref LEAF_NODE 6 ( ARGUMENT 6 protocol_handler FIELD 7 protocol_handler LEAF_NODE 8 protocol_handler LEAF_NODE 6 , ARGUMENT 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ser -> stream = NULL ; EXPR 4 ser -> stream = NULL ASSIGN 5 ser -> stream = NULL LVAL 6 ser -> stream FIELD 7 ser -> stream LEAF_NODE 8 ser LEAF_NODE 8 -> LEAF_NODE 8 stream ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 5, "project": "openssl_ast_vul_function_test_adv_49", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { ast_mutex_t lock ; struct sockaddr_in external_addr ; const char * server_hostname ; unsigned int stun_port ; unsigned int refresh ; int stun_sock ; unsigned int monitor_enabled : 1 ; unsigned int external_addr_known : 1 ; unsigned int stun_poll_failed_gripe : 1 ; } args ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { ast_mutex_t lock ; struct sockaddr_in external_addr ; const char * server_hostname ; unsigned int stun_port ; unsigned int refresh ; int stun_sock ; unsigned int monitor_enabled : 1 ; unsigned int external_addr_known : 1 ; unsigned int stun_poll_failed_gripe : 1 ; } args TYPE 3 struct CLASS_NAME BASE_CLASSES { ast_mutex_t lock ; struct sockaddr_in external_addr ; const char * server_hostname ; unsigned int stun_port ; unsigned int refresh ; int stun_sock ; unsigned int monitor_enabled : 1 ; unsigned int external_addr_known : 1 ; unsigned int stun_poll_failed_gripe : 1 ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { ast_mutex_t lock ; struct sockaddr_in external_addr ; const char * server_hostname ; unsigned int stun_port ; unsigned int refresh ; int stun_sock ; unsigned int monitor_enabled : 1 ; unsigned int external_addr_known : 1 ; unsigned int stun_poll_failed_gripe : 1 ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 ast_mutex_t lock ; struct sockaddr_in external_addr ; const char * server_hostname ; unsigned int stun_port ; unsigned int refresh ; int stun_sock ; unsigned int monitor_enabled : 1 ; unsigned int external_addr_known : 1 ; unsigned int stun_poll_failed_gripe : 1 ; SIMPLE_DECL 6 ast_mutex_t lock ; VAR_DECL 7 ast_mutex_t lock TYPE 8 ast_mutex_t TYPE_NAME 9 ast_mutex_t LEAF_NODE 10 ast_mutex_t NAME 8 lock LEAF_NODE 9 lock LEAF_NODE 7 ; SIMPLE_DECL 6 struct sockaddr_in external_addr ; VAR_DECL 7 struct sockaddr_in external_addr TYPE 8 struct sockaddr_in TYPE_NAME 9 struct sockaddr_in LEAF_NODE 10 struct LEAF_NODE 10 sockaddr_in NAME 8 external_addr LEAF_NODE 9 external_addr LEAF_NODE 7 ; SIMPLE_DECL 6 const char * server_hostname ; VAR_DECL 7 const char * server_hostname TYPE 8 const char * TYPE_NAME 9 const char LEAF_NODE 10 const LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 server_hostname LEAF_NODE 9 server_hostname LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int stun_port ; VAR_DECL 7 unsigned int stun_port TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 stun_port LEAF_NODE 9 stun_port LEAF_NODE 7 ; SIMPLE_DECL 6 unsigned int refresh ; VAR_DECL 7 unsigned int refresh TYPE 8 unsigned int TYPE_NAME 9 unsigned int LEAF_NODE 10 unsigned LEAF_NODE 10 int NAME 8 refresh LEAF_NODE 9 refresh LEAF_NODE 7 ; SIMPLE_DECL 6 int stun_sock ; VAR_DECL 7 int stun_sock TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 stun_sock LEAF_NODE 9 stun_sock LEAF_NODE 7 ; LEAF_NODE 6 unsigned LEAF_NODE 6 int LABEL 6 monitor_enabled : LEAF_NODE 7 monitor_enabled LEAF_NODE 7 : LEAF_NODE 6 1 LEAF_NODE 6 ; LEAF_NODE 6 unsigned LEAF_NODE 6 int LABEL 6 external_addr_known : LEAF_NODE 7 external_addr_known LEAF_NODE 7 : LEAF_NODE 6 1 LEAF_NODE 6 ; LEAF_NODE 6 unsigned LEAF_NODE 6 int LABEL 6 stun_poll_failed_gripe : LEAF_NODE 7 stun_poll_failed_gripe LEAF_NODE 7 : LEAF_NODE 6 1 LEAF_NODE 6 ; LEAF_NODE 5 } NAME 3 args LEAF_NODE 4 args LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 sndfax_exec LEAF_NODE 3 sndfax_exec PARAMETER_LIST 2 ( struct ast_channel * chan , const char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 , PARAMETER_DECL 3 const char * data TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; res = 0 ; VAR_DECL 4 int res ; res = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = 0 ASSIGN 6 res = 0 LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 char * parse ; VAR_DECL 4 char * parse TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 parse LEAF_NODE 6 parse LEAF_NODE 4 ; LEAF_NODE 3 fax_session LEAF_NODE 3 session LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 0 LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SIMPLE_DECL 3 char restore_digit_detect ; restore_digit_detect = 0 ; VAR_DECL 4 char restore_digit_detect ; restore_digit_detect = 0 TYPE 5 char TYPE_NAME 6 char LEAF_NODE 7 char NAME 5 restore_digit_detect LEAF_NODE 6 restore_digit_detect LEAF_NODE 5 ; INIT 5 restore_digit_detect = 0 ASSIGN 6 restore_digit_detect = 0 LVAL 7 restore_digit_detect NAME 8 restore_digit_detect LEAF_NODE 9 restore_digit_detect ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; LEAF_NODE 3 AST_DECLARE_APP_ARGS LEAF_NODE 3 ( EXPR_STATEMENT 3 args , AST_APP_ARG ( file_name ) ; EXPR 4 args , AST_APP_ARG ( file_name ) FIELD 5 args LEAF_NODE 6 args LEAF_NODE 5 , FUNCTION_CALL 5 AST_APP_ARG ( file_name ) CALLEE 6 AST_APP_ARG LEAF_NODE 7 AST_APP_ARG LEAF_NODE 6 ( ARGUMENT 6 file_name FIELD 7 file_name LEAF_NODE 8 file_name LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 AST_APP_ARG ( options ) ; EXPR 4 AST_APP_ARG ( options ) FUNCTION_CALL 5 AST_APP_ARG ( options ) CALLEE 6 AST_APP_ARG LEAF_NODE 7 AST_APP_ARG LEAF_NODE 6 ( ARGUMENT 6 options FIELD 7 options LEAF_NODE 8 options LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 ) LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 chan == NULL EXPR 5 chan == NULL FIELD 6 chan LEAF_NODE 7 chan EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_ERROR , \"Fax channel is NULL. Giving up.\\n\" ) ; EXPR 7 ast_log ( LOG_ERROR , \"Fax channel is NULL. Giving up.\\n\" ) FUNCTION_CALL 8 ast_log ( LOG_ERROR , \"Fax channel is NULL. Giving up.\\n\" ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_ERROR FIELD 10 LOG_ERROR LEAF_NODE 11 LOG_ERROR LEAF_NODE 9 , ARGUMENT 9 \"Fax channel is NULL. Giving up.\\n\" FIELD 10 \"Fax channel is NULL. Giving up.\\n\" LEAF_NODE 11 \"Fax channel is NULL. Giving up.\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_strlen_zero ( data ) EXPR 5 ast_strlen_zero ( data ) FUNCTION_CALL 6 ast_strlen_zero ( data ) CALLEE 7 ast_strlen_zero LEAF_NODE 8 ast_strlen_zero LEAF_NODE 7 ( ARGUMENT 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_ERROR , \"SendFAX requires an argument (filename)\\n\" ) ; EXPR 7 ast_log ( LOG_ERROR , \"SendFAX requires an argument (filename)\\n\" ) FUNCTION_CALL 8 ast_log ( LOG_ERROR , \"SendFAX requires an argument (filename)\\n\" ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_ERROR FIELD 10 LOG_ERROR LEAF_NODE 11 LOG_ERROR LEAF_NODE 9 , ARGUMENT 9 \"SendFAX requires an argument (filename)\\n\" FIELD 10 \"SendFAX requires an argument (filename)\\n\" LEAF_NODE 11 \"SendFAX requires an argument (filename)\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 parse = ast_strdupa ( data ) ; EXPR 4 parse = ast_strdupa ( data ) ASSIGN 5 parse = ast_strdupa ( data ) LVAL 6 parse FIELD 7 parse LEAF_NODE 8 parse ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_strdupa ( data ) FUNCTION_CALL 7 ast_strdupa ( data ) CALLEE 8 ast_strdupa LEAF_NODE 9 ast_strdupa LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 AST_STANDARD_APP_ARGS ( args , parse ) ; EXPR 4 AST_STANDARD_APP_ARGS ( args , parse ) FUNCTION_CALL 5 AST_STANDARD_APP_ARGS ( args , parse ) CALLEE 6 AST_STANDARD_APP_ARGS LEAF_NODE 7 AST_STANDARD_APP_ARGS LEAF_NODE 6 ( ARGUMENT 6 args FIELD 7 args LEAF_NODE 8 args LEAF_NODE 6 , ARGUMENT 6 parse FIELD 7 parse LEAF_NODE 8 parse LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 session . caller_mode = TRUE ; EXPR 4 session . caller_mode = TRUE ASSIGN 5 session . caller_mode = TRUE LVAL 6 session . caller_mode FIELD 7 session . caller_mode LEAF_NODE 8 session LEAF_NODE 8 . LEAF_NODE 8 caller_mode ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 TRUE FIELD 7 TRUE LEAF_NODE 8 TRUE LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 args . options EXPR 5 args . options FIELD 6 args . options LEAF_NODE 7 args LEAF_NODE 7 . LEAF_NODE 7 options LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 strchr ( args . options , 'a' ) EXPR 8 strchr ( args . options , 'a' ) FUNCTION_CALL 9 strchr ( args . options , 'a' ) CALLEE 10 strchr LEAF_NODE 11 strchr LEAF_NODE 10 ( ARGUMENT 10 args . options FIELD 11 args . options LEAF_NODE 12 args LEAF_NODE 12 . LEAF_NODE 12 options LEAF_NODE 10 , ARGUMENT 10 'a' FIELD 11 'a' LEAF_NODE 12 'a' LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 session . caller_mode = FALSE ; EXPR 9 session . caller_mode = FALSE ASSIGN 10 session . caller_mode = FALSE LVAL 11 session . caller_mode FIELD 12 session . caller_mode LEAF_NODE 13 session LEAF_NODE 13 . LEAF_NODE 13 caller_mode ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 FALSE FIELD 12 FALSE LEAF_NODE 13 FALSE LEAF_NODE 9 ; LEAF_NODE 5 } EXPR_STATEMENT 3 session . direction = 1 ; EXPR 4 session . direction = 1 ASSIGN 5 session . direction = 1 LVAL 6 session . direction FIELD 7 session . direction LEAF_NODE 8 session LEAF_NODE 8 . LEAF_NODE 8 direction ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 session . file_name = args . file_name ; EXPR 4 session . file_name = args . file_name ASSIGN 5 session . file_name = args . file_name LVAL 6 session . file_name FIELD 7 session . file_name LEAF_NODE 8 session LEAF_NODE 8 . LEAF_NODE 8 file_name ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 args . file_name FIELD 7 args . file_name LEAF_NODE 8 args LEAF_NODE 8 . LEAF_NODE 8 file_name LEAF_NODE 4 ; EXPR_STATEMENT 3 session . chan = chan ; EXPR 4 session . chan = chan ASSIGN 5 session . chan = chan LVAL 6 session . chan FIELD 7 session . chan LEAF_NODE 8 session LEAF_NODE 8 . LEAF_NODE 8 chan ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 4 ; EXPR_STATEMENT 3 session . finished = 0 ; EXPR 4 session . finished = 0 ASSIGN 5 session . finished = 0 LVAL 6 session . finished FIELD 7 session . finished LEAF_NODE 8 session LEAF_NODE 8 . LEAF_NODE 8 finished ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 int dummy ; dummy = sizeof ( restore_digit_detect ) ; VAR_DECL 5 int dummy ; dummy = sizeof ( restore_digit_detect ) TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 dummy LEAF_NODE 7 dummy LEAF_NODE 6 ; INIT 6 dummy = sizeof ( restore_digit_detect ) ASSIGN 7 dummy = sizeof ( restore_digit_detect ) LVAL 8 dummy NAME 9 dummy LEAF_NODE 10 dummy ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 sizeof ( restore_digit_detect ) FUNCTION_CALL 9 sizeof ( restore_digit_detect ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 restore_digit_detect FIELD 11 restore_digit_detect LEAF_NODE 12 restore_digit_detect LEAF_NODE 10 ) LEAF_NODE 5 ; EXPR_STATEMENT 4 ast_channel_queryoption ( chan , AST_OPTION_DIGIT_DETECT , & restore_digit_detect , & dummy , 0 ) ; EXPR 5 ast_channel_queryoption ( chan , AST_OPTION_DIGIT_DETECT , & restore_digit_detect , & dummy , 0 ) FUNCTION_CALL 6 ast_channel_queryoption ( chan , AST_OPTION_DIGIT_DETECT , & restore_digit_detect , & dummy , 0 ) CALLEE 7 ast_channel_queryoption LEAF_NODE 8 ast_channel_queryoption LEAF_NODE 7 ( ARGUMENT 7 chan FIELD 8 chan LEAF_NODE 9 chan LEAF_NODE 7 , ARGUMENT 7 AST_OPTION_DIGIT_DETECT FIELD 8 AST_OPTION_DIGIT_DETECT LEAF_NODE 9 AST_OPTION_DIGIT_DETECT LEAF_NODE 7 , ARGUMENT 7 & restore_digit_detect UNARY_EXPR 8 & restore_digit_detect UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 restore_digit_detect LEAF_NODE 10 restore_digit_detect LEAF_NODE 7 , ARGUMENT 7 & dummy UNARY_EXPR 8 & dummy UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 dummy LEAF_NODE 10 dummy LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 restore_digit_detect EXPR 5 restore_digit_detect FIELD 6 restore_digit_detect LEAF_NODE 7 restore_digit_detect LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char new_digit_detect ; new_digit_detect = 0 ; VAR_DECL 7 char new_digit_detect ; new_digit_detect = 0 TYPE 8 char TYPE_NAME 9 char LEAF_NODE 10 char NAME 8 new_digit_detect LEAF_NODE 9 new_digit_detect LEAF_NODE 8 ; INIT 8 new_digit_detect = 0 ASSIGN 9 new_digit_detect = 0 LVAL 10 new_digit_detect NAME 11 new_digit_detect LEAF_NODE 12 new_digit_detect ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_channel_setoption ( chan , AST_OPTION_DIGIT_DETECT , & new_digit_detect , sizeof ( new_digit_detect ) , 0 ) ; EXPR 7 ast_channel_setoption ( chan , AST_OPTION_DIGIT_DETECT , & new_digit_detect , sizeof ( new_digit_detect ) , 0 ) FUNCTION_CALL 8 ast_channel_setoption ( chan , AST_OPTION_DIGIT_DETECT , & new_digit_detect , sizeof ( new_digit_detect ) , 0 ) CALLEE 9 ast_channel_setoption LEAF_NODE 10 ast_channel_setoption LEAF_NODE 9 ( ARGUMENT 9 chan FIELD 10 chan LEAF_NODE 11 chan LEAF_NODE 9 , ARGUMENT 9 AST_OPTION_DIGIT_DETECT FIELD 10 AST_OPTION_DIGIT_DETECT LEAF_NODE 11 AST_OPTION_DIGIT_DETECT LEAF_NODE 9 , ARGUMENT 9 & new_digit_detect UNARY_EXPR 10 & new_digit_detect UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 new_digit_detect LEAF_NODE 12 new_digit_detect LEAF_NODE 9 , ARGUMENT 9 sizeof ( new_digit_detect ) FUNCTION_CALL 10 sizeof ( new_digit_detect ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 new_digit_detect FIELD 12 new_digit_detect LEAF_NODE 13 new_digit_detect LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 3 { STATEMENTS 3 SIMPLE_DECL 4 char new_fax_detect ; new_fax_detect = 0 ; VAR_DECL 5 char new_fax_detect ; new_fax_detect = 0 TYPE 6 char TYPE_NAME 7 char LEAF_NODE 8 char NAME 6 new_fax_detect LEAF_NODE 7 new_fax_detect LEAF_NODE 6 ; INIT 6 new_fax_detect = 0 ASSIGN 7 new_fax_detect = 0 LVAL 8 new_fax_detect NAME 9 new_fax_detect LEAF_NODE 10 new_fax_detect ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 5 ; EXPR_STATEMENT 4 ast_channel_setoption ( chan , AST_OPTION_FAX_DETECT , & new_fax_detect , sizeof ( new_fax_detect ) , 0 ) ; EXPR 5 ast_channel_setoption ( chan , AST_OPTION_FAX_DETECT , & new_fax_detect , sizeof ( new_fax_detect ) , 0 ) FUNCTION_CALL 6 ast_channel_setoption ( chan , AST_OPTION_FAX_DETECT , & new_fax_detect , sizeof ( new_fax_detect ) , 0 ) CALLEE 7 ast_channel_setoption LEAF_NODE 8 ast_channel_setoption LEAF_NODE 7 ( ARGUMENT 7 chan FIELD 8 chan LEAF_NODE 9 chan LEAF_NODE 7 , ARGUMENT 7 AST_OPTION_FAX_DETECT FIELD 8 AST_OPTION_FAX_DETECT LEAF_NODE 9 AST_OPTION_FAX_DETECT LEAF_NODE 7 , ARGUMENT 7 & new_fax_detect UNARY_EXPR 8 & new_fax_detect UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 new_fax_detect LEAF_NODE 10 new_fax_detect LEAF_NODE 7 , ARGUMENT 7 sizeof ( new_fax_detect ) FUNCTION_CALL 8 sizeof ( new_fax_detect ) CALLEE 9 sizeof LEAF_NODE 10 sizeof LEAF_NODE 9 ( ARGUMENT 9 new_fax_detect FIELD 10 new_fax_detect LEAF_NODE 11 new_fax_detect LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 ) LEAF_NODE 5 ; LEAF_NODE 3 } EXPR_STATEMENT 3 res = transmit ( & session ) ; EXPR 4 res = transmit ( & session ) ASSIGN 5 res = transmit ( & session ) LVAL 6 res FIELD 7 res LEAF_NODE 8 res ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 transmit ( & session ) FUNCTION_CALL 7 transmit ( & session ) CALLEE 8 transmit LEAF_NODE 9 transmit LEAF_NODE 8 ( ARGUMENT 8 & session UNARY_EXPR 9 & session UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 session LEAF_NODE 11 session LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 restore_digit_detect EXPR 5 restore_digit_detect FIELD 6 restore_digit_detect LEAF_NODE 7 restore_digit_detect LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_channel_setoption ( chan , AST_OPTION_DIGIT_DETECT , & restore_digit_detect , sizeof ( restore_digit_detect ) , 0 ) ; EXPR 7 ast_channel_setoption ( chan , AST_OPTION_DIGIT_DETECT , & restore_digit_detect , sizeof ( restore_digit_detect ) , 0 ) FUNCTION_CALL 8 ast_channel_setoption ( chan , AST_OPTION_DIGIT_DETECT , & restore_digit_detect , sizeof ( restore_digit_detect ) , 0 ) CALLEE 9 ast_channel_setoption LEAF_NODE 10 ast_channel_setoption LEAF_NODE 9 ( ARGUMENT 9 chan FIELD 10 chan LEAF_NODE 11 chan LEAF_NODE 9 , ARGUMENT 9 AST_OPTION_DIGIT_DETECT FIELD 10 AST_OPTION_DIGIT_DETECT LEAF_NODE 11 AST_OPTION_DIGIT_DETECT LEAF_NODE 9 , ARGUMENT 9 & restore_digit_detect UNARY_EXPR 10 & restore_digit_detect UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 restore_digit_detect LEAF_NODE 12 restore_digit_detect LEAF_NODE 9 , ARGUMENT 9 sizeof ( restore_digit_detect ) FUNCTION_CALL 10 sizeof ( restore_digit_detect ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 restore_digit_detect FIELD 12 restore_digit_detect LEAF_NODE 13 restore_digit_detect LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 6, "project": "openssl_ast_vul_function_test_adv_7", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 key_matches LEAF_NODE 3 key_matches PARAMETER_LIST 2 ( const unsigned char * key1 , const unsigned char * key2 ) LEAF_NODE 3 ( PARAMETER_DECL 3 const unsigned char * key1 TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 key1 LEAF_NODE 5 key1 LEAF_NODE 3 , PARAMETER_DECL 3 const unsigned char * key2 TYPE 4 const unsigned char * TYPE_NAME 5 const unsigned char LEAF_NODE 6 const LEAF_NODE 6 unsigned LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 key2 LEAF_NODE 5 key2 LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int x ; VAR_DECL 4 int x TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 x LEAF_NODE 6 x LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 x = 0 ; EXPR 5 x = 0 ASSIGN 6 x = 0 LVAL 7 x FIELD 8 x LEAF_NODE 9 x ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 x < 16 EXPR 5 x < 16 FIELD 6 x LEAF_NODE 7 x REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 16 LEAF_NODE 7 16 LEAF_NODE 4 ; FOR_EXPR 4 x ++ EXPR 5 x ++ FIELD 6 x ++ LEAF_NODE 7 x LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 key1 [ x ] != key2 [ x ] EXPR 8 key1 [ x ] != key2 [ x ] FIELD 9 key1 [ x ] LEAF_NODE 10 key1 LEAF_NODE 10 [ EXPR 10 x FIELD 11 x LEAF_NODE 12 x LEAF_NODE 10 ] EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 key2 [ x ] LEAF_NODE 10 key2 LEAF_NODE 10 [ EXPR 10 x FIELD 11 x LEAF_NODE 12 x LEAF_NODE 10 ] LEAF_NODE 7 ) STATEMENTS 7 JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 7, "project": "openssl_ast_vul_function_test_adv_34", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } ; CLASS_DEF 2 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } CLASS_DEF 3 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 stasis_app_subscription_model LEAF_NODE 5 stasis_app_subscription_model LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 5 STASIS_APP_SUBSCRIBE_MANUAL LEAF_NODE 5 , LEAF_NODE 5 STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } ; CLASS_DEF 2 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } CLASS_DEF 3 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 stasis_app LEAF_NODE 5 stasis_app LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; SIMPLE_DECL 5 struct stasis_topic * topic ; VAR_DECL 6 struct stasis_topic * topic TYPE 7 struct stasis_topic * TYPE_NAME 8 struct stasis_topic LEAF_NODE 9 struct LEAF_NODE 9 stasis_topic POINTER 8 * LEAF_NODE 9 * NAME 7 topic LEAF_NODE 8 topic LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * router ; VAR_DECL 6 struct stasis_message_router * router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 router LEAF_NODE 8 router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * bridge_router ; VAR_DECL 6 struct stasis_message_router * bridge_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 bridge_router LEAF_NODE 8 bridge_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * endpoint_router ; VAR_DECL 6 struct stasis_message_router * endpoint_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 endpoint_router LEAF_NODE 8 endpoint_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * forwards ; VAR_DECL 6 struct ao2_container * forwards TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 forwards LEAF_NODE 8 forwards LEAF_NODE 6 ; SIMPLE_DECL 5 stasis_app_cb handler ; VAR_DECL 6 stasis_app_cb handler TYPE 7 stasis_app_cb TYPE_NAME 8 stasis_app_cb LEAF_NODE 9 stasis_app_cb NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 enum stasis_app_subscription_model subscription_model ; VAR_DECL 6 enum stasis_app_subscription_model subscription_model TYPE 7 enum stasis_app_subscription_model TYPE_NAME 8 enum stasis_app_subscription_model LEAF_NODE 9 enum LEAF_NODE 9 stasis_app_subscription_model NAME 7 subscription_model LEAF_NODE 8 subscription_model LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_allowed ; VAR_DECL 6 struct ast_json * events_allowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_allowed LEAF_NODE 8 events_allowed LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_disallowed ; VAR_DECL 6 struct ast_json * events_disallowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_disallowed LEAF_NODE 8 events_disallowed LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] name ; VAR_DECL 6 char [ ] name TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } ; CLASS_DEF 2 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } CLASS_DEF 3 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } LEAF_NODE 4 enum CLASS_NAME 4 forward_type LEAF_NODE 5 forward_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , LEAF_NODE 5 FORWARD_CHANNEL LEAF_NODE 5 , LEAF_NODE 5 FORWARD_BRIDGE LEAF_NODE 5 , LEAF_NODE 5 FORWARD_ENDPOINT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } ; CLASS_DEF 2 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } CLASS_DEF 3 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } LEAF_NODE 4 struct CLASS_NAME 4 app_forwards LEAF_NODE 5 app_forwards LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; SIMPLE_DECL 5 int interested ; VAR_DECL 6 int interested TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 interested LEAF_NODE 8 interested LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_forward ; VAR_DECL 6 struct stasis_forward * topic_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_forward LEAF_NODE 8 topic_forward LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_cached_forward ; VAR_DECL 6 struct stasis_forward * topic_cached_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_cached_forward LEAF_NODE 8 topic_cached_forward LEAF_NODE 6 ; SIMPLE_DECL 5 enum forward_type forward_type ; VAR_DECL 6 enum forward_type forward_type TYPE 7 enum forward_type TYPE_NAME 8 enum forward_type LEAF_NODE 9 enum LEAF_NODE 9 forward_type NAME 7 forward_type LEAF_NODE 8 forward_type LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] id ; VAR_DECL 6 char [ ] id TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } ; CLASS_DEF 2 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } CLASS_DEF 3 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_channel_snapshot LEAF_NODE 5 ast_channel_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 uniqueid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 linkedid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appl LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 accountcode LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 peeraccount LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 userfield LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 hangupsource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_dnid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_ani LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_rdnis LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dialed_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 language LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 bridgeid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 type LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_channel_snapshot_base * base ; VAR_DECL 6 struct ast_channel_snapshot_base * base TYPE 7 struct ast_channel_snapshot_base * TYPE_NAME 8 struct ast_channel_snapshot_base LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_base POINTER 8 * LEAF_NODE 9 * NAME 7 base LEAF_NODE 8 base LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_peer * peer ; VAR_DECL 6 struct ast_channel_snapshot_peer * peer TYPE 7 struct ast_channel_snapshot_peer * TYPE_NAME 8 struct ast_channel_snapshot_peer LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_peer POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_caller * caller ; VAR_DECL 6 struct ast_channel_snapshot_caller * caller TYPE 7 struct ast_channel_snapshot_caller * TYPE_NAME 8 struct ast_channel_snapshot_caller LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_caller POINTER 8 * LEAF_NODE 9 * NAME 7 caller LEAF_NODE 8 caller LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_connected * connected ; VAR_DECL 6 struct ast_channel_snapshot_connected * connected TYPE 7 struct ast_channel_snapshot_connected * TYPE_NAME 8 struct ast_channel_snapshot_connected LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_connected POINTER 8 * LEAF_NODE 9 * NAME 7 connected LEAF_NODE 8 connected LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_bridge * bridge ; VAR_DECL 6 struct ast_channel_snapshot_bridge * bridge TYPE 7 struct ast_channel_snapshot_bridge * TYPE_NAME 8 struct ast_channel_snapshot_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_dialplan * dialplan ; VAR_DECL 6 struct ast_channel_snapshot_dialplan * dialplan TYPE 7 struct ast_channel_snapshot_dialplan * TYPE_NAME 8 struct ast_channel_snapshot_dialplan LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_dialplan POINTER 8 * LEAF_NODE 9 * NAME 7 dialplan LEAF_NODE 8 dialplan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_hangup * hangup ; VAR_DECL 6 struct ast_channel_snapshot_hangup * hangup TYPE 7 struct ast_channel_snapshot_hangup * TYPE_NAME 8 struct ast_channel_snapshot_hangup LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_hangup POINTER 8 * LEAF_NODE 9 * NAME 7 hangup LEAF_NODE 8 hangup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_channel_state state ; VAR_DECL 6 enum ast_channel_state state TYPE 7 enum ast_channel_state TYPE_NAME 8 enum ast_channel_state LEAF_NODE 9 enum LEAF_NODE 9 ast_channel_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int amaflags ; VAR_DECL 6 int amaflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 amaflags LEAF_NODE 8 amaflags LEAF_NODE 6 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 int hangupcause ; VAR_DECL 6 int hangupcause TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hangupcause LEAF_NODE 8 hangupcause LEAF_NODE 6 ; SIMPLE_DECL 5 int caller_pres ; VAR_DECL 6 int caller_pres TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 caller_pres LEAF_NODE 8 caller_pres LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags softhangup_flags ; VAR_DECL 6 struct ast_flags softhangup_flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 softhangup_flags LEAF_NODE 8 softhangup_flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * manager_vars ; VAR_DECL 6 struct varshead * manager_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 manager_vars LEAF_NODE 8 manager_vars LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * ari_vars ; VAR_DECL 6 struct varshead * ari_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 ari_vars LEAF_NODE 8 ari_vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_debug ; VAR_DECL 2 int global_debug TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_debug LEAF_NODE 4 global_debug LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_endpoint_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( id ) ; AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( resource ) ; ) ; enum ast_endpoint_state state ; int max_channels ; int num_channels ; char * [ ] channel_ids ; } ; CLASS_DEF 2 struct ast_endpoint_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( id ) ; AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( resource ) ; ) ; enum ast_endpoint_state state ; int max_channels ; int num_channels ; char * [ ] channel_ids ; } CLASS_DEF 3 struct ast_endpoint_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( id ) ; AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( resource ) ; ) ; enum ast_endpoint_state state ; int max_channels ; int num_channels ; char * [ ] channel_ids ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_endpoint_snapshot LEAF_NODE 5 ast_endpoint_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( id ) ; AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( resource ) ; ) ; enum ast_endpoint_state state ; int max_channels ; int num_channels ; char * [ ] channel_ids ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 id LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 tech LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 resource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 enum ast_endpoint_state state ; VAR_DECL 6 enum ast_endpoint_state state TYPE 7 enum ast_endpoint_state TYPE_NAME 8 enum ast_endpoint_state LEAF_NODE 9 enum LEAF_NODE 9 ast_endpoint_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int max_channels ; VAR_DECL 6 int max_channels TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 max_channels LEAF_NODE 8 max_channels LEAF_NODE 6 ; SIMPLE_DECL 5 int num_channels ; VAR_DECL 6 int num_channels TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 num_channels LEAF_NODE 8 num_channels LEAF_NODE 6 ; SIMPLE_DECL 5 char * [ ] channel_ids ; VAR_DECL 6 char * [ ] channel_ids TYPE 7 char * [ ] TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 channel_ids LEAF_NODE 8 channel_ids LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 sub_endpoint_update_handler LEAF_NODE 3 sub_endpoint_update_handler PARAMETER_LIST 2 ( void * data , struct stasis_subscription * sub , struct stasis_message * message ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 struct stasis_subscription * sub TYPE 4 struct stasis_subscription * TYPE_NAME 5 struct stasis_subscription LEAF_NODE 6 struct LEAF_NODE 6 stasis_subscription POINTER 5 * LEAF_NODE 6 * NAME 4 sub LEAF_NODE 5 sub LEAF_NODE 3 , PARAMETER_DECL 3 struct stasis_message * message TYPE 4 struct stasis_message * TYPE_NAME 5 struct stasis_message LEAF_NODE 6 struct LEAF_NODE 6 stasis_message POINTER 5 * LEAF_NODE 6 * NAME 4 message LEAF_NODE 5 message LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 RAII_VAR LEAF_NODE 3 ( LEAF_NODE 3 struct LEAF_NODE 3 ast_json LEAF_NODE 3 * LEAF_NODE 3 , LEAF_NODE 3 json LEAF_NODE 3 , LEAF_NODE 3 NULL LEAF_NODE 3 , LEAF_NODE 3 ast_json_unref LEAF_NODE 3 ) LEAF_NODE 3 ; SIMPLE_DECL 3 struct stasis_app * app ; app = data ; VAR_DECL 4 struct stasis_app * app ; app = data TYPE 5 struct stasis_app * TYPE_NAME 6 struct stasis_app LEAF_NODE 7 struct LEAF_NODE 7 stasis_app POINTER 6 * LEAF_NODE 7 * NAME 5 app LEAF_NODE 6 app LEAF_NODE 5 ; INIT 5 app = data ASSIGN 6 app = data LVAL 7 app NAME 8 app LEAF_NODE 9 app ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; SIMPLE_DECL 3 struct stasis_cache_update * update ; VAR_DECL 4 struct stasis_cache_update * update TYPE 5 struct stasis_cache_update * TYPE_NAME 6 struct stasis_cache_update LEAF_NODE 7 struct LEAF_NODE 7 stasis_cache_update POINTER 6 * LEAF_NODE 7 * NAME 5 update LEAF_NODE 6 update LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_endpoint_snapshot * new_snapshot ; VAR_DECL 4 struct ast_endpoint_snapshot * new_snapshot TYPE 5 struct ast_endpoint_snapshot * TYPE_NAME 6 struct ast_endpoint_snapshot LEAF_NODE 7 struct LEAF_NODE 7 ast_endpoint_snapshot POINTER 6 * LEAF_NODE 7 * NAME 5 new_snapshot LEAF_NODE 6 new_snapshot LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_endpoint_snapshot * old_snapshot ; VAR_DECL 4 struct ast_endpoint_snapshot * old_snapshot TYPE 5 struct ast_endpoint_snapshot * TYPE_NAME 6 struct ast_endpoint_snapshot LEAF_NODE 7 struct LEAF_NODE 7 ast_endpoint_snapshot POINTER 6 * LEAF_NODE 7 * NAME 5 old_snapshot LEAF_NODE 6 old_snapshot LEAF_NODE 4 ; SIMPLE_DECL 3 const struct timeval * tv ; VAR_DECL 4 const struct timeval * tv TYPE 5 const struct timeval * TYPE_NAME 6 const struct timeval LEAF_NODE 7 const LEAF_NODE 7 struct LEAF_NODE 7 timeval POINTER 6 * LEAF_NODE 7 * NAME 5 tv LEAF_NODE 6 tv LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_assert ( stasis_message_type ( message ) == stasis_cache_update_type ( ) ) ; EXPR 4 ast_assert ( stasis_message_type ( message ) == stasis_cache_update_type ( ) ) FUNCTION_CALL 5 ast_assert ( stasis_message_type ( message ) == stasis_cache_update_type ( ) ) CALLEE 6 ast_assert LEAF_NODE 7 ast_assert LEAF_NODE 6 ( ARGUMENT 6 stasis_message_type ( message ) == stasis_cache_update_type ( ) FUNCTION_CALL 7 stasis_message_type ( message ) CALLEE 8 stasis_message_type LEAF_NODE 9 stasis_message_type LEAF_NODE 8 ( ARGUMENT 8 message FIELD 9 message LEAF_NODE 10 message LEAF_NODE 8 ) EQ_OPERATOR 7 == LEAF_NODE 8 == FUNCTION_CALL 7 stasis_cache_update_type ( ) CALLEE 8 stasis_cache_update_type LEAF_NODE 9 stasis_cache_update_type LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 update = stasis_message_data ( message ) ; EXPR 4 update = stasis_message_data ( message ) ASSIGN 5 update = stasis_message_data ( message ) LVAL 6 update FIELD 7 update LEAF_NODE 8 update ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 stasis_message_data ( message ) FUNCTION_CALL 7 stasis_message_data ( message ) CALLEE 8 stasis_message_data LEAF_NODE 9 stasis_message_data LEAF_NODE 8 ( ARGUMENT 8 message FIELD 9 message LEAF_NODE 10 message LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_assert ( update -> type == ast_endpoint_snapshot_type ( ) ) ; EXPR 4 ast_assert ( update -> type == ast_endpoint_snapshot_type ( ) ) FUNCTION_CALL 5 ast_assert ( update -> type == ast_endpoint_snapshot_type ( ) ) CALLEE 6 ast_assert LEAF_NODE 7 ast_assert LEAF_NODE 6 ( ARGUMENT 6 update -> type == ast_endpoint_snapshot_type ( ) FIELD 7 update -> type LEAF_NODE 8 update LEAF_NODE 8 -> LEAF_NODE 8 type EQ_OPERATOR 7 == LEAF_NODE 8 == FUNCTION_CALL 7 ast_endpoint_snapshot_type ( ) CALLEE 8 ast_endpoint_snapshot_type LEAF_NODE 9 ast_endpoint_snapshot_type LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 new_snapshot = stasis_message_data ( update -> new_snapshot ) ; EXPR 4 new_snapshot = stasis_message_data ( update -> new_snapshot ) ASSIGN 5 new_snapshot = stasis_message_data ( update -> new_snapshot ) LVAL 6 new_snapshot FIELD 7 new_snapshot LEAF_NODE 8 new_snapshot ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 stasis_message_data ( update -> new_snapshot ) FUNCTION_CALL 7 stasis_message_data ( update -> new_snapshot ) CALLEE 8 stasis_message_data LEAF_NODE 9 stasis_message_data LEAF_NODE 8 ( ARGUMENT 8 update -> new_snapshot FIELD 9 update -> new_snapshot LEAF_NODE 10 update LEAF_NODE 10 -> LEAF_NODE 10 new_snapshot LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 old_snapshot = stasis_message_data ( update -> old_snapshot ) ; EXPR 4 old_snapshot = stasis_message_data ( update -> old_snapshot ) ASSIGN 5 old_snapshot = stasis_message_data ( update -> old_snapshot ) LVAL 6 old_snapshot FIELD 7 old_snapshot LEAF_NODE 8 old_snapshot ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 stasis_message_data ( update -> old_snapshot ) FUNCTION_CALL 7 stasis_message_data ( update -> old_snapshot ) CALLEE 8 stasis_message_data LEAF_NODE 9 stasis_message_data LEAF_NODE 8 ( ARGUMENT 8 update -> old_snapshot FIELD 9 update -> old_snapshot LEAF_NODE 10 update LEAF_NODE 10 -> LEAF_NODE 10 old_snapshot LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 new_snapshot EXPR 5 new_snapshot FIELD 6 new_snapshot LEAF_NODE 7 new_snapshot LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 tv = stasis_message_timestamp ( update -> new_snapshot ) ; EXPR 7 tv = stasis_message_timestamp ( update -> new_snapshot ) ASSIGN 8 tv = stasis_message_timestamp ( update -> new_snapshot ) LVAL 9 tv FIELD 10 tv LEAF_NODE 11 tv ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 stasis_message_timestamp ( update -> new_snapshot ) FUNCTION_CALL 10 stasis_message_timestamp ( update -> new_snapshot ) CALLEE 11 stasis_message_timestamp LEAF_NODE 12 stasis_message_timestamp LEAF_NODE 11 ( ARGUMENT 11 update -> new_snapshot FIELD 12 update -> new_snapshot LEAF_NODE 13 update LEAF_NODE 13 -> LEAF_NODE 13 new_snapshot LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 json = simple_endpoint_event ( \"EndpointStateChange\" , new_snapshot , tv ) ; EXPR 7 json = simple_endpoint_event ( \"EndpointStateChange\" , new_snapshot , tv ) ASSIGN 8 json = simple_endpoint_event ( \"EndpointStateChange\" , new_snapshot , tv ) LVAL 9 json FIELD 10 json LEAF_NODE 11 json ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 simple_endpoint_event ( \"EndpointStateChange\" , new_snapshot , tv ) FUNCTION_CALL 10 simple_endpoint_event ( \"EndpointStateChange\" , new_snapshot , tv ) CALLEE 11 simple_endpoint_event LEAF_NODE 12 simple_endpoint_event LEAF_NODE 11 ( ARGUMENT 11 \"EndpointStateChange\" FIELD 12 \"EndpointStateChange\" LEAF_NODE 13 \"EndpointStateChange\" LEAF_NODE 11 , ARGUMENT 11 new_snapshot FIELD 12 new_snapshot LEAF_NODE 13 new_snapshot LEAF_NODE 11 , ARGUMENT 11 tv FIELD 12 tv LEAF_NODE 13 tv LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! json EXPR 8 ! json UNARY_EXPR 9 ! json UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 json LEAF_NODE 11 json LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 return DESTINATION ; KEYWORD 10 return LEAF_NODE 11 return LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 app_send ( app , json ) ; EXPR 7 app_send ( app , json ) FUNCTION_CALL 8 app_send ( app , json ) CALLEE 9 app_send LEAF_NODE 10 app_send LEAF_NODE 9 ( ARGUMENT 9 app FIELD 10 app LEAF_NODE 11 app LEAF_NODE 9 , ARGUMENT 9 json FIELD 10 json LEAF_NODE 11 json LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! new_snapshot && old_snapshot EXPR 5 ! new_snapshot && old_snapshot AND 6 ! new_snapshot && old_snapshot EXPR 7 ! new_snapshot UNARY_EXPR 8 ! new_snapshot UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 new_snapshot LEAF_NODE 10 new_snapshot LEAF_NODE 7 && EXPR 7 old_snapshot FIELD 8 old_snapshot LEAF_NODE 9 old_snapshot LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 unsubscribe ( app , \"endpoint\" , old_snapshot -> id , 1 ) ; EXPR 7 unsubscribe ( app , \"endpoint\" , old_snapshot -> id , 1 ) FUNCTION_CALL 8 unsubscribe ( app , \"endpoint\" , old_snapshot -> id , 1 ) CALLEE 9 unsubscribe LEAF_NODE 10 unsubscribe LEAF_NODE 9 ( ARGUMENT 9 app FIELD 10 app LEAF_NODE 11 app LEAF_NODE 9 , ARGUMENT 9 \"endpoint\" FIELD 10 \"endpoint\" LEAF_NODE 11 \"endpoint\" LEAF_NODE 9 , ARGUMENT 9 old_snapshot -> id FIELD 10 old_snapshot -> id LEAF_NODE 11 old_snapshot LEAF_NODE 11 -> LEAF_NODE 11 id LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 8, "project": "openssl_ast_vul_function_test_adv_11", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } ; CLASS_DEF 2 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } CLASS_DEF 3 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 stasis_app_subscription_model LEAF_NODE 5 stasis_app_subscription_model LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 5 STASIS_APP_SUBSCRIBE_MANUAL LEAF_NODE 5 , LEAF_NODE 5 STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } ; CLASS_DEF 2 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } CLASS_DEF 3 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 stasis_app LEAF_NODE 5 stasis_app LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; SIMPLE_DECL 5 struct stasis_topic * topic ; VAR_DECL 6 struct stasis_topic * topic TYPE 7 struct stasis_topic * TYPE_NAME 8 struct stasis_topic LEAF_NODE 9 struct LEAF_NODE 9 stasis_topic POINTER 8 * LEAF_NODE 9 * NAME 7 topic LEAF_NODE 8 topic LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * router ; VAR_DECL 6 struct stasis_message_router * router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 router LEAF_NODE 8 router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * bridge_router ; VAR_DECL 6 struct stasis_message_router * bridge_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 bridge_router LEAF_NODE 8 bridge_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * endpoint_router ; VAR_DECL 6 struct stasis_message_router * endpoint_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 endpoint_router LEAF_NODE 8 endpoint_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * forwards ; VAR_DECL 6 struct ao2_container * forwards TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 forwards LEAF_NODE 8 forwards LEAF_NODE 6 ; SIMPLE_DECL 5 stasis_app_cb handler ; VAR_DECL 6 stasis_app_cb handler TYPE 7 stasis_app_cb TYPE_NAME 8 stasis_app_cb LEAF_NODE 9 stasis_app_cb NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 enum stasis_app_subscription_model subscription_model ; VAR_DECL 6 enum stasis_app_subscription_model subscription_model TYPE 7 enum stasis_app_subscription_model TYPE_NAME 8 enum stasis_app_subscription_model LEAF_NODE 9 enum LEAF_NODE 9 stasis_app_subscription_model NAME 7 subscription_model LEAF_NODE 8 subscription_model LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_allowed ; VAR_DECL 6 struct ast_json * events_allowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_allowed LEAF_NODE 8 events_allowed LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_disallowed ; VAR_DECL 6 struct ast_json * events_disallowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_disallowed LEAF_NODE 8 events_disallowed LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] name ; VAR_DECL 6 char [ ] name TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } ; CLASS_DEF 2 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } CLASS_DEF 3 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } LEAF_NODE 4 enum CLASS_NAME 4 forward_type LEAF_NODE 5 forward_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , LEAF_NODE 5 FORWARD_CHANNEL LEAF_NODE 5 , LEAF_NODE 5 FORWARD_BRIDGE LEAF_NODE 5 , LEAF_NODE 5 FORWARD_ENDPOINT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } ; CLASS_DEF 2 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } CLASS_DEF 3 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } LEAF_NODE 4 struct CLASS_NAME 4 app_forwards LEAF_NODE 5 app_forwards LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; SIMPLE_DECL 5 int interested ; VAR_DECL 6 int interested TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 interested LEAF_NODE 8 interested LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_forward ; VAR_DECL 6 struct stasis_forward * topic_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_forward LEAF_NODE 8 topic_forward LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_cached_forward ; VAR_DECL 6 struct stasis_forward * topic_cached_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_cached_forward LEAF_NODE 8 topic_cached_forward LEAF_NODE 6 ; SIMPLE_DECL 5 enum forward_type forward_type ; VAR_DECL 6 enum forward_type forward_type TYPE 7 enum forward_type TYPE_NAME 8 enum forward_type LEAF_NODE 9 enum LEAF_NODE 9 forward_type NAME 7 forward_type LEAF_NODE 8 forward_type LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] id ; VAR_DECL 6 char [ ] id TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } ; CLASS_DEF 2 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } CLASS_DEF 3 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_channel_snapshot LEAF_NODE 5 ast_channel_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 uniqueid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 linkedid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appl LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 accountcode LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 peeraccount LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 userfield LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 hangupsource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_dnid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_ani LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_rdnis LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dialed_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 language LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 bridgeid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 type LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_channel_snapshot_base * base ; VAR_DECL 6 struct ast_channel_snapshot_base * base TYPE 7 struct ast_channel_snapshot_base * TYPE_NAME 8 struct ast_channel_snapshot_base LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_base POINTER 8 * LEAF_NODE 9 * NAME 7 base LEAF_NODE 8 base LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_peer * peer ; VAR_DECL 6 struct ast_channel_snapshot_peer * peer TYPE 7 struct ast_channel_snapshot_peer * TYPE_NAME 8 struct ast_channel_snapshot_peer LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_peer POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_caller * caller ; VAR_DECL 6 struct ast_channel_snapshot_caller * caller TYPE 7 struct ast_channel_snapshot_caller * TYPE_NAME 8 struct ast_channel_snapshot_caller LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_caller POINTER 8 * LEAF_NODE 9 * NAME 7 caller LEAF_NODE 8 caller LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_connected * connected ; VAR_DECL 6 struct ast_channel_snapshot_connected * connected TYPE 7 struct ast_channel_snapshot_connected * TYPE_NAME 8 struct ast_channel_snapshot_connected LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_connected POINTER 8 * LEAF_NODE 9 * NAME 7 connected LEAF_NODE 8 connected LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_bridge * bridge ; VAR_DECL 6 struct ast_channel_snapshot_bridge * bridge TYPE 7 struct ast_channel_snapshot_bridge * TYPE_NAME 8 struct ast_channel_snapshot_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_dialplan * dialplan ; VAR_DECL 6 struct ast_channel_snapshot_dialplan * dialplan TYPE 7 struct ast_channel_snapshot_dialplan * TYPE_NAME 8 struct ast_channel_snapshot_dialplan LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_dialplan POINTER 8 * LEAF_NODE 9 * NAME 7 dialplan LEAF_NODE 8 dialplan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_hangup * hangup ; VAR_DECL 6 struct ast_channel_snapshot_hangup * hangup TYPE 7 struct ast_channel_snapshot_hangup * TYPE_NAME 8 struct ast_channel_snapshot_hangup LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_hangup POINTER 8 * LEAF_NODE 9 * NAME 7 hangup LEAF_NODE 8 hangup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_channel_state state ; VAR_DECL 6 enum ast_channel_state state TYPE 7 enum ast_channel_state TYPE_NAME 8 enum ast_channel_state LEAF_NODE 9 enum LEAF_NODE 9 ast_channel_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int amaflags ; VAR_DECL 6 int amaflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 amaflags LEAF_NODE 8 amaflags LEAF_NODE 6 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 int hangupcause ; VAR_DECL 6 int hangupcause TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hangupcause LEAF_NODE 8 hangupcause LEAF_NODE 6 ; SIMPLE_DECL 5 int caller_pres ; VAR_DECL 6 int caller_pres TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 caller_pres LEAF_NODE 8 caller_pres LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags softhangup_flags ; VAR_DECL 6 struct ast_flags softhangup_flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 softhangup_flags LEAF_NODE 8 softhangup_flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * manager_vars ; VAR_DECL 6 struct varshead * manager_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 manager_vars LEAF_NODE 8 manager_vars LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * ari_vars ; VAR_DECL 6 struct varshead * ari_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 ari_vars LEAF_NODE 8 ari_vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_debug ; VAR_DECL 2 int global_debug TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_debug LEAF_NODE 4 global_debug LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } ; CLASS_DEF 2 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } CLASS_DEF 3 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_display LEAF_NODE 5 adsi_display LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 70 ] data ; VAR_DECL 6 char [ 70 ] data TYPE 7 char [ 70 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 70 ] LEAF_NODE 9 [ FIELD 9 70 LEAF_NODE 10 70 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_state LEAF_NODE 5 adsi_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } ; CLASS_DEF 2 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } CLASS_DEF 3 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_soft_key LEAF_NODE 5 adsi_soft_key LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int retstrlen ; VAR_DECL 6 int retstrlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 retstrlen LEAF_NODE 8 retstrlen LEAF_NODE 6 ; SIMPLE_DECL 5 int initlen ; VAR_DECL 6 int initlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 initlen LEAF_NODE 8 initlen LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] retstr ; VAR_DECL 6 char [ 80 ] retstr TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 retstr LEAF_NODE 8 retstr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } ; CLASS_DEF 2 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } CLASS_DEF 3 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_subscript LEAF_NODE 5 adsi_subscript LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; SIMPLE_DECL 5 int inscount ; VAR_DECL 6 int inscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inscount LEAF_NODE 8 inscount LEAF_NODE 6 ; SIMPLE_DECL 5 int ifinscount ; VAR_DECL 6 int ifinscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ifinscount LEAF_NODE 8 ifinscount LEAF_NODE 6 ; SIMPLE_DECL 5 char * ifdata ; VAR_DECL 6 char * ifdata TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 ifdata LEAF_NODE 8 ifdata LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 2048 ] data ; VAR_DECL 6 char [ 2048 ] data TYPE 7 char [ 2048 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 2048 ] LEAF_NODE 9 [ FIELD 9 2048 LEAF_NODE 10 2048 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_flag LEAF_NODE 5 adsi_flag LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } ; CLASS_DEF 2 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } CLASS_DEF 3 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_script LEAF_NODE 5 adsi_script LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; SIMPLE_DECL 5 int state ; VAR_DECL 6 int state TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int numkeys ; VAR_DECL 6 int numkeys TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numkeys LEAF_NODE 8 numkeys LEAF_NODE 6 ; SIMPLE_DECL 5 int numsubs ; VAR_DECL 6 int numsubs TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numsubs LEAF_NODE 8 numsubs LEAF_NODE 6 ; SIMPLE_DECL 5 int numstates ; VAR_DECL 6 int numstates TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numstates LEAF_NODE 8 numstates LEAF_NODE 6 ; SIMPLE_DECL 5 int numdisplays ; VAR_DECL 6 int numdisplays TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numdisplays LEAF_NODE 8 numdisplays LEAF_NODE 6 ; SIMPLE_DECL 5 int numflags ; VAR_DECL 6 int numflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numflags LEAF_NODE 8 numflags LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key * key ; VAR_DECL 6 struct adsi_soft_key * key TYPE 7 struct adsi_soft_key * TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript * sub ; VAR_DECL 6 struct adsi_subscript * sub TYPE 7 struct adsi_subscript * TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript POINTER 8 * LEAF_NODE 9 * NAME 7 sub LEAF_NODE 8 sub LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_display [ 63 ] displays ; VAR_DECL 6 struct adsi_display [ 63 ] displays TYPE 7 struct adsi_display [ 63 ] TYPE_NAME 8 struct adsi_display LEAF_NODE 9 struct LEAF_NODE 9 adsi_display TYPE_SUFFIX 8 [ 63 ] LEAF_NODE 9 [ FIELD 9 63 LEAF_NODE 10 63 LEAF_NODE 9 ] NAME 7 displays LEAF_NODE 8 displays LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_state [ 256 ] states ; VAR_DECL 6 struct adsi_state [ 256 ] states TYPE 7 struct adsi_state [ 256 ] TYPE_NAME 8 struct adsi_state LEAF_NODE 9 struct LEAF_NODE 9 adsi_state TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 states LEAF_NODE 8 states LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key [ 62 ] keys ; VAR_DECL 6 struct adsi_soft_key [ 62 ] keys TYPE 7 struct adsi_soft_key [ 62 ] TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key TYPE_SUFFIX 8 [ 62 ] LEAF_NODE 9 [ FIELD 9 62 LEAF_NODE 10 62 LEAF_NODE 9 ] NAME 7 keys LEAF_NODE 8 keys LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript [ 128 ] subs ; VAR_DECL 6 struct adsi_subscript [ 128 ] subs TYPE 7 struct adsi_subscript [ 128 ] TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript TYPE_SUFFIX 8 [ 128 ] LEAF_NODE 9 [ FIELD 9 128 LEAF_NODE 10 128 LEAF_NODE 9 ] NAME 7 subs LEAF_NODE 8 subs LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_flag [ 7 ] flags ; VAR_DECL 6 struct adsi_flag [ 7 ] flags TYPE 7 struct adsi_flag [ 7 ] TYPE_NAME 8 struct adsi_flag LEAF_NODE 9 struct LEAF_NODE 9 adsi_flag TYPE_SUFFIX 8 [ 7 ] LEAF_NODE 9 [ FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 9 ] NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] sec ; VAR_DECL 6 unsigned char [ 5 ] sec TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 sec LEAF_NODE 8 sec LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 19 ] desc ; VAR_DECL 6 char [ 19 ] desc TYPE 7 char [ 19 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 19 ] LEAF_NODE 9 [ FIELD 9 19 LEAF_NODE 10 19 LEAF_NODE 9 ] NAME 7 desc LEAF_NODE 8 desc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] fdn ; VAR_DECL 6 unsigned char [ 5 ] fdn TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 fdn LEAF_NODE 8 fdn LEAF_NODE 6 ; SIMPLE_DECL 5 int ver ; VAR_DECL 6 int ver TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ver LEAF_NODE 8 ver LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ao2_container * agents ; VAR_DECL 2 struct ao2_container * agents TYPE 3 struct ao2_container * TYPE_NAME 4 struct ao2_container LEAF_NODE 5 struct LEAF_NODE 5 ao2_container POINTER 4 * LEAF_NODE 5 * NAME 3 agents LEAF_NODE 4 agents LEAF_NODE 2 ; SIMPLE_DECL 1 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } ; CLASS_DEF 2 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } CLASS_DEF 3 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } LEAF_NODE 4 enum CLASS_NAME 4 agent_state LEAF_NODE 5 agent_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , LEAF_NODE 5 AGENT_STATE_LOGGED_OUT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_PROBATION_WAIT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_READY_FOR_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_PRESENT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WAIT_ACK LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_ON_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WRAPUP LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_LOGGING_OUT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } ; CLASS_DEF 2 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } CLASS_DEF 3 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_cfg LEAF_NODE 5 agent_cfg LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 full_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 beep_sound LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 moh LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int auto_logoff ; VAR_DECL 6 unsigned int auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 auto_logoff LEAF_NODE 8 auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wrapup_time ; VAR_DECL 6 unsigned int wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wrapup_time LEAF_NODE 8 wrapup_time LEAF_NODE 6 ; SIMPLE_DECL 5 int ack_call ; VAR_DECL 6 int ack_call TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ack_call LEAF_NODE 8 ack_call LEAF_NODE 6 ; SIMPLE_DECL 5 int record_agent_calls ; VAR_DECL 6 int record_agent_calls TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 record_agent_calls LEAF_NODE 8 record_agent_calls LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } ; CLASS_DEF 2 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } CLASS_DEF 3 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_pvt LEAF_NODE 5 agent_pvt LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 override_dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_party_connected_line waiting_colp ; VAR_DECL 6 struct ast_party_connected_line waiting_colp TYPE 7 struct ast_party_connected_line TYPE_NAME 8 struct ast_party_connected_line LEAF_NODE 9 struct LEAF_NODE 9 ast_party_connected_line NAME 7 waiting_colp LEAF_NODE 8 waiting_colp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_auto_logoff ; VAR_DECL 6 unsigned int override_auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_auto_logoff LEAF_NODE 8 override_auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_wrapup_time ; VAR_DECL 6 unsigned int override_wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_wrapup_time LEAF_NODE 8 override_wrapup_time LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 override_ack_call : LEAF_NODE 6 override_ack_call LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 deferred_logoff : LEAF_NODE 6 deferred_logoff LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 the_mark : LEAF_NODE 6 the_mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 dead : LEAF_NODE 6 dead LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 enum agent_state state ; VAR_DECL 6 enum agent_state state TYPE 7 enum agent_state TYPE_NAME 8 enum agent_state LEAF_NODE 9 enum LEAF_NODE 9 agent_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_device_state devstate ; VAR_DECL 6 enum ast_device_state devstate TYPE 7 enum ast_device_state TYPE_NAME 8 enum ast_device_state LEAF_NODE 9 enum LEAF_NODE 9 ast_device_state NAME 7 devstate LEAF_NODE 8 devstate LEAF_NODE 6 ; SIMPLE_DECL 5 time_t login_start ; VAR_DECL 6 time_t login_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 login_start LEAF_NODE 8 login_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t probation_start ; VAR_DECL 6 time_t probation_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 probation_start LEAF_NODE 8 probation_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t call_start ; VAR_DECL 6 time_t call_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 call_start LEAF_NODE 8 call_start LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval ack_time ; VAR_DECL 6 struct timeval ack_time TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 ack_time LEAF_NODE 8 ack_time LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval last_disconnect ; VAR_DECL 6 struct timeval last_disconnect TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 last_disconnect LEAF_NODE 8 last_disconnect LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_bridge * caller_bridge ; VAR_DECL 6 struct ast_bridge * caller_bridge TYPE 7 struct ast_bridge * TYPE_NAME 8 struct ast_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 caller_bridge LEAF_NODE 8 caller_bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * logged ; VAR_DECL 6 struct ast_channel * logged TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 logged LEAF_NODE 8 logged LEAF_NODE 6 ; SIMPLE_DECL 5 struct agent_cfg * cfg ; VAR_DECL 6 struct agent_cfg * cfg TYPE 7 struct agent_cfg * TYPE_NAME 8 struct agent_cfg LEAF_NODE 9 struct LEAF_NODE 9 agent_cfg POINTER 8 * LEAF_NODE 9 * NAME 7 cfg LEAF_NODE 8 cfg LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 clear_agent_status LEAF_NODE 3 clear_agent_status PARAMETER_LIST 2 ( struct ast_bridge_channel * bridge_channel , const void * payload , size_t payload_size ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_bridge_channel * bridge_channel TYPE 4 struct ast_bridge_channel * TYPE_NAME 5 struct ast_bridge_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_bridge_channel POINTER 5 * LEAF_NODE 6 * NAME 4 bridge_channel LEAF_NODE 5 bridge_channel LEAF_NODE 3 , PARAMETER_DECL 3 const void * payload TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 payload LEAF_NODE 5 payload LEAF_NODE 3 , PARAMETER_DECL 3 size_t payload_size TYPE 4 size_t TYPE_NAME 5 size_t LEAF_NODE 6 size_t NAME 4 payload_size LEAF_NODE 5 payload_size LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 pbx_builtin_setvar_helper ( bridge_channel -> chan , \"AGENT_STATUS\" , NULL ) ; EXPR 4 pbx_builtin_setvar_helper ( bridge_channel -> chan , \"AGENT_STATUS\" , NULL ) FUNCTION_CALL 5 pbx_builtin_setvar_helper ( bridge_channel -> chan , \"AGENT_STATUS\" , NULL ) CALLEE 6 pbx_builtin_setvar_helper LEAF_NODE 7 pbx_builtin_setvar_helper LEAF_NODE 6 ( ARGUMENT 6 bridge_channel -> chan FIELD 7 bridge_channel -> chan LEAF_NODE 8 bridge_channel LEAF_NODE 8 -> LEAF_NODE 8 chan LEAF_NODE 6 , ARGUMENT 6 \"AGENT_STATUS\" FIELD 7 \"AGENT_STATUS\" LEAF_NODE 8 \"AGENT_STATUS\" LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 9, "project": "openssl_ast_vul_function_test_adv_21", "target": 1}
{"func": "SIMPLE_DECL 1 enum sipmethod id ; VAR_DECL 2 enum sipmethod id TYPE 3 enum sipmethod TYPE_NAME 4 enum sipmethod LEAF_NODE 5 enum LEAF_NODE 5 sipmethod NAME 3 id LEAF_NODE 4 id LEAF_NODE 2 ; SIMPLE_DECL 1 int need_rtp ; VAR_DECL 2 int need_rtp TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 need_rtp LEAF_NODE 4 need_rtp LEAF_NODE 2 ; SIMPLE_DECL 1 enum can_create_dialog can_create ; VAR_DECL 2 enum can_create_dialog can_create TYPE 3 enum can_create_dialog TYPE_NAME 4 enum can_create_dialog LEAF_NODE 5 enum LEAF_NODE 5 can_create_dialog NAME 3 can_create LEAF_NODE 4 can_create LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 get_destination LEAF_NODE 3 get_destination PARAMETER_LIST 2 ( struct sip_pvt * p , struct sip_request * oreq ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct sip_pvt * p TYPE 4 struct sip_pvt * TYPE_NAME 5 struct sip_pvt LEAF_NODE 6 struct LEAF_NODE 6 sip_pvt POINTER 5 * LEAF_NODE 6 * NAME 4 p LEAF_NODE 5 p LEAF_NODE 3 , PARAMETER_DECL 3 struct sip_request * oreq TYPE 4 struct sip_request * TYPE_NAME 5 struct sip_request LEAF_NODE 6 struct LEAF_NODE 6 sip_request POINTER 5 * LEAF_NODE 6 * NAME 4 oreq LEAF_NODE 5 oreq LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ 256 ] tmp ; tmp = \"\" , char * uri , char * a ; INIT_DECL_LIST 4 char [ 256 ] tmp ; tmp = \"\" , char * uri , char * a VAR_DECL 5 char [ 256 ] tmp ; tmp = \"\" TYPE 6 char [ 256 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 256 ] LEAF_NODE 8 [ FIELD 8 256 LEAF_NODE 9 256 LEAF_NODE 8 ] NAME 6 tmp LEAF_NODE 7 tmp LEAF_NODE 6 ; INIT 6 tmp = \"\" ASSIGN 7 tmp = \"\" LVAL 8 tmp NAME 9 tmp LEAF_NODE 10 tmp ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 \"\" FIELD 9 \"\" LEAF_NODE 10 \"\" LEAF_NODE 5 , INIT_DECL_LIST 5 char * uri , char * a VAR_DECL 6 char * uri TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 uri LEAF_NODE 8 uri LEAF_NODE 6 , VAR_DECL 6 char * a TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 a LEAF_NODE 8 a LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 256 ] tmpf , char * from ; INIT_DECL_LIST 4 char [ 256 ] tmpf , char * from VAR_DECL 5 char [ 256 ] tmpf TYPE 6 char [ 256 ] TYPE_NAME 7 char LEAF_NODE 8 char TYPE_SUFFIX 7 [ 256 ] LEAF_NODE 8 [ FIELD 8 256 LEAF_NODE 9 256 LEAF_NODE 8 ] NAME 6 tmpf LEAF_NODE 7 tmpf LEAF_NODE 5 , VAR_DECL 5 char * from TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 from LEAF_NODE 7 from LEAF_NODE 4 ; SIMPLE_DECL 3 struct sip_request * req ; VAR_DECL 4 struct sip_request * req TYPE 5 struct sip_request * TYPE_NAME 6 struct sip_request LEAF_NODE 7 struct LEAF_NODE 7 sip_request POINTER 6 * LEAF_NODE 7 * NAME 5 req LEAF_NODE 6 req LEAF_NODE 4 ; SIMPLE_DECL 3 char * colon ; VAR_DECL 4 char * colon TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 colon LEAF_NODE 6 colon LEAF_NODE 4 ; EXPR_STATEMENT 3 req = oreq ; EXPR 4 req = oreq ASSIGN 5 req = oreq LVAL 6 req FIELD 7 req LEAF_NODE 8 req ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 oreq FIELD 7 oreq LEAF_NODE 8 oreq LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! req EXPR 5 ! req UNARY_EXPR 6 ! req UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 req LEAF_NODE 8 req LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 req = & p -> initreq ; EXPR 6 req = & p -> initreq ASSIGN 7 req = & p -> initreq LVAL 8 req FIELD 9 req LEAF_NODE 10 req ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 & p -> initreq UNARY_EXPR 9 & p -> initreq UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 p -> initreq LEAF_NODE 11 p LEAF_NODE 11 -> LEAF_NODE 11 initreq LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 req -> rlpart2 EXPR 5 req -> rlpart2 FIELD 6 req -> rlpart2 LEAF_NODE 7 req LEAF_NODE 7 -> LEAF_NODE 7 rlpart2 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 ast_copy_string ( tmp , req -> rlpart2 , sizeof ( tmp ) ) ; EXPR 6 ast_copy_string ( tmp , req -> rlpart2 , sizeof ( tmp ) ) FUNCTION_CALL 7 ast_copy_string ( tmp , req -> rlpart2 , sizeof ( tmp ) ) CALLEE 8 ast_copy_string LEAF_NODE 9 ast_copy_string LEAF_NODE 8 ( ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 , ARGUMENT 8 req -> rlpart2 FIELD 9 req -> rlpart2 LEAF_NODE 10 req LEAF_NODE 10 -> LEAF_NODE 10 rlpart2 LEAF_NODE 8 , ARGUMENT 8 sizeof ( tmp ) FUNCTION_CALL 9 sizeof ( tmp ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 tmp FIELD 11 tmp LEAF_NODE 12 tmp LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 uri = get_in_brackets ( tmp ) ; EXPR 4 uri = get_in_brackets ( tmp ) ASSIGN 5 uri = get_in_brackets ( tmp ) LVAL 6 uri FIELD 7 uri LEAF_NODE 8 uri ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 get_in_brackets ( tmp ) FUNCTION_CALL 7 get_in_brackets ( tmp ) CALLEE 8 get_in_brackets LEAF_NODE 9 get_in_brackets LEAF_NODE 8 ( ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_copy_string ( tmpf , get_header ( req , \"From\" ) , sizeof ( tmpf ) ) ; EXPR 4 ast_copy_string ( tmpf , get_header ( req , \"From\" ) , sizeof ( tmpf ) ) FUNCTION_CALL 5 ast_copy_string ( tmpf , get_header ( req , \"From\" ) , sizeof ( tmpf ) ) CALLEE 6 ast_copy_string LEAF_NODE 7 ast_copy_string LEAF_NODE 6 ( ARGUMENT 6 tmpf FIELD 7 tmpf LEAF_NODE 8 tmpf LEAF_NODE 6 , ARGUMENT 6 get_header ( req , \"From\" ) FUNCTION_CALL 7 get_header ( req , \"From\" ) CALLEE 8 get_header LEAF_NODE 9 get_header LEAF_NODE 8 ( ARGUMENT 8 req FIELD 9 req LEAF_NODE 10 req LEAF_NODE 8 , ARGUMENT 8 \"From\" FIELD 9 \"From\" LEAF_NODE 10 \"From\" LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmpf ) FUNCTION_CALL 7 sizeof ( tmpf ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmpf FIELD 9 tmpf LEAF_NODE 10 tmpf LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 from = get_in_brackets ( tmpf ) ; EXPR 4 from = get_in_brackets ( tmpf ) ASSIGN 5 from = get_in_brackets ( tmpf ) LVAL 6 from FIELD 7 from LEAF_NODE 8 from ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 get_in_brackets ( tmpf ) FUNCTION_CALL 7 get_in_brackets ( tmpf ) CALLEE 8 get_in_brackets LEAF_NODE 9 get_in_brackets LEAF_NODE 8 ( ARGUMENT 8 tmpf FIELD 9 tmpf LEAF_NODE 10 tmpf LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strncmp ( uri , \"sip:\" , 4 ) EXPR 5 strncmp ( uri , \"sip:\" , 4 ) FUNCTION_CALL 6 strncmp ( uri , \"sip:\" , 4 ) CALLEE 7 strncmp LEAF_NODE 8 strncmp LEAF_NODE 7 ( ARGUMENT 7 uri FIELD 8 uri LEAF_NODE 9 uri LEAF_NODE 7 , ARGUMENT 7 \"sip:\" FIELD 8 \"sip:\" LEAF_NODE 9 \"sip:\" LEAF_NODE 7 , ARGUMENT 7 4 FIELD 8 4 LEAF_NODE 9 4 LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"Huh? Not a SIP header (%s)?\\n\" , uri ) ; EXPR 7 ast_log ( LOG_WARNING , \"Huh? Not a SIP header (%s)?\\n\" , uri ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"Huh? Not a SIP header (%s)?\\n\" , uri ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"Huh? Not a SIP header (%s)?\\n\" FIELD 10 \"Huh? Not a SIP header (%s)?\\n\" LEAF_NODE 11 \"Huh? Not a SIP header (%s)?\\n\" LEAF_NODE 9 , ARGUMENT 9 uri FIELD 10 uri LEAF_NODE 11 uri LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 uri += 4 ; EXPR 4 uri += 4 ASSIGN 5 uri += 4 LVAL 6 uri FIELD 7 uri LEAF_NODE 8 uri ASSIGN_OP 6 += LEAF_NODE 7 += RVAL 6 4 FIELD 7 4 LEAF_NODE 8 4 LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( from ) EXPR 5 ! ast_strlen_zero ( from ) UNARY_EXPR 6 ! ast_strlen_zero ( from ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ast_strlen_zero ( from ) CALLEE 8 ast_strlen_zero LEAF_NODE 9 ast_strlen_zero LEAF_NODE 8 ( ARGUMENT 8 from FIELD 9 from LEAF_NODE 10 from LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 strncmp ( from , \"sip:\" , 4 ) EXPR 8 strncmp ( from , \"sip:\" , 4 ) FUNCTION_CALL 9 strncmp ( from , \"sip:\" , 4 ) CALLEE 10 strncmp LEAF_NODE 11 strncmp LEAF_NODE 10 ( ARGUMENT 10 from FIELD 11 from LEAF_NODE 12 from LEAF_NODE 10 , ARGUMENT 10 \"sip:\" FIELD 11 \"sip:\" LEAF_NODE 12 \"sip:\" LEAF_NODE 10 , ARGUMENT 10 4 FIELD 11 4 LEAF_NODE 12 4 LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"Huh? Not a SIP header (%s)?\\n\" , from ) ; EXPR 10 ast_log ( LOG_WARNING , \"Huh? Not a SIP header (%s)?\\n\" , from ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"Huh? Not a SIP header (%s)?\\n\" , from ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"Huh? Not a SIP header (%s)?\\n\" FIELD 13 \"Huh? Not a SIP header (%s)?\\n\" LEAF_NODE 14 \"Huh? Not a SIP header (%s)?\\n\" LEAF_NODE 12 , ARGUMENT 12 from FIELD 13 from LEAF_NODE 14 from LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 from += 4 ; EXPR 7 from += 4 ASSIGN 8 from += 4 LVAL 9 from FIELD 10 from LEAF_NODE 11 from ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 4 FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 from = NULL ; EXPR 6 from = NULL ASSIGN 7 from = NULL LVAL 8 from FIELD 9 from LEAF_NODE 10 from ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( a = strchr ( uri , ';' ) ) EXPR 5 ( a = strchr ( uri , ';' ) ) LEAF_NODE 6 ( ASSIGN 6 a = strchr ( uri , ';' ) LVAL 7 a FIELD 8 a LEAF_NODE 9 a ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 strchr ( uri , ';' ) FUNCTION_CALL 8 strchr ( uri , ';' ) CALLEE 9 strchr LEAF_NODE 10 strchr LEAF_NODE 9 ( ARGUMENT 9 uri FIELD 10 uri LEAF_NODE 11 uri LEAF_NODE 9 , ARGUMENT 9 ';' FIELD 10 ';' LEAF_NODE 11 ';' LEAF_NODE 9 ) LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * a = '\\0' ; EXPR 7 * a = '\\0' ASSIGN 8 * a = '\\0' LVAL 9 * a UNARY_EXPR 10 * a UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 a LEAF_NODE 12 a ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( a = strchr ( uri , '@' ) ) EXPR 5 ( a = strchr ( uri , '@' ) ) LEAF_NODE 6 ( ASSIGN 6 a = strchr ( uri , '@' ) LVAL 7 a FIELD 8 a LEAF_NODE 9 a ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 strchr ( uri , '@' ) FUNCTION_CALL 8 strchr ( uri , '@' ) CALLEE 9 strchr LEAF_NODE 10 strchr LEAF_NODE 9 ( ARGUMENT 9 uri FIELD 10 uri LEAF_NODE 11 uri LEAF_NODE 9 , ARGUMENT 9 '@' FIELD 10 '@' LEAF_NODE 11 '@' LEAF_NODE 9 ) LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 * a = '\\0' ; EXPR 7 * a = '\\0' ASSIGN 8 * a = '\\0' LVAL 9 * a UNARY_EXPR 10 * a UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 a LEAF_NODE 12 a ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; EXPR_STATEMENT 6 a ++ ; EXPR 7 a ++ FIELD 8 a ++ LEAF_NODE 9 a LEAF_NODE 9 ++ LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 a = uri ; EXPR 7 a = uri ASSIGN 8 a = uri LVAL 9 a FIELD 10 a LEAF_NODE 11 a ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 uri FIELD 10 uri LEAF_NODE 11 uri LEAF_NODE 7 ; EXPR_STATEMENT 6 uri = \"s\" ; EXPR 7 uri = \"s\" ASSIGN 8 uri = \"s\" LVAL 9 uri FIELD 10 uri LEAF_NODE 11 uri ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 \"s\" FIELD 10 \"s\" LEAF_NODE 11 \"s\" LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 colon = strchr ( a , ':' ) ; EXPR 4 colon = strchr ( a , ':' ) ASSIGN 5 colon = strchr ( a , ':' ) LVAL 6 colon FIELD 7 colon LEAF_NODE 8 colon ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strchr ( a , ':' ) FUNCTION_CALL 7 strchr ( a , ':' ) CALLEE 8 strchr LEAF_NODE 9 strchr LEAF_NODE 8 ( ARGUMENT 8 a FIELD 9 a LEAF_NODE 10 a LEAF_NODE 8 , ARGUMENT 8 ':' FIELD 9 ':' LEAF_NODE 10 ':' LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 colon EXPR 5 colon FIELD 6 colon LEAF_NODE 7 colon LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 * colon = '\\0' ; EXPR 6 * colon = '\\0' ASSIGN 7 * colon = '\\0' LVAL 8 * colon UNARY_EXPR 9 * colon UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 colon LEAF_NODE 11 colon ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 '\\0' FIELD 9 '\\0' LEAF_NODE 10 '\\0' LEAF_NODE 6 ; EXPR_STATEMENT 3 ast_copy_string ( p -> domain , a , sizeof ( p -> domain ) ) ; EXPR 4 ast_copy_string ( p -> domain , a , sizeof ( p -> domain ) ) FUNCTION_CALL 5 ast_copy_string ( p -> domain , a , sizeof ( p -> domain ) ) CALLEE 6 ast_copy_string LEAF_NODE 7 ast_copy_string LEAF_NODE 6 ( ARGUMENT 6 p -> domain FIELD 7 p -> domain LEAF_NODE 8 p LEAF_NODE 8 -> LEAF_NODE 8 domain LEAF_NODE 6 , ARGUMENT 6 a FIELD 7 a LEAF_NODE 8 a LEAF_NODE 6 , ARGUMENT 6 sizeof ( p -> domain ) FUNCTION_CALL 7 sizeof ( p -> domain ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 p -> domain FIELD 9 p -> domain LEAF_NODE 10 p LEAF_NODE 10 -> LEAF_NODE 10 domain LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! AST_LIST_EMPTY ( & domain_list ) EXPR 5 ! AST_LIST_EMPTY ( & domain_list ) UNARY_EXPR 6 ! AST_LIST_EMPTY ( & domain_list ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 AST_LIST_EMPTY ( & domain_list ) CALLEE 8 AST_LIST_EMPTY LEAF_NODE 9 AST_LIST_EMPTY LEAF_NODE 8 ( ARGUMENT 8 & domain_list UNARY_EXPR 9 & domain_list UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 domain_list LEAF_NODE 11 domain_list LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char [ AST_MAX_EXTENSION ] domain_context ; VAR_DECL 7 char [ AST_MAX_EXTENSION ] domain_context TYPE 8 char [ AST_MAX_EXTENSION ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ AST_MAX_EXTENSION ] LEAF_NODE 10 [ FIELD 10 AST_MAX_EXTENSION LEAF_NODE 11 AST_MAX_EXTENSION LEAF_NODE 10 ] NAME 8 domain_context LEAF_NODE 9 domain_context LEAF_NODE 7 ; EXPR_STATEMENT 6 domain_context [ 0 ] = '\\0' ; EXPR 7 domain_context [ 0 ] = '\\0' ASSIGN 8 domain_context [ 0 ] = '\\0' LVAL 9 domain_context [ 0 ] FIELD 10 domain_context [ 0 ] LEAF_NODE 11 domain_context LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 '\\0' FIELD 10 '\\0' LEAF_NODE 11 '\\0' LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! check_sip_domain ( p -> domain , domain_context , sizeof ( domain_context ) ) EXPR 8 ! check_sip_domain ( p -> domain , domain_context , sizeof ( domain_context ) ) UNARY_EXPR 9 ! check_sip_domain ( p -> domain , domain_context , sizeof ( domain_context ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 check_sip_domain ( p -> domain , domain_context , sizeof ( domain_context ) ) CALLEE 11 check_sip_domain LEAF_NODE 12 check_sip_domain LEAF_NODE 11 ( ARGUMENT 11 p -> domain FIELD 12 p -> domain LEAF_NODE 13 p LEAF_NODE 13 -> LEAF_NODE 13 domain LEAF_NODE 11 , ARGUMENT 11 domain_context FIELD 12 domain_context LEAF_NODE 13 domain_context LEAF_NODE 11 , ARGUMENT 11 sizeof ( domain_context ) FUNCTION_CALL 12 sizeof ( domain_context ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 domain_context FIELD 14 domain_context LEAF_NODE 15 domain_context LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! allow_external_domains && ( req -> method == SIP_INVITE || req -> method == SIP_REFER ) EXPR 11 ! allow_external_domains && ( req -> method == SIP_INVITE || req -> method == SIP_REFER ) AND 12 ! allow_external_domains && ( req -> method == SIP_INVITE || req -> method == SIP_REFER ) EXPR 13 ! allow_external_domains UNARY_EXPR 14 ! allow_external_domains UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FIELD 15 allow_external_domains LEAF_NODE 16 allow_external_domains LEAF_NODE 13 && EXPR 13 ( req -> method == SIP_INVITE || req -> method == SIP_REFER ) LEAF_NODE 14 ( OR 14 req -> method == SIP_INVITE || req -> method == SIP_REFER EXPR 15 req -> method == SIP_INVITE FIELD 16 req -> method LEAF_NODE 17 req LEAF_NODE 17 -> LEAF_NODE 17 method EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SIP_INVITE LEAF_NODE 17 SIP_INVITE LEAF_NODE 15 || EXPR 15 req -> method == SIP_REFER FIELD 16 req -> method LEAF_NODE 17 req LEAF_NODE 17 -> LEAF_NODE 17 method EQ_OPERATOR 16 == LEAF_NODE 17 == FIELD 16 SIP_REFER LEAF_NODE 17 SIP_REFER LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_DEBUG , \"Got SIP %s to non-local domain '%s'; refusing request.\\n\" , sip_methods [ req -> method ] . text , p -> domain ) ; EXPR 13 ast_log ( LOG_DEBUG , \"Got SIP %s to non-local domain '%s'; refusing request.\\n\" , sip_methods [ req -> method ] . text , p -> domain ) FUNCTION_CALL 14 ast_log ( LOG_DEBUG , \"Got SIP %s to non-local domain '%s'; refusing request.\\n\" , sip_methods [ req -> method ] . text , p -> domain ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_DEBUG FIELD 16 LOG_DEBUG LEAF_NODE 17 LOG_DEBUG LEAF_NODE 15 , ARGUMENT 15 \"Got SIP %s to non-local domain '%s'; refusing request.\\n\" FIELD 16 \"Got SIP %s to non-local domain '%s'; refusing request.\\n\" LEAF_NODE 17 \"Got SIP %s to non-local domain '%s'; refusing request.\\n\" LEAF_NODE 15 , ARGUMENT 15 sip_methods [ req -> method ] . text FIELD 16 sip_methods [ req -> method ] . text LEAF_NODE 17 sip_methods LEAF_NODE 17 [ EXPR 17 req -> method FIELD 18 req -> method LEAF_NODE 19 req LEAF_NODE 19 -> LEAF_NODE 19 method LEAF_NODE 17 ] LEAF_NODE 17 . LEAF_NODE 17 text LEAF_NODE 15 , ARGUMENT 15 p -> domain FIELD 16 p -> domain LEAF_NODE 17 p LEAF_NODE 17 -> LEAF_NODE 17 domain LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 return - 2 ; KEYWORD 13 return LEAF_NODE 14 return DESTINATION 13 - 2 EXPR 14 - 2 UNARY_EXPR 15 - 2 UNARY_OPERATOR 16 - LEAF_NODE 17 - FIELD 16 2 LEAF_NODE 17 2 LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ast_strlen_zero ( domain_context ) EXPR 8 ! ast_strlen_zero ( domain_context ) UNARY_EXPR 9 ! ast_strlen_zero ( domain_context ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ast_strlen_zero ( domain_context ) CALLEE 11 ast_strlen_zero LEAF_NODE 12 ast_strlen_zero LEAF_NODE 11 ( ARGUMENT 11 domain_context FIELD 12 domain_context LEAF_NODE 13 domain_context LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ast_copy_string ( p -> context , domain_context , sizeof ( p -> context ) ) ; EXPR 9 ast_copy_string ( p -> context , domain_context , sizeof ( p -> context ) ) FUNCTION_CALL 10 ast_copy_string ( p -> context , domain_context , sizeof ( p -> context ) ) CALLEE 11 ast_copy_string LEAF_NODE 12 ast_copy_string LEAF_NODE 11 ( ARGUMENT 11 p -> context FIELD 12 p -> context LEAF_NODE 13 p LEAF_NODE 13 -> LEAF_NODE 13 context LEAF_NODE 11 , ARGUMENT 11 domain_context FIELD 12 domain_context LEAF_NODE 13 domain_context LEAF_NODE 11 , ARGUMENT 11 sizeof ( p -> context ) FUNCTION_CALL 12 sizeof ( p -> context ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 p -> context FIELD 14 p -> context LEAF_NODE 15 p LEAF_NODE 15 -> LEAF_NODE 15 context LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 from EXPR 5 from FIELD 6 from LEAF_NODE 7 from LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( a = strchr ( from , ';' ) ) EXPR 8 ( a = strchr ( from , ';' ) ) LEAF_NODE 9 ( ASSIGN 9 a = strchr ( from , ';' ) LVAL 10 a FIELD 11 a LEAF_NODE 12 a ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strchr ( from , ';' ) FUNCTION_CALL 11 strchr ( from , ';' ) CALLEE 12 strchr LEAF_NODE 13 strchr LEAF_NODE 12 ( ARGUMENT 12 from FIELD 13 from LEAF_NODE 14 from LEAF_NODE 12 , ARGUMENT 12 ';' FIELD 13 ';' LEAF_NODE 14 ';' LEAF_NODE 12 ) LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 * a = '\\0' ; EXPR 9 * a = '\\0' ASSIGN 10 * a = '\\0' LVAL 11 * a UNARY_EXPR 12 * a UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 a LEAF_NODE 14 a ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 '\\0' FIELD 12 '\\0' LEAF_NODE 13 '\\0' LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( a = strchr ( from , '@' ) ) EXPR 8 ( a = strchr ( from , '@' ) ) LEAF_NODE 9 ( ASSIGN 9 a = strchr ( from , '@' ) LVAL 10 a FIELD 11 a LEAF_NODE 12 a ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 strchr ( from , '@' ) FUNCTION_CALL 11 strchr ( from , '@' ) CALLEE 12 strchr LEAF_NODE 13 strchr LEAF_NODE 12 ( ARGUMENT 12 from FIELD 13 from LEAF_NODE 14 from LEAF_NODE 12 , ARGUMENT 12 '@' FIELD 13 '@' LEAF_NODE 14 '@' LEAF_NODE 12 ) LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 * a = '\\0' ; EXPR 10 * a = '\\0' ASSIGN 11 * a = '\\0' LVAL 12 * a UNARY_EXPR 13 * a UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 a LEAF_NODE 15 a ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 '\\0' FIELD 13 '\\0' LEAF_NODE 14 '\\0' LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( p -> fromdomain , a + 1 , sizeof ( p -> fromdomain ) ) ; EXPR 10 ast_copy_string ( p -> fromdomain , a + 1 , sizeof ( p -> fromdomain ) ) FUNCTION_CALL 11 ast_copy_string ( p -> fromdomain , a + 1 , sizeof ( p -> fromdomain ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 p -> fromdomain FIELD 13 p -> fromdomain LEAF_NODE 14 p LEAF_NODE 14 -> LEAF_NODE 14 fromdomain LEAF_NODE 12 , ARGUMENT 12 a + 1 FIELD 13 a LEAF_NODE 14 a LEAF_NODE 13 + FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 sizeof ( p -> fromdomain ) FUNCTION_CALL 13 sizeof ( p -> fromdomain ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 p -> fromdomain FIELD 15 p -> fromdomain LEAF_NODE 16 p LEAF_NODE 16 -> LEAF_NODE 16 fromdomain LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 ast_copy_string ( p -> fromdomain , from , sizeof ( p -> fromdomain ) ) ; EXPR 9 ast_copy_string ( p -> fromdomain , from , sizeof ( p -> fromdomain ) ) FUNCTION_CALL 10 ast_copy_string ( p -> fromdomain , from , sizeof ( p -> fromdomain ) ) CALLEE 11 ast_copy_string LEAF_NODE 12 ast_copy_string LEAF_NODE 11 ( ARGUMENT 11 p -> fromdomain FIELD 12 p -> fromdomain LEAF_NODE 13 p LEAF_NODE 13 -> LEAF_NODE 13 fromdomain LEAF_NODE 11 , ARGUMENT 11 from FIELD 12 from LEAF_NODE 13 from LEAF_NODE 11 , ARGUMENT 11 sizeof ( p -> fromdomain ) FUNCTION_CALL 12 sizeof ( p -> fromdomain ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 p -> fromdomain FIELD 14 p -> fromdomain LEAF_NODE 15 p LEAF_NODE 15 -> LEAF_NODE 15 fromdomain LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 sip_debug_test_pvt ( p ) EXPR 5 sip_debug_test_pvt ( p ) FUNCTION_CALL 6 sip_debug_test_pvt ( p ) CALLEE 7 sip_debug_test_pvt LEAF_NODE 8 sip_debug_test_pvt LEAF_NODE 7 ( ARGUMENT 7 p FIELD 8 p LEAF_NODE 9 p LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 ast_verbose ( \"Looking for %s in %s (domain %s)\\n\" , uri , p -> context , p -> domain ) ; EXPR 6 ast_verbose ( \"Looking for %s in %s (domain %s)\\n\" , uri , p -> context , p -> domain ) FUNCTION_CALL 7 ast_verbose ( \"Looking for %s in %s (domain %s)\\n\" , uri , p -> context , p -> domain ) CALLEE 8 ast_verbose LEAF_NODE 9 ast_verbose LEAF_NODE 8 ( ARGUMENT 8 \"Looking for %s in %s (domain %s)\\n\" FIELD 9 \"Looking for %s in %s (domain %s)\\n\" LEAF_NODE 10 \"Looking for %s in %s (domain %s)\\n\" LEAF_NODE 8 , ARGUMENT 8 uri FIELD 9 uri LEAF_NODE 10 uri LEAF_NODE 8 , ARGUMENT 8 p -> context FIELD 9 p -> context LEAF_NODE 10 p LEAF_NODE 10 -> LEAF_NODE 10 context LEAF_NODE 8 , ARGUMENT 8 p -> domain FIELD 9 p -> domain LEAF_NODE 10 p LEAF_NODE 10 -> LEAF_NODE 10 domain LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_exists_extension ( NULL , p -> context , uri , 1 , from ) || ! strcmp ( uri , ast_pickup_ext ( ) ) EXPR 5 ast_exists_extension ( NULL , p -> context , uri , 1 , from ) || ! strcmp ( uri , ast_pickup_ext ( ) ) OR 6 ast_exists_extension ( NULL , p -> context , uri , 1 , from ) || ! strcmp ( uri , ast_pickup_ext ( ) ) EXPR 7 ast_exists_extension ( NULL , p -> context , uri , 1 , from ) FUNCTION_CALL 8 ast_exists_extension ( NULL , p -> context , uri , 1 , from ) CALLEE 9 ast_exists_extension LEAF_NODE 10 ast_exists_extension LEAF_NODE 9 ( ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 p -> context FIELD 10 p -> context LEAF_NODE 11 p LEAF_NODE 11 -> LEAF_NODE 11 context LEAF_NODE 9 , ARGUMENT 9 uri FIELD 10 uri LEAF_NODE 11 uri LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 from FIELD 10 from LEAF_NODE 11 from LEAF_NODE 9 ) LEAF_NODE 7 || EXPR 7 ! strcmp ( uri , ast_pickup_ext ( ) ) UNARY_EXPR 8 ! strcmp ( uri , ast_pickup_ext ( ) ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 strcmp ( uri , ast_pickup_ext ( ) ) CALLEE 10 strcmp LEAF_NODE 11 strcmp LEAF_NODE 10 ( ARGUMENT 10 uri FIELD 11 uri LEAF_NODE 12 uri LEAF_NODE 10 , ARGUMENT 10 ast_pickup_ext ( ) FUNCTION_CALL 11 ast_pickup_ext ( ) CALLEE 12 ast_pickup_ext LEAF_NODE 13 ast_pickup_ext LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! oreq EXPR 8 ! oreq UNARY_EXPR 9 ! oreq UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 oreq LEAF_NODE 11 oreq LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ast_copy_string ( p -> exten , uri , sizeof ( p -> exten ) ) ; EXPR 9 ast_copy_string ( p -> exten , uri , sizeof ( p -> exten ) ) FUNCTION_CALL 10 ast_copy_string ( p -> exten , uri , sizeof ( p -> exten ) ) CALLEE 11 ast_copy_string LEAF_NODE 12 ast_copy_string LEAF_NODE 11 ( ARGUMENT 11 p -> exten FIELD 12 p -> exten LEAF_NODE 13 p LEAF_NODE 13 -> LEAF_NODE 13 exten LEAF_NODE 11 , ARGUMENT 11 uri FIELD 12 uri LEAF_NODE 13 uri LEAF_NODE 11 , ARGUMENT 11 sizeof ( p -> exten ) FUNCTION_CALL 12 sizeof ( p -> exten ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 p -> exten FIELD 14 p -> exten LEAF_NODE 15 p LEAF_NODE 15 -> LEAF_NODE 15 exten LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_canmatch_extension ( NULL , p -> context , uri , 1 , from ) || ! strncmp ( uri , ast_pickup_ext ( ) , strlen ( uri ) ) EXPR 5 ast_canmatch_extension ( NULL , p -> context , uri , 1 , from ) || ! strncmp ( uri , ast_pickup_ext ( ) , strlen ( uri ) ) OR 6 ast_canmatch_extension ( NULL , p -> context , uri , 1 , from ) || ! strncmp ( uri , ast_pickup_ext ( ) , strlen ( uri ) ) EXPR 7 ast_canmatch_extension ( NULL , p -> context , uri , 1 , from ) FUNCTION_CALL 8 ast_canmatch_extension ( NULL , p -> context , uri , 1 , from ) CALLEE 9 ast_canmatch_extension LEAF_NODE 10 ast_canmatch_extension LEAF_NODE 9 ( ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 p -> context FIELD 10 p -> context LEAF_NODE 11 p LEAF_NODE 11 -> LEAF_NODE 11 context LEAF_NODE 9 , ARGUMENT 9 uri FIELD 10 uri LEAF_NODE 11 uri LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 from FIELD 10 from LEAF_NODE 11 from LEAF_NODE 9 ) LEAF_NODE 7 || EXPR 7 ! strncmp ( uri , ast_pickup_ext ( ) , strlen ( uri ) ) UNARY_EXPR 8 ! strncmp ( uri , ast_pickup_ext ( ) , strlen ( uri ) ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 strncmp ( uri , ast_pickup_ext ( ) , strlen ( uri ) ) CALLEE 10 strncmp LEAF_NODE 11 strncmp LEAF_NODE 10 ( ARGUMENT 10 uri FIELD 11 uri LEAF_NODE 12 uri LEAF_NODE 10 , ARGUMENT 10 ast_pickup_ext ( ) FUNCTION_CALL 11 ast_pickup_ext ( ) CALLEE 12 ast_pickup_ext LEAF_NODE 13 ast_pickup_ext LEAF_NODE 12 ( LEAF_NODE 12 ) LEAF_NODE 10 , ARGUMENT 10 strlen ( uri ) FUNCTION_CALL 11 strlen ( uri ) CALLEE 12 strlen LEAF_NODE 13 strlen LEAF_NODE 12 ( ARGUMENT 12 uri FIELD 13 uri LEAF_NODE 14 uri LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 10, "project": "openssl_ast_vul_function_test_adv_39", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } ; CLASS_DEF 2 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } CLASS_DEF 3 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 stasis_app_subscription_model LEAF_NODE 5 stasis_app_subscription_model LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 5 STASIS_APP_SUBSCRIBE_MANUAL LEAF_NODE 5 , LEAF_NODE 5 STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } ; CLASS_DEF 2 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } CLASS_DEF 3 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 stasis_app LEAF_NODE 5 stasis_app LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; SIMPLE_DECL 5 struct stasis_topic * topic ; VAR_DECL 6 struct stasis_topic * topic TYPE 7 struct stasis_topic * TYPE_NAME 8 struct stasis_topic LEAF_NODE 9 struct LEAF_NODE 9 stasis_topic POINTER 8 * LEAF_NODE 9 * NAME 7 topic LEAF_NODE 8 topic LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * router ; VAR_DECL 6 struct stasis_message_router * router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 router LEAF_NODE 8 router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * bridge_router ; VAR_DECL 6 struct stasis_message_router * bridge_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 bridge_router LEAF_NODE 8 bridge_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * endpoint_router ; VAR_DECL 6 struct stasis_message_router * endpoint_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 endpoint_router LEAF_NODE 8 endpoint_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * forwards ; VAR_DECL 6 struct ao2_container * forwards TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 forwards LEAF_NODE 8 forwards LEAF_NODE 6 ; SIMPLE_DECL 5 stasis_app_cb handler ; VAR_DECL 6 stasis_app_cb handler TYPE 7 stasis_app_cb TYPE_NAME 8 stasis_app_cb LEAF_NODE 9 stasis_app_cb NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 enum stasis_app_subscription_model subscription_model ; VAR_DECL 6 enum stasis_app_subscription_model subscription_model TYPE 7 enum stasis_app_subscription_model TYPE_NAME 8 enum stasis_app_subscription_model LEAF_NODE 9 enum LEAF_NODE 9 stasis_app_subscription_model NAME 7 subscription_model LEAF_NODE 8 subscription_model LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_allowed ; VAR_DECL 6 struct ast_json * events_allowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_allowed LEAF_NODE 8 events_allowed LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_disallowed ; VAR_DECL 6 struct ast_json * events_disallowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_disallowed LEAF_NODE 8 events_disallowed LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] name ; VAR_DECL 6 char [ ] name TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } ; CLASS_DEF 2 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } CLASS_DEF 3 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } LEAF_NODE 4 enum CLASS_NAME 4 forward_type LEAF_NODE 5 forward_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , LEAF_NODE 5 FORWARD_CHANNEL LEAF_NODE 5 , LEAF_NODE 5 FORWARD_BRIDGE LEAF_NODE 5 , LEAF_NODE 5 FORWARD_ENDPOINT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } ; CLASS_DEF 2 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } CLASS_DEF 3 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } LEAF_NODE 4 struct CLASS_NAME 4 app_forwards LEAF_NODE 5 app_forwards LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; SIMPLE_DECL 5 int interested ; VAR_DECL 6 int interested TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 interested LEAF_NODE 8 interested LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_forward ; VAR_DECL 6 struct stasis_forward * topic_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_forward LEAF_NODE 8 topic_forward LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_cached_forward ; VAR_DECL 6 struct stasis_forward * topic_cached_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_cached_forward LEAF_NODE 8 topic_cached_forward LEAF_NODE 6 ; SIMPLE_DECL 5 enum forward_type forward_type ; VAR_DECL 6 enum forward_type forward_type TYPE 7 enum forward_type TYPE_NAME 8 enum forward_type LEAF_NODE 9 enum LEAF_NODE 9 forward_type NAME 7 forward_type LEAF_NODE 8 forward_type LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] id ; VAR_DECL 6 char [ ] id TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } ; CLASS_DEF 2 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } CLASS_DEF 3 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_channel_snapshot LEAF_NODE 5 ast_channel_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 uniqueid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 linkedid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appl LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 accountcode LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 peeraccount LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 userfield LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 hangupsource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_dnid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_ani LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_rdnis LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dialed_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 language LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 bridgeid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 type LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_channel_snapshot_base * base ; VAR_DECL 6 struct ast_channel_snapshot_base * base TYPE 7 struct ast_channel_snapshot_base * TYPE_NAME 8 struct ast_channel_snapshot_base LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_base POINTER 8 * LEAF_NODE 9 * NAME 7 base LEAF_NODE 8 base LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_peer * peer ; VAR_DECL 6 struct ast_channel_snapshot_peer * peer TYPE 7 struct ast_channel_snapshot_peer * TYPE_NAME 8 struct ast_channel_snapshot_peer LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_peer POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_caller * caller ; VAR_DECL 6 struct ast_channel_snapshot_caller * caller TYPE 7 struct ast_channel_snapshot_caller * TYPE_NAME 8 struct ast_channel_snapshot_caller LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_caller POINTER 8 * LEAF_NODE 9 * NAME 7 caller LEAF_NODE 8 caller LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_connected * connected ; VAR_DECL 6 struct ast_channel_snapshot_connected * connected TYPE 7 struct ast_channel_snapshot_connected * TYPE_NAME 8 struct ast_channel_snapshot_connected LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_connected POINTER 8 * LEAF_NODE 9 * NAME 7 connected LEAF_NODE 8 connected LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_bridge * bridge ; VAR_DECL 6 struct ast_channel_snapshot_bridge * bridge TYPE 7 struct ast_channel_snapshot_bridge * TYPE_NAME 8 struct ast_channel_snapshot_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_dialplan * dialplan ; VAR_DECL 6 struct ast_channel_snapshot_dialplan * dialplan TYPE 7 struct ast_channel_snapshot_dialplan * TYPE_NAME 8 struct ast_channel_snapshot_dialplan LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_dialplan POINTER 8 * LEAF_NODE 9 * NAME 7 dialplan LEAF_NODE 8 dialplan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_hangup * hangup ; VAR_DECL 6 struct ast_channel_snapshot_hangup * hangup TYPE 7 struct ast_channel_snapshot_hangup * TYPE_NAME 8 struct ast_channel_snapshot_hangup LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_hangup POINTER 8 * LEAF_NODE 9 * NAME 7 hangup LEAF_NODE 8 hangup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_channel_state state ; VAR_DECL 6 enum ast_channel_state state TYPE 7 enum ast_channel_state TYPE_NAME 8 enum ast_channel_state LEAF_NODE 9 enum LEAF_NODE 9 ast_channel_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int amaflags ; VAR_DECL 6 int amaflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 amaflags LEAF_NODE 8 amaflags LEAF_NODE 6 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 int hangupcause ; VAR_DECL 6 int hangupcause TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hangupcause LEAF_NODE 8 hangupcause LEAF_NODE 6 ; SIMPLE_DECL 5 int caller_pres ; VAR_DECL 6 int caller_pres TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 caller_pres LEAF_NODE 8 caller_pres LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags softhangup_flags ; VAR_DECL 6 struct ast_flags softhangup_flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 softhangup_flags LEAF_NODE 8 softhangup_flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * manager_vars ; VAR_DECL 6 struct varshead * manager_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 manager_vars LEAF_NODE 8 manager_vars LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * ari_vars ; VAR_DECL 6 struct varshead * ari_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 ari_vars LEAF_NODE 8 ari_vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_debug ; VAR_DECL 2 int global_debug TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_debug LEAF_NODE 4 global_debug LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } ; CLASS_DEF 2 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } CLASS_DEF 3 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_display LEAF_NODE 5 adsi_display LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 70 ] data ; VAR_DECL 6 char [ 70 ] data TYPE 7 char [ 70 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 70 ] LEAF_NODE 9 [ FIELD 9 70 LEAF_NODE 10 70 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_state LEAF_NODE 5 adsi_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } ; CLASS_DEF 2 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } CLASS_DEF 3 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_soft_key LEAF_NODE 5 adsi_soft_key LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int retstrlen ; VAR_DECL 6 int retstrlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 retstrlen LEAF_NODE 8 retstrlen LEAF_NODE 6 ; SIMPLE_DECL 5 int initlen ; VAR_DECL 6 int initlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 initlen LEAF_NODE 8 initlen LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] retstr ; VAR_DECL 6 char [ 80 ] retstr TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 retstr LEAF_NODE 8 retstr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } ; CLASS_DEF 2 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } CLASS_DEF 3 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_subscript LEAF_NODE 5 adsi_subscript LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; SIMPLE_DECL 5 int inscount ; VAR_DECL 6 int inscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inscount LEAF_NODE 8 inscount LEAF_NODE 6 ; SIMPLE_DECL 5 int ifinscount ; VAR_DECL 6 int ifinscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ifinscount LEAF_NODE 8 ifinscount LEAF_NODE 6 ; SIMPLE_DECL 5 char * ifdata ; VAR_DECL 6 char * ifdata TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 ifdata LEAF_NODE 8 ifdata LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 2048 ] data ; VAR_DECL 6 char [ 2048 ] data TYPE 7 char [ 2048 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 2048 ] LEAF_NODE 9 [ FIELD 9 2048 LEAF_NODE 10 2048 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_flag LEAF_NODE 5 adsi_flag LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } ; CLASS_DEF 2 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } CLASS_DEF 3 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_script LEAF_NODE 5 adsi_script LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; SIMPLE_DECL 5 int state ; VAR_DECL 6 int state TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int numkeys ; VAR_DECL 6 int numkeys TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numkeys LEAF_NODE 8 numkeys LEAF_NODE 6 ; SIMPLE_DECL 5 int numsubs ; VAR_DECL 6 int numsubs TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numsubs LEAF_NODE 8 numsubs LEAF_NODE 6 ; SIMPLE_DECL 5 int numstates ; VAR_DECL 6 int numstates TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numstates LEAF_NODE 8 numstates LEAF_NODE 6 ; SIMPLE_DECL 5 int numdisplays ; VAR_DECL 6 int numdisplays TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numdisplays LEAF_NODE 8 numdisplays LEAF_NODE 6 ; SIMPLE_DECL 5 int numflags ; VAR_DECL 6 int numflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numflags LEAF_NODE 8 numflags LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key * key ; VAR_DECL 6 struct adsi_soft_key * key TYPE 7 struct adsi_soft_key * TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript * sub ; VAR_DECL 6 struct adsi_subscript * sub TYPE 7 struct adsi_subscript * TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript POINTER 8 * LEAF_NODE 9 * NAME 7 sub LEAF_NODE 8 sub LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_display [ 63 ] displays ; VAR_DECL 6 struct adsi_display [ 63 ] displays TYPE 7 struct adsi_display [ 63 ] TYPE_NAME 8 struct adsi_display LEAF_NODE 9 struct LEAF_NODE 9 adsi_display TYPE_SUFFIX 8 [ 63 ] LEAF_NODE 9 [ FIELD 9 63 LEAF_NODE 10 63 LEAF_NODE 9 ] NAME 7 displays LEAF_NODE 8 displays LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_state [ 256 ] states ; VAR_DECL 6 struct adsi_state [ 256 ] states TYPE 7 struct adsi_state [ 256 ] TYPE_NAME 8 struct adsi_state LEAF_NODE 9 struct LEAF_NODE 9 adsi_state TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 states LEAF_NODE 8 states LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key [ 62 ] keys ; VAR_DECL 6 struct adsi_soft_key [ 62 ] keys TYPE 7 struct adsi_soft_key [ 62 ] TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key TYPE_SUFFIX 8 [ 62 ] LEAF_NODE 9 [ FIELD 9 62 LEAF_NODE 10 62 LEAF_NODE 9 ] NAME 7 keys LEAF_NODE 8 keys LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript [ 128 ] subs ; VAR_DECL 6 struct adsi_subscript [ 128 ] subs TYPE 7 struct adsi_subscript [ 128 ] TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript TYPE_SUFFIX 8 [ 128 ] LEAF_NODE 9 [ FIELD 9 128 LEAF_NODE 10 128 LEAF_NODE 9 ] NAME 7 subs LEAF_NODE 8 subs LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_flag [ 7 ] flags ; VAR_DECL 6 struct adsi_flag [ 7 ] flags TYPE 7 struct adsi_flag [ 7 ] TYPE_NAME 8 struct adsi_flag LEAF_NODE 9 struct LEAF_NODE 9 adsi_flag TYPE_SUFFIX 8 [ 7 ] LEAF_NODE 9 [ FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 9 ] NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] sec ; VAR_DECL 6 unsigned char [ 5 ] sec TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 sec LEAF_NODE 8 sec LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 19 ] desc ; VAR_DECL 6 char [ 19 ] desc TYPE 7 char [ 19 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 19 ] LEAF_NODE 9 [ FIELD 9 19 LEAF_NODE 10 19 LEAF_NODE 9 ] NAME 7 desc LEAF_NODE 8 desc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] fdn ; VAR_DECL 6 unsigned char [ 5 ] fdn TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 fdn LEAF_NODE 8 fdn LEAF_NODE 6 ; SIMPLE_DECL 5 int ver ; VAR_DECL 6 int ver TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ver LEAF_NODE 8 ver LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ao2_container * agents ; VAR_DECL 2 struct ao2_container * agents TYPE 3 struct ao2_container * TYPE_NAME 4 struct ao2_container LEAF_NODE 5 struct LEAF_NODE 5 ao2_container POINTER 4 * LEAF_NODE 5 * NAME 3 agents LEAF_NODE 4 agents LEAF_NODE 2 ; SIMPLE_DECL 1 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } ; CLASS_DEF 2 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } CLASS_DEF 3 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } LEAF_NODE 4 enum CLASS_NAME 4 agent_state LEAF_NODE 5 agent_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , LEAF_NODE 5 AGENT_STATE_LOGGED_OUT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_PROBATION_WAIT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_READY_FOR_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_PRESENT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WAIT_ACK LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_ON_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WRAPUP LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_LOGGING_OUT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } ; CLASS_DEF 2 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } CLASS_DEF 3 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_cfg LEAF_NODE 5 agent_cfg LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 full_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 beep_sound LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 moh LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int auto_logoff ; VAR_DECL 6 unsigned int auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 auto_logoff LEAF_NODE 8 auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wrapup_time ; VAR_DECL 6 unsigned int wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wrapup_time LEAF_NODE 8 wrapup_time LEAF_NODE 6 ; SIMPLE_DECL 5 int ack_call ; VAR_DECL 6 int ack_call TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ack_call LEAF_NODE 8 ack_call LEAF_NODE 6 ; SIMPLE_DECL 5 int record_agent_calls ; VAR_DECL 6 int record_agent_calls TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 record_agent_calls LEAF_NODE 8 record_agent_calls LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } ; CLASS_DEF 2 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } CLASS_DEF 3 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_pvt LEAF_NODE 5 agent_pvt LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 override_dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_party_connected_line waiting_colp ; VAR_DECL 6 struct ast_party_connected_line waiting_colp TYPE 7 struct ast_party_connected_line TYPE_NAME 8 struct ast_party_connected_line LEAF_NODE 9 struct LEAF_NODE 9 ast_party_connected_line NAME 7 waiting_colp LEAF_NODE 8 waiting_colp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_auto_logoff ; VAR_DECL 6 unsigned int override_auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_auto_logoff LEAF_NODE 8 override_auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_wrapup_time ; VAR_DECL 6 unsigned int override_wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_wrapup_time LEAF_NODE 8 override_wrapup_time LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 override_ack_call : LEAF_NODE 6 override_ack_call LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 deferred_logoff : LEAF_NODE 6 deferred_logoff LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 the_mark : LEAF_NODE 6 the_mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 dead : LEAF_NODE 6 dead LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 enum agent_state state ; VAR_DECL 6 enum agent_state state TYPE 7 enum agent_state TYPE_NAME 8 enum agent_state LEAF_NODE 9 enum LEAF_NODE 9 agent_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_device_state devstate ; VAR_DECL 6 enum ast_device_state devstate TYPE 7 enum ast_device_state TYPE_NAME 8 enum ast_device_state LEAF_NODE 9 enum LEAF_NODE 9 ast_device_state NAME 7 devstate LEAF_NODE 8 devstate LEAF_NODE 6 ; SIMPLE_DECL 5 time_t login_start ; VAR_DECL 6 time_t login_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 login_start LEAF_NODE 8 login_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t probation_start ; VAR_DECL 6 time_t probation_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 probation_start LEAF_NODE 8 probation_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t call_start ; VAR_DECL 6 time_t call_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 call_start LEAF_NODE 8 call_start LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval ack_time ; VAR_DECL 6 struct timeval ack_time TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 ack_time LEAF_NODE 8 ack_time LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval last_disconnect ; VAR_DECL 6 struct timeval last_disconnect TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 last_disconnect LEAF_NODE 8 last_disconnect LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_bridge * caller_bridge ; VAR_DECL 6 struct ast_bridge * caller_bridge TYPE 7 struct ast_bridge * TYPE_NAME 8 struct ast_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 caller_bridge LEAF_NODE 8 caller_bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * logged ; VAR_DECL 6 struct ast_channel * logged TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 logged LEAF_NODE 8 logged LEAF_NODE 6 ; SIMPLE_DECL 5 struct agent_cfg * cfg ; VAR_DECL 6 struct agent_cfg * cfg TYPE 7 struct agent_cfg * TYPE_NAME 8 struct agent_cfg LEAF_NODE 9 struct LEAF_NODE 9 agent_cfg POINTER 8 * LEAF_NODE 9 * NAME 7 cfg LEAF_NODE 8 cfg LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_bridge_methods bridge_agent_hold_v_table ; VAR_DECL 2 struct ast_bridge_methods bridge_agent_hold_v_table TYPE 3 struct ast_bridge_methods TYPE_NAME 4 struct ast_bridge_methods LEAF_NODE 5 struct LEAF_NODE 5 ast_bridge_methods NAME 3 bridge_agent_hold_v_table LEAF_NODE 4 bridge_agent_hold_v_table LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static struct ast_bridge * LEAF_NODE 3 static TYPE_NAME 3 struct ast_bridge LEAF_NODE 4 struct LEAF_NODE 4 ast_bridge LEAF_NODE 3 * FUNCTION_NAME 2 bridge_agent_hold_new LEAF_NODE 3 bridge_agent_hold_new PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_bridge * bridge ; VAR_DECL 4 struct ast_bridge * bridge TYPE 5 struct ast_bridge * TYPE_NAME 6 struct ast_bridge LEAF_NODE 7 struct LEAF_NODE 7 ast_bridge POINTER 6 * LEAF_NODE 7 * NAME 5 bridge LEAF_NODE 6 bridge LEAF_NODE 4 ; LEAF_NODE 3 bridge LEAF_NODE 3 = LEAF_NODE 3 bridge_alloc LEAF_NODE 3 ( LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 struct LEAF_NODE 3 ast_bridge LEAF_NODE 3 ) LEAF_NODE 3 , LEAF_NODE 3 & LEAF_NODE 3 bridge_agent_hold_v_table LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 bridge = bridge_base_init ( bridge , AST_BRIDGE_CAPABILITY_HOLDING , AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED , \"AgentPool\" , NULL , NULL ) ; EXPR 4 bridge = bridge_base_init ( bridge , AST_BRIDGE_CAPABILITY_HOLDING , AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED , \"AgentPool\" , NULL , NULL ) ASSIGN 5 bridge = bridge_base_init ( bridge , AST_BRIDGE_CAPABILITY_HOLDING , AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED , \"AgentPool\" , NULL , NULL ) LVAL 6 bridge FIELD 7 bridge LEAF_NODE 8 bridge ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 bridge_base_init ( bridge , AST_BRIDGE_CAPABILITY_HOLDING , AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED , \"AgentPool\" , NULL , NULL ) FUNCTION_CALL 7 bridge_base_init ( bridge , AST_BRIDGE_CAPABILITY_HOLDING , AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED , \"AgentPool\" , NULL , NULL ) CALLEE 8 bridge_base_init LEAF_NODE 9 bridge_base_init LEAF_NODE 8 ( ARGUMENT 8 bridge FIELD 9 bridge LEAF_NODE 10 bridge LEAF_NODE 8 , ARGUMENT 8 AST_BRIDGE_CAPABILITY_HOLDING FIELD 9 AST_BRIDGE_CAPABILITY_HOLDING LEAF_NODE 10 AST_BRIDGE_CAPABILITY_HOLDING LEAF_NODE 8 , ARGUMENT 8 AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED BIT_OR 9 AST_BRIDGE_FLAG_MERGE_INHIBIT_TO | AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED BIT_OR_ELEM 10 AST_BRIDGE_FLAG_MERGE_INHIBIT_TO FIELD 11 AST_BRIDGE_FLAG_MERGE_INHIBIT_TO LEAF_NODE 12 AST_BRIDGE_FLAG_MERGE_INHIBIT_TO LEAF_NODE 10 | BIT_OR_ELEM 10 AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED BIT_OR 11 AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM | AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED BIT_OR_ELEM 12 AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM FIELD 13 AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM LEAF_NODE 14 AST_BRIDGE_FLAG_MERGE_INHIBIT_FROM LEAF_NODE 12 | BIT_OR_ELEM 12 AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED BIT_OR 13 AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM | AST_BRIDGE_FLAG_TRANSFER_PROHIBITED BIT_OR_ELEM 14 AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM FIELD 15 AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM LEAF_NODE 16 AST_BRIDGE_FLAG_SWAP_INHIBIT_FROM LEAF_NODE 14 | BIT_OR_ELEM 14 AST_BRIDGE_FLAG_TRANSFER_PROHIBITED FIELD 15 AST_BRIDGE_FLAG_TRANSFER_PROHIBITED LEAF_NODE 16 AST_BRIDGE_FLAG_TRANSFER_PROHIBITED LEAF_NODE 8 , ARGUMENT 8 \"AgentPool\" FIELD 9 \"AgentPool\" LEAF_NODE 10 \"AgentPool\" LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 bridge = bridge_register ( bridge ) ; EXPR 4 bridge = bridge_register ( bridge ) ASSIGN 5 bridge = bridge_register ( bridge ) LVAL 6 bridge FIELD 7 bridge LEAF_NODE 8 bridge ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 bridge_register ( bridge ) FUNCTION_CALL 7 bridge_register ( bridge ) CALLEE 8 bridge_register LEAF_NODE 9 bridge_register LEAF_NODE 8 ( ARGUMENT 8 bridge FIELD 9 bridge LEAF_NODE 10 bridge LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return bridge ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 bridge EXPR 5 bridge FIELD 6 bridge LEAF_NODE 7 bridge LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 11, "project": "openssl_ast_vul_function_test_adv_16", "target": 1}
{"func": "SIMPLE_DECL 1 enum ast_rtp_property BASE_CLASSES { AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , } ; CLASS_DEF 2 enum ast_rtp_property BASE_CLASSES { AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , } CLASS_DEF 3 enum ast_rtp_property BASE_CLASSES { AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , } LEAF_NODE 4 enum CLASS_NAME 4 ast_rtp_property LEAF_NODE 5 ast_rtp_property LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RTP_PROPERTY_NAT = 0 , AST_RTP_PROPERTY_DTMF , AST_RTP_PROPERTY_DTMF_COMPENSATE , AST_RTP_PROPERTY_STUN , AST_RTP_PROPERTY_RTCP , AST_RTP_PROPERTY_ASYMMETRIC_CODEC , AST_RTP_PROPERTY_RETRANS_RECV , AST_RTP_PROPERTY_RETRANS_SEND , AST_RTP_PROPERTY_REMB , AST_RTP_PROPERTY_MAX , LEAF_NODE 5 AST_RTP_PROPERTY_NAT LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_DTMF LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_DTMF_COMPENSATE LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_STUN LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_RTCP LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_ASYMMETRIC_CODEC LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_RETRANS_RECV LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_RETRANS_SEND LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_REMB LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_PROPERTY_MAX LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } ; CLASS_DEF 2 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } CLASS_DEF 3 struct ast_rtp_codecs BASE_CLASSES { ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp_codecs LEAF_NODE 5 ast_rtp_codecs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_rwlock_t codecs_lock ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_rx ; AST_VECTOR ( , struct ast_rtp_payload_type * ) payload_mapping_tx ; unsigned int framing ; SIMPLE_DECL 5 ast_rwlock_t codecs_lock ; VAR_DECL 6 ast_rwlock_t codecs_lock TYPE 7 ast_rwlock_t TYPE_NAME 8 ast_rwlock_t LEAF_NODE 9 ast_rwlock_t NAME 7 codecs_lock LEAF_NODE 8 codecs_lock LEAF_NODE 6 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 payload_mapping_rx LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 ast_rtp_payload_type LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 payload_mapping_tx LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int framing ; VAR_DECL 6 unsigned int framing TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 framing LEAF_NODE 8 framing LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp_instance BASE_CLASSES { struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; } ; CLASS_DEF 2 struct ast_rtp_instance BASE_CLASSES { struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; } CLASS_DEF 3 struct ast_rtp_instance BASE_CLASSES { struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp_instance LEAF_NODE 5 ast_rtp_instance LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_rtp_engine * engine ; void * data ; int [ AST_RTP_PROPERTY_MAX ] properties ; struct ast_sockaddr local_address ; struct ast_sockaddr requested_target_address ; struct ast_sockaddr incoming_source_address ; struct ast_rtp_instance * bridged ; struct ast_rtp_codecs codecs ; int timeout ; int holdtimeout ; int keepalive ; struct ast_rtp_glue * glue ; struct ast_srtp * srtp ; struct ast_srtp * rtcp_srtp ; char [ AST_MAX_UNIQUEID ] channel_uniqueid ; time_t last_tx ; time_t last_rx ; AST_VECTOR ( , enum ast_rtp_extension_direction ) extmap_enabled ; AST_VECTOR ( , int ) extmap_negotiated ; AST_VECTOR ( , struct rtp_extmap ) extmap_unique_ids ; SIMPLE_DECL 5 struct ast_rtp_engine * engine ; VAR_DECL 6 struct ast_rtp_engine * engine TYPE 7 struct ast_rtp_engine * TYPE_NAME 8 struct ast_rtp_engine LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_engine POINTER 8 * LEAF_NODE 9 * NAME 7 engine LEAF_NODE 8 engine LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int [ AST_RTP_PROPERTY_MAX ] properties ; VAR_DECL 6 int [ AST_RTP_PROPERTY_MAX ] properties TYPE 7 int [ AST_RTP_PROPERTY_MAX ] TYPE_NAME 8 int LEAF_NODE 9 int TYPE_SUFFIX 8 [ AST_RTP_PROPERTY_MAX ] LEAF_NODE 9 [ FIELD 9 AST_RTP_PROPERTY_MAX LEAF_NODE 10 AST_RTP_PROPERTY_MAX LEAF_NODE 9 ] NAME 7 properties LEAF_NODE 8 properties LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr local_address ; VAR_DECL 6 struct ast_sockaddr local_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 local_address LEAF_NODE 8 local_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr requested_target_address ; VAR_DECL 6 struct ast_sockaddr requested_target_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 requested_target_address LEAF_NODE 8 requested_target_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr incoming_source_address ; VAR_DECL 6 struct ast_sockaddr incoming_source_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 incoming_source_address LEAF_NODE 8 incoming_source_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp_instance * bridged ; VAR_DECL 6 struct ast_rtp_instance * bridged TYPE 7 struct ast_rtp_instance * TYPE_NAME 8 struct ast_rtp_instance LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_instance POINTER 8 * LEAF_NODE 9 * NAME 7 bridged LEAF_NODE 8 bridged LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp_codecs codecs ; VAR_DECL 6 struct ast_rtp_codecs codecs TYPE 7 struct ast_rtp_codecs TYPE_NAME 8 struct ast_rtp_codecs LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_codecs NAME 7 codecs LEAF_NODE 8 codecs LEAF_NODE 6 ; SIMPLE_DECL 5 int timeout ; VAR_DECL 6 int timeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timeout LEAF_NODE 8 timeout LEAF_NODE 6 ; SIMPLE_DECL 5 int holdtimeout ; VAR_DECL 6 int holdtimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 holdtimeout LEAF_NODE 8 holdtimeout LEAF_NODE 6 ; SIMPLE_DECL 5 int keepalive ; VAR_DECL 6 int keepalive TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 keepalive LEAF_NODE 8 keepalive LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp_glue * glue ; VAR_DECL 6 struct ast_rtp_glue * glue TYPE 7 struct ast_rtp_glue * TYPE_NAME 8 struct ast_rtp_glue LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_glue POINTER 8 * LEAF_NODE 9 * NAME 7 glue LEAF_NODE 8 glue LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_srtp * srtp ; VAR_DECL 6 struct ast_srtp * srtp TYPE 7 struct ast_srtp * TYPE_NAME 8 struct ast_srtp LEAF_NODE 9 struct LEAF_NODE 9 ast_srtp POINTER 8 * LEAF_NODE 9 * NAME 7 srtp LEAF_NODE 8 srtp LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_srtp * rtcp_srtp ; VAR_DECL 6 struct ast_srtp * rtcp_srtp TYPE 7 struct ast_srtp * TYPE_NAME 8 struct ast_srtp LEAF_NODE 9 struct LEAF_NODE 9 ast_srtp POINTER 8 * LEAF_NODE 9 * NAME 7 rtcp_srtp LEAF_NODE 8 rtcp_srtp LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_UNIQUEID ] channel_uniqueid ; VAR_DECL 6 char [ AST_MAX_UNIQUEID ] channel_uniqueid TYPE 7 char [ AST_MAX_UNIQUEID ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_UNIQUEID ] LEAF_NODE 9 [ FIELD 9 AST_MAX_UNIQUEID LEAF_NODE 10 AST_MAX_UNIQUEID LEAF_NODE 9 ] NAME 7 channel_uniqueid LEAF_NODE 8 channel_uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 time_t last_tx ; VAR_DECL 6 time_t last_tx TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 last_tx LEAF_NODE 8 last_tx LEAF_NODE 6 ; SIMPLE_DECL 5 time_t last_rx ; VAR_DECL 6 time_t last_rx TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 last_rx LEAF_NODE 8 last_rx LEAF_NODE 6 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 enum LEAF_NODE 5 ast_rtp_extension_direction LEAF_NODE 5 ) LEAF_NODE 5 extmap_enabled LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ) LEAF_NODE 5 extmap_negotiated LEAF_NODE 5 ; LEAF_NODE 5 AST_VECTOR LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 struct LEAF_NODE 5 rtp_extmap LEAF_NODE 5 ) LEAF_NODE 5 extmap_unique_ids LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sched_thread BASE_CLASSES { pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; } ; CLASS_DEF 2 struct sched_thread BASE_CLASSES { pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; } CLASS_DEF 3 struct sched_thread BASE_CLASSES { pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sched_thread LEAF_NODE 5 sched_thread LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 pthread_t thread ; ast_cond_t cond ; unsigned int stop : 1 ; SIMPLE_DECL 5 pthread_t thread ; VAR_DECL 6 pthread_t thread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 thread LEAF_NODE 8 thread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_cond_t cond ; VAR_DECL 6 ast_cond_t cond TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 cond LEAF_NODE 8 cond LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_sched_context BASE_CLASSES { ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; } ; CLASS_DEF 2 struct ast_sched_context BASE_CLASSES { ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; } CLASS_DEF 3 struct ast_sched_context BASE_CLASSES { ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_sched_context LEAF_NODE 5 ast_sched_context LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t lock ; unsigned int eventcnt ; unsigned int highwater ; unsigned int tie_breaker ; struct ast_heap * sched_heap ; struct sched_thread * sched_thread ; struct sched * currently_executing ; pthread_t executing_thread_id ; AST_LIST_HEAD_NOLOCK ( , sched ) schedc ; unsigned int schedccnt ; AST_LIST_HEAD_NOLOCK ( , sched_id ) id_queue ; int id_queue_size ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int eventcnt ; VAR_DECL 6 unsigned int eventcnt TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 eventcnt LEAF_NODE 8 eventcnt LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int highwater ; VAR_DECL 6 unsigned int highwater TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 highwater LEAF_NODE 8 highwater LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int tie_breaker ; VAR_DECL 6 unsigned int tie_breaker TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 tie_breaker LEAF_NODE 8 tie_breaker LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_heap * sched_heap ; VAR_DECL 6 struct ast_heap * sched_heap TYPE 7 struct ast_heap * TYPE_NAME 8 struct ast_heap LEAF_NODE 9 struct LEAF_NODE 9 ast_heap POINTER 8 * LEAF_NODE 9 * NAME 7 sched_heap LEAF_NODE 8 sched_heap LEAF_NODE 6 ; SIMPLE_DECL 5 struct sched_thread * sched_thread ; VAR_DECL 6 struct sched_thread * sched_thread TYPE 7 struct sched_thread * TYPE_NAME 8 struct sched_thread LEAF_NODE 9 struct LEAF_NODE 9 sched_thread POINTER 8 * LEAF_NODE 9 * NAME 7 sched_thread LEAF_NODE 8 sched_thread LEAF_NODE 6 ; SIMPLE_DECL 5 struct sched * currently_executing ; VAR_DECL 6 struct sched * currently_executing TYPE 7 struct sched * TYPE_NAME 8 struct sched LEAF_NODE 9 struct LEAF_NODE 9 sched POINTER 8 * LEAF_NODE 9 * NAME 7 currently_executing LEAF_NODE 8 currently_executing LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_t executing_thread_id ; VAR_DECL 6 pthread_t executing_thread_id TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 executing_thread_id LEAF_NODE 8 executing_thread_id LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sched LEAF_NODE 5 ) LEAF_NODE 5 schedc LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int schedccnt ; VAR_DECL 6 unsigned int schedccnt TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 schedccnt LEAF_NODE 8 schedccnt LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sched_id LEAF_NODE 5 ) LEAF_NODE 5 id_queue LEAF_NODE 5 ; SIMPLE_DECL 5 int id_queue_size ; VAR_DECL 6 int id_queue_size TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id_queue_size LEAF_NODE 8 id_queue_size LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_format BASE_CLASSES { const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; } ; CLASS_DEF 2 struct ast_format BASE_CLASSES { const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; } CLASS_DEF 3 struct ast_format BASE_CLASSES { const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_format LEAF_NODE 5 ast_format LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const char * name ; struct ast_codec * codec ; void * attribute_data ; const struct ast_format_interface * interface ; unsigned int channel_count ; SIMPLE_DECL 5 const char * name ; VAR_DECL 6 const char * name TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_codec * codec ; VAR_DECL 6 struct ast_codec * codec TYPE 7 struct ast_codec * TYPE_NAME 8 struct ast_codec LEAF_NODE 9 struct LEAF_NODE 9 ast_codec POINTER 8 * LEAF_NODE 9 * NAME 7 codec LEAF_NODE 8 codec LEAF_NODE 6 ; SIMPLE_DECL 5 void * attribute_data ; VAR_DECL 6 void * attribute_data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 attribute_data LEAF_NODE 8 attribute_data LEAF_NODE 6 ; SIMPLE_DECL 5 const struct ast_format_interface * interface ; VAR_DECL 6 const struct ast_format_interface * interface TYPE 7 const struct ast_format_interface * TYPE_NAME 8 const struct ast_format_interface LEAF_NODE 9 const LEAF_NODE 9 struct LEAF_NODE 9 ast_format_interface POINTER 8 * LEAF_NODE 9 * NAME 7 interface LEAF_NODE 8 interface LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int channel_count ; VAR_DECL 6 unsigned int channel_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 channel_count LEAF_NODE 8 channel_count LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_rtp_dtmf_mode BASE_CLASSES { AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , } ; CLASS_DEF 2 enum ast_rtp_dtmf_mode BASE_CLASSES { AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , } CLASS_DEF 3 enum ast_rtp_dtmf_mode BASE_CLASSES { AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , } LEAF_NODE 4 enum CLASS_NAME 4 ast_rtp_dtmf_mode LEAF_NODE 5 ast_rtp_dtmf_mode LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RTP_DTMF_MODE_NONE = 0 , AST_RTP_DTMF_MODE_RFC2833 , AST_RTP_DTMF_MODE_INBAND , LEAF_NODE 5 AST_RTP_DTMF_MODE_NONE LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_DTMF_MODE_RFC2833 LEAF_NODE 5 , LEAF_NODE 5 AST_RTP_DTMF_MODE_INBAND LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum strict_rtp_state BASE_CLASSES { STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , } ; CLASS_DEF 2 enum strict_rtp_state BASE_CLASSES { STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , } CLASS_DEF 3 enum strict_rtp_state BASE_CLASSES { STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , } LEAF_NODE 4 enum CLASS_NAME 4 strict_rtp_state LEAF_NODE 5 strict_rtp_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STRICT_RTP_OPEN = 0 , STRICT_RTP_LEARN , STRICT_RTP_CLOSED , LEAF_NODE 5 STRICT_RTP_OPEN LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 STRICT_RTP_LEARN LEAF_NODE 5 , LEAF_NODE 5 STRICT_RTP_CLOSED LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct rtp_learning_info BASE_CLASSES { struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; } ; CLASS_DEF 2 struct rtp_learning_info BASE_CLASSES { struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; } CLASS_DEF 3 struct rtp_learning_info BASE_CLASSES { struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; } LEAF_NODE 4 struct CLASS_NAME 4 rtp_learning_info LEAF_NODE 5 rtp_learning_info LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_sockaddr proposed_address ; struct timeval start ; struct timeval received ; int max_seq ; int packets ; enum ast_media_type stream_type ; SIMPLE_DECL 5 struct ast_sockaddr proposed_address ; VAR_DECL 6 struct ast_sockaddr proposed_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 proposed_address LEAF_NODE 8 proposed_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval start ; VAR_DECL 6 struct timeval start TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval received ; VAR_DECL 6 struct timeval received TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 received LEAF_NODE 8 received LEAF_NODE 6 ; SIMPLE_DECL 5 int max_seq ; VAR_DECL 6 int max_seq TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 max_seq LEAF_NODE 8 max_seq LEAF_NODE 6 ; SIMPLE_DECL 5 int packets ; VAR_DECL 6 int packets TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 packets LEAF_NODE 8 packets LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_media_type stream_type ; VAR_DECL 6 enum ast_media_type stream_type TYPE 7 enum ast_media_type TYPE_NAME 8 enum ast_media_type LEAF_NODE 9 enum LEAF_NODE 9 ast_media_type NAME 7 stream_type LEAF_NODE 8 stream_type LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_rtp BASE_CLASSES { int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; } ; CLASS_DEF 2 struct ast_rtp BASE_CLASSES { int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; } CLASS_DEF 3 struct ast_rtp BASE_CLASSES { int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_rtp LEAF_NODE 5 ast_rtp LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int s ; struct ast_frame f ; unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; unsigned int ssrc ; unsigned int themssrc ; unsigned int rxssrc ; unsigned int lastts ; unsigned int lastrxts ; unsigned int lastividtimestamp ; unsigned int lastovidtimestamp ; unsigned int lastitexttimestamp ; unsigned int lastotexttimestamp ; unsigned int lasteventseqn ; int lastrxseqno ; unsigned short seedrxseqno ; unsigned int seedrxts ; unsigned int rxcount ; unsigned int rxoctetcount ; unsigned int txcount ; unsigned int txoctetcount ; unsigned int cycles ; double rxjitter ; double rxtransit ; struct ast_format lasttxformat ; struct ast_format lastrxformat ; int rtptimeout ; int rtpholdtimeout ; int rtpkeepalive ; char resp ; unsigned int last_seqno ; unsigned int last_end_timestamp ; unsigned int dtmf_duration ; unsigned int dtmf_timeout ; unsigned int dtmfsamples ; enum ast_rtp_dtmf_mode dtmfmode ; unsigned int lastdigitts ; char sending_digit ; char send_digit ; int send_payload ; int send_duration ; unsigned int flags ; struct timeval rxcore ; struct timeval txcore ; double drxcore ; struct timeval lastrx ; struct timeval dtmfmute ; struct ast_smoother * smoother ; int * ioid ; unsigned short seqno ; unsigned short rxseqno ; struct ast_sched_context * sched ; struct io_context * io ; void * data ; struct ast_rtcp * rtcp ; struct ast_rtp * bridged ; enum strict_rtp_state strict_rtp_state ; struct ast_sockaddr strict_rtp_address ; struct rtp_learning_info rtp_source_learn ; struct rtp_learning_info alt_source_learn ; struct rtp_red * red ; ast_mutex_t lock ; ast_cond_t cond ; pj_ice_sess * ice ; pj_turn_sock * turn_rtp ; pj_turn_sock * turn_rtcp ; pj_turn_state_t turn_state ; unsigned int passthrough : 1 ; unsigned int ice_started : 1 ; char [ 256 ] remote_ufrag ; char [ 256 ] remote_passwd ; char [ 256 ] local_ufrag ; char [ 256 ] local_passwd ; struct ao2_container * local_candidates ; struct ao2_container * remote_candidates ; SSL_CTX * ssl_ctx ; SSL * ssl ; BIO * read_bio ; BIO * write_bio ; enum ast_rtp_dtls_setup dtls_setup ; enum ast_srtp_suite suite ; char [ 160 ] local_fingerprint ; unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; enum ast_rtp_dtls_connection connection ; unsigned int dtls_failure : 1 ; unsigned int rekey ; int rekeyid ; SIMPLE_DECL 5 int s ; VAR_DECL 6 int s TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 s LEAF_NODE 8 s LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame f ; VAR_DECL 6 struct ast_frame f TYPE 7 struct ast_frame TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame NAME 7 f LEAF_NODE 8 f LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata ; VAR_DECL 6 unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] rawdata TYPE 7 unsigned char [ 8192 + AST_FRIENDLY_OFFSET ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 8192 + AST_FRIENDLY_OFFSET ] LEAF_NODE 9 [ FIELD 9 8192 LEAF_NODE 10 8192 LEAF_NODE 9 + FIELD 9 AST_FRIENDLY_OFFSET LEAF_NODE 10 AST_FRIENDLY_OFFSET LEAF_NODE 9 ] NAME 7 rawdata LEAF_NODE 8 rawdata LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ssrc ; VAR_DECL 6 unsigned int ssrc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ssrc LEAF_NODE 8 ssrc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int themssrc ; VAR_DECL 6 unsigned int themssrc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 themssrc LEAF_NODE 8 themssrc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxssrc ; VAR_DECL 6 unsigned int rxssrc TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxssrc LEAF_NODE 8 rxssrc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastts ; VAR_DECL 6 unsigned int lastts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastts LEAF_NODE 8 lastts LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastrxts ; VAR_DECL 6 unsigned int lastrxts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastrxts LEAF_NODE 8 lastrxts LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastividtimestamp ; VAR_DECL 6 unsigned int lastividtimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastividtimestamp LEAF_NODE 8 lastividtimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastovidtimestamp ; VAR_DECL 6 unsigned int lastovidtimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastovidtimestamp LEAF_NODE 8 lastovidtimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastitexttimestamp ; VAR_DECL 6 unsigned int lastitexttimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastitexttimestamp LEAF_NODE 8 lastitexttimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastotexttimestamp ; VAR_DECL 6 unsigned int lastotexttimestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastotexttimestamp LEAF_NODE 8 lastotexttimestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lasteventseqn ; VAR_DECL 6 unsigned int lasteventseqn TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lasteventseqn LEAF_NODE 8 lasteventseqn LEAF_NODE 6 ; SIMPLE_DECL 5 int lastrxseqno ; VAR_DECL 6 int lastrxseqno TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 lastrxseqno LEAF_NODE 8 lastrxseqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned short seedrxseqno ; VAR_DECL 6 unsigned short seedrxseqno TYPE 7 unsigned short TYPE_NAME 8 unsigned short LEAF_NODE 9 unsigned LEAF_NODE 9 short NAME 7 seedrxseqno LEAF_NODE 8 seedrxseqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int seedrxts ; VAR_DECL 6 unsigned int seedrxts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 seedrxts LEAF_NODE 8 seedrxts LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxcount ; VAR_DECL 6 unsigned int rxcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxcount LEAF_NODE 8 rxcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int rxoctetcount ; VAR_DECL 6 unsigned int rxoctetcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rxoctetcount LEAF_NODE 8 rxoctetcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int txcount ; VAR_DECL 6 unsigned int txcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 txcount LEAF_NODE 8 txcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int txoctetcount ; VAR_DECL 6 unsigned int txoctetcount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 txoctetcount LEAF_NODE 8 txoctetcount LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int cycles ; VAR_DECL 6 unsigned int cycles TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 cycles LEAF_NODE 8 cycles LEAF_NODE 6 ; SIMPLE_DECL 5 double rxjitter ; VAR_DECL 6 double rxjitter TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 rxjitter LEAF_NODE 8 rxjitter LEAF_NODE 6 ; SIMPLE_DECL 5 double rxtransit ; VAR_DECL 6 double rxtransit TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 rxtransit LEAF_NODE 8 rxtransit LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format lasttxformat ; VAR_DECL 6 struct ast_format lasttxformat TYPE 7 struct ast_format TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format NAME 7 lasttxformat LEAF_NODE 8 lasttxformat LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format lastrxformat ; VAR_DECL 6 struct ast_format lastrxformat TYPE 7 struct ast_format TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format NAME 7 lastrxformat LEAF_NODE 8 lastrxformat LEAF_NODE 6 ; SIMPLE_DECL 5 int rtptimeout ; VAR_DECL 6 int rtptimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtptimeout LEAF_NODE 8 rtptimeout LEAF_NODE 6 ; SIMPLE_DECL 5 int rtpholdtimeout ; VAR_DECL 6 int rtpholdtimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtpholdtimeout LEAF_NODE 8 rtpholdtimeout LEAF_NODE 6 ; SIMPLE_DECL 5 int rtpkeepalive ; VAR_DECL 6 int rtpkeepalive TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rtpkeepalive LEAF_NODE 8 rtpkeepalive LEAF_NODE 6 ; SIMPLE_DECL 5 char resp ; VAR_DECL 6 char resp TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 resp LEAF_NODE 8 resp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int last_seqno ; VAR_DECL 6 unsigned int last_seqno TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 last_seqno LEAF_NODE 8 last_seqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int last_end_timestamp ; VAR_DECL 6 unsigned int last_end_timestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 last_end_timestamp LEAF_NODE 8 last_end_timestamp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int dtmf_duration ; VAR_DECL 6 unsigned int dtmf_duration TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 dtmf_duration LEAF_NODE 8 dtmf_duration LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int dtmf_timeout ; VAR_DECL 6 unsigned int dtmf_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 dtmf_timeout LEAF_NODE 8 dtmf_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int dtmfsamples ; VAR_DECL 6 unsigned int dtmfsamples TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 dtmfsamples LEAF_NODE 8 dtmfsamples LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_dtmf_mode dtmfmode ; VAR_DECL 6 enum ast_rtp_dtmf_mode dtmfmode TYPE 7 enum ast_rtp_dtmf_mode TYPE_NAME 8 enum ast_rtp_dtmf_mode LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_dtmf_mode NAME 7 dtmfmode LEAF_NODE 8 dtmfmode LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int lastdigitts ; VAR_DECL 6 unsigned int lastdigitts TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 lastdigitts LEAF_NODE 8 lastdigitts LEAF_NODE 6 ; SIMPLE_DECL 5 char sending_digit ; VAR_DECL 6 char sending_digit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 sending_digit LEAF_NODE 8 sending_digit LEAF_NODE 6 ; SIMPLE_DECL 5 char send_digit ; VAR_DECL 6 char send_digit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 send_digit LEAF_NODE 8 send_digit LEAF_NODE 6 ; SIMPLE_DECL 5 int send_payload ; VAR_DECL 6 int send_payload TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 send_payload LEAF_NODE 8 send_payload LEAF_NODE 6 ; SIMPLE_DECL 5 int send_duration ; VAR_DECL 6 int send_duration TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 send_duration LEAF_NODE 8 send_duration LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval rxcore ; VAR_DECL 6 struct timeval rxcore TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 rxcore LEAF_NODE 8 rxcore LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval txcore ; VAR_DECL 6 struct timeval txcore TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 txcore LEAF_NODE 8 txcore LEAF_NODE 6 ; SIMPLE_DECL 5 double drxcore ; VAR_DECL 6 double drxcore TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 drxcore LEAF_NODE 8 drxcore LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval lastrx ; VAR_DECL 6 struct timeval lastrx TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 lastrx LEAF_NODE 8 lastrx LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval dtmfmute ; VAR_DECL 6 struct timeval dtmfmute TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 dtmfmute LEAF_NODE 8 dtmfmute LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_smoother * smoother ; VAR_DECL 6 struct ast_smoother * smoother TYPE 7 struct ast_smoother * TYPE_NAME 8 struct ast_smoother LEAF_NODE 9 struct LEAF_NODE 9 ast_smoother POINTER 8 * LEAF_NODE 9 * NAME 7 smoother LEAF_NODE 8 smoother LEAF_NODE 6 ; SIMPLE_DECL 5 int * ioid ; VAR_DECL 6 int * ioid TYPE 7 int * TYPE_NAME 8 int LEAF_NODE 9 int POINTER 8 * LEAF_NODE 9 * NAME 7 ioid LEAF_NODE 8 ioid LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned short seqno ; VAR_DECL 6 unsigned short seqno TYPE 7 unsigned short TYPE_NAME 8 unsigned short LEAF_NODE 9 unsigned LEAF_NODE 9 short NAME 7 seqno LEAF_NODE 8 seqno LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned short rxseqno ; VAR_DECL 6 unsigned short rxseqno TYPE 7 unsigned short TYPE_NAME 8 unsigned short LEAF_NODE 9 unsigned LEAF_NODE 9 short NAME 7 rxseqno LEAF_NODE 8 rxseqno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sched_context * sched ; VAR_DECL 6 struct ast_sched_context * sched TYPE 7 struct ast_sched_context * TYPE_NAME 8 struct ast_sched_context LEAF_NODE 9 struct LEAF_NODE 9 ast_sched_context POINTER 8 * LEAF_NODE 9 * NAME 7 sched LEAF_NODE 8 sched LEAF_NODE 6 ; SIMPLE_DECL 5 struct io_context * io ; VAR_DECL 6 struct io_context * io TYPE 7 struct io_context * TYPE_NAME 8 struct io_context LEAF_NODE 9 struct LEAF_NODE 9 io_context POINTER 8 * LEAF_NODE 9 * NAME 7 io LEAF_NODE 8 io LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtcp * rtcp ; VAR_DECL 6 struct ast_rtcp * rtcp TYPE 7 struct ast_rtcp * TYPE_NAME 8 struct ast_rtcp LEAF_NODE 9 struct LEAF_NODE 9 ast_rtcp POINTER 8 * LEAF_NODE 9 * NAME 7 rtcp LEAF_NODE 8 rtcp LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_rtp * bridged ; VAR_DECL 6 struct ast_rtp * bridged TYPE 7 struct ast_rtp * TYPE_NAME 8 struct ast_rtp LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp POINTER 8 * LEAF_NODE 9 * NAME 7 bridged LEAF_NODE 8 bridged LEAF_NODE 6 ; SIMPLE_DECL 5 enum strict_rtp_state strict_rtp_state ; VAR_DECL 6 enum strict_rtp_state strict_rtp_state TYPE 7 enum strict_rtp_state TYPE_NAME 8 enum strict_rtp_state LEAF_NODE 9 enum LEAF_NODE 9 strict_rtp_state NAME 7 strict_rtp_state LEAF_NODE 8 strict_rtp_state LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr strict_rtp_address ; VAR_DECL 6 struct ast_sockaddr strict_rtp_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 strict_rtp_address LEAF_NODE 8 strict_rtp_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct rtp_learning_info rtp_source_learn ; VAR_DECL 6 struct rtp_learning_info rtp_source_learn TYPE 7 struct rtp_learning_info TYPE_NAME 8 struct rtp_learning_info LEAF_NODE 9 struct LEAF_NODE 9 rtp_learning_info NAME 7 rtp_source_learn LEAF_NODE 8 rtp_source_learn LEAF_NODE 6 ; SIMPLE_DECL 5 struct rtp_learning_info alt_source_learn ; VAR_DECL 6 struct rtp_learning_info alt_source_learn TYPE 7 struct rtp_learning_info TYPE_NAME 8 struct rtp_learning_info LEAF_NODE 9 struct LEAF_NODE 9 rtp_learning_info NAME 7 alt_source_learn LEAF_NODE 8 alt_source_learn LEAF_NODE 6 ; SIMPLE_DECL 5 struct rtp_red * red ; VAR_DECL 6 struct rtp_red * red TYPE 7 struct rtp_red * TYPE_NAME 8 struct rtp_red LEAF_NODE 9 struct LEAF_NODE 9 rtp_red POINTER 8 * LEAF_NODE 9 * NAME 7 red LEAF_NODE 8 red LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_cond_t cond ; VAR_DECL 6 ast_cond_t cond TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 cond LEAF_NODE 8 cond LEAF_NODE 6 ; SIMPLE_DECL 5 pj_ice_sess * ice ; VAR_DECL 6 pj_ice_sess * ice TYPE 7 pj_ice_sess * TYPE_NAME 8 pj_ice_sess LEAF_NODE 9 pj_ice_sess POINTER 8 * LEAF_NODE 9 * NAME 7 ice LEAF_NODE 8 ice LEAF_NODE 6 ; SIMPLE_DECL 5 pj_turn_sock * turn_rtp ; VAR_DECL 6 pj_turn_sock * turn_rtp TYPE 7 pj_turn_sock * TYPE_NAME 8 pj_turn_sock LEAF_NODE 9 pj_turn_sock POINTER 8 * LEAF_NODE 9 * NAME 7 turn_rtp LEAF_NODE 8 turn_rtp LEAF_NODE 6 ; SIMPLE_DECL 5 pj_turn_sock * turn_rtcp ; VAR_DECL 6 pj_turn_sock * turn_rtcp TYPE 7 pj_turn_sock * TYPE_NAME 8 pj_turn_sock LEAF_NODE 9 pj_turn_sock POINTER 8 * LEAF_NODE 9 * NAME 7 turn_rtcp LEAF_NODE 8 turn_rtcp LEAF_NODE 6 ; SIMPLE_DECL 5 pj_turn_state_t turn_state ; VAR_DECL 6 pj_turn_state_t turn_state TYPE 7 pj_turn_state_t TYPE_NAME 8 pj_turn_state_t LEAF_NODE 9 pj_turn_state_t NAME 7 turn_state LEAF_NODE 8 turn_state LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 passthrough : LEAF_NODE 6 passthrough LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 ice_started : LEAF_NODE 6 ice_started LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 256 ] remote_ufrag ; VAR_DECL 6 char [ 256 ] remote_ufrag TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 remote_ufrag LEAF_NODE 8 remote_ufrag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] remote_passwd ; VAR_DECL 6 char [ 256 ] remote_passwd TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 remote_passwd LEAF_NODE 8 remote_passwd LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] local_ufrag ; VAR_DECL 6 char [ 256 ] local_ufrag TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 local_ufrag LEAF_NODE 8 local_ufrag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] local_passwd ; VAR_DECL 6 char [ 256 ] local_passwd TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 local_passwd LEAF_NODE 8 local_passwd LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * local_candidates ; VAR_DECL 6 struct ao2_container * local_candidates TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 local_candidates LEAF_NODE 8 local_candidates LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * remote_candidates ; VAR_DECL 6 struct ao2_container * remote_candidates TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 remote_candidates LEAF_NODE 8 remote_candidates LEAF_NODE 6 ; SIMPLE_DECL 5 SSL_CTX * ssl_ctx ; VAR_DECL 6 SSL_CTX * ssl_ctx TYPE 7 SSL_CTX * TYPE_NAME 8 SSL_CTX LEAF_NODE 9 SSL_CTX POINTER 8 * LEAF_NODE 9 * NAME 7 ssl_ctx LEAF_NODE 8 ssl_ctx LEAF_NODE 6 ; SIMPLE_DECL 5 SSL * ssl ; VAR_DECL 6 SSL * ssl TYPE 7 SSL * TYPE_NAME 8 SSL LEAF_NODE 9 SSL POINTER 8 * LEAF_NODE 9 * NAME 7 ssl LEAF_NODE 8 ssl LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * read_bio ; VAR_DECL 6 BIO * read_bio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 read_bio LEAF_NODE 8 read_bio LEAF_NODE 6 ; SIMPLE_DECL 5 BIO * write_bio ; VAR_DECL 6 BIO * write_bio TYPE 7 BIO * TYPE_NAME 8 BIO LEAF_NODE 9 BIO POINTER 8 * LEAF_NODE 9 * NAME 7 write_bio LEAF_NODE 8 write_bio LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_dtls_setup dtls_setup ; VAR_DECL 6 enum ast_rtp_dtls_setup dtls_setup TYPE 7 enum ast_rtp_dtls_setup TYPE_NAME 8 enum ast_rtp_dtls_setup LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_dtls_setup NAME 7 dtls_setup LEAF_NODE 8 dtls_setup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_srtp_suite suite ; VAR_DECL 6 enum ast_srtp_suite suite TYPE 7 enum ast_srtp_suite TYPE_NAME 8 enum ast_srtp_suite LEAF_NODE 9 enum LEAF_NODE 9 ast_srtp_suite NAME 7 suite LEAF_NODE 8 suite LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 160 ] local_fingerprint ; VAR_DECL 6 char [ 160 ] local_fingerprint TYPE 7 char [ 160 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 160 ] LEAF_NODE 9 [ FIELD 9 160 LEAF_NODE 10 160 LEAF_NODE 9 ] NAME 7 local_fingerprint LEAF_NODE 8 local_fingerprint LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint ; VAR_DECL 6 unsigned char [ EVP_MAX_MD_SIZE ] remote_fingerprint TYPE 7 unsigned char [ EVP_MAX_MD_SIZE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ EVP_MAX_MD_SIZE ] LEAF_NODE 9 [ FIELD 9 EVP_MAX_MD_SIZE LEAF_NODE 10 EVP_MAX_MD_SIZE LEAF_NODE 9 ] NAME 7 remote_fingerprint LEAF_NODE 8 remote_fingerprint LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_rtp_dtls_connection connection ; VAR_DECL 6 enum ast_rtp_dtls_connection connection TYPE 7 enum ast_rtp_dtls_connection TYPE_NAME 8 enum ast_rtp_dtls_connection LEAF_NODE 9 enum LEAF_NODE 9 ast_rtp_dtls_connection NAME 7 connection LEAF_NODE 8 connection LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 dtls_failure : LEAF_NODE 6 dtls_failure LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int rekey ; VAR_DECL 6 unsigned int rekey TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 rekey LEAF_NODE 8 rekey LEAF_NODE 6 ; SIMPLE_DECL 5 int rekeyid ; VAR_DECL 6 int rekeyid TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 rekeyid LEAF_NODE 8 rekeyid LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int strictrtp ; strictrtp = DEFAULT_STRICT_RTP ; VAR_DECL 2 int strictrtp ; strictrtp = DEFAULT_STRICT_RTP TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 strictrtp LEAF_NODE 4 strictrtp LEAF_NODE 3 ; INIT 3 strictrtp = DEFAULT_STRICT_RTP ASSIGN 4 strictrtp = DEFAULT_STRICT_RTP LVAL 5 strictrtp NAME 6 strictrtp LEAF_NODE 7 strictrtp ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 DEFAULT_STRICT_RTP FIELD 6 DEFAULT_STRICT_RTP LEAF_NODE 7 DEFAULT_STRICT_RTP LEAF_NODE 2 ; SIMPLE_DECL 1 int rtpstart ; rtpstart = DEFAULT_RTP_START ; VAR_DECL 2 int rtpstart ; rtpstart = DEFAULT_RTP_START TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 rtpstart LEAF_NODE 4 rtpstart LEAF_NODE 3 ; INIT 3 rtpstart = DEFAULT_RTP_START ASSIGN 4 rtpstart = DEFAULT_RTP_START LVAL 5 rtpstart NAME 6 rtpstart LEAF_NODE 7 rtpstart ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 DEFAULT_RTP_START FIELD 6 DEFAULT_RTP_START LEAF_NODE 7 DEFAULT_RTP_START LEAF_NODE 2 ; SIMPLE_DECL 1 int rtpend ; rtpend = DEFAULT_RTP_END ; VAR_DECL 2 int rtpend ; rtpend = DEFAULT_RTP_END TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 rtpend LEAF_NODE 4 rtpend LEAF_NODE 3 ; INIT 3 rtpend = DEFAULT_RTP_END ASSIGN 4 rtpend = DEFAULT_RTP_END LVAL 5 rtpend NAME 6 rtpend LEAF_NODE 7 rtpend ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 DEFAULT_RTP_END FIELD 6 DEFAULT_RTP_END LEAF_NODE 7 DEFAULT_RTP_END LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_format * ast_format_none ; VAR_DECL 2 struct ast_format * ast_format_none TYPE 3 struct ast_format * TYPE_NAME 4 struct ast_format LEAF_NODE 5 struct LEAF_NODE 5 ast_format POINTER 4 * LEAF_NODE 5 * NAME 3 ast_format_none LEAF_NODE 4 ast_format_none LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ast_rtp_new LEAF_NODE 3 ast_rtp_new PARAMETER_LIST 2 ( struct ast_rtp_instance * instance , struct ast_sched_context * sched , struct ast_sockaddr * addr , void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_rtp_instance * instance TYPE 4 struct ast_rtp_instance * TYPE_NAME 5 struct ast_rtp_instance LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_instance POINTER 5 * LEAF_NODE 6 * NAME 4 instance LEAF_NODE 5 instance LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_sched_context * sched TYPE 4 struct ast_sched_context * TYPE_NAME 5 struct ast_sched_context LEAF_NODE 6 struct LEAF_NODE 6 ast_sched_context POINTER 5 * LEAF_NODE 6 * NAME 4 sched LEAF_NODE 5 sched LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_sockaddr * addr TYPE 4 struct ast_sockaddr * TYPE_NAME 5 struct ast_sockaddr LEAF_NODE 6 struct LEAF_NODE 6 ast_sockaddr POINTER 5 * LEAF_NODE 6 * NAME 4 addr LEAF_NODE 5 addr LEAF_NODE 3 , PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_rtp * rtp ; rtp = NULL ; VAR_DECL 4 struct ast_rtp * rtp ; rtp = NULL TYPE 5 struct ast_rtp * TYPE_NAME 6 struct ast_rtp LEAF_NODE 7 struct LEAF_NODE 7 ast_rtp POINTER 6 * LEAF_NODE 7 * NAME 5 rtp LEAF_NODE 6 rtp LEAF_NODE 5 ; INIT 5 rtp = NULL ASSIGN 6 rtp = NULL LVAL 7 rtp NAME 8 rtp LEAF_NODE 9 rtp ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int x , int startplace ; INIT_DECL_LIST 4 int x , int startplace VAR_DECL 5 int x TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 x LEAF_NODE 7 x LEAF_NODE 5 , VAR_DECL 5 int startplace TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 startplace LEAF_NODE 7 startplace LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ( rtp = ast_calloc ( 1 , sizeof ( * rtp ) ) ) EXPR 5 ! ( rtp = ast_calloc ( 1 , sizeof ( * rtp ) ) ) UNARY_EXPR 6 ! ( rtp = ast_calloc ( 1 , sizeof ( * rtp ) ) ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! LEAF_NODE 7 ( ASSIGN 7 rtp = ast_calloc ( 1 , sizeof ( * rtp ) ) LVAL 8 rtp FIELD 9 rtp LEAF_NODE 10 rtp ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 ast_calloc ( 1 , sizeof ( * rtp ) ) FUNCTION_CALL 9 ast_calloc ( 1 , sizeof ( * rtp ) ) CALLEE 10 ast_calloc LEAF_NODE 11 ast_calloc LEAF_NODE 10 ( ARGUMENT 10 1 FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 10 , ARGUMENT 10 sizeof ( * rtp ) FUNCTION_CALL 11 sizeof ( * rtp ) CALLEE 12 sizeof LEAF_NODE 13 sizeof LEAF_NODE 12 ( ARGUMENT 12 * rtp UNARY_EXPR 13 * rtp UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 rtp LEAF_NODE 15 rtp LEAF_NODE 12 ) LEAF_NODE 10 ) LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_mutex_init ( & rtp -> lock ) ; EXPR 4 ast_mutex_init ( & rtp -> lock ) FUNCTION_CALL 5 ast_mutex_init ( & rtp -> lock ) CALLEE 6 ast_mutex_init LEAF_NODE 7 ast_mutex_init LEAF_NODE 6 ( ARGUMENT 6 & rtp -> lock UNARY_EXPR 7 & rtp -> lock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 rtp -> lock LEAF_NODE 9 rtp LEAF_NODE 9 -> LEAF_NODE 9 lock LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_cond_init ( & rtp -> cond , NULL ) ; EXPR 4 ast_cond_init ( & rtp -> cond , NULL ) FUNCTION_CALL 5 ast_cond_init ( & rtp -> cond , NULL ) CALLEE 6 ast_cond_init LEAF_NODE 7 ast_cond_init LEAF_NODE 6 ( ARGUMENT 6 & rtp -> cond UNARY_EXPR 7 & rtp -> cond UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 rtp -> cond LEAF_NODE 9 rtp LEAF_NODE 9 -> LEAF_NODE 9 cond LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rtp -> ssrc = ast_random ( ) ; EXPR 4 rtp -> ssrc = ast_random ( ) ASSIGN 5 rtp -> ssrc = ast_random ( ) LVAL 6 rtp -> ssrc FIELD 7 rtp -> ssrc LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 ssrc ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_random ( ) FUNCTION_CALL 7 ast_random ( ) CALLEE 8 ast_random LEAF_NODE 9 ast_random LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 rtp -> seqno = ast_random ( ) & 0xffff ; EXPR 4 rtp -> seqno = ast_random ( ) & 0xffff ASSIGN 5 rtp -> seqno = ast_random ( ) & 0xffff LVAL 6 rtp -> seqno FIELD 7 rtp -> seqno LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 seqno ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_random ( ) & 0xffff FUNCTION_CALL 7 ast_random ( ) CALLEE 8 ast_random LEAF_NODE 9 ast_random LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 7 & FIELD 7 0xffff LEAF_NODE 8 0xffff LEAF_NODE 4 ; EXPR_STATEMENT 3 rtp -> strict_rtp_state = ( strictrtp ? STRICT_RTP_LEARN : STRICT_RTP_OPEN ) ; EXPR 4 rtp -> strict_rtp_state = ( strictrtp ? STRICT_RTP_LEARN : STRICT_RTP_OPEN ) ASSIGN 5 rtp -> strict_rtp_state = ( strictrtp ? STRICT_RTP_LEARN : STRICT_RTP_OPEN ) LVAL 6 rtp -> strict_rtp_state FIELD 7 rtp -> strict_rtp_state LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 strict_rtp_state ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( strictrtp ? STRICT_RTP_LEARN : STRICT_RTP_OPEN ) LEAF_NODE 7 ( COND_EXPR 7 strictrtp ? STRICT_RTP_LEARN : STRICT_RTP_OPEN CONDITION 8 strictrtp FIELD 9 strictrtp LEAF_NODE 10 strictrtp LEAF_NODE 8 ? EXPR 8 STRICT_RTP_LEARN FIELD 9 STRICT_RTP_LEARN LEAF_NODE 10 STRICT_RTP_LEARN LEAF_NODE 8 : FIELD 8 STRICT_RTP_OPEN LEAF_NODE 9 STRICT_RTP_OPEN LEAF_NODE 7 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strictrtp EXPR 5 strictrtp FIELD 6 strictrtp LEAF_NODE 7 strictrtp LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rtp_learning_seq_init ( & rtp -> rtp_source_learn , ( uint16_t ) rtp -> seqno ) ; EXPR 7 rtp_learning_seq_init ( & rtp -> rtp_source_learn , ( uint16_t ) rtp -> seqno ) FUNCTION_CALL 8 rtp_learning_seq_init ( & rtp -> rtp_source_learn , ( uint16_t ) rtp -> seqno ) CALLEE 9 rtp_learning_seq_init LEAF_NODE 10 rtp_learning_seq_init LEAF_NODE 9 ( ARGUMENT 9 & rtp -> rtp_source_learn UNARY_EXPR 10 & rtp -> rtp_source_learn UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 rtp -> rtp_source_learn LEAF_NODE 12 rtp LEAF_NODE 12 -> LEAF_NODE 12 rtp_source_learn LEAF_NODE 9 , ARGUMENT 9 ( uint16_t ) rtp -> seqno LEAF_NODE 10 ( TYPE_NAME 10 uint16_t LEAF_NODE 11 uint16_t LEAF_NODE 10 ) FIELD 10 rtp -> seqno LEAF_NODE 11 rtp LEAF_NODE 11 -> LEAF_NODE 11 seqno LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rtp_learning_seq_init ( & rtp -> alt_source_learn , ( uint16_t ) rtp -> seqno ) ; EXPR 7 rtp_learning_seq_init ( & rtp -> alt_source_learn , ( uint16_t ) rtp -> seqno ) FUNCTION_CALL 8 rtp_learning_seq_init ( & rtp -> alt_source_learn , ( uint16_t ) rtp -> seqno ) CALLEE 9 rtp_learning_seq_init LEAF_NODE 10 rtp_learning_seq_init LEAF_NODE 9 ( ARGUMENT 9 & rtp -> alt_source_learn UNARY_EXPR 10 & rtp -> alt_source_learn UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 rtp -> alt_source_learn LEAF_NODE 12 rtp LEAF_NODE 12 -> LEAF_NODE 12 alt_source_learn LEAF_NODE 9 , ARGUMENT 9 ( uint16_t ) rtp -> seqno LEAF_NODE 10 ( TYPE_NAME 10 uint16_t LEAF_NODE 11 uint16_t LEAF_NODE 10 ) FIELD 10 rtp -> seqno LEAF_NODE 11 rtp LEAF_NODE 11 -> LEAF_NODE 11 seqno LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( rtp -> s = create_new_socket ( \"RTP\" , ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 ) ) < 0 EXPR 5 ( rtp -> s = create_new_socket ( \"RTP\" , ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 ) ) < 0 LEAF_NODE 6 ( ASSIGN 6 rtp -> s = create_new_socket ( \"RTP\" , ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 ) LVAL 7 rtp -> s FIELD 8 rtp -> s LEAF_NODE 9 rtp LEAF_NODE 9 -> LEAF_NODE 9 s ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 create_new_socket ( \"RTP\" , ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 ) FUNCTION_CALL 8 create_new_socket ( \"RTP\" , ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 ) CALLEE 9 create_new_socket LEAF_NODE 10 create_new_socket LEAF_NODE 9 ( ARGUMENT 9 \"RTP\" FIELD 10 \"RTP\" LEAF_NODE 11 \"RTP\" LEAF_NODE 9 , ARGUMENT 9 ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 COND_EXPR 10 ast_sockaddr_is_ipv4 ( addr ) ? AF_INET : ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 CONDITION 11 ast_sockaddr_is_ipv4 ( addr ) FUNCTION_CALL 12 ast_sockaddr_is_ipv4 ( addr ) CALLEE 13 ast_sockaddr_is_ipv4 LEAF_NODE 14 ast_sockaddr_is_ipv4 LEAF_NODE 13 ( ARGUMENT 13 addr FIELD 14 addr LEAF_NODE 15 addr LEAF_NODE 13 ) LEAF_NODE 11 ? EXPR 11 AF_INET FIELD 12 AF_INET LEAF_NODE 13 AF_INET LEAF_NODE 11 : COND_EXPR 11 ast_sockaddr_is_ipv6 ( addr ) ? AF_INET6 : - 1 CONDITION 12 ast_sockaddr_is_ipv6 ( addr ) FUNCTION_CALL 13 ast_sockaddr_is_ipv6 ( addr ) CALLEE 14 ast_sockaddr_is_ipv6 LEAF_NODE 15 ast_sockaddr_is_ipv6 LEAF_NODE 14 ( ARGUMENT 14 addr FIELD 15 addr LEAF_NODE 16 addr LEAF_NODE 14 ) LEAF_NODE 12 ? EXPR 12 AF_INET6 FIELD 13 AF_INET6 LEAF_NODE 14 AF_INET6 LEAF_NODE 12 : UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 9 ) LEAF_NODE 6 ) REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_debug ( 1 , \"Failed to create a new socket for RTP instance '%p'\\n\" , instance ) ; EXPR 7 ast_debug ( 1 , \"Failed to create a new socket for RTP instance '%p'\\n\" , instance ) FUNCTION_CALL 8 ast_debug ( 1 , \"Failed to create a new socket for RTP instance '%p'\\n\" , instance ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"Failed to create a new socket for RTP instance '%p'\\n\" FIELD 10 \"Failed to create a new socket for RTP instance '%p'\\n\" LEAF_NODE 11 \"Failed to create a new socket for RTP instance '%p'\\n\" LEAF_NODE 9 , ARGUMENT 9 instance FIELD 10 instance LEAF_NODE 11 instance LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_free ( rtp ) ; EXPR 7 ast_free ( rtp ) FUNCTION_CALL 8 ast_free ( rtp ) CALLEE 9 ast_free LEAF_NODE 10 ast_free LEAF_NODE 9 ( ARGUMENT 9 rtp FIELD 10 rtp LEAF_NODE 11 rtp LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 x = ( rtpend == rtpstart ) ? rtpstart : ( ast_random ( ) % ( rtpend - rtpstart ) ) + rtpstart ; EXPR 4 x = ( rtpend == rtpstart ) ? rtpstart : ( ast_random ( ) % ( rtpend - rtpstart ) ) + rtpstart ASSIGN 5 x = ( rtpend == rtpstart ) ? rtpstart : ( ast_random ( ) % ( rtpend - rtpstart ) ) + rtpstart LVAL 6 x FIELD 7 x LEAF_NODE 8 x ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( rtpend == rtpstart ) ? rtpstart : ( ast_random ( ) % ( rtpend - rtpstart ) ) + rtpstart COND_EXPR 7 ( rtpend == rtpstart ) ? rtpstart : ( ast_random ( ) % ( rtpend - rtpstart ) ) + rtpstart CONDITION 8 ( rtpend == rtpstart ) LEAF_NODE 9 ( FIELD 9 rtpend LEAF_NODE 10 rtpend EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 rtpstart LEAF_NODE 10 rtpstart LEAF_NODE 9 ) LEAF_NODE 8 ? EXPR 8 rtpstart FIELD 9 rtpstart LEAF_NODE 10 rtpstart LEAF_NODE 8 : LEAF_NODE 8 ( FUNCTION_CALL 8 ast_random ( ) CALLEE 9 ast_random LEAF_NODE 10 ast_random LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 8 % LEAF_NODE 8 ( FIELD 8 rtpend LEAF_NODE 9 rtpend LEAF_NODE 8 - FIELD 8 rtpstart LEAF_NODE 9 rtpstart LEAF_NODE 8 ) LEAF_NODE 8 ) LEAF_NODE 8 + FIELD 8 rtpstart LEAF_NODE 9 rtpstart LEAF_NODE 4 ; EXPR_STATEMENT 3 x = x & ~1 ; EXPR 4 x = x & ~1 ASSIGN 5 x = x & ~1 LVAL 6 x FIELD 7 x LEAF_NODE 8 x ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x & ~1 FIELD 7 x LEAF_NODE 8 x LEAF_NODE 7 & FIELD 7 ~1 LEAF_NODE 8 ~1 LEAF_NODE 4 ; EXPR_STATEMENT 3 startplace = x ; EXPR 4 startplace = x ASSIGN 5 startplace = x LVAL 6 startplace FIELD 7 startplace LEAF_NODE 8 startplace ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 x FIELD 7 x LEAF_NODE 8 x LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_sockaddr_set_port ( addr , x ) ; EXPR 7 ast_sockaddr_set_port ( addr , x ) FUNCTION_CALL 8 ast_sockaddr_set_port ( addr , x ) CALLEE 9 ast_sockaddr_set_port LEAF_NODE 10 ast_sockaddr_set_port LEAF_NODE 9 ( ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 , ARGUMENT 9 x FIELD 10 x LEAF_NODE 11 x LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ast_bind ( rtp -> s , addr ) EXPR 8 ! ast_bind ( rtp -> s , addr ) UNARY_EXPR 9 ! ast_bind ( rtp -> s , addr ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FUNCTION_CALL 10 ast_bind ( rtp -> s , addr ) CALLEE 11 ast_bind LEAF_NODE 12 ast_bind LEAF_NODE 11 ( ARGUMENT 11 rtp -> s FIELD 12 rtp -> s LEAF_NODE 13 rtp LEAF_NODE 13 -> LEAF_NODE 13 s LEAF_NODE 11 , ARGUMENT 11 addr FIELD 12 addr LEAF_NODE 13 addr LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_debug ( 1 , \"Allocated port %d for RTP instance '%p'\\n\" , x , instance ) ; EXPR 10 ast_debug ( 1 , \"Allocated port %d for RTP instance '%p'\\n\" , x , instance ) FUNCTION_CALL 11 ast_debug ( 1 , \"Allocated port %d for RTP instance '%p'\\n\" , x , instance ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 \"Allocated port %d for RTP instance '%p'\\n\" FIELD 13 \"Allocated port %d for RTP instance '%p'\\n\" LEAF_NODE 14 \"Allocated port %d for RTP instance '%p'\\n\" LEAF_NODE 12 , ARGUMENT 12 x FIELD 13 x LEAF_NODE 14 x LEAF_NODE 12 , ARGUMENT 12 instance FIELD 13 instance LEAF_NODE 14 instance LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_rtp_instance_set_local_address ( instance , addr ) ; EXPR 10 ast_rtp_instance_set_local_address ( instance , addr ) FUNCTION_CALL 11 ast_rtp_instance_set_local_address ( instance , addr ) CALLEE 12 ast_rtp_instance_set_local_address LEAF_NODE 13 ast_rtp_instance_set_local_address LEAF_NODE 12 ( ARGUMENT 12 instance FIELD 13 instance LEAF_NODE 14 instance LEAF_NODE 12 , ARGUMENT 12 addr FIELD 13 addr LEAF_NODE 14 addr LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 x += 2 ; EXPR 7 x += 2 ASSIGN 8 x += 2 LVAL 9 x FIELD 10 x LEAF_NODE 11 x ASSIGN_OP 9 += LEAF_NODE 10 += RVAL 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 x > rtpend EXPR 8 x > rtpend FIELD 9 x LEAF_NODE 10 x REL_OPERATOR 9 > LEAF_NODE 10 > FIELD 9 rtpend LEAF_NODE 10 rtpend LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 x = ( rtpstart + 1 ) & ~1 ; EXPR 10 x = ( rtpstart + 1 ) & ~1 ASSIGN 11 x = ( rtpstart + 1 ) & ~1 LVAL 12 x FIELD 13 x LEAF_NODE 14 x ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ( rtpstart + 1 ) & ~1 LEAF_NODE 13 ( FIELD 13 rtpstart LEAF_NODE 14 rtpstart LEAF_NODE 13 + FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 13 ) LEAF_NODE 13 & FIELD 13 ~1 LEAF_NODE 14 ~1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 x == startplace || ( errno != EADDRINUSE && errno != EACCES ) EXPR 8 x == startplace || ( errno != EADDRINUSE && errno != EACCES ) OR 9 x == startplace || ( errno != EADDRINUSE && errno != EACCES ) EXPR 10 x == startplace FIELD 11 x LEAF_NODE 12 x EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 startplace LEAF_NODE 12 startplace LEAF_NODE 10 || EXPR 10 ( errno != EADDRINUSE && errno != EACCES ) LEAF_NODE 11 ( AND 11 errno != EADDRINUSE && errno != EACCES EXPR 12 errno != EADDRINUSE FIELD 13 errno LEAF_NODE 14 errno EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 EADDRINUSE LEAF_NODE 14 EADDRINUSE LEAF_NODE 12 && EXPR 12 errno != EACCES FIELD 13 errno LEAF_NODE 14 errno EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 EACCES LEAF_NODE 14 EACCES LEAF_NODE 11 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"Oh dear... we couldn't allocate a port for RTP instance '%p'\\n\" , instance ) ; EXPR 10 ast_log ( LOG_ERROR , \"Oh dear... we couldn't allocate a port for RTP instance '%p'\\n\" , instance ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"Oh dear... we couldn't allocate a port for RTP instance '%p'\\n\" , instance ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"Oh dear... we couldn't allocate a port for RTP instance '%p'\\n\" FIELD 13 \"Oh dear... we couldn't allocate a port for RTP instance '%p'\\n\" LEAF_NODE 14 \"Oh dear... we couldn't allocate a port for RTP instance '%p'\\n\" LEAF_NODE 12 , ARGUMENT 12 instance FIELD 13 instance LEAF_NODE 14 instance LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 close ( rtp -> s ) ; EXPR 10 close ( rtp -> s ) FUNCTION_CALL 11 close ( rtp -> s ) CALLEE 12 close LEAF_NODE 13 close LEAF_NODE 12 ( ARGUMENT 12 rtp -> s FIELD 13 rtp -> s LEAF_NODE 14 rtp LEAF_NODE 14 -> LEAF_NODE 14 s LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_free ( rtp ) ; EXPR 10 ast_free ( rtp ) FUNCTION_CALL 11 ast_free ( rtp ) CALLEE 12 ast_free LEAF_NODE 13 ast_free LEAF_NODE 12 ( ARGUMENT 12 rtp FIELD 13 rtp LEAF_NODE 14 rtp LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 pj_thread_register_check ( ) ; EXPR 4 pj_thread_register_check ( ) FUNCTION_CALL 5 pj_thread_register_check ( ) CALLEE 6 pj_thread_register_check LEAF_NODE 7 pj_thread_register_check LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 pj_stun_config_init ( & stun_config , & cachingpool . factory , 0 , ioqueue , timerheap ) ; EXPR 4 pj_stun_config_init ( & stun_config , & cachingpool . factory , 0 , ioqueue , timerheap ) FUNCTION_CALL 5 pj_stun_config_init ( & stun_config , & cachingpool . factory , 0 , ioqueue , timerheap ) CALLEE 6 pj_stun_config_init LEAF_NODE 7 pj_stun_config_init LEAF_NODE 6 ( ARGUMENT 6 & stun_config UNARY_EXPR 7 & stun_config UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 stun_config LEAF_NODE 9 stun_config LEAF_NODE 6 , ARGUMENT 6 & cachingpool . factory UNARY_EXPR 7 & cachingpool . factory UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 cachingpool . factory LEAF_NODE 9 cachingpool LEAF_NODE 9 . LEAF_NODE 9 factory LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 , ARGUMENT 6 ioqueue FIELD 7 ioqueue LEAF_NODE 8 ioqueue LEAF_NODE 6 , ARGUMENT 6 timerheap FIELD 7 timerheap LEAF_NODE 8 timerheap LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 generate_random_string ( rtp -> local_ufrag , sizeof ( rtp -> local_ufrag ) ) ; EXPR 4 generate_random_string ( rtp -> local_ufrag , sizeof ( rtp -> local_ufrag ) ) FUNCTION_CALL 5 generate_random_string ( rtp -> local_ufrag , sizeof ( rtp -> local_ufrag ) ) CALLEE 6 generate_random_string LEAF_NODE 7 generate_random_string LEAF_NODE 6 ( ARGUMENT 6 rtp -> local_ufrag FIELD 7 rtp -> local_ufrag LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 local_ufrag LEAF_NODE 6 , ARGUMENT 6 sizeof ( rtp -> local_ufrag ) FUNCTION_CALL 7 sizeof ( rtp -> local_ufrag ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 rtp -> local_ufrag FIELD 9 rtp -> local_ufrag LEAF_NODE 10 rtp LEAF_NODE 10 -> LEAF_NODE 10 local_ufrag LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ufrag = pj_str ( rtp -> local_ufrag ) ; EXPR 4 ufrag = pj_str ( rtp -> local_ufrag ) ASSIGN 5 ufrag = pj_str ( rtp -> local_ufrag ) LVAL 6 ufrag FIELD 7 ufrag LEAF_NODE 8 ufrag ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pj_str ( rtp -> local_ufrag ) FUNCTION_CALL 7 pj_str ( rtp -> local_ufrag ) CALLEE 8 pj_str LEAF_NODE 9 pj_str LEAF_NODE 8 ( ARGUMENT 8 rtp -> local_ufrag FIELD 9 rtp -> local_ufrag LEAF_NODE 10 rtp LEAF_NODE 10 -> LEAF_NODE 10 local_ufrag LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 generate_random_string ( rtp -> local_passwd , sizeof ( rtp -> local_passwd ) ) ; EXPR 4 generate_random_string ( rtp -> local_passwd , sizeof ( rtp -> local_passwd ) ) FUNCTION_CALL 5 generate_random_string ( rtp -> local_passwd , sizeof ( rtp -> local_passwd ) ) CALLEE 6 generate_random_string LEAF_NODE 7 generate_random_string LEAF_NODE 6 ( ARGUMENT 6 rtp -> local_passwd FIELD 7 rtp -> local_passwd LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 local_passwd LEAF_NODE 6 , ARGUMENT 6 sizeof ( rtp -> local_passwd ) FUNCTION_CALL 7 sizeof ( rtp -> local_passwd ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 rtp -> local_passwd FIELD 9 rtp -> local_passwd LEAF_NODE 10 rtp LEAF_NODE 10 -> LEAF_NODE 10 local_passwd LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 passwd = pj_str ( rtp -> local_passwd ) ; EXPR 4 passwd = pj_str ( rtp -> local_passwd ) ASSIGN 5 passwd = pj_str ( rtp -> local_passwd ) LVAL 6 passwd FIELD 7 passwd LEAF_NODE 8 passwd ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pj_str ( rtp -> local_passwd ) FUNCTION_CALL 7 pj_str ( rtp -> local_passwd ) CALLEE 8 pj_str LEAF_NODE 9 pj_str LEAF_NODE 8 ( ARGUMENT 8 rtp -> local_passwd FIELD 9 rtp -> local_passwd LEAF_NODE 10 rtp LEAF_NODE 10 -> LEAF_NODE 10 local_passwd LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_rtp_instance_set_data ( instance , rtp ) ; EXPR 4 ast_rtp_instance_set_data ( instance , rtp ) FUNCTION_CALL 5 ast_rtp_instance_set_data ( instance , rtp ) CALLEE 6 ast_rtp_instance_set_data LEAF_NODE 7 ast_rtp_instance_set_data LEAF_NODE 6 ( ARGUMENT 6 instance FIELD 7 instance LEAF_NODE 8 instance LEAF_NODE 6 , ARGUMENT 6 rtp FIELD 7 rtp LEAF_NODE 8 rtp LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 icesupport && pj_ice_sess_create ( & stun_config , NULL , PJ_ICE_SESS_ROLE_UNKNOWN , 2 , & ast_rtp_ice_sess_cb , & ufrag , & passwd , NULL , & rtp -> ice ) == PJ_SUCCESS EXPR 5 icesupport && pj_ice_sess_create ( & stun_config , NULL , PJ_ICE_SESS_ROLE_UNKNOWN , 2 , & ast_rtp_ice_sess_cb , & ufrag , & passwd , NULL , & rtp -> ice ) == PJ_SUCCESS AND 6 icesupport && pj_ice_sess_create ( & stun_config , NULL , PJ_ICE_SESS_ROLE_UNKNOWN , 2 , & ast_rtp_ice_sess_cb , & ufrag , & passwd , NULL , & rtp -> ice ) == PJ_SUCCESS EXPR 7 icesupport FIELD 8 icesupport LEAF_NODE 9 icesupport LEAF_NODE 7 && EXPR 7 pj_ice_sess_create ( & stun_config , NULL , PJ_ICE_SESS_ROLE_UNKNOWN , 2 , & ast_rtp_ice_sess_cb , & ufrag , & passwd , NULL , & rtp -> ice ) == PJ_SUCCESS FUNCTION_CALL 8 pj_ice_sess_create ( & stun_config , NULL , PJ_ICE_SESS_ROLE_UNKNOWN , 2 , & ast_rtp_ice_sess_cb , & ufrag , & passwd , NULL , & rtp -> ice ) CALLEE 9 pj_ice_sess_create LEAF_NODE 10 pj_ice_sess_create LEAF_NODE 9 ( ARGUMENT 9 & stun_config UNARY_EXPR 10 & stun_config UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 stun_config LEAF_NODE 12 stun_config LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 PJ_ICE_SESS_ROLE_UNKNOWN FIELD 10 PJ_ICE_SESS_ROLE_UNKNOWN LEAF_NODE 11 PJ_ICE_SESS_ROLE_UNKNOWN LEAF_NODE 9 , ARGUMENT 9 2 FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 9 , ARGUMENT 9 & ast_rtp_ice_sess_cb UNARY_EXPR 10 & ast_rtp_ice_sess_cb UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ast_rtp_ice_sess_cb LEAF_NODE 12 ast_rtp_ice_sess_cb LEAF_NODE 9 , ARGUMENT 9 & ufrag UNARY_EXPR 10 & ufrag UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ufrag LEAF_NODE 12 ufrag LEAF_NODE 9 , ARGUMENT 9 & passwd UNARY_EXPR 10 & passwd UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 passwd LEAF_NODE 12 passwd LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 & rtp -> ice UNARY_EXPR 10 & rtp -> ice UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 rtp -> ice LEAF_NODE 12 rtp LEAF_NODE 12 -> LEAF_NODE 12 ice LEAF_NODE 9 ) EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 PJ_SUCCESS LEAF_NODE 9 PJ_SUCCESS LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 rtp -> ice -> user_data = rtp ; EXPR 7 rtp -> ice -> user_data = rtp ASSIGN 8 rtp -> ice -> user_data = rtp LVAL 9 rtp -> ice -> user_data FIELD 10 rtp -> ice -> user_data LEAF_NODE 11 rtp LEAF_NODE 11 -> LEAF_NODE 11 ice LEAF_NODE 11 -> LEAF_NODE 11 user_data ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rtp FIELD 10 rtp LEAF_NODE 11 rtp LEAF_NODE 7 ; EXPR_STATEMENT 6 rtp_add_candidates_to_ice ( instance , rtp , addr , x , AST_RTP_ICE_COMPONENT_RTP , TRANSPORT_SOCKET_RTP , & ast_rtp_turn_rtp_sock_cb , & rtp -> turn_rtp ) ; EXPR 7 rtp_add_candidates_to_ice ( instance , rtp , addr , x , AST_RTP_ICE_COMPONENT_RTP , TRANSPORT_SOCKET_RTP , & ast_rtp_turn_rtp_sock_cb , & rtp -> turn_rtp ) FUNCTION_CALL 8 rtp_add_candidates_to_ice ( instance , rtp , addr , x , AST_RTP_ICE_COMPONENT_RTP , TRANSPORT_SOCKET_RTP , & ast_rtp_turn_rtp_sock_cb , & rtp -> turn_rtp ) CALLEE 9 rtp_add_candidates_to_ice LEAF_NODE 10 rtp_add_candidates_to_ice LEAF_NODE 9 ( ARGUMENT 9 instance FIELD 10 instance LEAF_NODE 11 instance LEAF_NODE 9 , ARGUMENT 9 rtp FIELD 10 rtp LEAF_NODE 11 rtp LEAF_NODE 9 , ARGUMENT 9 addr FIELD 10 addr LEAF_NODE 11 addr LEAF_NODE 9 , ARGUMENT 9 x FIELD 10 x LEAF_NODE 11 x LEAF_NODE 9 , ARGUMENT 9 AST_RTP_ICE_COMPONENT_RTP FIELD 10 AST_RTP_ICE_COMPONENT_RTP LEAF_NODE 11 AST_RTP_ICE_COMPONENT_RTP LEAF_NODE 9 , ARGUMENT 9 TRANSPORT_SOCKET_RTP FIELD 10 TRANSPORT_SOCKET_RTP LEAF_NODE 11 TRANSPORT_SOCKET_RTP LEAF_NODE 9 , ARGUMENT 9 & ast_rtp_turn_rtp_sock_cb UNARY_EXPR 10 & ast_rtp_turn_rtp_sock_cb UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 ast_rtp_turn_rtp_sock_cb LEAF_NODE 12 ast_rtp_turn_rtp_sock_cb LEAF_NODE 9 , ARGUMENT 9 & rtp -> turn_rtp UNARY_EXPR 10 & rtp -> turn_rtp UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 rtp -> turn_rtp LEAF_NODE 12 rtp LEAF_NODE 12 -> LEAF_NODE 12 turn_rtp LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 rtp -> sched = sched ; EXPR 4 rtp -> sched = sched ASSIGN 5 rtp -> sched = sched LVAL 6 rtp -> sched FIELD 7 rtp -> sched LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 sched ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 sched FIELD 7 sched LEAF_NODE 8 sched LEAF_NODE 4 ; EXPR_STATEMENT 3 rtp -> rekeyid = - 1 ; EXPR 4 rtp -> rekeyid = - 1 ASSIGN 5 rtp -> rekeyid = - 1 LVAL 6 rtp -> rekeyid FIELD 7 rtp -> rekeyid LEAF_NODE 8 rtp LEAF_NODE 8 -> LEAF_NODE 8 rekeyid ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 12, "project": "openssl_ast_vul_function_test_adv_40", "target": 1}
{"func": "SIMPLE_DECL 1 enum ast_websocket_opcode BASE_CLASSES { AST_WEBSOCKET_OPCODE_TEXT = 0x1 , AST_WEBSOCKET_OPCODE_BINARY = 0x2 , AST_WEBSOCKET_OPCODE_PING = 0x9 , AST_WEBSOCKET_OPCODE_PONG = 0xA , AST_WEBSOCKET_OPCODE_CLOSE = 0x8 , AST_WEBSOCKET_OPCODE_CONTINUATION = 0x0 , } ; CLASS_DEF 2 enum ast_websocket_opcode BASE_CLASSES { AST_WEBSOCKET_OPCODE_TEXT = 0x1 , AST_WEBSOCKET_OPCODE_BINARY = 0x2 , AST_WEBSOCKET_OPCODE_PING = 0x9 , AST_WEBSOCKET_OPCODE_PONG = 0xA , AST_WEBSOCKET_OPCODE_CLOSE = 0x8 , AST_WEBSOCKET_OPCODE_CONTINUATION = 0x0 , } CLASS_DEF 3 enum ast_websocket_opcode BASE_CLASSES { AST_WEBSOCKET_OPCODE_TEXT = 0x1 , AST_WEBSOCKET_OPCODE_BINARY = 0x2 , AST_WEBSOCKET_OPCODE_PING = 0x9 , AST_WEBSOCKET_OPCODE_PONG = 0xA , AST_WEBSOCKET_OPCODE_CLOSE = 0x8 , AST_WEBSOCKET_OPCODE_CONTINUATION = 0x0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_websocket_opcode LEAF_NODE 5 ast_websocket_opcode LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_WEBSOCKET_OPCODE_TEXT = 0x1 , AST_WEBSOCKET_OPCODE_BINARY = 0x2 , AST_WEBSOCKET_OPCODE_PING = 0x9 , AST_WEBSOCKET_OPCODE_PONG = 0xA , AST_WEBSOCKET_OPCODE_CLOSE = 0x8 , AST_WEBSOCKET_OPCODE_CONTINUATION = 0x0 , LEAF_NODE 5 AST_WEBSOCKET_OPCODE_TEXT LEAF_NODE 5 = LEAF_NODE 5 0x1 LEAF_NODE 5 , LEAF_NODE 5 AST_WEBSOCKET_OPCODE_BINARY LEAF_NODE 5 = LEAF_NODE 5 0x2 LEAF_NODE 5 , LEAF_NODE 5 AST_WEBSOCKET_OPCODE_PING LEAF_NODE 5 = LEAF_NODE 5 0x9 LEAF_NODE 5 , LEAF_NODE 5 AST_WEBSOCKET_OPCODE_PONG LEAF_NODE 5 = LEAF_NODE 5 0xA LEAF_NODE 5 , LEAF_NODE 5 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 5 = LEAF_NODE 5 0x8 LEAF_NODE 5 , LEAF_NODE 5 AST_WEBSOCKET_OPCODE_CONTINUATION LEAF_NODE 5 = LEAF_NODE 5 0x0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_websocket BASE_CLASSES { FILE * f ; int fd ; struct ast_sockaddr address ; enum ast_websocket_opcode opcode ; size_t payload_len ; char * payload ; size_t reconstruct ; int timeout ; unsigned int secure : 1 ; unsigned int closing : 1 ; unsigned int close_sent : 1 ; struct websocket_client * client ; } ; CLASS_DEF 2 struct ast_websocket BASE_CLASSES { FILE * f ; int fd ; struct ast_sockaddr address ; enum ast_websocket_opcode opcode ; size_t payload_len ; char * payload ; size_t reconstruct ; int timeout ; unsigned int secure : 1 ; unsigned int closing : 1 ; unsigned int close_sent : 1 ; struct websocket_client * client ; } CLASS_DEF 3 struct ast_websocket BASE_CLASSES { FILE * f ; int fd ; struct ast_sockaddr address ; enum ast_websocket_opcode opcode ; size_t payload_len ; char * payload ; size_t reconstruct ; int timeout ; unsigned int secure : 1 ; unsigned int closing : 1 ; unsigned int close_sent : 1 ; struct websocket_client * client ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_websocket LEAF_NODE 5 ast_websocket LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FILE * f ; int fd ; struct ast_sockaddr address ; enum ast_websocket_opcode opcode ; size_t payload_len ; char * payload ; size_t reconstruct ; int timeout ; unsigned int secure : 1 ; unsigned int closing : 1 ; unsigned int close_sent : 1 ; struct websocket_client * client ; SIMPLE_DECL 5 FILE * f ; VAR_DECL 6 FILE * f TYPE 7 FILE * TYPE_NAME 8 FILE LEAF_NODE 9 FILE POINTER 8 * LEAF_NODE 9 * NAME 7 f LEAF_NODE 8 f LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr address ; VAR_DECL 6 struct ast_sockaddr address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 address LEAF_NODE 8 address LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_websocket_opcode opcode ; VAR_DECL 6 enum ast_websocket_opcode opcode TYPE 7 enum ast_websocket_opcode TYPE_NAME 8 enum ast_websocket_opcode LEAF_NODE 9 enum LEAF_NODE 9 ast_websocket_opcode NAME 7 opcode LEAF_NODE 8 opcode LEAF_NODE 6 ; SIMPLE_DECL 5 size_t payload_len ; VAR_DECL 6 size_t payload_len TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 payload_len LEAF_NODE 8 payload_len LEAF_NODE 6 ; SIMPLE_DECL 5 char * payload ; VAR_DECL 6 char * payload TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 payload LEAF_NODE 8 payload LEAF_NODE 6 ; SIMPLE_DECL 5 size_t reconstruct ; VAR_DECL 6 size_t reconstruct TYPE 7 size_t TYPE_NAME 8 size_t LEAF_NODE 9 size_t NAME 7 reconstruct LEAF_NODE 8 reconstruct LEAF_NODE 6 ; SIMPLE_DECL 5 int timeout ; VAR_DECL 6 int timeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timeout LEAF_NODE 8 timeout LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 secure : LEAF_NODE 6 secure LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 closing : LEAF_NODE 6 closing LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 close_sent : LEAF_NODE 6 close_sent LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct websocket_client * client ; VAR_DECL 6 struct websocket_client * client TYPE 7 struct websocket_client * TYPE_NAME 8 struct websocket_client LEAF_NODE 9 struct LEAF_NODE 9 websocket_client POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_websocket ast_websocket ; VAR_DECL 2 struct ast_websocket ast_websocket TYPE 3 struct ast_websocket TYPE_NAME 4 struct ast_websocket LEAF_NODE 5 struct LEAF_NODE 5 ast_websocket NAME 3 ast_websocket LEAF_NODE 4 ast_websocket LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static inline int LEAF_NODE 3 static LEAF_NODE 3 inline TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ws_safe_read LEAF_NODE 3 ws_safe_read PARAMETER_LIST 2 ( struct ast_websocket * session , char * buf , int len , enum ast_websocket_opcode * opcode ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_websocket * session TYPE 4 struct ast_websocket * TYPE_NAME 5 struct ast_websocket LEAF_NODE 6 struct LEAF_NODE 6 ast_websocket POINTER 5 * LEAF_NODE 6 * NAME 4 session LEAF_NODE 5 session LEAF_NODE 3 , PARAMETER_DECL 3 char * buf TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 buf LEAF_NODE 5 buf LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 enum ast_websocket_opcode * opcode TYPE 4 enum ast_websocket_opcode * TYPE_NAME 5 enum ast_websocket_opcode LEAF_NODE 6 enum LEAF_NODE 6 ast_websocket_opcode POINTER 5 * LEAF_NODE 6 * NAME 4 opcode LEAF_NODE 5 opcode LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int sanity ; VAR_DECL 4 int sanity TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 sanity LEAF_NODE 6 sanity LEAF_NODE 4 ; SIMPLE_DECL 3 size_t rlen ; VAR_DECL 4 size_t rlen TYPE 5 size_t TYPE_NAME 6 size_t LEAF_NODE 7 size_t NAME 5 rlen LEAF_NODE 6 rlen LEAF_NODE 4 ; SIMPLE_DECL 3 int xlen ; xlen = len ; VAR_DECL 4 int xlen ; xlen = len TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 xlen LEAF_NODE 6 xlen LEAF_NODE 5 ; INIT 5 xlen = len ASSIGN 6 xlen = len LVAL 7 xlen NAME 8 xlen LEAF_NODE 9 xlen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 len FIELD 8 len LEAF_NODE 9 len LEAF_NODE 4 ; SIMPLE_DECL 3 char * rbuf ; rbuf = buf ; VAR_DECL 4 char * rbuf ; rbuf = buf TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 rbuf LEAF_NODE 6 rbuf LEAF_NODE 5 ; INIT 5 rbuf = buf ASSIGN 6 rbuf = buf LVAL 7 rbuf NAME 8 rbuf LEAF_NODE 9 rbuf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 buf FIELD 8 buf LEAF_NODE 9 buf LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 sanity = 10 ; EXPR 5 sanity = 10 ASSIGN 6 sanity = 10 LVAL 7 sanity FIELD 8 sanity LEAF_NODE 9 sanity ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 10 FIELD 8 10 LEAF_NODE 9 10 LEAF_NODE 5 ; CONDITION 4 sanity EXPR 5 sanity FIELD 6 sanity LEAF_NODE 7 sanity LEAF_NODE 4 ; FOR_EXPR 4 sanity -- EXPR 5 sanity -- FIELD 6 sanity -- LEAF_NODE 7 sanity LEAF_NODE 7 -- LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 clearerr ( session -> f ) ; EXPR 7 clearerr ( session -> f ) FUNCTION_CALL 8 clearerr ( session -> f ) CALLEE 9 clearerr LEAF_NODE 10 clearerr LEAF_NODE 9 ( ARGUMENT 9 session -> f FIELD 10 session -> f LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 f LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rlen = fread ( rbuf , 1 , xlen , session -> f ) ; EXPR 7 rlen = fread ( rbuf , 1 , xlen , session -> f ) ASSIGN 8 rlen = fread ( rbuf , 1 , xlen , session -> f ) LVAL 9 rlen FIELD 10 rlen LEAF_NODE 11 rlen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 fread ( rbuf , 1 , xlen , session -> f ) FUNCTION_CALL 10 fread ( rbuf , 1 , xlen , session -> f ) CALLEE 11 fread LEAF_NODE 12 fread LEAF_NODE 11 ( ARGUMENT 11 rbuf FIELD 12 rbuf LEAF_NODE 13 rbuf LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 xlen FIELD 12 xlen LEAF_NODE 13 xlen LEAF_NODE 11 , ARGUMENT 11 session -> f FIELD 12 session -> f LEAF_NODE 13 session LEAF_NODE 13 -> LEAF_NODE 13 f LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 0 == rlen && ferror ( session -> f ) && errno != EAGAIN EXPR 8 0 == rlen && ferror ( session -> f ) && errno != EAGAIN AND 9 0 == rlen && ferror ( session -> f ) && errno != EAGAIN EXPR 10 0 == rlen FIELD 11 0 LEAF_NODE 12 0 EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 rlen LEAF_NODE 12 rlen LEAF_NODE 10 && EXPR 10 ferror ( session -> f ) && errno != EAGAIN AND 11 ferror ( session -> f ) && errno != EAGAIN EXPR 12 ferror ( session -> f ) FUNCTION_CALL 13 ferror ( session -> f ) CALLEE 14 ferror LEAF_NODE 15 ferror LEAF_NODE 14 ( ARGUMENT 14 session -> f FIELD 15 session -> f LEAF_NODE 16 session LEAF_NODE 16 -> LEAF_NODE 16 f LEAF_NODE 14 ) LEAF_NODE 12 && EXPR 12 errno != EAGAIN FIELD 13 errno LEAF_NODE 14 errno EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 EAGAIN LEAF_NODE 14 EAGAIN LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"Error reading from web socket: %s\\n\" , strerror ( errno ) ) ; EXPR 10 ast_log ( LOG_ERROR , \"Error reading from web socket: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"Error reading from web socket: %s\\n\" , strerror ( errno ) ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"Error reading from web socket: %s\\n\" FIELD 13 \"Error reading from web socket: %s\\n\" LEAF_NODE 14 \"Error reading from web socket: %s\\n\" LEAF_NODE 12 , ARGUMENT 12 strerror ( errno ) FUNCTION_CALL 13 strerror ( errno ) CALLEE 14 strerror LEAF_NODE 15 strerror LEAF_NODE 14 ( ARGUMENT 14 errno FIELD 15 errno LEAF_NODE 16 errno LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE ; EXPR 10 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE ASSIGN 11 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE LVAL 12 ( * opcode ) LEAF_NODE 13 ( UNARY_EXPR 13 * opcode UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 opcode LEAF_NODE 15 opcode LEAF_NODE 13 ) ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_WEBSOCKET_OPCODE_CLOSE FIELD 13 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 14 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 10 ; EXPR_STATEMENT 9 session -> closing = 1 ; EXPR 10 session -> closing = 1 ASSIGN 11 session -> closing = 1 LVAL 12 session -> closing FIELD 13 session -> closing LEAF_NODE 14 session LEAF_NODE 14 -> LEAF_NODE 14 closing ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 xlen = ( xlen - rlen ) ; EXPR 7 xlen = ( xlen - rlen ) ASSIGN 8 xlen = ( xlen - rlen ) LVAL 9 xlen FIELD 10 xlen LEAF_NODE 11 xlen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ( xlen - rlen ) LEAF_NODE 10 ( FIELD 10 xlen LEAF_NODE 11 xlen LEAF_NODE 10 - FIELD 10 rlen LEAF_NODE 11 rlen LEAF_NODE 10 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 rbuf = rbuf + rlen ; EXPR 7 rbuf = rbuf + rlen ASSIGN 8 rbuf = rbuf + rlen LVAL 9 rbuf FIELD 10 rbuf LEAF_NODE 11 rbuf ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 rbuf + rlen FIELD 10 rbuf LEAF_NODE 11 rbuf LEAF_NODE 10 + FIELD 10 rlen LEAF_NODE 11 rlen LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 0 == xlen EXPR 8 0 == xlen FIELD 9 0 LEAF_NODE 10 0 EQ_OPERATOR 9 == LEAF_NODE 10 == FIELD 9 xlen LEAF_NODE 10 xlen LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ast_wait_for_input ( session -> fd , 1000 ) < 0 EXPR 8 ast_wait_for_input ( session -> fd , 1000 ) < 0 FUNCTION_CALL 9 ast_wait_for_input ( session -> fd , 1000 ) CALLEE 10 ast_wait_for_input LEAF_NODE 11 ast_wait_for_input LEAF_NODE 10 ( ARGUMENT 10 session -> fd FIELD 11 session -> fd LEAF_NODE 12 session LEAF_NODE 12 -> LEAF_NODE 12 fd LEAF_NODE 10 , ARGUMENT 10 1000 FIELD 11 1000 LEAF_NODE 12 1000 LEAF_NODE 10 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"ast_wait_for_input returned err: %s\\n\" , strerror ( errno ) ) ; EXPR 10 ast_log ( LOG_ERROR , \"ast_wait_for_input returned err: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"ast_wait_for_input returned err: %s\\n\" , strerror ( errno ) ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"ast_wait_for_input returned err: %s\\n\" FIELD 13 \"ast_wait_for_input returned err: %s\\n\" LEAF_NODE 14 \"ast_wait_for_input returned err: %s\\n\" LEAF_NODE 12 , ARGUMENT 12 strerror ( errno ) FUNCTION_CALL 13 strerror ( errno ) CALLEE 14 strerror LEAF_NODE 15 strerror LEAF_NODE 14 ( ARGUMENT 14 errno FIELD 15 errno LEAF_NODE 16 errno LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE ; EXPR 10 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE ASSIGN 11 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE LVAL 12 ( * opcode ) LEAF_NODE 13 ( UNARY_EXPR 13 * opcode UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 opcode LEAF_NODE 15 opcode LEAF_NODE 13 ) ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_WEBSOCKET_OPCODE_CLOSE FIELD 13 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 14 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 10 ; EXPR_STATEMENT 9 session -> closing = 1 ; EXPR 10 session -> closing = 1 ASSIGN 11 session -> closing = 1 LVAL 12 session -> closing FIELD 13 session -> closing LEAF_NODE 14 session LEAF_NODE 14 -> LEAF_NODE 14 closing ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! sanity EXPR 5 ! sanity UNARY_EXPR 6 ! sanity UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 sanity LEAF_NODE 8 sanity LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"Websocket seems unresponsive, disconnecting ...\\n\" ) ; EXPR 7 ast_log ( LOG_WARNING , \"Websocket seems unresponsive, disconnecting ...\\n\" ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"Websocket seems unresponsive, disconnecting ...\\n\" ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"Websocket seems unresponsive, disconnecting ...\\n\" FIELD 10 \"Websocket seems unresponsive, disconnecting ...\\n\" LEAF_NODE 11 \"Websocket seems unresponsive, disconnecting ...\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE ; EXPR 7 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE ASSIGN 8 ( * opcode ) = AST_WEBSOCKET_OPCODE_CLOSE LVAL 9 ( * opcode ) LEAF_NODE 10 ( UNARY_EXPR 10 * opcode UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 opcode LEAF_NODE 12 opcode LEAF_NODE 10 ) ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 AST_WEBSOCKET_OPCODE_CLOSE FIELD 10 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 11 AST_WEBSOCKET_OPCODE_CLOSE LEAF_NODE 7 ; EXPR_STATEMENT 6 session -> closing = 1 ; EXPR 7 session -> closing = 1 ASSIGN 8 session -> closing = 1 LVAL 9 session -> closing FIELD 10 session -> closing LEAF_NODE 11 session LEAF_NODE 11 -> LEAF_NODE 11 closing ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 13, "project": "openssl_ast_vul_function_test_adv_45", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk LEAF_NODE 5 sla_trunk LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 stations LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int num_stations ; VAR_DECL 6 unsigned int num_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 num_stations LEAF_NODE 8 num_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int active_stations ; VAR_DECL 6 unsigned int active_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 active_stations LEAF_NODE 8 active_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int hold_stations ; VAR_DECL 6 unsigned int hold_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 hold_stations LEAF_NODE 8 hold_stations LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 barge_disabled : LEAF_NODE 6 barge_disabled LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 on_hold : LEAF_NODE 6 on_hold LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station_ref LEAF_NODE 5 sla_station_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_station * station ; VAR_DECL 6 struct sla_station * station TYPE 7 struct sla_station * TYPE_NAME 8 struct sla_station LEAF_NODE 9 struct LEAF_NODE 9 sla_station POINTER 8 * LEAF_NODE 9 * NAME 7 station LEAF_NODE 8 station LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } ; CLASS_DEF 2 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } CLASS_DEF 3 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } LEAF_NODE 4 enum CLASS_NAME 4 sla_trunk_state LEAF_NODE 5 sla_trunk_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , LEAF_NODE 5 SLA_TRUNK_STATE_IDLE LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_RINGING LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_UP LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD_BYME LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk_ref LEAF_NODE 5 sla_trunk_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_trunk * trunk ; VAR_DECL 6 struct sla_trunk * trunk TYPE 7 struct sla_trunk * TYPE_NAME 8 struct sla_trunk LEAF_NODE 9 struct LEAF_NODE 9 sla_trunk POINTER 8 * LEAF_NODE 9 * NAME 7 trunk LEAF_NODE 8 trunk LEAF_NODE 6 ; SIMPLE_DECL 5 enum sla_trunk_state state ; VAR_DECL 6 enum sla_trunk_state state TYPE 7 enum sla_trunk_state TYPE_NAME 8 enum sla_trunk_state LEAF_NODE 9 enum LEAF_NODE 9 sla_trunk_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station LEAF_NODE 5 sla_station LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_RWLIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 trunks LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_dial * dial ; VAR_DECL 6 struct ast_dial * dial TYPE 7 struct ast_dial * TYPE_NAME 8 struct ast_dial LEAF_NODE 9 struct LEAF_NODE 9 ast_dial POINTER 8 * LEAF_NODE 9 * NAME 7 dial LEAF_NODE 8 dial LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } ; CLASS_DEF 2 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } CLASS_DEF 3 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } LEAF_NODE 4 enum CLASS_NAME 4 sla_hold_access LEAF_NODE 5 sla_hold_access LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , LEAF_NODE 5 SLA_HOLD_OPEN LEAF_NODE 5 , LEAF_NODE 5 SLA_HOLD_PRIVATE LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_vmminmessage ; VAR_DECL 2 int global_vmminmessage TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_vmminmessage LEAF_NODE 4 global_vmminmessage LEAF_NODE 2 ; SIMPLE_DECL 1 int global_vmmaxmessage ; VAR_DECL 2 int global_vmmaxmessage TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_vmmaxmessage LEAF_NODE 4 global_vmmaxmessage LEAF_NODE 2 ; SIMPLE_DECL 1 int global_maxsilence ; VAR_DECL 2 int global_maxsilence TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_maxsilence LEAF_NODE 4 global_maxsilence LEAF_NODE 2 ; SIMPLE_DECL 1 int global_maxgreet ; VAR_DECL 2 int global_maxgreet TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_maxgreet LEAF_NODE 4 global_maxgreet LEAF_NODE 2 ; SIMPLE_DECL 1 int global_silencethreshold ; global_silencethreshold = 128 ; VAR_DECL 2 int global_silencethreshold ; global_silencethreshold = 128 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_silencethreshold LEAF_NODE 4 global_silencethreshold LEAF_NODE 3 ; INIT 3 global_silencethreshold = 128 ASSIGN 4 global_silencethreshold = 128 LVAL 5 global_silencethreshold NAME 6 global_silencethreshold LEAF_NODE 7 global_silencethreshold ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 128 FIELD 6 128 LEAF_NODE 7 128 LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 160 ] global_mailcmd ; VAR_DECL 2 char [ 160 ] global_mailcmd TYPE 3 char [ 160 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 160 ] LEAF_NODE 5 [ FIELD 5 160 LEAF_NODE 6 160 LEAF_NODE 5 ] NAME 3 global_mailcmd LEAF_NODE 4 global_mailcmd LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 160 ] global_externnotify ; VAR_DECL 2 char [ 160 ] global_externnotify TYPE 3 char [ 160 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 160 ] LEAF_NODE 5 [ FIELD 5 160 LEAF_NODE 6 160 LEAF_NODE 5 ] NAME 3 global_externnotify LEAF_NODE 4 global_externnotify LEAF_NODE 2 ; SIMPLE_DECL 1 char [ PATH_MAX ] global_logfile ; VAR_DECL 2 char [ PATH_MAX ] global_logfile TYPE 3 char [ PATH_MAX ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ PATH_MAX ] LEAF_NODE 5 [ FIELD 5 PATH_MAX LEAF_NODE 6 PATH_MAX LEAF_NODE 5 ] NAME 3 global_logfile LEAF_NODE 4 global_logfile LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 80 ] default_vmformat ; VAR_DECL 2 char [ 80 ] default_vmformat TYPE 3 char [ 80 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 80 ] LEAF_NODE 5 [ FIELD 5 80 LEAF_NODE 6 80 LEAF_NODE 5 ] NAME 3 default_vmformat LEAF_NODE 4 default_vmformat LEAF_NODE 2 ; SIMPLE_DECL 1 const char * ast_config_AST_LOG_DIR ; VAR_DECL 2 const char * ast_config_AST_LOG_DIR TYPE 3 const char * TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 ast_config_AST_LOG_DIR LEAF_NODE 4 ast_config_AST_LOG_DIR LEAF_NODE 2 ; SIMPLE_DECL 1 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } ; CLASS_DEF 2 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } CLASS_DEF 3 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } LEAF_NODE 4 struct CLASS_NAME 4 b64_baseio LEAF_NODE 5 b64_baseio LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; SIMPLE_DECL 5 int iocp ; VAR_DECL 6 int iocp TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 iocp LEAF_NODE 8 iocp LEAF_NODE 6 ; SIMPLE_DECL 5 int iolen ; VAR_DECL 6 int iolen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 iolen LEAF_NODE 8 iolen LEAF_NODE 6 ; SIMPLE_DECL 5 int linelength ; VAR_DECL 6 int linelength TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 linelength LEAF_NODE 8 linelength LEAF_NODE 6 ; SIMPLE_DECL 5 int ateof ; VAR_DECL 6 int ateof TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ateof LEAF_NODE 8 ateof LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ B64_BASEMAXINLINE ] iobuf ; VAR_DECL 6 unsigned char [ B64_BASEMAXINLINE ] iobuf TYPE 7 unsigned char [ B64_BASEMAXINLINE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ B64_BASEMAXINLINE ] LEAF_NODE 9 [ FIELD 9 B64_BASEMAXINLINE LEAF_NODE 10 B64_BASEMAXINLINE LEAF_NODE 9 ] NAME 7 iobuf LEAF_NODE 8 iobuf LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } ; CLASS_DEF 2 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } CLASS_DEF 3 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } LEAF_NODE 4 struct CLASS_NAME 4 minivm_account LEAF_NODE 5 minivm_account LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; SIMPLE_DECL 5 char [ AST_MAX_CONTEXT ] username ; VAR_DECL 6 char [ AST_MAX_CONTEXT ] username TYPE 7 char [ AST_MAX_CONTEXT ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_CONTEXT ] LEAF_NODE 9 [ FIELD 9 AST_MAX_CONTEXT LEAF_NODE 10 AST_MAX_CONTEXT LEAF_NODE 9 ] NAME 7 username LEAF_NODE 8 username LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_CONTEXT ] domain ; VAR_DECL 6 char [ AST_MAX_CONTEXT ] domain TYPE 7 char [ AST_MAX_CONTEXT ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_CONTEXT ] LEAF_NODE 9 [ FIELD 9 AST_MAX_CONTEXT LEAF_NODE 10 AST_MAX_CONTEXT LEAF_NODE 9 ] NAME 7 domain LEAF_NODE 8 domain LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 10 ] pincode ; VAR_DECL 6 char [ 10 ] pincode TYPE 7 char [ 10 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 pincode LEAF_NODE 8 pincode LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 120 ] fullname ; VAR_DECL 6 char [ 120 ] fullname TYPE 7 char [ 120 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 120 ] LEAF_NODE 9 [ FIELD 9 120 LEAF_NODE 10 120 LEAF_NODE 9 ] NAME 7 fullname LEAF_NODE 8 fullname LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] email ; VAR_DECL 6 char [ 80 ] email TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 email LEAF_NODE 8 email LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] pager ; VAR_DECL 6 char [ 80 ] pager TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 pager LEAF_NODE 8 pager LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_ACCOUNT_CODE ] accountcode ; VAR_DECL 6 char [ AST_MAX_ACCOUNT_CODE ] accountcode TYPE 7 char [ AST_MAX_ACCOUNT_CODE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_ACCOUNT_CODE ] LEAF_NODE 9 [ FIELD 9 AST_MAX_ACCOUNT_CODE LEAF_NODE 10 AST_MAX_ACCOUNT_CODE LEAF_NODE 9 ] NAME 7 accountcode LEAF_NODE 8 accountcode LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] serveremail ; VAR_DECL 6 char [ 80 ] serveremail TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 serveremail LEAF_NODE 8 serveremail LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 160 ] externnotify ; VAR_DECL 6 char [ 160 ] externnotify TYPE 7 char [ 160 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 160 ] LEAF_NODE 9 [ FIELD 9 160 LEAF_NODE 10 160 LEAF_NODE 9 ] NAME 7 externnotify LEAF_NODE 8 externnotify LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_LANGUAGE ] language ; VAR_DECL 6 char [ MAX_LANGUAGE ] language TYPE 7 char [ MAX_LANGUAGE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_LANGUAGE ] LEAF_NODE 9 [ FIELD 9 MAX_LANGUAGE LEAF_NODE 10 MAX_LANGUAGE LEAF_NODE 9 ] NAME 7 language LEAF_NODE 8 language LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] zonetag ; VAR_DECL 6 char [ 80 ] zonetag TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 zonetag LEAF_NODE 8 zonetag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 20 ] uniqueid ; VAR_DECL 6 char [ 20 ] uniqueid TYPE 7 char [ 20 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 20 ] LEAF_NODE 9 [ FIELD 9 20 LEAF_NODE 10 20 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] exit ; VAR_DECL 6 char [ 80 ] exit TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] attachfmt ; VAR_DECL 6 char [ 80 ] attachfmt TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 attachfmt LEAF_NODE 8 attachfmt LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] etemplate ; VAR_DECL 6 char [ 80 ] etemplate TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 etemplate LEAF_NODE 8 etemplate LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] ptemplate ; VAR_DECL 6 char [ 80 ] ptemplate TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 ptemplate LEAF_NODE 8 ptemplate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_variable * chanvars ; VAR_DECL 6 struct ast_variable * chanvars TYPE 7 struct ast_variable * TYPE_NAME 8 struct ast_variable LEAF_NODE 9 struct LEAF_NODE 9 ast_variable POINTER 8 * LEAF_NODE 9 * NAME 7 chanvars LEAF_NODE 8 chanvars LEAF_NODE 6 ; SIMPLE_DECL 5 double volgain ; VAR_DECL 6 double volgain TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 volgain LEAF_NODE 8 volgain LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 minivm_account LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static char * LEAF_NODE 3 static TYPE_NAME 3 char LEAF_NODE 4 char LEAF_NODE 3 * FUNCTION_NAME 2 complete_minivm_show_users LEAF_NODE 3 complete_minivm_show_users PARAMETER_LIST 2 ( const char * line , const char * word , int pos , int state ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * line TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 line LEAF_NODE 5 line LEAF_NODE 3 , PARAMETER_DECL 3 const char * word TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 word LEAF_NODE 5 word LEAF_NODE 3 , PARAMETER_DECL 3 int pos TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 pos LEAF_NODE 5 pos LEAF_NODE 3 , PARAMETER_DECL 3 int state TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 state LEAF_NODE 5 state LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int which ; which = 0 ; VAR_DECL 4 int which ; which = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 which LEAF_NODE 6 which LEAF_NODE 5 ; INIT 5 which = 0 ASSIGN 6 which = 0 LVAL 7 which NAME 8 which LEAF_NODE 9 which ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int wordlen ; VAR_DECL 4 int wordlen TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 wordlen LEAF_NODE 6 wordlen LEAF_NODE 4 ; SIMPLE_DECL 3 struct minivm_account * vmu ; VAR_DECL 4 struct minivm_account * vmu TYPE 5 struct minivm_account * TYPE_NAME 6 struct minivm_account LEAF_NODE 7 struct LEAF_NODE 7 minivm_account POINTER 6 * LEAF_NODE 7 * NAME 5 vmu LEAF_NODE 6 vmu LEAF_NODE 4 ; SIMPLE_DECL 3 const char * domain ; domain = \"\" ; VAR_DECL 4 const char * domain ; domain = \"\" TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 domain LEAF_NODE 6 domain LEAF_NODE 5 ; INIT 5 domain = \"\" ASSIGN 6 domain = \"\" LVAL 7 domain NAME 8 domain LEAF_NODE 9 domain ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 \"\" FIELD 8 \"\" LEAF_NODE 9 \"\" LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pos > 4 EXPR 5 pos > 4 FIELD 6 pos LEAF_NODE 7 pos REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 4 LEAF_NODE 7 4 LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return NULL ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 NULL EXPR 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 6 ; EXPR_STATEMENT 3 wordlen = strlen ( word ) ; EXPR 4 wordlen = strlen ( word ) ASSIGN 5 wordlen = strlen ( word ) LVAL 6 wordlen FIELD 7 wordlen LEAF_NODE 8 wordlen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strlen ( word ) FUNCTION_CALL 7 strlen ( word ) CALLEE 8 strlen LEAF_NODE 9 strlen LEAF_NODE 8 ( ARGUMENT 8 word FIELD 9 word LEAF_NODE 10 word LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 AST_LIST_TRAVERSE LEAF_NODE 3 ( LEAF_NODE 3 & LEAF_NODE 3 minivm_accounts LEAF_NODE 3 , LEAF_NODE 3 vmu LEAF_NODE 3 , LEAF_NODE 3 list LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 ! strncasecmp ( word , vmu -> domain , wordlen ) EXPR 6 ! strncasecmp ( word , vmu -> domain , wordlen ) UNARY_EXPR 7 ! strncasecmp ( word , vmu -> domain , wordlen ) UNARY_OPERATOR 8 ! LEAF_NODE 9 ! FUNCTION_CALL 8 strncasecmp ( word , vmu -> domain , wordlen ) CALLEE 9 strncasecmp LEAF_NODE 10 strncasecmp LEAF_NODE 9 ( ARGUMENT 9 word FIELD 10 word LEAF_NODE 11 word LEAF_NODE 9 , ARGUMENT 9 vmu -> domain FIELD 10 vmu -> domain LEAF_NODE 11 vmu LEAF_NODE 11 -> LEAF_NODE 11 domain LEAF_NODE 9 , ARGUMENT 9 wordlen FIELD 10 wordlen LEAF_NODE 11 wordlen LEAF_NODE 9 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 SELECTION 7 KEYWORD 8 if LEAF_NODE 9 if LEAF_NODE 8 ( CONDITION 8 domain && strcmp ( domain , vmu -> domain ) && ++ which > state EXPR 9 domain && strcmp ( domain , vmu -> domain ) && ++ which > state AND 10 domain && strcmp ( domain , vmu -> domain ) && ++ which > state EXPR 11 domain FIELD 12 domain LEAF_NODE 13 domain LEAF_NODE 11 && EXPR 11 strcmp ( domain , vmu -> domain ) && ++ which > state AND 12 strcmp ( domain , vmu -> domain ) && ++ which > state EXPR 13 strcmp ( domain , vmu -> domain ) FUNCTION_CALL 14 strcmp ( domain , vmu -> domain ) CALLEE 15 strcmp LEAF_NODE 16 strcmp LEAF_NODE 15 ( ARGUMENT 15 domain FIELD 16 domain LEAF_NODE 17 domain LEAF_NODE 15 , ARGUMENT 15 vmu -> domain FIELD 16 vmu -> domain LEAF_NODE 17 vmu LEAF_NODE 17 -> LEAF_NODE 17 domain LEAF_NODE 15 ) LEAF_NODE 13 && EXPR 13 ++ which > state LEAF_NODE 14 ++ FIELD 14 which LEAF_NODE 15 which REL_OPERATOR 14 > LEAF_NODE 15 > FIELD 14 state LEAF_NODE 15 state LEAF_NODE 8 ) STATEMENTS 8 JUMP_STATEMENT 9 return ast_strdup ( vmu -> domain ) ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 ast_strdup ( vmu -> domain ) EXPR 11 ast_strdup ( vmu -> domain ) FUNCTION_CALL 12 ast_strdup ( vmu -> domain ) CALLEE 13 ast_strdup LEAF_NODE 14 ast_strdup LEAF_NODE 13 ( ARGUMENT 13 vmu -> domain FIELD 14 vmu -> domain LEAF_NODE 15 vmu LEAF_NODE 15 -> LEAF_NODE 15 domain LEAF_NODE 13 ) LEAF_NODE 10 ; EXPR_STATEMENT 7 domain = vmu -> domain ; EXPR 8 domain = vmu -> domain ASSIGN 9 domain = vmu -> domain LVAL 10 domain FIELD 11 domain LEAF_NODE 12 domain ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 vmu -> domain FIELD 11 vmu -> domain LEAF_NODE 12 vmu LEAF_NODE 12 -> LEAF_NODE 12 domain LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 14, "project": "openssl_ast_vul_function_test_adv_24", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 pjsip_dialog * TYPE_NAME 3 pjsip_dialog LEAF_NODE 4 pjsip_dialog LEAF_NODE 3 * FUNCTION_NAME 2 ast_sip_create_dialog_uas LEAF_NODE 3 ast_sip_create_dialog_uas PARAMETER_LIST 2 ( const struct ast_sip_endpoint * endpoint , pjsip_rx_data * rdata , pj_status_t * status ) LEAF_NODE 3 ( PARAMETER_DECL 3 const struct ast_sip_endpoint * endpoint TYPE 4 const struct ast_sip_endpoint * TYPE_NAME 5 const struct ast_sip_endpoint LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 ast_sip_endpoint POINTER 5 * LEAF_NODE 6 * NAME 4 endpoint LEAF_NODE 5 endpoint LEAF_NODE 3 , PARAMETER_DECL 3 pjsip_rx_data * rdata TYPE 4 pjsip_rx_data * TYPE_NAME 5 pjsip_rx_data LEAF_NODE 6 pjsip_rx_data POINTER 5 * LEAF_NODE 6 * NAME 4 rdata LEAF_NODE 5 rdata LEAF_NODE 3 , PARAMETER_DECL 3 pj_status_t * status TYPE 4 pj_status_t * TYPE_NAME 5 pj_status_t LEAF_NODE 6 pj_status_t POINTER 5 * LEAF_NODE 6 * NAME 4 status LEAF_NODE 5 status LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 pjsip_dialog * dlg ; VAR_DECL 4 pjsip_dialog * dlg TYPE 5 pjsip_dialog * TYPE_NAME 6 pjsip_dialog LEAF_NODE 7 pjsip_dialog POINTER 6 * LEAF_NODE 7 * NAME 5 dlg LEAF_NODE 6 dlg LEAF_NODE 4 ; SIMPLE_DECL 3 pj_str_t contact ; VAR_DECL 4 pj_str_t contact TYPE 5 pj_str_t TYPE_NAME 6 pj_str_t LEAF_NODE 7 pj_str_t NAME 5 contact LEAF_NODE 6 contact LEAF_NODE 4 ; SIMPLE_DECL 3 pjsip_transport_type_e type ; type = rdata -> tp_info . transport -> key . type ; VAR_DECL 4 pjsip_transport_type_e type ; type = rdata -> tp_info . transport -> key . type TYPE 5 pjsip_transport_type_e TYPE_NAME 6 pjsip_transport_type_e LEAF_NODE 7 pjsip_transport_type_e NAME 5 type LEAF_NODE 6 type LEAF_NODE 5 ; INIT 5 type = rdata -> tp_info . transport -> key . type ASSIGN 6 type = rdata -> tp_info . transport -> key . type LVAL 7 type NAME 8 type LEAF_NODE 9 type ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 rdata -> tp_info . transport -> key . type FIELD 8 rdata -> tp_info . transport -> key . type LEAF_NODE 9 rdata LEAF_NODE 9 -> LEAF_NODE 9 tp_info LEAF_NODE 9 . LEAF_NODE 9 transport LEAF_NODE 9 -> LEAF_NODE 9 key LEAF_NODE 9 . LEAF_NODE 9 type LEAF_NODE 4 ; LEAF_NODE 3 pjsip_tpselector LEAF_NODE 3 selector LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 . LEAF_NODE 4 type LEAF_NODE 4 = LEAF_NODE 4 PJSIP_TPSELECTOR_NONE LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SIMPLE_DECL 3 pjsip_transport * transport ; VAR_DECL 4 pjsip_transport * transport TYPE 5 pjsip_transport * TYPE_NAME 6 pjsip_transport LEAF_NODE 7 pjsip_transport POINTER 6 * LEAF_NODE 7 * NAME 5 transport LEAF_NODE 6 transport LEAF_NODE 4 ; SIMPLE_DECL 3 pjsip_contact_hdr * contact_hdr ; VAR_DECL 4 pjsip_contact_hdr * contact_hdr TYPE 5 pjsip_contact_hdr * TYPE_NAME 6 pjsip_contact_hdr LEAF_NODE 7 pjsip_contact_hdr POINTER 6 * LEAF_NODE 7 * NAME 5 contact_hdr LEAF_NODE 6 contact_hdr LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_assert ( status != NULL ) ; EXPR 4 ast_assert ( status != NULL ) FUNCTION_CALL 5 ast_assert ( status != NULL ) CALLEE 6 ast_assert LEAF_NODE 7 ast_assert LEAF_NODE 6 ( ARGUMENT 6 status != NULL FIELD 7 status LEAF_NODE 8 status EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 contact_hdr = pjsip_msg_find_hdr ( rdata -> msg_info . msg , PJSIP_H_CONTACT , NULL ) ; EXPR 4 contact_hdr = pjsip_msg_find_hdr ( rdata -> msg_info . msg , PJSIP_H_CONTACT , NULL ) ASSIGN 5 contact_hdr = pjsip_msg_find_hdr ( rdata -> msg_info . msg , PJSIP_H_CONTACT , NULL ) LVAL 6 contact_hdr FIELD 7 contact_hdr LEAF_NODE 8 contact_hdr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pjsip_msg_find_hdr ( rdata -> msg_info . msg , PJSIP_H_CONTACT , NULL ) FUNCTION_CALL 7 pjsip_msg_find_hdr ( rdata -> msg_info . msg , PJSIP_H_CONTACT , NULL ) CALLEE 8 pjsip_msg_find_hdr LEAF_NODE 9 pjsip_msg_find_hdr LEAF_NODE 8 ( ARGUMENT 8 rdata -> msg_info . msg FIELD 9 rdata -> msg_info . msg LEAF_NODE 10 rdata LEAF_NODE 10 -> LEAF_NODE 10 msg_info LEAF_NODE 10 . LEAF_NODE 10 msg LEAF_NODE 8 , ARGUMENT 8 PJSIP_H_CONTACT FIELD 9 PJSIP_H_CONTACT LEAF_NODE 10 PJSIP_H_CONTACT LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_sip_set_tpselector_from_ep_or_uri ( endpoint , pjsip_uri_get_uri ( contact_hdr -> uri ) , & selector ) EXPR 5 ast_sip_set_tpselector_from_ep_or_uri ( endpoint , pjsip_uri_get_uri ( contact_hdr -> uri ) , & selector ) FUNCTION_CALL 6 ast_sip_set_tpselector_from_ep_or_uri ( endpoint , pjsip_uri_get_uri ( contact_hdr -> uri ) , & selector ) CALLEE 7 ast_sip_set_tpselector_from_ep_or_uri LEAF_NODE 8 ast_sip_set_tpselector_from_ep_or_uri LEAF_NODE 7 ( ARGUMENT 7 endpoint FIELD 8 endpoint LEAF_NODE 9 endpoint LEAF_NODE 7 , ARGUMENT 7 pjsip_uri_get_uri ( contact_hdr -> uri ) FUNCTION_CALL 8 pjsip_uri_get_uri ( contact_hdr -> uri ) CALLEE 9 pjsip_uri_get_uri LEAF_NODE 10 pjsip_uri_get_uri LEAF_NODE 9 ( ARGUMENT 9 contact_hdr -> uri FIELD 10 contact_hdr -> uri LEAF_NODE 11 contact_hdr LEAF_NODE 11 -> LEAF_NODE 11 uri LEAF_NODE 9 ) LEAF_NODE 7 , ARGUMENT 7 & selector UNARY_EXPR 8 & selector UNARY_OPERATOR 9 & LEAF_NODE 10 & FIELD 9 selector LEAF_NODE 10 selector LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 transport = rdata -> tp_info . transport ; EXPR 4 transport = rdata -> tp_info . transport ASSIGN 5 transport = rdata -> tp_info . transport LVAL 6 transport FIELD 7 transport LEAF_NODE 8 transport ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 rdata -> tp_info . transport FIELD 7 rdata -> tp_info . transport LEAF_NODE 8 rdata LEAF_NODE 8 -> LEAF_NODE 8 tp_info LEAF_NODE 8 . LEAF_NODE 8 transport LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 selector . type == PJSIP_TPSELECTOR_TRANSPORT EXPR 5 selector . type == PJSIP_TPSELECTOR_TRANSPORT FIELD 6 selector . type LEAF_NODE 7 selector LEAF_NODE 7 . LEAF_NODE 7 type EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 PJSIP_TPSELECTOR_TRANSPORT LEAF_NODE 7 PJSIP_TPSELECTOR_TRANSPORT LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 transport = selector . u . transport ; EXPR 7 transport = selector . u . transport ASSIGN 8 transport = selector . u . transport LVAL 9 transport FIELD 10 transport LEAF_NODE 11 transport ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 selector . u . transport FIELD 10 selector . u . transport LEAF_NODE 11 selector LEAF_NODE 11 . LEAF_NODE 11 u LEAF_NODE 11 . LEAF_NODE 11 transport LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 type = transport -> key . type ; EXPR 4 type = transport -> key . type ASSIGN 5 type = transport -> key . type LVAL 6 type FIELD 7 type LEAF_NODE 8 type ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 transport -> key . type FIELD 7 transport -> key . type LEAF_NODE 8 transport LEAF_NODE 8 -> LEAF_NODE 8 key LEAF_NODE 8 . LEAF_NODE 8 type LEAF_NODE 4 ; EXPR_STATEMENT 3 contact . ptr = pj_pool_alloc ( rdata -> tp_info . pool , PJSIP_MAX_URL_SIZE ) ; EXPR 4 contact . ptr = pj_pool_alloc ( rdata -> tp_info . pool , PJSIP_MAX_URL_SIZE ) ASSIGN 5 contact . ptr = pj_pool_alloc ( rdata -> tp_info . pool , PJSIP_MAX_URL_SIZE ) LVAL 6 contact . ptr FIELD 7 contact . ptr LEAF_NODE 8 contact LEAF_NODE 8 . LEAF_NODE 8 ptr ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pj_pool_alloc ( rdata -> tp_info . pool , PJSIP_MAX_URL_SIZE ) FUNCTION_CALL 7 pj_pool_alloc ( rdata -> tp_info . pool , PJSIP_MAX_URL_SIZE ) CALLEE 8 pj_pool_alloc LEAF_NODE 9 pj_pool_alloc LEAF_NODE 8 ( ARGUMENT 8 rdata -> tp_info . pool FIELD 9 rdata -> tp_info . pool LEAF_NODE 10 rdata LEAF_NODE 10 -> LEAF_NODE 10 tp_info LEAF_NODE 10 . LEAF_NODE 10 pool LEAF_NODE 8 , ARGUMENT 8 PJSIP_MAX_URL_SIZE FIELD 9 PJSIP_MAX_URL_SIZE LEAF_NODE 10 PJSIP_MAX_URL_SIZE LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 contact . slen = pj_ansi_snprintf ( contact . ptr , PJSIP_MAX_URL_SIZE , \"<%s:%s%.*s%s:%d%s%s>\" , uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" , ( int ) transport -> local_name . host . slen , transport -> local_name . host . ptr , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" , transport -> local_name . port , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" ) ; EXPR 4 contact . slen = pj_ansi_snprintf ( contact . ptr , PJSIP_MAX_URL_SIZE , \"<%s:%s%.*s%s:%d%s%s>\" , uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" , ( int ) transport -> local_name . host . slen , transport -> local_name . host . ptr , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" , transport -> local_name . port , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" ) ASSIGN 5 contact . slen = pj_ansi_snprintf ( contact . ptr , PJSIP_MAX_URL_SIZE , \"<%s:%s%.*s%s:%d%s%s>\" , uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" , ( int ) transport -> local_name . host . slen , transport -> local_name . host . ptr , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" , transport -> local_name . port , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" ) LVAL 6 contact . slen FIELD 7 contact . slen LEAF_NODE 8 contact LEAF_NODE 8 . LEAF_NODE 8 slen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pj_ansi_snprintf ( contact . ptr , PJSIP_MAX_URL_SIZE , \"<%s:%s%.*s%s:%d%s%s>\" , uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" , ( int ) transport -> local_name . host . slen , transport -> local_name . host . ptr , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" , transport -> local_name . port , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" ) FUNCTION_CALL 7 pj_ansi_snprintf ( contact . ptr , PJSIP_MAX_URL_SIZE , \"<%s:%s%.*s%s:%d%s%s>\" , uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" , ( int ) transport -> local_name . host . slen , transport -> local_name . host . ptr , ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" , transport -> local_name . port , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" , ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" ) CALLEE 8 pj_ansi_snprintf LEAF_NODE 9 pj_ansi_snprintf LEAF_NODE 8 ( ARGUMENT 8 contact . ptr FIELD 9 contact . ptr LEAF_NODE 10 contact LEAF_NODE 10 . LEAF_NODE 10 ptr LEAF_NODE 8 , ARGUMENT 8 PJSIP_MAX_URL_SIZE FIELD 9 PJSIP_MAX_URL_SIZE LEAF_NODE 10 PJSIP_MAX_URL_SIZE LEAF_NODE 8 , ARGUMENT 8 \"<%s:%s%.*s%s:%d%s%s>\" FIELD 9 \"<%s:%s%.*s%s:%d%s%s>\" LEAF_NODE 10 \"<%s:%s%.*s%s:%d%s%s>\" LEAF_NODE 8 , ARGUMENT 8 uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" COND_EXPR 9 uas_use_sips_contact ( rdata ) ? \"sips\" : \"sip\" CONDITION 10 uas_use_sips_contact ( rdata ) FUNCTION_CALL 11 uas_use_sips_contact ( rdata ) CALLEE 12 uas_use_sips_contact LEAF_NODE 13 uas_use_sips_contact LEAF_NODE 12 ( ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 ) LEAF_NODE 10 ? EXPR 10 \"sips\" FIELD 11 \"sips\" LEAF_NODE 12 \"sips\" LEAF_NODE 10 : FIELD 10 \"sip\" LEAF_NODE 11 \"sip\" LEAF_NODE 8 , ARGUMENT 8 ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" COND_EXPR 9 ( type & PJSIP_TRANSPORT_IPV6 ) ? \"[\" : \"\" CONDITION 10 ( type & PJSIP_TRANSPORT_IPV6 ) LEAF_NODE 11 ( FIELD 11 type LEAF_NODE 12 type LEAF_NODE 11 & FIELD 11 PJSIP_TRANSPORT_IPV6 LEAF_NODE 12 PJSIP_TRANSPORT_IPV6 LEAF_NODE 11 ) LEAF_NODE 10 ? EXPR 10 \"[\" FIELD 11 \"[\" LEAF_NODE 12 \"[\" LEAF_NODE 10 : FIELD 10 \"\" LEAF_NODE 11 \"\" LEAF_NODE 8 , ARGUMENT 8 ( int ) transport -> local_name . host . slen LEAF_NODE 9 ( TYPE_NAME 9 int LEAF_NODE 10 int LEAF_NODE 9 ) FIELD 9 transport -> local_name . host . slen LEAF_NODE 10 transport LEAF_NODE 10 -> LEAF_NODE 10 local_name LEAF_NODE 10 . LEAF_NODE 10 host LEAF_NODE 10 . LEAF_NODE 10 slen LEAF_NODE 8 , ARGUMENT 8 transport -> local_name . host . ptr FIELD 9 transport -> local_name . host . ptr LEAF_NODE 10 transport LEAF_NODE 10 -> LEAF_NODE 10 local_name LEAF_NODE 10 . LEAF_NODE 10 host LEAF_NODE 10 . LEAF_NODE 10 ptr LEAF_NODE 8 , ARGUMENT 8 ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" COND_EXPR 9 ( type & PJSIP_TRANSPORT_IPV6 ) ? \"]\" : \"\" CONDITION 10 ( type & PJSIP_TRANSPORT_IPV6 ) LEAF_NODE 11 ( FIELD 11 type LEAF_NODE 12 type LEAF_NODE 11 & FIELD 11 PJSIP_TRANSPORT_IPV6 LEAF_NODE 12 PJSIP_TRANSPORT_IPV6 LEAF_NODE 11 ) LEAF_NODE 10 ? EXPR 10 \"]\" FIELD 11 \"]\" LEAF_NODE 12 \"]\" LEAF_NODE 10 : FIELD 10 \"\" LEAF_NODE 11 \"\" LEAF_NODE 8 , ARGUMENT 8 transport -> local_name . port FIELD 9 transport -> local_name . port LEAF_NODE 10 transport LEAF_NODE 10 -> LEAF_NODE 10 local_name LEAF_NODE 10 . LEAF_NODE 10 port LEAF_NODE 8 , ARGUMENT 8 ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" COND_EXPR 9 ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? \";transport=\" : \"\" CONDITION 10 ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) LEAF_NODE 11 ( AND 11 type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 EXPR 12 type != PJSIP_TRANSPORT_UDP FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 PJSIP_TRANSPORT_UDP LEAF_NODE 14 PJSIP_TRANSPORT_UDP LEAF_NODE 12 && EXPR 12 type != PJSIP_TRANSPORT_UDP6 FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 PJSIP_TRANSPORT_UDP6 LEAF_NODE 14 PJSIP_TRANSPORT_UDP6 LEAF_NODE 11 ) LEAF_NODE 10 ? EXPR 10 \";transport=\" FIELD 11 \";transport=\" LEAF_NODE 12 \";transport=\" LEAF_NODE 10 : FIELD 10 \"\" LEAF_NODE 11 \"\" LEAF_NODE 8 , ARGUMENT 8 ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" COND_EXPR 9 ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) ? pjsip_transport_get_type_name ( type ) : \"\" CONDITION 10 ( type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 ) LEAF_NODE 11 ( AND 11 type != PJSIP_TRANSPORT_UDP && type != PJSIP_TRANSPORT_UDP6 EXPR 12 type != PJSIP_TRANSPORT_UDP FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 PJSIP_TRANSPORT_UDP LEAF_NODE 14 PJSIP_TRANSPORT_UDP LEAF_NODE 12 && EXPR 12 type != PJSIP_TRANSPORT_UDP6 FIELD 13 type LEAF_NODE 14 type EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 PJSIP_TRANSPORT_UDP6 LEAF_NODE 14 PJSIP_TRANSPORT_UDP6 LEAF_NODE 11 ) LEAF_NODE 10 ? EXPR 10 pjsip_transport_get_type_name ( type ) FUNCTION_CALL 11 pjsip_transport_get_type_name ( type ) CALLEE 12 pjsip_transport_get_type_name LEAF_NODE 13 pjsip_transport_get_type_name LEAF_NODE 12 ( ARGUMENT 12 type FIELD 13 type LEAF_NODE 14 type LEAF_NODE 12 ) LEAF_NODE 10 : FIELD 10 \"\" LEAF_NODE 11 \"\" LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 * status = pjsip_dlg_create_uas_and_inc_lock ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) ; EXPR 4 * status = pjsip_dlg_create_uas_and_inc_lock ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) ASSIGN 5 * status = pjsip_dlg_create_uas_and_inc_lock ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) LVAL 6 * status UNARY_EXPR 7 * status UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 status LEAF_NODE 9 status ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pjsip_dlg_create_uas_and_inc_lock ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) FUNCTION_CALL 7 pjsip_dlg_create_uas_and_inc_lock ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) CALLEE 8 pjsip_dlg_create_uas_and_inc_lock LEAF_NODE 9 pjsip_dlg_create_uas_and_inc_lock LEAF_NODE 8 ( ARGUMENT 8 pjsip_ua_instance ( ) FUNCTION_CALL 9 pjsip_ua_instance ( ) CALLEE 10 pjsip_ua_instance LEAF_NODE 11 pjsip_ua_instance LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 rdata FIELD 9 rdata LEAF_NODE 10 rdata LEAF_NODE 8 , ARGUMENT 8 & contact UNARY_EXPR 9 & contact UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 contact LEAF_NODE 11 contact LEAF_NODE 8 , ARGUMENT 8 & dlg UNARY_EXPR 9 & dlg UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 dlg LEAF_NODE 11 dlg LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 * status = pjsip_dlg_create_uas ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) ; EXPR 4 * status = pjsip_dlg_create_uas ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) ASSIGN 5 * status = pjsip_dlg_create_uas ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) LVAL 6 * status UNARY_EXPR 7 * status UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 status LEAF_NODE 9 status ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 pjsip_dlg_create_uas ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) FUNCTION_CALL 7 pjsip_dlg_create_uas ( pjsip_ua_instance ( ) , rdata , & contact , & dlg ) CALLEE 8 pjsip_dlg_create_uas LEAF_NODE 9 pjsip_dlg_create_uas LEAF_NODE 8 ( ARGUMENT 8 pjsip_ua_instance ( ) FUNCTION_CALL 9 pjsip_ua_instance ( ) CALLEE 10 pjsip_ua_instance LEAF_NODE 11 pjsip_ua_instance LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 rdata FIELD 9 rdata LEAF_NODE 10 rdata LEAF_NODE 8 , ARGUMENT 8 & contact UNARY_EXPR 9 & contact UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 contact LEAF_NODE 11 contact LEAF_NODE 8 , ARGUMENT 8 & dlg UNARY_EXPR 9 & dlg UNARY_OPERATOR 10 & LEAF_NODE 11 & FIELD 10 dlg LEAF_NODE 11 dlg LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 * status != PJ_SUCCESS EXPR 5 * status != PJ_SUCCESS UNARY_EXPR 6 * status UNARY_OPERATOR 7 * LEAF_NODE 8 * FIELD 7 status LEAF_NODE 8 status EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 PJ_SUCCESS LEAF_NODE 7 PJ_SUCCESS LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char [ PJ_ERR_MSG_SIZE ] err ; VAR_DECL 7 char [ PJ_ERR_MSG_SIZE ] err TYPE 8 char [ PJ_ERR_MSG_SIZE ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ PJ_ERR_MSG_SIZE ] LEAF_NODE 10 [ FIELD 10 PJ_ERR_MSG_SIZE LEAF_NODE 11 PJ_ERR_MSG_SIZE LEAF_NODE 10 ] NAME 8 err LEAF_NODE 9 err LEAF_NODE 7 ; EXPR_STATEMENT 6 pj_strerror ( * status , err , sizeof ( err ) ) ; EXPR 7 pj_strerror ( * status , err , sizeof ( err ) ) FUNCTION_CALL 8 pj_strerror ( * status , err , sizeof ( err ) ) CALLEE 9 pj_strerror LEAF_NODE 10 pj_strerror LEAF_NODE 9 ( ARGUMENT 9 * status UNARY_EXPR 10 * status UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 status LEAF_NODE 12 status LEAF_NODE 9 , ARGUMENT 9 err FIELD 10 err LEAF_NODE 11 err LEAF_NODE 9 , ARGUMENT 9 sizeof ( err ) FUNCTION_CALL 10 sizeof ( err ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 err FIELD 12 err LEAF_NODE 13 err LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_log ( LOG_ERROR , \"Could not create dialog with endpoint %s. %s\\n\" , ast_sorcery_object_get_id ( endpoint ) , err ) ; EXPR 7 ast_log ( LOG_ERROR , \"Could not create dialog with endpoint %s. %s\\n\" , ast_sorcery_object_get_id ( endpoint ) , err ) FUNCTION_CALL 8 ast_log ( LOG_ERROR , \"Could not create dialog with endpoint %s. %s\\n\" , ast_sorcery_object_get_id ( endpoint ) , err ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_ERROR FIELD 10 LOG_ERROR LEAF_NODE 11 LOG_ERROR LEAF_NODE 9 , ARGUMENT 9 \"Could not create dialog with endpoint %s. %s\\n\" FIELD 10 \"Could not create dialog with endpoint %s. %s\\n\" LEAF_NODE 11 \"Could not create dialog with endpoint %s. %s\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_sorcery_object_get_id ( endpoint ) FUNCTION_CALL 10 ast_sorcery_object_get_id ( endpoint ) CALLEE 11 ast_sorcery_object_get_id LEAF_NODE 12 ast_sorcery_object_get_id LEAF_NODE 11 ( ARGUMENT 11 endpoint FIELD 12 endpoint LEAF_NODE 13 endpoint LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 err FIELD 10 err LEAF_NODE 11 err LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 dlg -> sess_count ++ ; EXPR 4 dlg -> sess_count ++ FIELD 5 dlg -> sess_count ++ LEAF_NODE 6 dlg LEAF_NODE 6 -> LEAF_NODE 6 sess_count LEAF_NODE 6 ++ LEAF_NODE 4 ; EXPR_STATEMENT 3 pjsip_dlg_set_transport ( dlg , & selector ) ; EXPR 4 pjsip_dlg_set_transport ( dlg , & selector ) FUNCTION_CALL 5 pjsip_dlg_set_transport ( dlg , & selector ) CALLEE 6 pjsip_dlg_set_transport LEAF_NODE 7 pjsip_dlg_set_transport LEAF_NODE 6 ( ARGUMENT 6 dlg FIELD 7 dlg LEAF_NODE 8 dlg LEAF_NODE 6 , ARGUMENT 6 & selector UNARY_EXPR 7 & selector UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 selector LEAF_NODE 9 selector LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 dlg -> sess_count -- ; EXPR 4 dlg -> sess_count -- FIELD 5 dlg -> sess_count -- LEAF_NODE 6 dlg LEAF_NODE 6 -> LEAF_NODE 6 sess_count LEAF_NODE 6 -- LEAF_NODE 4 ; EXPR_STATEMENT 3 pjsip_dlg_dec_lock ( dlg ) ; EXPR 4 pjsip_dlg_dec_lock ( dlg ) FUNCTION_CALL 5 pjsip_dlg_dec_lock ( dlg ) CALLEE 6 pjsip_dlg_dec_lock LEAF_NODE 7 pjsip_dlg_dec_lock LEAF_NODE 6 ( ARGUMENT 6 dlg FIELD 7 dlg LEAF_NODE 8 dlg LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return dlg ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 dlg EXPR 5 dlg FIELD 6 dlg LEAF_NODE 7 dlg LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 15, "project": "openssl_ast_vul_function_test_adv_48", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static struct ast_conf_user * LEAF_NODE 3 static TYPE_NAME 3 struct ast_conf_user LEAF_NODE 4 struct LEAF_NODE 4 ast_conf_user LEAF_NODE 3 * FUNCTION_NAME 2 find_user LEAF_NODE 3 find_user PARAMETER_LIST 2 ( struct ast_conference * conf , const char * callerident ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_conference * conf TYPE 4 struct ast_conference * TYPE_NAME 5 struct ast_conference LEAF_NODE 6 struct LEAF_NODE 6 ast_conference POINTER 5 * LEAF_NODE 6 * NAME 4 conf LEAF_NODE 5 conf LEAF_NODE 3 , PARAMETER_DECL 3 const char * callerident TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 callerident LEAF_NODE 5 callerident LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_conf_user * user ; user = NULL ; VAR_DECL 4 struct ast_conf_user * user ; user = NULL TYPE 5 struct ast_conf_user * TYPE_NAME 6 struct ast_conf_user LEAF_NODE 7 struct LEAF_NODE 7 ast_conf_user POINTER 6 * LEAF_NODE 7 * NAME 5 user LEAF_NODE 6 user LEAF_NODE 5 ; INIT 5 user = NULL ASSIGN 6 user = NULL LVAL 7 user NAME 8 user LEAF_NODE 9 user ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int cid ; VAR_DECL 4 int cid TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 cid LEAF_NODE 6 cid LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf && callerident && sscanf ( callerident , \"%30d\" , & cid ) == 1 EXPR 5 conf && callerident && sscanf ( callerident , \"%30d\" , & cid ) == 1 AND 6 conf && callerident && sscanf ( callerident , \"%30d\" , & cid ) == 1 EXPR 7 conf FIELD 8 conf LEAF_NODE 9 conf LEAF_NODE 7 && EXPR 7 callerident && sscanf ( callerident , \"%30d\" , & cid ) == 1 AND 8 callerident && sscanf ( callerident , \"%30d\" , & cid ) == 1 EXPR 9 callerident FIELD 10 callerident LEAF_NODE 11 callerident LEAF_NODE 9 && EXPR 9 sscanf ( callerident , \"%30d\" , & cid ) == 1 FUNCTION_CALL 10 sscanf ( callerident , \"%30d\" , & cid ) CALLEE 11 sscanf LEAF_NODE 12 sscanf LEAF_NODE 11 ( ARGUMENT 11 callerident FIELD 12 callerident LEAF_NODE 13 callerident LEAF_NODE 11 , ARGUMENT 11 \"%30d\" FIELD 12 \"%30d\" LEAF_NODE 13 \"%30d\" LEAF_NODE 11 , ARGUMENT 11 & cid UNARY_EXPR 12 & cid UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 cid LEAF_NODE 14 cid LEAF_NODE 11 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 user = ao2_find ( conf -> usercontainer , & cid , 0 ) ; EXPR 7 user = ao2_find ( conf -> usercontainer , & cid , 0 ) ASSIGN 8 user = ao2_find ( conf -> usercontainer , & cid , 0 ) LVAL 9 user FIELD 10 user LEAF_NODE 11 user ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ao2_find ( conf -> usercontainer , & cid , 0 ) FUNCTION_CALL 10 ao2_find ( conf -> usercontainer , & cid , 0 ) CALLEE 11 ao2_find LEAF_NODE 12 ao2_find LEAF_NODE 11 ( ARGUMENT 11 conf -> usercontainer FIELD 12 conf -> usercontainer LEAF_NODE 13 conf LEAF_NODE 13 -> LEAF_NODE 13 usercontainer LEAF_NODE 11 , ARGUMENT 11 & cid UNARY_EXPR 12 & cid UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 cid LEAF_NODE 14 cid LEAF_NODE 11 , ARGUMENT 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return user ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 user EXPR 8 user FIELD 9 user LEAF_NODE 10 user LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 16, "project": "openssl_ast_vul_function_test_adv_14", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 aoc_e_event LEAF_NODE 3 aoc_e_event PARAMETER_LIST 2 ( const struct ast_aoc_decoded * decoded , struct ast_str * * msg ) LEAF_NODE 3 ( PARAMETER_DECL 3 const struct ast_aoc_decoded * decoded TYPE 4 const struct ast_aoc_decoded * TYPE_NAME 5 const struct ast_aoc_decoded LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 ast_aoc_decoded POINTER 5 * LEAF_NODE 6 * NAME 4 decoded LEAF_NODE 5 decoded LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_str * * msg TYPE 4 struct ast_str * * TYPE_NAME 5 struct ast_str LEAF_NODE 6 struct LEAF_NODE 6 ast_str POINTER 5 * * LEAF_NODE 6 * LEAF_NODE 6 * NAME 4 msg LEAF_NODE 5 msg LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const char * charge_str ; VAR_DECL 4 const char * charge_str TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 charge_str LEAF_NODE 6 charge_str LEAF_NODE 4 ; SIMPLE_DECL 3 int idx ; VAR_DECL 4 int idx TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 idx LEAF_NODE 6 idx LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 32 ] prefix ; VAR_DECL 4 char [ 32 ] prefix TYPE 5 char [ 32 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 32 ] LEAF_NODE 7 [ FIELD 7 32 LEAF_NODE 8 32 LEAF_NODE 7 ] NAME 5 prefix LEAF_NODE 6 prefix LEAF_NODE 4 ; EXPR_STATEMENT 3 charge_str = \"ChargingAssociation\" ; EXPR 4 charge_str = \"ChargingAssociation\" ASSIGN 5 charge_str = \"ChargingAssociation\" LVAL 6 charge_str FIELD 7 charge_str LEAF_NODE 8 charge_str ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 \"ChargingAssociation\" FIELD 7 \"ChargingAssociation\" LEAF_NODE 8 \"ChargingAssociation\" LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 decoded -> charging_association . charging_type EXPR 5 decoded -> charging_association . charging_type FIELD 6 decoded -> charging_association . charging_type LEAF_NODE 7 decoded LEAF_NODE 7 -> LEAF_NODE 7 charging_association LEAF_NODE 7 . LEAF_NODE 7 charging_type LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case AST_AOC_CHARGING_ASSOCIATION_NUMBER : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGING_ASSOCIATION_NUMBER LEAF_NODE 7 : EXPR_STATEMENT 6 snprintf ( prefix , sizeof ( prefix ) , \"%s/Number\" , charge_str ) ; EXPR 7 snprintf ( prefix , sizeof ( prefix ) , \"%s/Number\" , charge_str ) FUNCTION_CALL 8 snprintf ( prefix , sizeof ( prefix ) , \"%s/Number\" , charge_str ) CALLEE 9 snprintf LEAF_NODE 10 snprintf LEAF_NODE 9 ( ARGUMENT 9 prefix FIELD 10 prefix LEAF_NODE 11 prefix LEAF_NODE 9 , ARGUMENT 9 sizeof ( prefix ) FUNCTION_CALL 10 sizeof ( prefix ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 prefix FIELD 12 prefix LEAF_NODE 13 prefix LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 \"%s/Number\" FIELD 10 \"%s/Number\" LEAF_NODE 11 \"%s/Number\" LEAF_NODE 9 , ARGUMENT 9 charge_str FIELD 10 charge_str LEAF_NODE 11 charge_str LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_str_append ( msg , 0 , \"%s: %s\\r\\n\" , prefix , decoded -> charging_association . charge . number . number ) ; EXPR 7 ast_str_append ( msg , 0 , \"%s: %s\\r\\n\" , prefix , decoded -> charging_association . charge . number . number ) FUNCTION_CALL 8 ast_str_append ( msg , 0 , \"%s: %s\\r\\n\" , prefix , decoded -> charging_association . charge . number . number ) CALLEE 9 ast_str_append LEAF_NODE 10 ast_str_append LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 \"%s: %s\\r\\n\" FIELD 10 \"%s: %s\\r\\n\" LEAF_NODE 11 \"%s: %s\\r\\n\" LEAF_NODE 9 , ARGUMENT 9 prefix FIELD 10 prefix LEAF_NODE 11 prefix LEAF_NODE 9 , ARGUMENT 9 decoded -> charging_association . charge . number . number FIELD 10 decoded -> charging_association . charge . number . number LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 charging_association LEAF_NODE 11 . LEAF_NODE 11 charge LEAF_NODE 11 . LEAF_NODE 11 number LEAF_NODE 11 . LEAF_NODE 11 number LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_str_append ( msg , 0 , \"%s/Plan: %d\\r\\n\" , prefix , decoded -> charging_association . charge . number . plan ) ; EXPR 7 ast_str_append ( msg , 0 , \"%s/Plan: %d\\r\\n\" , prefix , decoded -> charging_association . charge . number . plan ) FUNCTION_CALL 8 ast_str_append ( msg , 0 , \"%s/Plan: %d\\r\\n\" , prefix , decoded -> charging_association . charge . number . plan ) CALLEE 9 ast_str_append LEAF_NODE 10 ast_str_append LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 \"%s/Plan: %d\\r\\n\" FIELD 10 \"%s/Plan: %d\\r\\n\" LEAF_NODE 11 \"%s/Plan: %d\\r\\n\" LEAF_NODE 9 , ARGUMENT 9 prefix FIELD 10 prefix LEAF_NODE 11 prefix LEAF_NODE 9 , ARGUMENT 9 decoded -> charging_association . charge . number . plan FIELD 10 decoded -> charging_association . charge . number . plan LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 charging_association LEAF_NODE 11 . LEAF_NODE 11 charge LEAF_NODE 11 . LEAF_NODE 11 number LEAF_NODE 11 . LEAF_NODE 11 plan LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case AST_AOC_CHARGING_ASSOCIATION_ID : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGING_ASSOCIATION_ID LEAF_NODE 7 : EXPR_STATEMENT 6 ast_str_append ( msg , 0 , \"%s/ID: %d\\r\\n\" , charge_str , decoded -> charging_association . charge . id ) ; EXPR 7 ast_str_append ( msg , 0 , \"%s/ID: %d\\r\\n\" , charge_str , decoded -> charging_association . charge . id ) FUNCTION_CALL 8 ast_str_append ( msg , 0 , \"%s/ID: %d\\r\\n\" , charge_str , decoded -> charging_association . charge . id ) CALLEE 9 ast_str_append LEAF_NODE 10 ast_str_append LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 \"%s/ID: %d\\r\\n\" FIELD 10 \"%s/ID: %d\\r\\n\" LEAF_NODE 11 \"%s/ID: %d\\r\\n\" LEAF_NODE 9 , ARGUMENT 9 charge_str FIELD 10 charge_str LEAF_NODE 11 charge_str LEAF_NODE 9 , ARGUMENT 9 decoded -> charging_association . charge . id FIELD 10 decoded -> charging_association . charge . id LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 charging_association LEAF_NODE 11 . LEAF_NODE 11 charge LEAF_NODE 11 . LEAF_NODE 11 id LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case AST_AOC_CHARGING_ASSOCIATION_NA : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGING_ASSOCIATION_NA LEAF_NODE 7 : LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 charge_str = aoc_charge_type_str ( decoded -> charge_type ) ; EXPR 4 charge_str = aoc_charge_type_str ( decoded -> charge_type ) ASSIGN 5 charge_str = aoc_charge_type_str ( decoded -> charge_type ) LVAL 6 charge_str FIELD 7 charge_str LEAF_NODE 8 charge_str ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 aoc_charge_type_str ( decoded -> charge_type ) FUNCTION_CALL 7 aoc_charge_type_str ( decoded -> charge_type ) CALLEE 8 aoc_charge_type_str LEAF_NODE 9 aoc_charge_type_str LEAF_NODE 8 ( ARGUMENT 8 decoded -> charge_type FIELD 9 decoded -> charge_type LEAF_NODE 10 decoded LEAF_NODE 10 -> LEAF_NODE 10 charge_type LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_str_append ( msg , 0 , \"Type: %s\\r\\n\" , charge_str ) ; EXPR 4 ast_str_append ( msg , 0 , \"Type: %s\\r\\n\" , charge_str ) FUNCTION_CALL 5 ast_str_append ( msg , 0 , \"Type: %s\\r\\n\" , charge_str ) CALLEE 6 ast_str_append LEAF_NODE 7 ast_str_append LEAF_NODE 6 ( ARGUMENT 6 msg FIELD 7 msg LEAF_NODE 8 msg LEAF_NODE 6 , ARGUMENT 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 6 , ARGUMENT 6 \"Type: %s\\r\\n\" FIELD 7 \"Type: %s\\r\\n\" LEAF_NODE 8 \"Type: %s\\r\\n\" LEAF_NODE 6 , ARGUMENT 6 charge_str FIELD 7 charge_str LEAF_NODE 8 charge_str LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 decoded -> charge_type EXPR 5 decoded -> charge_type FIELD 6 decoded -> charge_type LEAF_NODE 7 decoded LEAF_NODE 7 -> LEAF_NODE 7 charge_type LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case AST_AOC_CHARGE_CURRENCY : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGE_CURRENCY LEAF_NODE 7 : LABEL 6 case AST_AOC_CHARGE_UNIT : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGE_UNIT LEAF_NODE 7 : EXPR_STATEMENT 6 ast_str_append ( msg , 0 , \"BillingID: %s\\r\\n\" , aoc_billingid_str ( decoded -> billing_id ) ) ; EXPR 7 ast_str_append ( msg , 0 , \"BillingID: %s\\r\\n\" , aoc_billingid_str ( decoded -> billing_id ) ) FUNCTION_CALL 8 ast_str_append ( msg , 0 , \"BillingID: %s\\r\\n\" , aoc_billingid_str ( decoded -> billing_id ) ) CALLEE 9 ast_str_append LEAF_NODE 10 ast_str_append LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 \"BillingID: %s\\r\\n\" FIELD 10 \"BillingID: %s\\r\\n\" LEAF_NODE 11 \"BillingID: %s\\r\\n\" LEAF_NODE 9 , ARGUMENT 9 aoc_billingid_str ( decoded -> billing_id ) FUNCTION_CALL 10 aoc_billingid_str ( decoded -> billing_id ) CALLEE 11 aoc_billingid_str LEAF_NODE 12 aoc_billingid_str LEAF_NODE 11 ( ARGUMENT 11 decoded -> billing_id FIELD 12 decoded -> billing_id LEAF_NODE 13 decoded LEAF_NODE 13 -> LEAF_NODE 13 billing_id LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 decoded -> charge_type EXPR 5 decoded -> charge_type FIELD 6 decoded -> charge_type LEAF_NODE 7 decoded LEAF_NODE 7 -> LEAF_NODE 7 charge_type LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case AST_AOC_CHARGE_CURRENCY : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGE_CURRENCY LEAF_NODE 7 : EXPR_STATEMENT 6 ast_str_append ( msg , 0 , \"%s: %s\\r\\n\" , charge_str , decoded -> currency_name ) ; EXPR 7 ast_str_append ( msg , 0 , \"%s: %s\\r\\n\" , charge_str , decoded -> currency_name ) FUNCTION_CALL 8 ast_str_append ( msg , 0 , \"%s: %s\\r\\n\" , charge_str , decoded -> currency_name ) CALLEE 9 ast_str_append LEAF_NODE 10 ast_str_append LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 \"%s: %s\\r\\n\" FIELD 10 \"%s: %s\\r\\n\" LEAF_NODE 11 \"%s: %s\\r\\n\" LEAF_NODE 9 , ARGUMENT 9 charge_str FIELD 10 charge_str LEAF_NODE 11 charge_str LEAF_NODE 9 , ARGUMENT 9 decoded -> currency_name FIELD 10 decoded -> currency_name LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 currency_name LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 aoc_amount_str ( msg , charge_str , decoded -> currency_amount , decoded -> multiplier ) ; EXPR 7 aoc_amount_str ( msg , charge_str , decoded -> currency_amount , decoded -> multiplier ) FUNCTION_CALL 8 aoc_amount_str ( msg , charge_str , decoded -> currency_amount , decoded -> multiplier ) CALLEE 9 aoc_amount_str LEAF_NODE 10 aoc_amount_str LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 charge_str FIELD 10 charge_str LEAF_NODE 11 charge_str LEAF_NODE 9 , ARGUMENT 9 decoded -> currency_amount FIELD 10 decoded -> currency_amount LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 currency_amount LEAF_NODE 9 , ARGUMENT 9 decoded -> multiplier FIELD 10 decoded -> multiplier LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 multiplier LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case AST_AOC_CHARGE_UNIT : LEAF_NODE 7 case LEAF_NODE 7 AST_AOC_CHARGE_UNIT LEAF_NODE 7 : EXPR_STATEMENT 6 ast_str_append ( msg , 0 , \"%s/NumberItems: %d\\r\\n\" , charge_str , decoded -> unit_count ) ; EXPR 7 ast_str_append ( msg , 0 , \"%s/NumberItems: %d\\r\\n\" , charge_str , decoded -> unit_count ) FUNCTION_CALL 8 ast_str_append ( msg , 0 , \"%s/NumberItems: %d\\r\\n\" , charge_str , decoded -> unit_count ) CALLEE 9 ast_str_append LEAF_NODE 10 ast_str_append LEAF_NODE 9 ( ARGUMENT 9 msg FIELD 10 msg LEAF_NODE 11 msg LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 , ARGUMENT 9 \"%s/NumberItems: %d\\r\\n\" FIELD 10 \"%s/NumberItems: %d\\r\\n\" LEAF_NODE 11 \"%s/NumberItems: %d\\r\\n\" LEAF_NODE 9 , ARGUMENT 9 charge_str FIELD 10 charge_str LEAF_NODE 11 charge_str LEAF_NODE 9 , ARGUMENT 9 decoded -> unit_count FIELD 10 decoded -> unit_count LEAF_NODE 11 decoded LEAF_NODE 11 -> LEAF_NODE 11 unit_count LEAF_NODE 9 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 idx = 0 ; EXPR 8 idx = 0 ASSIGN 9 idx = 0 LVAL 10 idx FIELD 11 idx LEAF_NODE 12 idx ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 8 ; CONDITION 7 idx < decoded -> unit_count EXPR 8 idx < decoded -> unit_count FIELD 9 idx LEAF_NODE 10 idx REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 decoded -> unit_count LEAF_NODE 10 decoded LEAF_NODE 10 -> LEAF_NODE 10 unit_count LEAF_NODE 7 ; FOR_EXPR 7 ++ idx EXPR 8 ++ idx LEAF_NODE 9 ++ FIELD 9 idx LEAF_NODE 10 idx LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 snprintf ( prefix , sizeof ( prefix ) , \"%s/Item(%d)\" , charge_str , idx ) ; EXPR 10 snprintf ( prefix , sizeof ( prefix ) , \"%s/Item(%d)\" , charge_str , idx ) FUNCTION_CALL 11 snprintf ( prefix , sizeof ( prefix ) , \"%s/Item(%d)\" , charge_str , idx ) CALLEE 12 snprintf LEAF_NODE 13 snprintf LEAF_NODE 12 ( ARGUMENT 12 prefix FIELD 13 prefix LEAF_NODE 14 prefix LEAF_NODE 12 , ARGUMENT 12 sizeof ( prefix ) FUNCTION_CALL 13 sizeof ( prefix ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 prefix FIELD 15 prefix LEAF_NODE 16 prefix LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 \"%s/Item(%d)\" FIELD 13 \"%s/Item(%d)\" LEAF_NODE 14 \"%s/Item(%d)\" LEAF_NODE 12 , ARGUMENT 12 charge_str FIELD 13 charge_str LEAF_NODE 14 charge_str LEAF_NODE 12 , ARGUMENT 12 idx FIELD 13 idx LEAF_NODE 14 idx LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 decoded -> unit_list [ idx ] . valid_amount EXPR 11 decoded -> unit_list [ idx ] . valid_amount FIELD 12 decoded -> unit_list [ idx ] . valid_amount LEAF_NODE 13 decoded LEAF_NODE 13 -> LEAF_NODE 13 unit_list LEAF_NODE 13 [ EXPR 13 idx FIELD 14 idx LEAF_NODE 15 idx LEAF_NODE 13 ] LEAF_NODE 13 . LEAF_NODE 13 valid_amount LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_str_append ( msg , 0 , \"%s/NumberOf: %u\\r\\n\" , prefix , decoded -> unit_list [ idx ] . amount ) ; EXPR 13 ast_str_append ( msg , 0 , \"%s/NumberOf: %u\\r\\n\" , prefix , decoded -> unit_list [ idx ] . amount ) FUNCTION_CALL 14 ast_str_append ( msg , 0 , \"%s/NumberOf: %u\\r\\n\" , prefix , decoded -> unit_list [ idx ] . amount ) CALLEE 15 ast_str_append LEAF_NODE 16 ast_str_append LEAF_NODE 15 ( ARGUMENT 15 msg FIELD 16 msg LEAF_NODE 17 msg LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 , ARGUMENT 15 \"%s/NumberOf: %u\\r\\n\" FIELD 16 \"%s/NumberOf: %u\\r\\n\" LEAF_NODE 17 \"%s/NumberOf: %u\\r\\n\" LEAF_NODE 15 , ARGUMENT 15 prefix FIELD 16 prefix LEAF_NODE 17 prefix LEAF_NODE 15 , ARGUMENT 15 decoded -> unit_list [ idx ] . amount FIELD 16 decoded -> unit_list [ idx ] . amount LEAF_NODE 17 decoded LEAF_NODE 17 -> LEAF_NODE 17 unit_list LEAF_NODE 17 [ EXPR 17 idx FIELD 18 idx LEAF_NODE 19 idx LEAF_NODE 17 ] LEAF_NODE 17 . LEAF_NODE 17 amount LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 decoded -> unit_list [ idx ] . valid_type EXPR 11 decoded -> unit_list [ idx ] . valid_type FIELD 12 decoded -> unit_list [ idx ] . valid_type LEAF_NODE 13 decoded LEAF_NODE 13 -> LEAF_NODE 13 unit_list LEAF_NODE 13 [ EXPR 13 idx FIELD 14 idx LEAF_NODE 15 idx LEAF_NODE 13 ] LEAF_NODE 13 . LEAF_NODE 13 valid_type LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_str_append ( msg , 0 , \"%s/TypeOf: %u\\r\\n\" , prefix , decoded -> unit_list [ idx ] . type ) ; EXPR 13 ast_str_append ( msg , 0 , \"%s/TypeOf: %u\\r\\n\" , prefix , decoded -> unit_list [ idx ] . type ) FUNCTION_CALL 14 ast_str_append ( msg , 0 , \"%s/TypeOf: %u\\r\\n\" , prefix , decoded -> unit_list [ idx ] . type ) CALLEE 15 ast_str_append LEAF_NODE 16 ast_str_append LEAF_NODE 15 ( ARGUMENT 15 msg FIELD 16 msg LEAF_NODE 17 msg LEAF_NODE 15 , ARGUMENT 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 15 , ARGUMENT 15 \"%s/TypeOf: %u\\r\\n\" FIELD 16 \"%s/TypeOf: %u\\r\\n\" LEAF_NODE 17 \"%s/TypeOf: %u\\r\\n\" LEAF_NODE 15 , ARGUMENT 15 prefix FIELD 16 prefix LEAF_NODE 17 prefix LEAF_NODE 15 , ARGUMENT 15 decoded -> unit_list [ idx ] . type FIELD 16 decoded -> unit_list [ idx ] . type LEAF_NODE 17 decoded LEAF_NODE 17 -> LEAF_NODE 17 unit_list LEAF_NODE 17 [ EXPR 17 idx FIELD 18 idx LEAF_NODE 19 idx LEAF_NODE 17 ] LEAF_NODE 17 . LEAF_NODE 17 type LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 17, "project": "openssl_ast_vul_function_test_adv_30", "target": 1}
{"func": "SIMPLE_DECL 1 struct adsi_funcs BASE_CLASSES { unsigned int version ; int ( * begin_download ) ( struct ast_channel * chan , char * service , unsigned char * fdn , unsigned char * sec , int version ) ; int ( * end_download ) ( struct ast_channel * chan ) ; int ( * channel_restore ) ( struct ast_channel * chan ) ; int ( * print ) ( struct ast_channel * chan , char * * lines , int * align , int voice ) ; int ( * load_session ) ( struct ast_channel * chan , unsigned char * app , int ver , int data ) ; int ( * unload_session ) ( struct ast_channel * chan ) ; int ( * transmit_message ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype ) ; int ( * transmit_message_full ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype , int dowait ) ; int ( * read_encoded_dtmf ) ( struct ast_channel * chan , unsigned char * buf , int maxlen ) ; int ( * connect_session ) ( unsigned char * buf , unsigned char * fdn , int ver ) ; int ( * query_cpeid ) ( unsigned char * buf ) ; int ( * query_cpeinfo ) ( unsigned char * buf ) ; int ( * get_cpeid ) ( struct ast_channel * chan , unsigned char * cpeid , int voice ) ; int ( * get_cpeinfo ) ( struct ast_channel * chan , int * width , int * height , int * buttons , int voice ) ; int ( * download_connect ) ( unsigned char * buf , char * service , unsigned char * fdn , unsigned char * sec , int ver ) ; int ( * disconnect_session ) ( unsigned char * buf ) ; int ( * download_disconnect ) ( unsigned char * buf ) ; int ( * data_mode ) ( unsigned char * buf ) ; int ( * clear_soft_keys ) ( unsigned char * buf ) ; int ( * clear_screen ) ( unsigned char * buf ) ; int ( * voice_mode ) ( unsigned char * buf , int when ) ; int ( * available ) ( struct ast_channel * chan ) ; int ( * display ) ( unsigned char * buf , int page , int line , int just , int wrap , char * col1 , char * col2 ) ; int ( * set_line ) ( unsigned char * buf , int page , int line ) ; int ( * load_soft_key ) ( unsigned char * buf , int key , const char * llabel , const char * slabel , char * ret , int data ) ; int ( * set_keys ) ( unsigned char * buf , unsigned char * keys ) ; int ( * input_control ) ( unsigned char * buf , int page , int line , int display , int format , int just ) ; int ( * input_format ) ( unsigned char * buf , int num , int dir , int wrap , char * format1 , char * format2 ) ; } ; CLASS_DEF 2 struct adsi_funcs BASE_CLASSES { unsigned int version ; int ( * begin_download ) ( struct ast_channel * chan , char * service , unsigned char * fdn , unsigned char * sec , int version ) ; int ( * end_download ) ( struct ast_channel * chan ) ; int ( * channel_restore ) ( struct ast_channel * chan ) ; int ( * print ) ( struct ast_channel * chan , char * * lines , int * align , int voice ) ; int ( * load_session ) ( struct ast_channel * chan , unsigned char * app , int ver , int data ) ; int ( * unload_session ) ( struct ast_channel * chan ) ; int ( * transmit_message ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype ) ; int ( * transmit_message_full ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype , int dowait ) ; int ( * read_encoded_dtmf ) ( struct ast_channel * chan , unsigned char * buf , int maxlen ) ; int ( * connect_session ) ( unsigned char * buf , unsigned char * fdn , int ver ) ; int ( * query_cpeid ) ( unsigned char * buf ) ; int ( * query_cpeinfo ) ( unsigned char * buf ) ; int ( * get_cpeid ) ( struct ast_channel * chan , unsigned char * cpeid , int voice ) ; int ( * get_cpeinfo ) ( struct ast_channel * chan , int * width , int * height , int * buttons , int voice ) ; int ( * download_connect ) ( unsigned char * buf , char * service , unsigned char * fdn , unsigned char * sec , int ver ) ; int ( * disconnect_session ) ( unsigned char * buf ) ; int ( * download_disconnect ) ( unsigned char * buf ) ; int ( * data_mode ) ( unsigned char * buf ) ; int ( * clear_soft_keys ) ( unsigned char * buf ) ; int ( * clear_screen ) ( unsigned char * buf ) ; int ( * voice_mode ) ( unsigned char * buf , int when ) ; int ( * available ) ( struct ast_channel * chan ) ; int ( * display ) ( unsigned char * buf , int page , int line , int just , int wrap , char * col1 , char * col2 ) ; int ( * set_line ) ( unsigned char * buf , int page , int line ) ; int ( * load_soft_key ) ( unsigned char * buf , int key , const char * llabel , const char * slabel , char * ret , int data ) ; int ( * set_keys ) ( unsigned char * buf , unsigned char * keys ) ; int ( * input_control ) ( unsigned char * buf , int page , int line , int display , int format , int just ) ; int ( * input_format ) ( unsigned char * buf , int num , int dir , int wrap , char * format1 , char * format2 ) ; } CLASS_DEF 3 struct adsi_funcs BASE_CLASSES { unsigned int version ; int ( * begin_download ) ( struct ast_channel * chan , char * service , unsigned char * fdn , unsigned char * sec , int version ) ; int ( * end_download ) ( struct ast_channel * chan ) ; int ( * channel_restore ) ( struct ast_channel * chan ) ; int ( * print ) ( struct ast_channel * chan , char * * lines , int * align , int voice ) ; int ( * load_session ) ( struct ast_channel * chan , unsigned char * app , int ver , int data ) ; int ( * unload_session ) ( struct ast_channel * chan ) ; int ( * transmit_message ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype ) ; int ( * transmit_message_full ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype , int dowait ) ; int ( * read_encoded_dtmf ) ( struct ast_channel * chan , unsigned char * buf , int maxlen ) ; int ( * connect_session ) ( unsigned char * buf , unsigned char * fdn , int ver ) ; int ( * query_cpeid ) ( unsigned char * buf ) ; int ( * query_cpeinfo ) ( unsigned char * buf ) ; int ( * get_cpeid ) ( struct ast_channel * chan , unsigned char * cpeid , int voice ) ; int ( * get_cpeinfo ) ( struct ast_channel * chan , int * width , int * height , int * buttons , int voice ) ; int ( * download_connect ) ( unsigned char * buf , char * service , unsigned char * fdn , unsigned char * sec , int ver ) ; int ( * disconnect_session ) ( unsigned char * buf ) ; int ( * download_disconnect ) ( unsigned char * buf ) ; int ( * data_mode ) ( unsigned char * buf ) ; int ( * clear_soft_keys ) ( unsigned char * buf ) ; int ( * clear_screen ) ( unsigned char * buf ) ; int ( * voice_mode ) ( unsigned char * buf , int when ) ; int ( * available ) ( struct ast_channel * chan ) ; int ( * display ) ( unsigned char * buf , int page , int line , int just , int wrap , char * col1 , char * col2 ) ; int ( * set_line ) ( unsigned char * buf , int page , int line ) ; int ( * load_soft_key ) ( unsigned char * buf , int key , const char * llabel , const char * slabel , char * ret , int data ) ; int ( * set_keys ) ( unsigned char * buf , unsigned char * keys ) ; int ( * input_control ) ( unsigned char * buf , int page , int line , int display , int format , int just ) ; int ( * input_format ) ( unsigned char * buf , int num , int dir , int wrap , char * format1 , char * format2 ) ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_funcs LEAF_NODE 5 adsi_funcs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int version ; int ( * begin_download ) ( struct ast_channel * chan , char * service , unsigned char * fdn , unsigned char * sec , int version ) ; int ( * end_download ) ( struct ast_channel * chan ) ; int ( * channel_restore ) ( struct ast_channel * chan ) ; int ( * print ) ( struct ast_channel * chan , char * * lines , int * align , int voice ) ; int ( * load_session ) ( struct ast_channel * chan , unsigned char * app , int ver , int data ) ; int ( * unload_session ) ( struct ast_channel * chan ) ; int ( * transmit_message ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype ) ; int ( * transmit_message_full ) ( struct ast_channel * chan , unsigned char * msg , int msglen , int msgtype , int dowait ) ; int ( * read_encoded_dtmf ) ( struct ast_channel * chan , unsigned char * buf , int maxlen ) ; int ( * connect_session ) ( unsigned char * buf , unsigned char * fdn , int ver ) ; int ( * query_cpeid ) ( unsigned char * buf ) ; int ( * query_cpeinfo ) ( unsigned char * buf ) ; int ( * get_cpeid ) ( struct ast_channel * chan , unsigned char * cpeid , int voice ) ; int ( * get_cpeinfo ) ( struct ast_channel * chan , int * width , int * height , int * buttons , int voice ) ; int ( * download_connect ) ( unsigned char * buf , char * service , unsigned char * fdn , unsigned char * sec , int ver ) ; int ( * disconnect_session ) ( unsigned char * buf ) ; int ( * download_disconnect ) ( unsigned char * buf ) ; int ( * data_mode ) ( unsigned char * buf ) ; int ( * clear_soft_keys ) ( unsigned char * buf ) ; int ( * clear_screen ) ( unsigned char * buf ) ; int ( * voice_mode ) ( unsigned char * buf , int when ) ; int ( * available ) ( struct ast_channel * chan ) ; int ( * display ) ( unsigned char * buf , int page , int line , int just , int wrap , char * col1 , char * col2 ) ; int ( * set_line ) ( unsigned char * buf , int page , int line ) ; int ( * load_soft_key ) ( unsigned char * buf , int key , const char * llabel , const char * slabel , char * ret , int data ) ; int ( * set_keys ) ( unsigned char * buf , unsigned char * keys ) ; int ( * input_control ) ( unsigned char * buf , int page , int line , int display , int format , int just ) ; int ( * input_format ) ( unsigned char * buf , int num , int dir , int wrap , char * format1 , char * format2 ) ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 begin_download LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 service LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 fdn LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 sec LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 version LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 end_download LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 channel_restore LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 print LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 * LEAF_NODE 5 lines LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 align LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 voice LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 load_session LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 app LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ver LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 unload_session LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 transmit_message LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 msg LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 msglen LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 msgtype LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 transmit_message_full LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 msg LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 msglen LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 msgtype LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 dowait LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 read_encoded_dtmf LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 maxlen LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 connect_session LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 fdn LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ver LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 query_cpeid LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 query_cpeinfo LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 get_cpeid LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 cpeid LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 voice LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 get_cpeinfo LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 width LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 height LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 * LEAF_NODE 5 buttons LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 voice LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 download_connect LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 service LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 fdn LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 sec LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 ver LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 disconnect_session LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 download_disconnect LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 data_mode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 clear_soft_keys LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 clear_screen LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 voice_mode LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 when LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 available LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 struct LEAF_NODE 5 ast_channel LEAF_NODE 5 * LEAF_NODE 5 chan LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 display LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 page LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 line LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 just LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 wrap LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 col1 LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 col2 LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 set_line LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 page LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 line LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 load_soft_key LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 key LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 llabel LEAF_NODE 5 , LEAF_NODE 5 const LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 slabel LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 ret LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 set_keys LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 keys LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 input_control LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 page LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 line LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 display LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 format LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 just LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 int LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 input_format LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 unsigned LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 buf LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 num LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 dir LEAF_NODE 5 , LEAF_NODE 5 int LEAF_NODE 5 wrap LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 format1 LEAF_NODE 5 , LEAF_NODE 5 char LEAF_NODE 5 * LEAF_NODE 5 format2 LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const struct adsi_funcs * installed_funcs ; VAR_DECL 2 const struct adsi_funcs * installed_funcs TYPE 3 const struct adsi_funcs * TYPE_NAME 4 const struct adsi_funcs LEAF_NODE 5 const LEAF_NODE 5 struct LEAF_NODE 5 adsi_funcs POINTER 4 * LEAF_NODE 5 * NAME 3 installed_funcs LEAF_NODE 4 installed_funcs LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ast_adsi_unload_session LEAF_NODE 3 ast_adsi_unload_session PARAMETER_LIST 2 ( struct ast_channel * chan ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; res = 0 ; VAR_DECL 4 int res ; res = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 5 ; INIT 5 res = 0 ASSIGN 6 res = 0 LVAL 7 res NAME 8 res LEAF_NODE 9 res ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_rwlock_rdlock ( & func_lock ) ; EXPR 4 ast_rwlock_rdlock ( & func_lock ) FUNCTION_CALL 5 ast_rwlock_rdlock ( & func_lock ) CALLEE 6 ast_rwlock_rdlock LEAF_NODE 7 ast_rwlock_rdlock LEAF_NODE 6 ( ARGUMENT 6 & func_lock UNARY_EXPR 7 & func_lock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 func_lock LEAF_NODE 9 func_lock LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 installed_funcs && installed_funcs -> unload_session EXPR 5 installed_funcs && installed_funcs -> unload_session AND 6 installed_funcs && installed_funcs -> unload_session EXPR 7 installed_funcs FIELD 8 installed_funcs LEAF_NODE 9 installed_funcs LEAF_NODE 7 && EXPR 7 installed_funcs -> unload_session FIELD 8 installed_funcs -> unload_session LEAF_NODE 9 installed_funcs LEAF_NODE 9 -> LEAF_NODE 9 unload_session LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 res = installed_funcs -> unload_session ( chan ) ; EXPR 7 res = installed_funcs -> unload_session ( chan ) ASSIGN 8 res = installed_funcs -> unload_session ( chan ) LVAL 9 res FIELD 10 res LEAF_NODE 11 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 installed_funcs -> unload_session ( chan ) FUNCTION_CALL 10 installed_funcs -> unload_session ( chan ) CALLEE 11 installed_funcs -> unload_session LEAF_NODE 12 installed_funcs LEAF_NODE 12 -> LEAF_NODE 12 unload_session LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_rwlock_unlock ( & func_lock ) ; EXPR 4 ast_rwlock_unlock ( & func_lock ) FUNCTION_CALL 5 ast_rwlock_unlock ( & func_lock ) CALLEE 6 ast_rwlock_unlock LEAF_NODE 7 ast_rwlock_unlock LEAF_NODE 6 ( ARGUMENT 6 & func_lock UNARY_EXPR 7 & func_lock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 func_lock LEAF_NODE 9 func_lock LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 18, "project": "openssl_ast_vul_function_test_adv_2", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 jingle_set_rtp_peer LEAF_NODE 3 jingle_set_rtp_peer PARAMETER_LIST 2 ( struct ast_channel * chan , struct ast_rtp_instance * rtp , struct ast_rtp_instance * vrtp , struct ast_rtp_instance * tpeer , const struct ast_format_cap * cap , int nat_active ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_rtp_instance * rtp TYPE 4 struct ast_rtp_instance * TYPE_NAME 5 struct ast_rtp_instance LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_instance POINTER 5 * LEAF_NODE 6 * NAME 4 rtp LEAF_NODE 5 rtp LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_rtp_instance * vrtp TYPE 4 struct ast_rtp_instance * TYPE_NAME 5 struct ast_rtp_instance LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_instance POINTER 5 * LEAF_NODE 6 * NAME 4 vrtp LEAF_NODE 5 vrtp LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_rtp_instance * tpeer TYPE 4 struct ast_rtp_instance * TYPE_NAME 5 struct ast_rtp_instance LEAF_NODE 6 struct LEAF_NODE 6 ast_rtp_instance POINTER 5 * LEAF_NODE 6 * NAME 4 tpeer LEAF_NODE 5 tpeer LEAF_NODE 3 , PARAMETER_DECL 3 const struct ast_format_cap * cap TYPE 4 const struct ast_format_cap * TYPE_NAME 5 const struct ast_format_cap LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 ast_format_cap POINTER 5 * LEAF_NODE 6 * NAME 4 cap LEAF_NODE 5 cap LEAF_NODE 3 , PARAMETER_DECL 3 int nat_active TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 nat_active LEAF_NODE 5 nat_active LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return - 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 - 1 EXPR 5 - 1 UNARY_EXPR 6 - 1 UNARY_OPERATOR 7 - LEAF_NODE 8 - FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 19, "project": "openssl_ast_vul_function_test_adv_3", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk LEAF_NODE 5 sla_trunk LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 stations LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int num_stations ; VAR_DECL 6 unsigned int num_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 num_stations LEAF_NODE 8 num_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int active_stations ; VAR_DECL 6 unsigned int active_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 active_stations LEAF_NODE 8 active_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int hold_stations ; VAR_DECL 6 unsigned int hold_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 hold_stations LEAF_NODE 8 hold_stations LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 barge_disabled : LEAF_NODE 6 barge_disabled LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 on_hold : LEAF_NODE 6 on_hold LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station_ref LEAF_NODE 5 sla_station_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_station * station ; VAR_DECL 6 struct sla_station * station TYPE 7 struct sla_station * TYPE_NAME 8 struct sla_station LEAF_NODE 9 struct LEAF_NODE 9 sla_station POINTER 8 * LEAF_NODE 9 * NAME 7 station LEAF_NODE 8 station LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } ; CLASS_DEF 2 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } CLASS_DEF 3 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } LEAF_NODE 4 enum CLASS_NAME 4 sla_trunk_state LEAF_NODE 5 sla_trunk_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , LEAF_NODE 5 SLA_TRUNK_STATE_IDLE LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_RINGING LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_UP LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD_BYME LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk_ref LEAF_NODE 5 sla_trunk_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_trunk * trunk ; VAR_DECL 6 struct sla_trunk * trunk TYPE 7 struct sla_trunk * TYPE_NAME 8 struct sla_trunk LEAF_NODE 9 struct LEAF_NODE 9 sla_trunk POINTER 8 * LEAF_NODE 9 * NAME 7 trunk LEAF_NODE 8 trunk LEAF_NODE 6 ; SIMPLE_DECL 5 enum sla_trunk_state state ; VAR_DECL 6 enum sla_trunk_state state TYPE 7 enum sla_trunk_state TYPE_NAME 8 enum sla_trunk_state LEAF_NODE 9 enum LEAF_NODE 9 sla_trunk_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station LEAF_NODE 5 sla_station LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_RWLIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 trunks LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_dial * dial ; VAR_DECL 6 struct ast_dial * dial TYPE 7 struct ast_dial * TYPE_NAME 8 struct ast_dial LEAF_NODE 9 struct LEAF_NODE 9 ast_dial POINTER 8 * LEAF_NODE 9 * NAME 7 dial LEAF_NODE 8 dial LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } ; CLASS_DEF 2 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } CLASS_DEF 3 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } LEAF_NODE 4 enum CLASS_NAME 4 sla_hold_access LEAF_NODE 5 sla_hold_access LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , LEAF_NODE 5 SLA_HOLD_OPEN LEAF_NODE 5 , LEAF_NODE 5 SLA_HOLD_PRIVATE LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_vmminmessage ; VAR_DECL 2 int global_vmminmessage TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_vmminmessage LEAF_NODE 4 global_vmminmessage LEAF_NODE 2 ; SIMPLE_DECL 1 int global_vmmaxmessage ; VAR_DECL 2 int global_vmmaxmessage TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_vmmaxmessage LEAF_NODE 4 global_vmmaxmessage LEAF_NODE 2 ; SIMPLE_DECL 1 int global_maxsilence ; VAR_DECL 2 int global_maxsilence TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_maxsilence LEAF_NODE 4 global_maxsilence LEAF_NODE 2 ; SIMPLE_DECL 1 int global_maxgreet ; VAR_DECL 2 int global_maxgreet TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_maxgreet LEAF_NODE 4 global_maxgreet LEAF_NODE 2 ; SIMPLE_DECL 1 int global_silencethreshold ; global_silencethreshold = 128 ; VAR_DECL 2 int global_silencethreshold ; global_silencethreshold = 128 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_silencethreshold LEAF_NODE 4 global_silencethreshold LEAF_NODE 3 ; INIT 3 global_silencethreshold = 128 ASSIGN 4 global_silencethreshold = 128 LVAL 5 global_silencethreshold NAME 6 global_silencethreshold LEAF_NODE 7 global_silencethreshold ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 128 FIELD 6 128 LEAF_NODE 7 128 LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 160 ] global_mailcmd ; VAR_DECL 2 char [ 160 ] global_mailcmd TYPE 3 char [ 160 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 160 ] LEAF_NODE 5 [ FIELD 5 160 LEAF_NODE 6 160 LEAF_NODE 5 ] NAME 3 global_mailcmd LEAF_NODE 4 global_mailcmd LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 160 ] global_externnotify ; VAR_DECL 2 char [ 160 ] global_externnotify TYPE 3 char [ 160 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 160 ] LEAF_NODE 5 [ FIELD 5 160 LEAF_NODE 6 160 LEAF_NODE 5 ] NAME 3 global_externnotify LEAF_NODE 4 global_externnotify LEAF_NODE 2 ; SIMPLE_DECL 1 char [ PATH_MAX ] global_logfile ; VAR_DECL 2 char [ PATH_MAX ] global_logfile TYPE 3 char [ PATH_MAX ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ PATH_MAX ] LEAF_NODE 5 [ FIELD 5 PATH_MAX LEAF_NODE 6 PATH_MAX LEAF_NODE 5 ] NAME 3 global_logfile LEAF_NODE 4 global_logfile LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 80 ] default_vmformat ; VAR_DECL 2 char [ 80 ] default_vmformat TYPE 3 char [ 80 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 80 ] LEAF_NODE 5 [ FIELD 5 80 LEAF_NODE 6 80 LEAF_NODE 5 ] NAME 3 default_vmformat LEAF_NODE 4 default_vmformat LEAF_NODE 2 ; SIMPLE_DECL 1 const char * ast_config_AST_LOG_DIR ; VAR_DECL 2 const char * ast_config_AST_LOG_DIR TYPE 3 const char * TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 ast_config_AST_LOG_DIR LEAF_NODE 4 ast_config_AST_LOG_DIR LEAF_NODE 2 ; SIMPLE_DECL 1 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } ; CLASS_DEF 2 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } CLASS_DEF 3 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } LEAF_NODE 4 struct CLASS_NAME 4 b64_baseio LEAF_NODE 5 b64_baseio LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; SIMPLE_DECL 5 int iocp ; VAR_DECL 6 int iocp TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 iocp LEAF_NODE 8 iocp LEAF_NODE 6 ; SIMPLE_DECL 5 int iolen ; VAR_DECL 6 int iolen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 iolen LEAF_NODE 8 iolen LEAF_NODE 6 ; SIMPLE_DECL 5 int linelength ; VAR_DECL 6 int linelength TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 linelength LEAF_NODE 8 linelength LEAF_NODE 6 ; SIMPLE_DECL 5 int ateof ; VAR_DECL 6 int ateof TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ateof LEAF_NODE 8 ateof LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ B64_BASEMAXINLINE ] iobuf ; VAR_DECL 6 unsigned char [ B64_BASEMAXINLINE ] iobuf TYPE 7 unsigned char [ B64_BASEMAXINLINE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ B64_BASEMAXINLINE ] LEAF_NODE 9 [ FIELD 9 B64_BASEMAXINLINE LEAF_NODE 10 B64_BASEMAXINLINE LEAF_NODE 9 ] NAME 7 iobuf LEAF_NODE 8 iobuf LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } ; CLASS_DEF 2 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } CLASS_DEF 3 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } LEAF_NODE 4 struct CLASS_NAME 4 minivm_account LEAF_NODE 5 minivm_account LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; SIMPLE_DECL 5 char [ AST_MAX_CONTEXT ] username ; VAR_DECL 6 char [ AST_MAX_CONTEXT ] username TYPE 7 char [ AST_MAX_CONTEXT ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_CONTEXT ] LEAF_NODE 9 [ FIELD 9 AST_MAX_CONTEXT LEAF_NODE 10 AST_MAX_CONTEXT LEAF_NODE 9 ] NAME 7 username LEAF_NODE 8 username LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_CONTEXT ] domain ; VAR_DECL 6 char [ AST_MAX_CONTEXT ] domain TYPE 7 char [ AST_MAX_CONTEXT ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_CONTEXT ] LEAF_NODE 9 [ FIELD 9 AST_MAX_CONTEXT LEAF_NODE 10 AST_MAX_CONTEXT LEAF_NODE 9 ] NAME 7 domain LEAF_NODE 8 domain LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 10 ] pincode ; VAR_DECL 6 char [ 10 ] pincode TYPE 7 char [ 10 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 pincode LEAF_NODE 8 pincode LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 120 ] fullname ; VAR_DECL 6 char [ 120 ] fullname TYPE 7 char [ 120 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 120 ] LEAF_NODE 9 [ FIELD 9 120 LEAF_NODE 10 120 LEAF_NODE 9 ] NAME 7 fullname LEAF_NODE 8 fullname LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] email ; VAR_DECL 6 char [ 80 ] email TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 email LEAF_NODE 8 email LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] pager ; VAR_DECL 6 char [ 80 ] pager TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 pager LEAF_NODE 8 pager LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_ACCOUNT_CODE ] accountcode ; VAR_DECL 6 char [ AST_MAX_ACCOUNT_CODE ] accountcode TYPE 7 char [ AST_MAX_ACCOUNT_CODE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_ACCOUNT_CODE ] LEAF_NODE 9 [ FIELD 9 AST_MAX_ACCOUNT_CODE LEAF_NODE 10 AST_MAX_ACCOUNT_CODE LEAF_NODE 9 ] NAME 7 accountcode LEAF_NODE 8 accountcode LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] serveremail ; VAR_DECL 6 char [ 80 ] serveremail TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 serveremail LEAF_NODE 8 serveremail LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 160 ] externnotify ; VAR_DECL 6 char [ 160 ] externnotify TYPE 7 char [ 160 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 160 ] LEAF_NODE 9 [ FIELD 9 160 LEAF_NODE 10 160 LEAF_NODE 9 ] NAME 7 externnotify LEAF_NODE 8 externnotify LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_LANGUAGE ] language ; VAR_DECL 6 char [ MAX_LANGUAGE ] language TYPE 7 char [ MAX_LANGUAGE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_LANGUAGE ] LEAF_NODE 9 [ FIELD 9 MAX_LANGUAGE LEAF_NODE 10 MAX_LANGUAGE LEAF_NODE 9 ] NAME 7 language LEAF_NODE 8 language LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] zonetag ; VAR_DECL 6 char [ 80 ] zonetag TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 zonetag LEAF_NODE 8 zonetag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 20 ] uniqueid ; VAR_DECL 6 char [ 20 ] uniqueid TYPE 7 char [ 20 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 20 ] LEAF_NODE 9 [ FIELD 9 20 LEAF_NODE 10 20 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] exit ; VAR_DECL 6 char [ 80 ] exit TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] attachfmt ; VAR_DECL 6 char [ 80 ] attachfmt TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 attachfmt LEAF_NODE 8 attachfmt LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] etemplate ; VAR_DECL 6 char [ 80 ] etemplate TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 etemplate LEAF_NODE 8 etemplate LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] ptemplate ; VAR_DECL 6 char [ 80 ] ptemplate TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 ptemplate LEAF_NODE 8 ptemplate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_variable * chanvars ; VAR_DECL 6 struct ast_variable * chanvars TYPE 7 struct ast_variable * TYPE_NAME 8 struct ast_variable LEAF_NODE 9 struct LEAF_NODE 9 ast_variable POINTER 8 * LEAF_NODE 9 * NAME 7 chanvars LEAF_NODE 8 chanvars LEAF_NODE 6 ; SIMPLE_DECL 5 double volgain ; VAR_DECL 6 double volgain TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 volgain LEAF_NODE 8 volgain LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 minivm_account LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_stats BASE_CLASSES { int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; } ; CLASS_DEF 2 struct minivm_stats BASE_CLASSES { int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; } CLASS_DEF 3 struct minivm_stats BASE_CLASSES { int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; } LEAF_NODE 4 struct CLASS_NAME 4 minivm_stats LEAF_NODE 5 minivm_stats LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; SIMPLE_DECL 5 int voicemailaccounts ; VAR_DECL 6 int voicemailaccounts TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 voicemailaccounts LEAF_NODE 8 voicemailaccounts LEAF_NODE 6 ; SIMPLE_DECL 5 int timezones ; VAR_DECL 6 int timezones TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timezones LEAF_NODE 8 timezones LEAF_NODE 6 ; SIMPLE_DECL 5 int templates ; VAR_DECL 6 int templates TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 templates LEAF_NODE 8 templates LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval reset ; VAR_DECL 6 struct timeval reset TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 reset LEAF_NODE 8 reset LEAF_NODE 6 ; SIMPLE_DECL 5 int receivedmessages ; VAR_DECL 6 int receivedmessages TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 receivedmessages LEAF_NODE 8 receivedmessages LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval lastreceived ; VAR_DECL 6 struct timeval lastreceived TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 lastreceived LEAF_NODE 8 lastreceived LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_stats global_stats ; VAR_DECL 2 struct minivm_stats global_stats TYPE 3 struct minivm_stats TYPE_NAME 4 struct minivm_stats LEAF_NODE 5 struct LEAF_NODE 5 minivm_stats NAME 3 global_stats LEAF_NODE 4 global_stats LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_template BASE_CLASSES { char [ 80 ] name ; char * body ; char [ 100 ] fromaddress ; char [ 80 ] serveremail ; char [ 100 ] subject ; char [ 32 ] charset ; char [ 20 ] locale ; char [ 80 ] dateformat ; int attachment ; AST_LIST_ENTRY ( minivm_template ) list ; } ; CLASS_DEF 2 struct minivm_template BASE_CLASSES { char [ 80 ] name ; char * body ; char [ 100 ] fromaddress ; char [ 80 ] serveremail ; char [ 100 ] subject ; char [ 32 ] charset ; char [ 20 ] locale ; char [ 80 ] dateformat ; int attachment ; AST_LIST_ENTRY ( minivm_template ) list ; } CLASS_DEF 3 struct minivm_template BASE_CLASSES { char [ 80 ] name ; char * body ; char [ 100 ] fromaddress ; char [ 80 ] serveremail ; char [ 100 ] subject ; char [ 32 ] charset ; char [ 20 ] locale ; char [ 80 ] dateformat ; int attachment ; AST_LIST_ENTRY ( minivm_template ) list ; } LEAF_NODE 4 struct CLASS_NAME 4 minivm_template LEAF_NODE 5 minivm_template LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 80 ] name ; char * body ; char [ 100 ] fromaddress ; char [ 80 ] serveremail ; char [ 100 ] subject ; char [ 32 ] charset ; char [ 20 ] locale ; char [ 80 ] dateformat ; int attachment ; AST_LIST_ENTRY ( minivm_template ) list ; SIMPLE_DECL 5 char [ 80 ] name ; VAR_DECL 6 char [ 80 ] name TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; SIMPLE_DECL 5 char * body ; VAR_DECL 6 char * body TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 body LEAF_NODE 8 body LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 100 ] fromaddress ; VAR_DECL 6 char [ 100 ] fromaddress TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 fromaddress LEAF_NODE 8 fromaddress LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] serveremail ; VAR_DECL 6 char [ 80 ] serveremail TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 serveremail LEAF_NODE 8 serveremail LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 100 ] subject ; VAR_DECL 6 char [ 100 ] subject TYPE 7 char [ 100 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 100 ] LEAF_NODE 9 [ FIELD 9 100 LEAF_NODE 10 100 LEAF_NODE 9 ] NAME 7 subject LEAF_NODE 8 subject LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] charset ; VAR_DECL 6 char [ 32 ] charset TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 charset LEAF_NODE 8 charset LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 20 ] locale ; VAR_DECL 6 char [ 20 ] locale TYPE 7 char [ 20 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 20 ] LEAF_NODE 9 [ FIELD 9 20 LEAF_NODE 10 20 LEAF_NODE 9 ] NAME 7 locale LEAF_NODE 8 locale LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] dateformat ; VAR_DECL 6 char [ 80 ] dateformat TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 dateformat LEAF_NODE 8 dateformat LEAF_NODE 6 ; SIMPLE_DECL 5 int attachment ; VAR_DECL 6 int attachment TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 attachment LEAF_NODE 8 attachment LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 minivm_template LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static struct minivm_template * LEAF_NODE 3 static TYPE_NAME 3 struct minivm_template LEAF_NODE 4 struct LEAF_NODE 4 minivm_template LEAF_NODE 3 * FUNCTION_NAME 2 message_template_create LEAF_NODE 3 message_template_create PARAMETER_LIST 2 ( const char * name ) LEAF_NODE 3 ( PARAMETER_DECL 3 const char * name TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 name LEAF_NODE 5 name LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 struct LEAF_NODE 3 minivm_template LEAF_NODE 3 * LEAF_NODE 3 template LEAF_NODE 3 ; LEAF_NODE 3 template LEAF_NODE 3 = LEAF_NODE 3 ast_calloc LEAF_NODE 3 ( LEAF_NODE 3 1 LEAF_NODE 3 , LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 template LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 if LEAF_NODE 3 ( LEAF_NODE 3 ! LEAF_NODE 3 template LEAF_NODE 3 ) JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 3 ast_copy_string LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 name LEAF_NODE 3 , LEAF_NODE 3 name LEAF_NODE 3 , LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 name LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 ast_copy_string LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 dateformat LEAF_NODE 3 , LEAF_NODE 3 DEFAULT_DATEFORMAT LEAF_NODE 3 , LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 dateformat LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 ast_copy_string LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 charset LEAF_NODE 3 , LEAF_NODE 3 DEFAULT_CHARSET LEAF_NODE 3 , LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 charset LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 ast_copy_string LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 subject LEAF_NODE 3 , LEAF_NODE 3 \"New message in mailbox ${MVM_USERNAME}@${MVM_DOMAIN}\" LEAF_NODE 3 , LEAF_NODE 3 sizeof LEAF_NODE 3 ( LEAF_NODE 3 template LEAF_NODE 3 -> LEAF_NODE 3 subject LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 template LEAF_NODE 3 -> EXPR_STATEMENT 3 attachment = TRUE ; EXPR 4 attachment = TRUE ASSIGN 5 attachment = TRUE LVAL 6 attachment FIELD 7 attachment LEAF_NODE 8 attachment ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 TRUE FIELD 7 TRUE LEAF_NODE 8 TRUE LEAF_NODE 4 ; LEAF_NODE 3 return LEAF_NODE 3 template LEAF_NODE 3 ; LEAF_NODE 2 }", "idx": 20, "project": "openssl_ast_vul_function_test_adv_35", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 load_module LEAF_NODE 3 load_module PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ast_register_application_xml ( app , ices_exec ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ast_register_application_xml ( app , ices_exec ) EXPR 5 ast_register_application_xml ( app , ices_exec ) FUNCTION_CALL 6 ast_register_application_xml ( app , ices_exec ) CALLEE 7 ast_register_application_xml LEAF_NODE 8 ast_register_application_xml LEAF_NODE 7 ( ARGUMENT 7 app FIELD 8 app LEAF_NODE 9 app LEAF_NODE 7 , ARGUMENT 7 ices_exec FIELD 8 ices_exec LEAF_NODE 9 ices_exec LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 21, "project": "openssl_ast_vul_function_test_adv_1", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum announcetypes BASE_CLASSES { CONF_HASJOIN , CONF_HASLEFT } ; CLASS_DEF 2 enum announcetypes BASE_CLASSES { CONF_HASJOIN , CONF_HASLEFT } CLASS_DEF 3 enum announcetypes BASE_CLASSES { CONF_HASJOIN , CONF_HASLEFT } LEAF_NODE 4 enum CLASS_NAME 4 announcetypes LEAF_NODE 5 announcetypes LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 CONF_HASJOIN , CONF_HASLEFT LEAF_NODE 5 CONF_HASJOIN LEAF_NODE 5 , LEAF_NODE 5 CONF_HASLEFT LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct announce_listitem BASE_CLASSES { AST_LIST_ENTRY ( announce_listitem ) entry ; char [ PATH_MAX ] namerecloc ; char [ MAX_LANGUAGE ] language ; struct ast_channel * confchan ; int confusers ; int vmrec ; enum announcetypes announcetype ; } ; CLASS_DEF 2 struct announce_listitem BASE_CLASSES { AST_LIST_ENTRY ( announce_listitem ) entry ; char [ PATH_MAX ] namerecloc ; char [ MAX_LANGUAGE ] language ; struct ast_channel * confchan ; int confusers ; int vmrec ; enum announcetypes announcetype ; } CLASS_DEF 3 struct announce_listitem BASE_CLASSES { AST_LIST_ENTRY ( announce_listitem ) entry ; char [ PATH_MAX ] namerecloc ; char [ MAX_LANGUAGE ] language ; struct ast_channel * confchan ; int confusers ; int vmrec ; enum announcetypes announcetype ; } LEAF_NODE 4 struct CLASS_NAME 4 announce_listitem LEAF_NODE 5 announce_listitem LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( announce_listitem ) entry ; char [ PATH_MAX ] namerecloc ; char [ MAX_LANGUAGE ] language ; struct ast_channel * confchan ; int confusers ; int vmrec ; enum announcetypes announcetype ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 char [ PATH_MAX ] namerecloc ; VAR_DECL 6 char [ PATH_MAX ] namerecloc TYPE 7 char [ PATH_MAX ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ PATH_MAX ] LEAF_NODE 9 [ FIELD 9 PATH_MAX LEAF_NODE 10 PATH_MAX LEAF_NODE 9 ] NAME 7 namerecloc LEAF_NODE 8 namerecloc LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_LANGUAGE ] language ; VAR_DECL 6 char [ MAX_LANGUAGE ] language TYPE 7 char [ MAX_LANGUAGE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_LANGUAGE ] LEAF_NODE 9 [ FIELD 9 MAX_LANGUAGE LEAF_NODE 10 MAX_LANGUAGE LEAF_NODE 9 ] NAME 7 language LEAF_NODE 8 language LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * confchan ; VAR_DECL 6 struct ast_channel * confchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 confchan LEAF_NODE 8 confchan LEAF_NODE 6 ; SIMPLE_DECL 5 int confusers ; VAR_DECL 6 int confusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 confusers LEAF_NODE 8 confusers LEAF_NODE 6 ; SIMPLE_DECL 5 int vmrec ; VAR_DECL 6 int vmrec TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 vmrec LEAF_NODE 8 vmrec LEAF_NODE 6 ; SIMPLE_DECL 5 enum announcetypes announcetype ; VAR_DECL 6 enum announcetypes announcetype TYPE 7 enum announcetypes TYPE_NAME 8 enum announcetypes LEAF_NODE 9 enum LEAF_NODE 9 announcetypes NAME 7 announcetype LEAF_NODE 8 announcetype LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 conf_free LEAF_NODE 3 conf_free PARAMETER_LIST 2 ( struct ast_conference * conf ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_conference * conf TYPE 4 struct ast_conference * TYPE_NAME 5 struct ast_conference LEAF_NODE 6 struct LEAF_NODE 6 ast_conference POINTER 5 * LEAF_NODE 6 * NAME 4 conf LEAF_NODE 5 conf LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int x ; VAR_DECL 4 int x TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 x LEAF_NODE 6 x LEAF_NODE 4 ; SIMPLE_DECL 3 struct announce_listitem * item ; VAR_DECL 4 struct announce_listitem * item TYPE 5 struct announce_listitem * TYPE_NAME 6 struct announce_listitem LEAF_NODE 7 struct LEAF_NODE 7 announce_listitem POINTER 6 * LEAF_NODE 7 * NAME 5 item LEAF_NODE 6 item LEAF_NODE 4 ; EXPR_STATEMENT 3 AST_LIST_REMOVE ( & confs , conf , list ) ; EXPR 4 AST_LIST_REMOVE ( & confs , conf , list ) FUNCTION_CALL 5 AST_LIST_REMOVE ( & confs , conf , list ) CALLEE 6 AST_LIST_REMOVE LEAF_NODE 7 AST_LIST_REMOVE LEAF_NODE 6 ( ARGUMENT 6 & confs UNARY_EXPR 7 & confs UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 confs LEAF_NODE 9 confs LEAF_NODE 6 , ARGUMENT 6 conf FIELD 7 conf LEAF_NODE 8 conf LEAF_NODE 6 , ARGUMENT 6 list FIELD 7 list LEAF_NODE 8 list LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 meetme_stasis_generate_msg ( conf , NULL , NULL , meetme_end_type ( ) , NULL ) ; EXPR 4 meetme_stasis_generate_msg ( conf , NULL , NULL , meetme_end_type ( ) , NULL ) FUNCTION_CALL 5 meetme_stasis_generate_msg ( conf , NULL , NULL , meetme_end_type ( ) , NULL ) CALLEE 6 meetme_stasis_generate_msg LEAF_NODE 7 meetme_stasis_generate_msg LEAF_NODE 6 ( ARGUMENT 6 conf FIELD 7 conf LEAF_NODE 8 conf LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 , ARGUMENT 6 meetme_end_type ( ) FUNCTION_CALL 7 meetme_end_type ( ) CALLEE 8 meetme_end_type LEAF_NODE 9 meetme_end_type LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> recording == MEETME_RECORD_ACTIVE EXPR 5 conf -> recording == MEETME_RECORD_ACTIVE FIELD 6 conf -> recording LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 recording EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 MEETME_RECORD_ACTIVE LEAF_NODE 7 MEETME_RECORD_ACTIVE LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 conf -> recording = MEETME_RECORD_TERMINATE ; EXPR 7 conf -> recording = MEETME_RECORD_TERMINATE ASSIGN 8 conf -> recording = MEETME_RECORD_TERMINATE LVAL 9 conf -> recording FIELD 10 conf -> recording LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 recording ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 MEETME_RECORD_TERMINATE FIELD 10 MEETME_RECORD_TERMINATE LEAF_NODE 11 MEETME_RECORD_TERMINATE LEAF_NODE 7 ; EXPR_STATEMENT 6 AST_LIST_UNLOCK ( & confs ) ; EXPR 7 AST_LIST_UNLOCK ( & confs ) FUNCTION_CALL 8 AST_LIST_UNLOCK ( & confs ) CALLEE 9 AST_LIST_UNLOCK LEAF_NODE 10 AST_LIST_UNLOCK LEAF_NODE 9 ( ARGUMENT 9 & confs UNARY_EXPR 10 & confs UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 confs LEAF_NODE 12 confs LEAF_NODE 9 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 1 EXPR 8 1 FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 usleep ( 1 ) ; EXPR 10 usleep ( 1 ) FUNCTION_CALL 11 usleep ( 1 ) CALLEE 12 usleep LEAF_NODE 13 usleep LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 AST_LIST_LOCK ( & confs ) ; EXPR 10 AST_LIST_LOCK ( & confs ) FUNCTION_CALL 11 AST_LIST_LOCK ( & confs ) CALLEE 12 AST_LIST_LOCK LEAF_NODE 13 AST_LIST_LOCK LEAF_NODE 12 ( ARGUMENT 12 & confs UNARY_EXPR 13 & confs UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 confs LEAF_NODE 15 confs LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 conf -> recording == MEETME_RECORD_OFF EXPR 11 conf -> recording == MEETME_RECORD_OFF FIELD 12 conf -> recording LEAF_NODE 13 conf LEAF_NODE 13 -> LEAF_NODE 13 recording EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 MEETME_RECORD_OFF LEAF_NODE 13 MEETME_RECORD_OFF LEAF_NODE 10 ) STATEMENTS 10 JUMP_STATEMENT 11 break DESTINATION ; KEYWORD 12 break LEAF_NODE 13 break LEAF_NODE 12 DESTINATION LEAF_NODE 12 ; EXPR_STATEMENT 9 AST_LIST_UNLOCK ( & confs ) ; EXPR 10 AST_LIST_UNLOCK ( & confs ) FUNCTION_CALL 11 AST_LIST_UNLOCK ( & confs ) CALLEE 12 AST_LIST_UNLOCK LEAF_NODE 13 AST_LIST_UNLOCK LEAF_NODE 12 ( ARGUMENT 12 & confs UNARY_EXPR 13 & confs UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 confs LEAF_NODE 15 confs LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 x = 0 ; EXPR 5 x = 0 ASSIGN 6 x = 0 LVAL 7 x FIELD 8 x LEAF_NODE 9 x ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 5 ; CONDITION 4 x < AST_FRAME_BITS EXPR 5 x < AST_FRAME_BITS FIELD 6 x LEAF_NODE 7 x REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 AST_FRAME_BITS LEAF_NODE 7 AST_FRAME_BITS LEAF_NODE 4 ; FOR_EXPR 4 x ++ EXPR 5 x ++ FIELD 6 x ++ LEAF_NODE 7 x LEAF_NODE 7 ++ LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 conf -> transframe [ x ] EXPR 8 conf -> transframe [ x ] FIELD 9 conf -> transframe [ x ] LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 transframe LEAF_NODE 10 [ EXPR 10 x FIELD 11 x LEAF_NODE 12 x LEAF_NODE 10 ] LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ast_frfree ( conf -> transframe [ x ] ) ; EXPR 9 ast_frfree ( conf -> transframe [ x ] ) FUNCTION_CALL 10 ast_frfree ( conf -> transframe [ x ] ) CALLEE 11 ast_frfree LEAF_NODE 12 ast_frfree LEAF_NODE 11 ( ARGUMENT 11 conf -> transframe [ x ] FIELD 12 conf -> transframe [ x ] LEAF_NODE 13 conf LEAF_NODE 13 -> LEAF_NODE 13 transframe LEAF_NODE 13 [ EXPR 13 x FIELD 14 x LEAF_NODE 15 x LEAF_NODE 13 ] LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 conf -> transpath [ x ] EXPR 8 conf -> transpath [ x ] FIELD 9 conf -> transpath [ x ] LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 transpath LEAF_NODE 10 [ EXPR 10 x FIELD 11 x LEAF_NODE 12 x LEAF_NODE 10 ] LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 ast_translator_free_path ( conf -> transpath [ x ] ) ; EXPR 9 ast_translator_free_path ( conf -> transpath [ x ] ) FUNCTION_CALL 10 ast_translator_free_path ( conf -> transpath [ x ] ) CALLEE 11 ast_translator_free_path LEAF_NODE 12 ast_translator_free_path LEAF_NODE 11 ( ARGUMENT 11 conf -> transpath [ x ] FIELD 12 conf -> transpath [ x ] LEAF_NODE 13 conf LEAF_NODE 13 -> LEAF_NODE 13 transpath LEAF_NODE 13 [ EXPR 13 x FIELD 14 x LEAF_NODE 15 x LEAF_NODE 13 ] LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> announcethread != AST_PTHREADT_NULL EXPR 5 conf -> announcethread != AST_PTHREADT_NULL FIELD 6 conf -> announcethread LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 announcethread EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 AST_PTHREADT_NULL LEAF_NODE 7 AST_PTHREADT_NULL LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_mutex_lock ( & conf -> announcelistlock ) ; EXPR 7 ast_mutex_lock ( & conf -> announcelistlock ) FUNCTION_CALL 8 ast_mutex_lock ( & conf -> announcelistlock ) CALLEE 9 ast_mutex_lock LEAF_NODE 10 ast_mutex_lock LEAF_NODE 9 ( ARGUMENT 9 & conf -> announcelistlock UNARY_EXPR 10 & conf -> announcelistlock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 conf -> announcelistlock LEAF_NODE 12 conf LEAF_NODE 12 -> LEAF_NODE 12 announcelistlock LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 conf -> announcethread_stop = 1 ; EXPR 7 conf -> announcethread_stop = 1 ASSIGN 8 conf -> announcethread_stop = 1 LVAL 9 conf -> announcethread_stop FIELD 10 conf -> announcethread_stop LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 announcethread_stop ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_softhangup ( conf -> chan , AST_SOFTHANGUP_EXPLICIT ) ; EXPR 7 ast_softhangup ( conf -> chan , AST_SOFTHANGUP_EXPLICIT ) FUNCTION_CALL 8 ast_softhangup ( conf -> chan , AST_SOFTHANGUP_EXPLICIT ) CALLEE 9 ast_softhangup LEAF_NODE 10 ast_softhangup LEAF_NODE 9 ( ARGUMENT 9 conf -> chan FIELD 10 conf -> chan LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 chan LEAF_NODE 9 , ARGUMENT 9 AST_SOFTHANGUP_EXPLICIT FIELD 10 AST_SOFTHANGUP_EXPLICIT LEAF_NODE 11 AST_SOFTHANGUP_EXPLICIT LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_cond_signal ( & conf -> announcelist_addition ) ; EXPR 7 ast_cond_signal ( & conf -> announcelist_addition ) FUNCTION_CALL 8 ast_cond_signal ( & conf -> announcelist_addition ) CALLEE 9 ast_cond_signal LEAF_NODE 10 ast_cond_signal LEAF_NODE 9 ( ARGUMENT 9 & conf -> announcelist_addition UNARY_EXPR 10 & conf -> announcelist_addition UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 conf -> announcelist_addition LEAF_NODE 12 conf LEAF_NODE 12 -> LEAF_NODE 12 announcelist_addition LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_mutex_unlock ( & conf -> announcelistlock ) ; EXPR 7 ast_mutex_unlock ( & conf -> announcelistlock ) FUNCTION_CALL 8 ast_mutex_unlock ( & conf -> announcelistlock ) CALLEE 9 ast_mutex_unlock LEAF_NODE 10 ast_mutex_unlock LEAF_NODE 9 ( ARGUMENT 9 & conf -> announcelistlock UNARY_EXPR 10 & conf -> announcelistlock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 conf -> announcelistlock LEAF_NODE 12 conf LEAF_NODE 12 -> LEAF_NODE 12 announcelistlock LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pthread_join ( conf -> announcethread , NULL ) ; EXPR 7 pthread_join ( conf -> announcethread , NULL ) FUNCTION_CALL 8 pthread_join ( conf -> announcethread , NULL ) CALLEE 9 pthread_join LEAF_NODE 10 pthread_join LEAF_NODE 9 ( ARGUMENT 9 conf -> announcethread FIELD 10 conf -> announcethread LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 announcethread LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 ( item = AST_LIST_REMOVE_HEAD ( & conf -> announcelist , entry ) ) EXPR 8 ( item = AST_LIST_REMOVE_HEAD ( & conf -> announcelist , entry ) ) LEAF_NODE 9 ( ASSIGN 9 item = AST_LIST_REMOVE_HEAD ( & conf -> announcelist , entry ) LVAL 10 item FIELD 11 item LEAF_NODE 12 item ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 AST_LIST_REMOVE_HEAD ( & conf -> announcelist , entry ) FUNCTION_CALL 11 AST_LIST_REMOVE_HEAD ( & conf -> announcelist , entry ) CALLEE 12 AST_LIST_REMOVE_HEAD LEAF_NODE 13 AST_LIST_REMOVE_HEAD LEAF_NODE 12 ( ARGUMENT 12 & conf -> announcelist UNARY_EXPR 13 & conf -> announcelist UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 conf -> announcelist LEAF_NODE 15 conf LEAF_NODE 15 -> LEAF_NODE 15 announcelist LEAF_NODE 12 , ARGUMENT 12 entry FIELD 13 entry LEAF_NODE 14 entry LEAF_NODE 12 ) LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! item -> vmrec EXPR 11 ! item -> vmrec UNARY_EXPR 12 ! item -> vmrec UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FIELD 13 item -> vmrec LEAF_NODE 14 item LEAF_NODE 14 -> LEAF_NODE 14 vmrec LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_filedelete ( item -> namerecloc , NULL ) ; EXPR 13 ast_filedelete ( item -> namerecloc , NULL ) FUNCTION_CALL 14 ast_filedelete ( item -> namerecloc , NULL ) CALLEE 15 ast_filedelete LEAF_NODE 16 ast_filedelete LEAF_NODE 15 ( ARGUMENT 15 item -> namerecloc FIELD 16 item -> namerecloc LEAF_NODE 17 item LEAF_NODE 17 -> LEAF_NODE 17 namerecloc LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 ao2_ref ( item , - 1 ) ; EXPR 10 ao2_ref ( item , - 1 ) FUNCTION_CALL 11 ao2_ref ( item , - 1 ) CALLEE 12 ao2_ref LEAF_NODE 13 ao2_ref LEAF_NODE 12 ( ARGUMENT 12 item FIELD 13 item LEAF_NODE 14 item LEAF_NODE 12 , ARGUMENT 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ast_mutex_destroy ( & conf -> announcelistlock ) ; EXPR 7 ast_mutex_destroy ( & conf -> announcelistlock ) FUNCTION_CALL 8 ast_mutex_destroy ( & conf -> announcelistlock ) CALLEE 9 ast_mutex_destroy LEAF_NODE 10 ast_mutex_destroy LEAF_NODE 9 ( ARGUMENT 9 & conf -> announcelistlock UNARY_EXPR 10 & conf -> announcelistlock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 conf -> announcelistlock LEAF_NODE 12 conf LEAF_NODE 12 -> LEAF_NODE 12 announcelistlock LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> origframe EXPR 5 conf -> origframe FIELD 6 conf -> origframe LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 origframe LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 ast_frfree ( conf -> origframe ) ; EXPR 6 ast_frfree ( conf -> origframe ) FUNCTION_CALL 7 ast_frfree ( conf -> origframe ) CALLEE 8 ast_frfree LEAF_NODE 9 ast_frfree LEAF_NODE 8 ( ARGUMENT 8 conf -> origframe FIELD 9 conf -> origframe LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 origframe LEAF_NODE 8 ) LEAF_NODE 6 ; EXPR_STATEMENT 3 ast_hangup ( conf -> lchan ) ; EXPR 4 ast_hangup ( conf -> lchan ) FUNCTION_CALL 5 ast_hangup ( conf -> lchan ) CALLEE 6 ast_hangup LEAF_NODE 7 ast_hangup LEAF_NODE 6 ( ARGUMENT 6 conf -> lchan FIELD 7 conf -> lchan LEAF_NODE 8 conf LEAF_NODE 8 -> LEAF_NODE 8 lchan LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_hangup ( conf -> chan ) ; EXPR 4 ast_hangup ( conf -> chan ) FUNCTION_CALL 5 ast_hangup ( conf -> chan ) CALLEE 6 ast_hangup LEAF_NODE 7 ast_hangup LEAF_NODE 6 ( ARGUMENT 6 conf -> chan FIELD 7 conf -> chan LEAF_NODE 8 conf LEAF_NODE 8 -> LEAF_NODE 8 chan LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> fd >= 0 EXPR 5 conf -> fd >= 0 FIELD 6 conf -> fd LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 fd REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 close ( conf -> fd ) ; EXPR 6 close ( conf -> fd ) FUNCTION_CALL 7 close ( conf -> fd ) CALLEE 8 close LEAF_NODE 9 close LEAF_NODE 8 ( ARGUMENT 8 conf -> fd FIELD 9 conf -> fd LEAF_NODE 10 conf LEAF_NODE 10 -> LEAF_NODE 10 fd LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> recordingfilename EXPR 5 conf -> recordingfilename FIELD 6 conf -> recordingfilename LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 recordingfilename LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_free ( conf -> recordingfilename ) ; EXPR 7 ast_free ( conf -> recordingfilename ) FUNCTION_CALL 8 ast_free ( conf -> recordingfilename ) CALLEE 9 ast_free LEAF_NODE 10 ast_free LEAF_NODE 9 ( ARGUMENT 9 conf -> recordingfilename FIELD 10 conf -> recordingfilename LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 recordingfilename LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> usercontainer EXPR 5 conf -> usercontainer FIELD 6 conf -> usercontainer LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 usercontainer LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ao2_ref ( conf -> usercontainer , - 1 ) ; EXPR 7 ao2_ref ( conf -> usercontainer , - 1 ) FUNCTION_CALL 8 ao2_ref ( conf -> usercontainer , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 conf -> usercontainer FIELD 10 conf -> usercontainer LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 usercontainer LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 conf -> recordingformat EXPR 5 conf -> recordingformat FIELD 6 conf -> recordingformat LEAF_NODE 7 conf LEAF_NODE 7 -> LEAF_NODE 7 recordingformat LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_free ( conf -> recordingformat ) ; EXPR 7 ast_free ( conf -> recordingformat ) FUNCTION_CALL 8 ast_free ( conf -> recordingformat ) CALLEE 9 ast_free LEAF_NODE 10 ast_free LEAF_NODE 9 ( ARGUMENT 9 conf -> recordingformat FIELD 10 conf -> recordingformat LEAF_NODE 11 conf LEAF_NODE 11 -> LEAF_NODE 11 recordingformat LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_mutex_destroy ( & conf -> playlock ) ; EXPR 4 ast_mutex_destroy ( & conf -> playlock ) FUNCTION_CALL 5 ast_mutex_destroy ( & conf -> playlock ) CALLEE 6 ast_mutex_destroy LEAF_NODE 7 ast_mutex_destroy LEAF_NODE 6 ( ARGUMENT 6 & conf -> playlock UNARY_EXPR 7 & conf -> playlock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 conf -> playlock LEAF_NODE 9 conf LEAF_NODE 9 -> LEAF_NODE 9 playlock LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_mutex_destroy ( & conf -> listenlock ) ; EXPR 4 ast_mutex_destroy ( & conf -> listenlock ) FUNCTION_CALL 5 ast_mutex_destroy ( & conf -> listenlock ) CALLEE 6 ast_mutex_destroy LEAF_NODE 7 ast_mutex_destroy LEAF_NODE 6 ( ARGUMENT 6 & conf -> listenlock UNARY_EXPR 7 & conf -> listenlock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 conf -> listenlock LEAF_NODE 9 conf LEAF_NODE 9 -> LEAF_NODE 9 listenlock LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_mutex_destroy ( & conf -> recordthreadlock ) ; EXPR 4 ast_mutex_destroy ( & conf -> recordthreadlock ) FUNCTION_CALL 5 ast_mutex_destroy ( & conf -> recordthreadlock ) CALLEE 6 ast_mutex_destroy LEAF_NODE 7 ast_mutex_destroy LEAF_NODE 6 ( ARGUMENT 6 & conf -> recordthreadlock UNARY_EXPR 7 & conf -> recordthreadlock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 conf -> recordthreadlock LEAF_NODE 9 conf LEAF_NODE 9 -> LEAF_NODE 9 recordthreadlock LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_mutex_destroy ( & conf -> announcethreadlock ) ; EXPR 4 ast_mutex_destroy ( & conf -> announcethreadlock ) FUNCTION_CALL 5 ast_mutex_destroy ( & conf -> announcethreadlock ) CALLEE 6 ast_mutex_destroy LEAF_NODE 7 ast_mutex_destroy LEAF_NODE 6 ( ARGUMENT 6 & conf -> announcethreadlock UNARY_EXPR 7 & conf -> announcethreadlock UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 conf -> announcethreadlock LEAF_NODE 9 conf LEAF_NODE 9 -> LEAF_NODE 9 announcethreadlock LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_free ( conf ) ; EXPR 4 ast_free ( conf ) FUNCTION_CALL 5 ast_free ( conf ) CALLEE 6 ast_free LEAF_NODE 7 ast_free LEAF_NODE 6 ( ARGUMENT 6 conf FIELD 7 conf LEAF_NODE 8 conf LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 22, "project": "openssl_ast_vul_function_test_adv_33", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static pj_bool_t LEAF_NODE 3 static TYPE_NAME 3 pj_bool_t LEAF_NODE 4 pj_bool_t FUNCTION_NAME 2 authenticate LEAF_NODE 3 authenticate PARAMETER_LIST 2 ( pjsip_rx_data * rdata ) LEAF_NODE 3 ( PARAMETER_DECL 3 pjsip_rx_data * rdata TYPE 4 pjsip_rx_data * TYPE_NAME 5 pjsip_rx_data LEAF_NODE 6 pjsip_rx_data POINTER 5 * LEAF_NODE 6 * NAME 4 rdata LEAF_NODE 5 rdata LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 RAII_VAR LEAF_NODE 3 ( LEAF_NODE 3 struct LEAF_NODE 3 ast_sip_endpoint LEAF_NODE 3 * LEAF_NODE 3 , LEAF_NODE 3 endpoint LEAF_NODE 3 , LEAF_NODE 3 ast_pjsip_rdata_get_endpoint LEAF_NODE 3 ( LEAF_NODE 3 rdata LEAF_NODE 3 ) LEAF_NODE 3 , LEAF_NODE 3 ao2_cleanup LEAF_NODE 3 ) LEAF_NODE 3 ; SIMPLE_DECL 3 int is_ack ; is_ack = rdata -> msg_info . msg -> line . req . method . id == PJSIP_ACK_METHOD ; VAR_DECL 4 int is_ack ; is_ack = rdata -> msg_info . msg -> line . req . method . id == PJSIP_ACK_METHOD TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 is_ack LEAF_NODE 6 is_ack LEAF_NODE 5 ; INIT 5 is_ack = rdata -> msg_info . msg -> line . req . method . id == PJSIP_ACK_METHOD ASSIGN 6 is_ack = rdata -> msg_info . msg -> line . req . method . id == PJSIP_ACK_METHOD LVAL 7 is_ack NAME 8 is_ack LEAF_NODE 9 is_ack ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 rdata -> msg_info . msg -> line . req . method . id == PJSIP_ACK_METHOD FIELD 8 rdata -> msg_info . msg -> line . req . method . id LEAF_NODE 9 rdata LEAF_NODE 9 -> LEAF_NODE 9 msg_info LEAF_NODE 9 . LEAF_NODE 9 msg LEAF_NODE 9 -> LEAF_NODE 9 line LEAF_NODE 9 . LEAF_NODE 9 req LEAF_NODE 9 . LEAF_NODE 9 method LEAF_NODE 9 . LEAF_NODE 9 id EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 PJSIP_ACK_METHOD LEAF_NODE 9 PJSIP_ACK_METHOD LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_assert ( endpoint != NULL ) ; EXPR 4 ast_assert ( endpoint != NULL ) FUNCTION_CALL 5 ast_assert ( endpoint != NULL ) CALLEE 6 ast_assert LEAF_NODE 7 ast_assert LEAF_NODE 6 ( ARGUMENT 6 endpoint != NULL FIELD 7 endpoint LEAF_NODE 8 endpoint EQ_OPERATOR 7 != LEAF_NODE 8 != FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 endpoint != artificial_endpoint EXPR 5 endpoint != artificial_endpoint FIELD 6 endpoint LEAF_NODE 7 endpoint EQ_OPERATOR 6 != LEAF_NODE 7 != FIELD 6 artificial_endpoint LEAF_NODE 7 artificial_endpoint LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 apply_endpoint_acl ( rdata , endpoint ) || apply_endpoint_contact_acl ( rdata , endpoint ) EXPR 8 apply_endpoint_acl ( rdata , endpoint ) || apply_endpoint_contact_acl ( rdata , endpoint ) OR 9 apply_endpoint_acl ( rdata , endpoint ) || apply_endpoint_contact_acl ( rdata , endpoint ) EXPR 10 apply_endpoint_acl ( rdata , endpoint ) FUNCTION_CALL 11 apply_endpoint_acl ( rdata , endpoint ) CALLEE 12 apply_endpoint_acl LEAF_NODE 13 apply_endpoint_acl LEAF_NODE 12 ( ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 endpoint FIELD 13 endpoint LEAF_NODE 14 endpoint LEAF_NODE 12 ) LEAF_NODE 10 || EXPR 10 apply_endpoint_contact_acl ( rdata , endpoint ) FUNCTION_CALL 11 apply_endpoint_contact_acl ( rdata , endpoint ) CALLEE 12 apply_endpoint_contact_acl LEAF_NODE 13 apply_endpoint_contact_acl LEAF_NODE 12 ( ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 endpoint FIELD 13 endpoint LEAF_NODE 14 endpoint LEAF_NODE 12 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! is_ack EXPR 11 ! is_ack UNARY_EXPR 12 ! is_ack UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FIELD 13 is_ack LEAF_NODE 14 is_ack LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 pjsip_endpt_respond_stateless ( ast_sip_get_pjsip_endpoint ( ) , rdata , 403 , NULL , NULL , NULL ) ; EXPR 13 pjsip_endpt_respond_stateless ( ast_sip_get_pjsip_endpoint ( ) , rdata , 403 , NULL , NULL , NULL ) FUNCTION_CALL 14 pjsip_endpt_respond_stateless ( ast_sip_get_pjsip_endpoint ( ) , rdata , 403 , NULL , NULL , NULL ) CALLEE 15 pjsip_endpt_respond_stateless LEAF_NODE 16 pjsip_endpt_respond_stateless LEAF_NODE 15 ( ARGUMENT 15 ast_sip_get_pjsip_endpoint ( ) FUNCTION_CALL 16 ast_sip_get_pjsip_endpoint ( ) CALLEE 17 ast_sip_get_pjsip_endpoint LEAF_NODE 18 ast_sip_get_pjsip_endpoint LEAF_NODE 17 ( LEAF_NODE 17 ) LEAF_NODE 15 , ARGUMENT 15 rdata FIELD 16 rdata LEAF_NODE 17 rdata LEAF_NODE 15 , ARGUMENT 15 403 FIELD 16 403 LEAF_NODE 17 403 LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 , ARGUMENT 15 NULL FIELD 16 NULL LEAF_NODE 17 NULL LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 return PJ_TRUE ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 PJ_TRUE EXPR 11 PJ_TRUE FIELD 12 PJ_TRUE LEAF_NODE 13 PJ_TRUE LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! is_ack && ast_sip_requires_authentication ( endpoint , rdata ) EXPR 5 ! is_ack && ast_sip_requires_authentication ( endpoint , rdata ) AND 6 ! is_ack && ast_sip_requires_authentication ( endpoint , rdata ) EXPR 7 ! is_ack UNARY_EXPR 8 ! is_ack UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 is_ack LEAF_NODE 10 is_ack LEAF_NODE 7 && EXPR 7 ast_sip_requires_authentication ( endpoint , rdata ) FUNCTION_CALL 8 ast_sip_requires_authentication ( endpoint , rdata ) CALLEE 9 ast_sip_requires_authentication LEAF_NODE 10 ast_sip_requires_authentication LEAF_NODE 9 ( ARGUMENT 9 endpoint FIELD 10 endpoint LEAF_NODE 11 endpoint LEAF_NODE 9 , ARGUMENT 9 rdata FIELD 10 rdata LEAF_NODE 11 rdata LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 pjsip_tx_data * tdata ; VAR_DECL 7 pjsip_tx_data * tdata TYPE 8 pjsip_tx_data * TYPE_NAME 9 pjsip_tx_data LEAF_NODE 10 pjsip_tx_data POINTER 9 * LEAF_NODE 10 * NAME 8 tdata LEAF_NODE 9 tdata LEAF_NODE 7 ; SIMPLE_DECL 6 struct unidentified_request * unid ; VAR_DECL 7 struct unidentified_request * unid TYPE 8 struct unidentified_request * TYPE_NAME 9 struct unidentified_request LEAF_NODE 10 struct LEAF_NODE 10 unidentified_request POINTER 9 * LEAF_NODE 10 * NAME 8 unid LEAF_NODE 9 unid LEAF_NODE 7 ; EXPR_STATEMENT 6 pjsip_endpt_create_response ( ast_sip_get_pjsip_endpoint ( ) , rdata , 401 , NULL , & tdata ) ; EXPR 7 pjsip_endpt_create_response ( ast_sip_get_pjsip_endpoint ( ) , rdata , 401 , NULL , & tdata ) FUNCTION_CALL 8 pjsip_endpt_create_response ( ast_sip_get_pjsip_endpoint ( ) , rdata , 401 , NULL , & tdata ) CALLEE 9 pjsip_endpt_create_response LEAF_NODE 10 pjsip_endpt_create_response LEAF_NODE 9 ( ARGUMENT 9 ast_sip_get_pjsip_endpoint ( ) FUNCTION_CALL 10 ast_sip_get_pjsip_endpoint ( ) CALLEE 11 ast_sip_get_pjsip_endpoint LEAF_NODE 12 ast_sip_get_pjsip_endpoint LEAF_NODE 11 ( LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 rdata FIELD 10 rdata LEAF_NODE 11 rdata LEAF_NODE 9 , ARGUMENT 9 401 FIELD 10 401 LEAF_NODE 11 401 LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 & tdata UNARY_EXPR 10 & tdata UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 tdata LEAF_NODE 12 tdata LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 ast_sip_check_authentication ( endpoint , rdata , tdata ) EXPR 8 ast_sip_check_authentication ( endpoint , rdata , tdata ) FUNCTION_CALL 9 ast_sip_check_authentication ( endpoint , rdata , tdata ) CALLEE 10 ast_sip_check_authentication LEAF_NODE 11 ast_sip_check_authentication LEAF_NODE 10 ( ARGUMENT 10 endpoint FIELD 11 endpoint LEAF_NODE 12 endpoint LEAF_NODE 10 , ARGUMENT 10 rdata FIELD 11 rdata LEAF_NODE 12 rdata LEAF_NODE 10 , ARGUMENT 10 tdata FIELD 11 tdata LEAF_NODE 12 tdata LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case AST_SIP_AUTHENTICATION_CHALLENGE : LEAF_NODE 10 case LEAF_NODE 10 AST_SIP_AUTHENTICATION_CHALLENGE LEAF_NODE 10 : EXPR_STATEMENT 9 ast_sip_report_auth_challenge_sent ( endpoint , rdata , tdata ) ; EXPR 10 ast_sip_report_auth_challenge_sent ( endpoint , rdata , tdata ) FUNCTION_CALL 11 ast_sip_report_auth_challenge_sent ( endpoint , rdata , tdata ) CALLEE 12 ast_sip_report_auth_challenge_sent LEAF_NODE 13 ast_sip_report_auth_challenge_sent LEAF_NODE 12 ( ARGUMENT 12 endpoint FIELD 13 endpoint LEAF_NODE 14 endpoint LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 tdata FIELD 13 tdata LEAF_NODE 14 tdata LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pjsip_endpt_send_response2 ( ast_sip_get_pjsip_endpoint ( ) , rdata , tdata , NULL , NULL ) ; EXPR 10 pjsip_endpt_send_response2 ( ast_sip_get_pjsip_endpoint ( ) , rdata , tdata , NULL , NULL ) FUNCTION_CALL 11 pjsip_endpt_send_response2 ( ast_sip_get_pjsip_endpoint ( ) , rdata , tdata , NULL , NULL ) CALLEE 12 pjsip_endpt_send_response2 LEAF_NODE 13 pjsip_endpt_send_response2 LEAF_NODE 12 ( ARGUMENT 12 ast_sip_get_pjsip_endpoint ( ) FUNCTION_CALL 13 ast_sip_get_pjsip_endpoint ( ) CALLEE 14 ast_sip_get_pjsip_endpoint LEAF_NODE 15 ast_sip_get_pjsip_endpoint LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 tdata FIELD 13 tdata LEAF_NODE 14 tdata LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return PJ_TRUE ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 PJ_TRUE EXPR 11 PJ_TRUE FIELD 12 PJ_TRUE LEAF_NODE 13 PJ_TRUE LEAF_NODE 10 ; LABEL 9 case AST_SIP_AUTHENTICATION_SUCCESS : LEAF_NODE 10 case LEAF_NODE 10 AST_SIP_AUTHENTICATION_SUCCESS LEAF_NODE 10 : SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ( unid = ao2_find ( unidentified_requests , rdata -> pkt_info . src_name , OBJ_SEARCH_KEY ) ) EXPR 11 ( unid = ao2_find ( unidentified_requests , rdata -> pkt_info . src_name , OBJ_SEARCH_KEY ) ) LEAF_NODE 12 ( ASSIGN 12 unid = ao2_find ( unidentified_requests , rdata -> pkt_info . src_name , OBJ_SEARCH_KEY ) LVAL 13 unid FIELD 14 unid LEAF_NODE 15 unid ASSIGN_OP 13 = LEAF_NODE 14 = RVAL 13 ao2_find ( unidentified_requests , rdata -> pkt_info . src_name , OBJ_SEARCH_KEY ) FUNCTION_CALL 14 ao2_find ( unidentified_requests , rdata -> pkt_info . src_name , OBJ_SEARCH_KEY ) CALLEE 15 ao2_find LEAF_NODE 16 ao2_find LEAF_NODE 15 ( ARGUMENT 15 unidentified_requests FIELD 16 unidentified_requests LEAF_NODE 17 unidentified_requests LEAF_NODE 15 , ARGUMENT 15 rdata -> pkt_info . src_name FIELD 16 rdata -> pkt_info . src_name LEAF_NODE 17 rdata LEAF_NODE 17 -> LEAF_NODE 17 pkt_info LEAF_NODE 17 . LEAF_NODE 17 src_name LEAF_NODE 15 , ARGUMENT 15 OBJ_SEARCH_KEY FIELD 16 OBJ_SEARCH_KEY LEAF_NODE 17 OBJ_SEARCH_KEY LEAF_NODE 15 ) LEAF_NODE 12 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ao2_unlink ( unidentified_requests , unid ) ; EXPR 13 ao2_unlink ( unidentified_requests , unid ) FUNCTION_CALL 14 ao2_unlink ( unidentified_requests , unid ) CALLEE 15 ao2_unlink LEAF_NODE 16 ao2_unlink LEAF_NODE 15 ( ARGUMENT 15 unidentified_requests FIELD 16 unidentified_requests LEAF_NODE 17 unidentified_requests LEAF_NODE 15 , ARGUMENT 15 unid FIELD 16 unid LEAF_NODE 17 unid LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ao2_ref ( unid , - 1 ) ; EXPR 13 ao2_ref ( unid , - 1 ) FUNCTION_CALL 14 ao2_ref ( unid , - 1 ) CALLEE 15 ao2_ref LEAF_NODE 16 ao2_ref LEAF_NODE 15 ( ARGUMENT 15 unid FIELD 16 unid LEAF_NODE 17 unid LEAF_NODE 15 , ARGUMENT 15 - 1 UNARY_EXPR 16 - 1 UNARY_OPERATOR 17 - LEAF_NODE 18 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 ast_sip_report_auth_success ( endpoint , rdata ) ; EXPR 10 ast_sip_report_auth_success ( endpoint , rdata ) FUNCTION_CALL 11 ast_sip_report_auth_success ( endpoint , rdata ) CALLEE 12 ast_sip_report_auth_success LEAF_NODE 13 ast_sip_report_auth_success LEAF_NODE 12 ( ARGUMENT 12 endpoint FIELD 13 endpoint LEAF_NODE 14 endpoint LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case AST_SIP_AUTHENTICATION_FAILED : LEAF_NODE 10 case LEAF_NODE 10 AST_SIP_AUTHENTICATION_FAILED LEAF_NODE 10 : EXPR_STATEMENT 9 log_failed_request ( rdata , \"Failed to authenticate\" , 0 , 0 ) ; EXPR 10 log_failed_request ( rdata , \"Failed to authenticate\" , 0 , 0 ) FUNCTION_CALL 11 log_failed_request ( rdata , \"Failed to authenticate\" , 0 , 0 ) CALLEE 12 log_failed_request LEAF_NODE 13 log_failed_request LEAF_NODE 12 ( ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 \"Failed to authenticate\" FIELD 13 \"Failed to authenticate\" LEAF_NODE 14 \"Failed to authenticate\" LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_sip_report_auth_failed_challenge_response ( endpoint , rdata ) ; EXPR 10 ast_sip_report_auth_failed_challenge_response ( endpoint , rdata ) FUNCTION_CALL 11 ast_sip_report_auth_failed_challenge_response ( endpoint , rdata ) CALLEE 12 ast_sip_report_auth_failed_challenge_response LEAF_NODE 13 ast_sip_report_auth_failed_challenge_response LEAF_NODE 12 ( ARGUMENT 12 endpoint FIELD 13 endpoint LEAF_NODE 14 endpoint LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pjsip_endpt_send_response2 ( ast_sip_get_pjsip_endpoint ( ) , rdata , tdata , NULL , NULL ) ; EXPR 10 pjsip_endpt_send_response2 ( ast_sip_get_pjsip_endpoint ( ) , rdata , tdata , NULL , NULL ) FUNCTION_CALL 11 pjsip_endpt_send_response2 ( ast_sip_get_pjsip_endpoint ( ) , rdata , tdata , NULL , NULL ) CALLEE 12 pjsip_endpt_send_response2 LEAF_NODE 13 pjsip_endpt_send_response2 LEAF_NODE 12 ( ARGUMENT 12 ast_sip_get_pjsip_endpoint ( ) FUNCTION_CALL 13 ast_sip_get_pjsip_endpoint ( ) CALLEE 14 ast_sip_get_pjsip_endpoint LEAF_NODE 15 ast_sip_get_pjsip_endpoint LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 tdata FIELD 13 tdata LEAF_NODE 14 tdata LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return PJ_TRUE ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 PJ_TRUE EXPR 11 PJ_TRUE FIELD 12 PJ_TRUE LEAF_NODE 13 PJ_TRUE LEAF_NODE 10 ; LABEL 9 case AST_SIP_AUTHENTICATION_ERROR : LEAF_NODE 10 case LEAF_NODE 10 AST_SIP_AUTHENTICATION_ERROR LEAF_NODE 10 : EXPR_STATEMENT 9 log_failed_request ( rdata , \"Error to authenticate\" , 0 , 0 ) ; EXPR 10 log_failed_request ( rdata , \"Error to authenticate\" , 0 , 0 ) FUNCTION_CALL 11 log_failed_request ( rdata , \"Error to authenticate\" , 0 , 0 ) CALLEE 12 log_failed_request LEAF_NODE 13 log_failed_request LEAF_NODE 12 ( ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 \"Error to authenticate\" FIELD 13 \"Error to authenticate\" LEAF_NODE 14 \"Error to authenticate\" LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 , ARGUMENT 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_sip_report_auth_failed_challenge_response ( endpoint , rdata ) ; EXPR 10 ast_sip_report_auth_failed_challenge_response ( endpoint , rdata ) FUNCTION_CALL 11 ast_sip_report_auth_failed_challenge_response ( endpoint , rdata ) CALLEE 12 ast_sip_report_auth_failed_challenge_response LEAF_NODE 13 ast_sip_report_auth_failed_challenge_response LEAF_NODE 12 ( ARGUMENT 12 endpoint FIELD 13 endpoint LEAF_NODE 14 endpoint LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pjsip_tx_data_dec_ref ( tdata ) ; EXPR 10 pjsip_tx_data_dec_ref ( tdata ) FUNCTION_CALL 11 pjsip_tx_data_dec_ref ( tdata ) CALLEE 12 pjsip_tx_data_dec_ref LEAF_NODE 13 pjsip_tx_data_dec_ref LEAF_NODE 12 ( ARGUMENT 12 tdata FIELD 13 tdata LEAF_NODE 14 tdata LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 pjsip_endpt_respond_stateless ( ast_sip_get_pjsip_endpoint ( ) , rdata , 500 , NULL , NULL , NULL ) ; EXPR 10 pjsip_endpt_respond_stateless ( ast_sip_get_pjsip_endpoint ( ) , rdata , 500 , NULL , NULL , NULL ) FUNCTION_CALL 11 pjsip_endpt_respond_stateless ( ast_sip_get_pjsip_endpoint ( ) , rdata , 500 , NULL , NULL , NULL ) CALLEE 12 pjsip_endpt_respond_stateless LEAF_NODE 13 pjsip_endpt_respond_stateless LEAF_NODE 12 ( ARGUMENT 12 ast_sip_get_pjsip_endpoint ( ) FUNCTION_CALL 13 ast_sip_get_pjsip_endpoint ( ) CALLEE 14 ast_sip_get_pjsip_endpoint LEAF_NODE 15 ast_sip_get_pjsip_endpoint LEAF_NODE 14 ( LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 rdata FIELD 13 rdata LEAF_NODE 14 rdata LEAF_NODE 12 , ARGUMENT 12 500 FIELD 13 500 LEAF_NODE 14 500 LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return PJ_TRUE ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 PJ_TRUE EXPR 11 PJ_TRUE FIELD 12 PJ_TRUE LEAF_NODE 13 PJ_TRUE LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 pjsip_tx_data_dec_ref ( tdata ) ; EXPR 7 pjsip_tx_data_dec_ref ( tdata ) FUNCTION_CALL 8 pjsip_tx_data_dec_ref ( tdata ) CALLEE 9 pjsip_tx_data_dec_ref LEAF_NODE 10 pjsip_tx_data_dec_ref LEAF_NODE 9 ( ARGUMENT 9 tdata FIELD 10 tdata LEAF_NODE 11 tdata LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return PJ_FALSE ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 PJ_FALSE EXPR 5 PJ_FALSE FIELD 6 PJ_FALSE LEAF_NODE 7 PJ_FALSE LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 23, "project": "openssl_ast_vul_function_test_adv_47", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 unload_pjsip LEAF_NODE 3 unload_pjsip PARAMETER_LIST 2 ( void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_pjsip_endpoint && serializer_pool [ 0 ] EXPR 5 ast_pjsip_endpoint && serializer_pool [ 0 ] AND 6 ast_pjsip_endpoint && serializer_pool [ 0 ] EXPR 7 ast_pjsip_endpoint FIELD 8 ast_pjsip_endpoint LEAF_NODE 9 ast_pjsip_endpoint LEAF_NODE 7 && EXPR 7 serializer_pool [ 0 ] FIELD 8 serializer_pool [ 0 ] LEAF_NODE 9 serializer_pool LEAF_NODE 9 [ EXPR 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ] LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_res_pjsip_cleanup_options_handling ( ) ; EXPR 7 ast_res_pjsip_cleanup_options_handling ( ) FUNCTION_CALL 8 ast_res_pjsip_cleanup_options_handling ( ) CALLEE 9 ast_res_pjsip_cleanup_options_handling LEAF_NODE 10 ast_res_pjsip_cleanup_options_handling LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_res_pjsip_cleanup_message_ip_updater ( ) ; EXPR 7 ast_res_pjsip_cleanup_message_ip_updater ( ) FUNCTION_CALL 8 ast_res_pjsip_cleanup_message_ip_updater ( ) CALLEE 9 ast_res_pjsip_cleanup_message_ip_updater LEAF_NODE 10 ast_res_pjsip_cleanup_message_ip_updater LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_sip_destroy_distributor ( ) ; EXPR 7 ast_sip_destroy_distributor ( ) FUNCTION_CALL 8 ast_sip_destroy_distributor ( ) CALLEE 9 ast_sip_destroy_distributor LEAF_NODE 10 ast_sip_destroy_distributor LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_res_pjsip_destroy_configuration ( ) ; EXPR 7 ast_res_pjsip_destroy_configuration ( ) FUNCTION_CALL 8 ast_res_pjsip_destroy_configuration ( ) CALLEE 9 ast_res_pjsip_destroy_configuration LEAF_NODE 10 ast_res_pjsip_destroy_configuration LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_sip_destroy_system ( ) ; EXPR 7 ast_sip_destroy_system ( ) FUNCTION_CALL 8 ast_sip_destroy_system ( ) CALLEE 9 ast_sip_destroy_system LEAF_NODE 10 ast_sip_destroy_system LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_sip_destroy_global_headers ( ) ; EXPR 7 ast_sip_destroy_global_headers ( ) FUNCTION_CALL 8 ast_sip_destroy_global_headers ( ) CALLEE 9 ast_sip_destroy_global_headers LEAF_NODE 10 ast_sip_destroy_global_headers LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 internal_sip_unregister_service ( & supplement_module ) ; EXPR 7 internal_sip_unregister_service ( & supplement_module ) FUNCTION_CALL 8 internal_sip_unregister_service ( & supplement_module ) CALLEE 9 internal_sip_unregister_service LEAF_NODE 10 internal_sip_unregister_service LEAF_NODE 9 ( ARGUMENT 9 & supplement_module UNARY_EXPR 10 & supplement_module UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 supplement_module LEAF_NODE 12 supplement_module LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 monitor_thread EXPR 5 monitor_thread FIELD 6 monitor_thread LEAF_NODE 7 monitor_thread LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 stop_monitor_thread ( ) ; EXPR 7 stop_monitor_thread ( ) FUNCTION_CALL 8 stop_monitor_thread ( ) CALLEE 9 stop_monitor_thread LEAF_NODE 10 stop_monitor_thread LEAF_NODE 9 ( LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 monitor_thread = NULL ; EXPR 7 monitor_thread = NULL ASSIGN 8 monitor_thread = NULL LVAL 9 monitor_thread FIELD 10 monitor_thread LEAF_NODE 11 monitor_thread ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 memory_pool EXPR 5 memory_pool FIELD 6 memory_pool LEAF_NODE 7 memory_pool LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 pj_pool_t * temp_pool ; temp_pool = memory_pool ; VAR_DECL 7 pj_pool_t * temp_pool ; temp_pool = memory_pool TYPE 8 pj_pool_t * TYPE_NAME 9 pj_pool_t LEAF_NODE 10 pj_pool_t POINTER 9 * LEAF_NODE 10 * NAME 8 temp_pool LEAF_NODE 9 temp_pool LEAF_NODE 8 ; INIT 8 temp_pool = memory_pool ASSIGN 9 temp_pool = memory_pool LVAL 10 temp_pool NAME 11 temp_pool LEAF_NODE 12 temp_pool ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 memory_pool FIELD 11 memory_pool LEAF_NODE 12 memory_pool LEAF_NODE 7 ; EXPR_STATEMENT 6 memory_pool = NULL ; EXPR 7 memory_pool = NULL ASSIGN 8 memory_pool = NULL LVAL 9 memory_pool FIELD 10 memory_pool LEAF_NODE 11 memory_pool ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 7 ; EXPR_STATEMENT 6 pj_pool_release ( temp_pool ) ; EXPR 7 pj_pool_release ( temp_pool ) FUNCTION_CALL 8 pj_pool_release ( temp_pool ) CALLEE 9 pj_pool_release LEAF_NODE 10 pj_pool_release LEAF_NODE 9 ( ARGUMENT 9 temp_pool FIELD 10 temp_pool LEAF_NODE 11 temp_pool LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_pjsip_endpoint = NULL ; EXPR 4 ast_pjsip_endpoint = NULL ASSIGN 5 ast_pjsip_endpoint = NULL LVAL 6 ast_pjsip_endpoint FIELD 7 ast_pjsip_endpoint LEAF_NODE 8 ast_pjsip_endpoint ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 caching_pool . lock EXPR 5 caching_pool . lock FIELD 6 caching_pool . lock LEAF_NODE 7 caching_pool LEAF_NODE 7 . LEAF_NODE 7 lock LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 pj_caching_pool_destroy ( & caching_pool ) ; EXPR 7 pj_caching_pool_destroy ( & caching_pool ) FUNCTION_CALL 8 pj_caching_pool_destroy ( & caching_pool ) CALLEE 9 pj_caching_pool_destroy LEAF_NODE 10 pj_caching_pool_destroy LEAF_NODE 9 ( ARGUMENT 9 & caching_pool UNARY_EXPR 10 & caching_pool UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 caching_pool LEAF_NODE 12 caching_pool LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 pj_shutdown ( ) ; EXPR 4 pj_shutdown ( ) FUNCTION_CALL 5 pj_shutdown ( ) CALLEE 6 pj_shutdown LEAF_NODE 7 pj_shutdown LEAF_NODE 6 ( LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 24, "project": "openssl_ast_vul_function_test_adv_36", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 null_validator LEAF_NODE 3 null_validator PARAMETER_LIST 2 ( struct ast_json * json ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_json * json TYPE 4 struct ast_json * TYPE_NAME 5 struct ast_json LEAF_NODE 6 struct LEAF_NODE 6 ast_json POINTER 5 * LEAF_NODE 6 * NAME 4 json LEAF_NODE 5 json LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 25, "project": "openssl_ast_vul_function_test_adv_29", "target": 1}
{"func": "SIMPLE_DECL 1 unsigned int pj_uint32_t ; VAR_DECL 2 unsigned int pj_uint32_t TYPE 3 unsigned int TYPE_NAME 4 unsigned int LEAF_NODE 5 unsigned LEAF_NODE 5 int NAME 3 pj_uint32_t LEAF_NODE 4 pj_uint32_t LEAF_NODE 2 ; SIMPLE_DECL 1 long pj_ssize_t ; VAR_DECL 2 long pj_ssize_t TYPE 3 long TYPE_NAME 4 long LEAF_NODE 5 long NAME 3 pj_ssize_t LEAF_NODE 4 pj_ssize_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_pool_t pj_pool_t ; VAR_DECL 2 struct pj_pool_t pj_pool_t TYPE 3 struct pj_pool_t TYPE_NAME 4 struct pj_pool_t LEAF_NODE 5 struct LEAF_NODE 5 pj_pool_t NAME 3 pj_pool_t LEAF_NODE 4 pj_pool_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_transport pjsip_transport ; VAR_DECL 2 struct pjsip_transport pjsip_transport TYPE 3 struct pjsip_transport TYPE_NAME 4 struct pjsip_transport LEAF_NODE 5 struct LEAF_NODE 5 pjsip_transport NAME 3 pjsip_transport LEAF_NODE 4 pjsip_transport LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_rx_data pjsip_rx_data ; VAR_DECL 2 struct pjsip_rx_data pjsip_rx_data TYPE 3 struct pjsip_rx_data TYPE_NAME 4 struct pjsip_rx_data LEAF_NODE 5 struct LEAF_NODE 5 pjsip_rx_data NAME 3 pjsip_rx_data LEAF_NODE 4 pjsip_rx_data LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_ioqueue_op_key_t BASE_CLASSES { void * [ 32 ] internal__ ; void * activesock_data ; void * user_data ; } pj_ioqueue_op_key_t ; VAR_DECL 2 struct pj_ioqueue_op_key_t BASE_CLASSES { void * [ 32 ] internal__ ; void * activesock_data ; void * user_data ; } pj_ioqueue_op_key_t TYPE 3 struct pj_ioqueue_op_key_t BASE_CLASSES { void * [ 32 ] internal__ ; void * activesock_data ; void * user_data ; } CLASS_DEF 4 struct pj_ioqueue_op_key_t BASE_CLASSES { void * [ 32 ] internal__ ; void * activesock_data ; void * user_data ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_ioqueue_op_key_t LEAF_NODE 6 pj_ioqueue_op_key_t LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 void * [ 32 ] internal__ ; void * activesock_data ; void * user_data ; SIMPLE_DECL 6 void * [ 32 ] internal__ ; VAR_DECL 7 void * [ 32 ] internal__ TYPE 8 void * [ 32 ] TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * TYPE_SUFFIX 9 [ 32 ] LEAF_NODE 10 [ FIELD 10 32 LEAF_NODE 11 32 LEAF_NODE 10 ] NAME 8 internal__ LEAF_NODE 9 internal__ LEAF_NODE 7 ; SIMPLE_DECL 6 void * activesock_data ; VAR_DECL 7 void * activesock_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 activesock_data LEAF_NODE 9 activesock_data LEAF_NODE 7 ; SIMPLE_DECL 6 void * user_data ; VAR_DECL 7 void * user_data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 user_data LEAF_NODE 9 user_data LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_ioqueue_op_key_t LEAF_NODE 4 pj_ioqueue_op_key_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_rx_data_op_key BASE_CLASSES { pj_ioqueue_op_key_t op_key ; pjsip_rx_data * rdata ; } pjsip_rx_data_op_key ; VAR_DECL 2 struct pjsip_rx_data_op_key BASE_CLASSES { pj_ioqueue_op_key_t op_key ; pjsip_rx_data * rdata ; } pjsip_rx_data_op_key TYPE 3 struct pjsip_rx_data_op_key BASE_CLASSES { pj_ioqueue_op_key_t op_key ; pjsip_rx_data * rdata ; } CLASS_DEF 4 struct pjsip_rx_data_op_key BASE_CLASSES { pj_ioqueue_op_key_t op_key ; pjsip_rx_data * rdata ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_rx_data_op_key LEAF_NODE 6 pjsip_rx_data_op_key LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_ioqueue_op_key_t op_key ; pjsip_rx_data * rdata ; SIMPLE_DECL 6 pj_ioqueue_op_key_t op_key ; VAR_DECL 7 pj_ioqueue_op_key_t op_key TYPE 8 pj_ioqueue_op_key_t TYPE_NAME 9 pj_ioqueue_op_key_t LEAF_NODE 10 pj_ioqueue_op_key_t NAME 8 op_key LEAF_NODE 9 op_key LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_rx_data * rdata ; VAR_DECL 7 pjsip_rx_data * rdata TYPE 8 pjsip_rx_data * TYPE_NAME 9 pjsip_rx_data LEAF_NODE 10 pjsip_rx_data POINTER 9 * LEAF_NODE 10 * NAME 8 rdata LEAF_NODE 9 rdata LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_rx_data_op_key LEAF_NODE 4 pjsip_rx_data_op_key LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_time_val BASE_CLASSES { long sec ; long msec ; } pj_time_val ; VAR_DECL 2 struct pj_time_val BASE_CLASSES { long sec ; long msec ; } pj_time_val TYPE 3 struct pj_time_val BASE_CLASSES { long sec ; long msec ; } CLASS_DEF 4 struct pj_time_val BASE_CLASSES { long sec ; long msec ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_time_val LEAF_NODE 6 pj_time_val LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 long sec ; long msec ; SIMPLE_DECL 6 long sec ; VAR_DECL 7 long sec TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 sec LEAF_NODE 9 sec LEAF_NODE 7 ; SIMPLE_DECL 6 long msec ; VAR_DECL 7 long msec TYPE 8 long TYPE_NAME 9 long LEAF_NODE 10 long NAME 8 msec LEAF_NODE 9 msec LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_time_val LEAF_NODE 4 pj_time_val LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_addr_hdr BASE_CLASSES { int8_t sa_zero_len ; int8_t sa_family ; int16_t sa_family ; } pj_addr_hdr ; VAR_DECL 2 struct pj_addr_hdr BASE_CLASSES { int8_t sa_zero_len ; int8_t sa_family ; int16_t sa_family ; } pj_addr_hdr TYPE 3 struct pj_addr_hdr BASE_CLASSES { int8_t sa_zero_len ; int8_t sa_family ; int16_t sa_family ; } CLASS_DEF 4 struct pj_addr_hdr BASE_CLASSES { int8_t sa_zero_len ; int8_t sa_family ; int16_t sa_family ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_addr_hdr LEAF_NODE 6 pj_addr_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int8_t sa_zero_len ; int8_t sa_family ; int16_t sa_family ; SIMPLE_DECL 6 int8_t sa_zero_len ; VAR_DECL 7 int8_t sa_zero_len TYPE 8 int8_t TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t NAME 8 sa_zero_len LEAF_NODE 9 sa_zero_len LEAF_NODE 7 ; SIMPLE_DECL 6 int8_t sa_family ; VAR_DECL 7 int8_t sa_family TYPE 8 int8_t TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t NAME 8 sa_family LEAF_NODE 9 sa_family LEAF_NODE 7 ; SIMPLE_DECL 6 int16_t sa_family ; VAR_DECL 7 int16_t sa_family TYPE 8 int16_t TYPE_NAME 9 int16_t LEAF_NODE 10 int16_t NAME 8 sa_family LEAF_NODE 9 sa_family LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_addr_hdr LEAF_NODE 4 pj_addr_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_in_addr BASE_CLASSES { int32_t s_addr ; } pj_in_addr ; VAR_DECL 2 struct pj_in_addr BASE_CLASSES { int32_t s_addr ; } pj_in_addr TYPE 3 struct pj_in_addr BASE_CLASSES { int32_t s_addr ; } CLASS_DEF 4 struct pj_in_addr BASE_CLASSES { int32_t s_addr ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_in_addr LEAF_NODE 6 pj_in_addr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int32_t s_addr ; SIMPLE_DECL 6 int32_t s_addr ; VAR_DECL 7 int32_t s_addr TYPE 8 int32_t TYPE_NAME 9 int32_t LEAF_NODE 10 int32_t NAME 8 s_addr LEAF_NODE 9 s_addr LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_in_addr LEAF_NODE 4 pj_in_addr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_sockaddr_in BASE_CLASSES { int8_t sin_zero_len ; int8_t sin_family ; int16_t sin_family ; int16_t sin_port ; pj_in_addr sin_addr ; char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad ; } pj_sockaddr_in ; VAR_DECL 2 struct pj_sockaddr_in BASE_CLASSES { int8_t sin_zero_len ; int8_t sin_family ; int16_t sin_family ; int16_t sin_port ; pj_in_addr sin_addr ; char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad ; } pj_sockaddr_in TYPE 3 struct pj_sockaddr_in BASE_CLASSES { int8_t sin_zero_len ; int8_t sin_family ; int16_t sin_family ; int16_t sin_port ; pj_in_addr sin_addr ; char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad ; } CLASS_DEF 4 struct pj_sockaddr_in BASE_CLASSES { int8_t sin_zero_len ; int8_t sin_family ; int16_t sin_family ; int16_t sin_port ; pj_in_addr sin_addr ; char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_sockaddr_in LEAF_NODE 6 pj_sockaddr_in LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int8_t sin_zero_len ; int8_t sin_family ; int16_t sin_family ; int16_t sin_port ; pj_in_addr sin_addr ; char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad ; SIMPLE_DECL 6 int8_t sin_zero_len ; VAR_DECL 7 int8_t sin_zero_len TYPE 8 int8_t TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t NAME 8 sin_zero_len LEAF_NODE 9 sin_zero_len LEAF_NODE 7 ; SIMPLE_DECL 6 int8_t sin_family ; VAR_DECL 7 int8_t sin_family TYPE 8 int8_t TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t NAME 8 sin_family LEAF_NODE 9 sin_family LEAF_NODE 7 ; SIMPLE_DECL 6 int16_t sin_family ; VAR_DECL 7 int16_t sin_family TYPE 8 int16_t TYPE_NAME 9 int16_t LEAF_NODE 10 int16_t NAME 8 sin_family LEAF_NODE 9 sin_family LEAF_NODE 7 ; SIMPLE_DECL 6 int16_t sin_port ; VAR_DECL 7 int16_t sin_port TYPE 8 int16_t TYPE_NAME 9 int16_t LEAF_NODE 10 int16_t NAME 8 sin_port LEAF_NODE 9 sin_port LEAF_NODE 7 ; SIMPLE_DECL 6 pj_in_addr sin_addr ; VAR_DECL 7 pj_in_addr sin_addr TYPE 8 pj_in_addr TYPE_NAME 9 pj_in_addr LEAF_NODE 10 pj_in_addr NAME 8 sin_addr LEAF_NODE 9 sin_addr LEAF_NODE 7 ; SIMPLE_DECL 6 char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad ; VAR_DECL 7 char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] sin_zero_pad TYPE 8 char [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ PJ_SOCKADDR_IN_SIN_ZERO_LEN ] LEAF_NODE 10 [ FIELD 10 PJ_SOCKADDR_IN_SIN_ZERO_LEN LEAF_NODE 11 PJ_SOCKADDR_IN_SIN_ZERO_LEN LEAF_NODE 10 ] NAME 8 sin_zero_pad LEAF_NODE 9 sin_zero_pad LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_sockaddr_in LEAF_NODE 4 pj_sockaddr_in LEAF_NODE 2 ; SIMPLE_DECL 1 union pj_in6_addr BASE_CLASSES { int8_t [ 16 ] s6_addr ; int32_t [ 4 ] u6_addr32 ; ( ! defined ( PJ_WIN32 ) || PJ_WIN32 == 0 ) int64_t [ 2 ] u6_addr64 ; } pj_in6_addr ; VAR_DECL 2 union pj_in6_addr BASE_CLASSES { int8_t [ 16 ] s6_addr ; int32_t [ 4 ] u6_addr32 ; ( ! defined ( PJ_WIN32 ) || PJ_WIN32 == 0 ) int64_t [ 2 ] u6_addr64 ; } pj_in6_addr TYPE 3 union pj_in6_addr BASE_CLASSES { int8_t [ 16 ] s6_addr ; int32_t [ 4 ] u6_addr32 ; ( ! defined ( PJ_WIN32 ) || PJ_WIN32 == 0 ) int64_t [ 2 ] u6_addr64 ; } CLASS_DEF 4 union pj_in6_addr BASE_CLASSES { int8_t [ 16 ] s6_addr ; int32_t [ 4 ] u6_addr32 ; ( ! defined ( PJ_WIN32 ) || PJ_WIN32 == 0 ) int64_t [ 2 ] u6_addr64 ; } LEAF_NODE 5 union CLASS_NAME 5 pj_in6_addr LEAF_NODE 6 pj_in6_addr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int8_t [ 16 ] s6_addr ; int32_t [ 4 ] u6_addr32 ; ( ! defined ( PJ_WIN32 ) || PJ_WIN32 == 0 ) int64_t [ 2 ] u6_addr64 ; SIMPLE_DECL 6 int8_t [ 16 ] s6_addr ; VAR_DECL 7 int8_t [ 16 ] s6_addr TYPE 8 int8_t [ 16 ] TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t TYPE_SUFFIX 9 [ 16 ] LEAF_NODE 10 [ FIELD 10 16 LEAF_NODE 11 16 LEAF_NODE 10 ] NAME 8 s6_addr LEAF_NODE 9 s6_addr LEAF_NODE 7 ; SIMPLE_DECL 6 int32_t [ 4 ] u6_addr32 ; VAR_DECL 7 int32_t [ 4 ] u6_addr32 TYPE 8 int32_t [ 4 ] TYPE_NAME 9 int32_t LEAF_NODE 10 int32_t TYPE_SUFFIX 9 [ 4 ] LEAF_NODE 10 [ FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 10 ] NAME 8 u6_addr32 LEAF_NODE 9 u6_addr32 LEAF_NODE 7 ; LEAF_NODE 6 ( LEAF_NODE 6 ! LEAF_NODE 6 defined LEAF_NODE 6 ( LEAF_NODE 6 PJ_WIN32 LEAF_NODE 6 ) LEAF_NODE 6 || LEAF_NODE 6 PJ_WIN32 LEAF_NODE 6 == LEAF_NODE 6 0 LEAF_NODE 6 ) SIMPLE_DECL 6 int64_t [ 2 ] u6_addr64 ; VAR_DECL 7 int64_t [ 2 ] u6_addr64 TYPE 8 int64_t [ 2 ] TYPE_NAME 9 int64_t LEAF_NODE 10 int64_t TYPE_SUFFIX 9 [ 2 ] LEAF_NODE 10 [ FIELD 10 2 LEAF_NODE 11 2 LEAF_NODE 10 ] NAME 8 u6_addr64 LEAF_NODE 9 u6_addr64 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_in6_addr LEAF_NODE 4 pj_in6_addr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_sockaddr_in6 BASE_CLASSES { int8_t sin6_zero_len ; int8_t sin6_family ; int16_t sin6_family ; int16_t sin6_port ; int32_t sin6_flowinfo ; pj_in6_addr sin6_addr ; int32_t sin6_scope_id ; } pj_sockaddr_in6 ; VAR_DECL 2 struct pj_sockaddr_in6 BASE_CLASSES { int8_t sin6_zero_len ; int8_t sin6_family ; int16_t sin6_family ; int16_t sin6_port ; int32_t sin6_flowinfo ; pj_in6_addr sin6_addr ; int32_t sin6_scope_id ; } pj_sockaddr_in6 TYPE 3 struct pj_sockaddr_in6 BASE_CLASSES { int8_t sin6_zero_len ; int8_t sin6_family ; int16_t sin6_family ; int16_t sin6_port ; int32_t sin6_flowinfo ; pj_in6_addr sin6_addr ; int32_t sin6_scope_id ; } CLASS_DEF 4 struct pj_sockaddr_in6 BASE_CLASSES { int8_t sin6_zero_len ; int8_t sin6_family ; int16_t sin6_family ; int16_t sin6_port ; int32_t sin6_flowinfo ; pj_in6_addr sin6_addr ; int32_t sin6_scope_id ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_sockaddr_in6 LEAF_NODE 6 pj_sockaddr_in6 LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int8_t sin6_zero_len ; int8_t sin6_family ; int16_t sin6_family ; int16_t sin6_port ; int32_t sin6_flowinfo ; pj_in6_addr sin6_addr ; int32_t sin6_scope_id ; SIMPLE_DECL 6 int8_t sin6_zero_len ; VAR_DECL 7 int8_t sin6_zero_len TYPE 8 int8_t TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t NAME 8 sin6_zero_len LEAF_NODE 9 sin6_zero_len LEAF_NODE 7 ; SIMPLE_DECL 6 int8_t sin6_family ; VAR_DECL 7 int8_t sin6_family TYPE 8 int8_t TYPE_NAME 9 int8_t LEAF_NODE 10 int8_t NAME 8 sin6_family LEAF_NODE 9 sin6_family LEAF_NODE 7 ; SIMPLE_DECL 6 int16_t sin6_family ; VAR_DECL 7 int16_t sin6_family TYPE 8 int16_t TYPE_NAME 9 int16_t LEAF_NODE 10 int16_t NAME 8 sin6_family LEAF_NODE 9 sin6_family LEAF_NODE 7 ; SIMPLE_DECL 6 int16_t sin6_port ; VAR_DECL 7 int16_t sin6_port TYPE 8 int16_t TYPE_NAME 9 int16_t LEAF_NODE 10 int16_t NAME 8 sin6_port LEAF_NODE 9 sin6_port LEAF_NODE 7 ; SIMPLE_DECL 6 int32_t sin6_flowinfo ; VAR_DECL 7 int32_t sin6_flowinfo TYPE 8 int32_t TYPE_NAME 9 int32_t LEAF_NODE 10 int32_t NAME 8 sin6_flowinfo LEAF_NODE 9 sin6_flowinfo LEAF_NODE 7 ; SIMPLE_DECL 6 pj_in6_addr sin6_addr ; VAR_DECL 7 pj_in6_addr sin6_addr TYPE 8 pj_in6_addr TYPE_NAME 9 pj_in6_addr LEAF_NODE 10 pj_in6_addr NAME 8 sin6_addr LEAF_NODE 9 sin6_addr LEAF_NODE 7 ; SIMPLE_DECL 6 int32_t sin6_scope_id ; VAR_DECL 7 int32_t sin6_scope_id TYPE 8 int32_t TYPE_NAME 9 int32_t LEAF_NODE 10 int32_t NAME 8 sin6_scope_id LEAF_NODE 9 sin6_scope_id LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_sockaddr_in6 LEAF_NODE 4 pj_sockaddr_in6 LEAF_NODE 2 ; SIMPLE_DECL 1 union pj_sockaddr BASE_CLASSES { pj_addr_hdr addr ; pj_sockaddr_in ipv4 ; pj_sockaddr_in6 ipv6 ; } pj_sockaddr ; VAR_DECL 2 union pj_sockaddr BASE_CLASSES { pj_addr_hdr addr ; pj_sockaddr_in ipv4 ; pj_sockaddr_in6 ipv6 ; } pj_sockaddr TYPE 3 union pj_sockaddr BASE_CLASSES { pj_addr_hdr addr ; pj_sockaddr_in ipv4 ; pj_sockaddr_in6 ipv6 ; } CLASS_DEF 4 union pj_sockaddr BASE_CLASSES { pj_addr_hdr addr ; pj_sockaddr_in ipv4 ; pj_sockaddr_in6 ipv6 ; } LEAF_NODE 5 union CLASS_NAME 5 pj_sockaddr LEAF_NODE 6 pj_sockaddr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_addr_hdr addr ; pj_sockaddr_in ipv4 ; pj_sockaddr_in6 ipv6 ; SIMPLE_DECL 6 pj_addr_hdr addr ; VAR_DECL 7 pj_addr_hdr addr TYPE 8 pj_addr_hdr TYPE_NAME 9 pj_addr_hdr LEAF_NODE 10 pj_addr_hdr NAME 8 addr LEAF_NODE 9 addr LEAF_NODE 7 ; SIMPLE_DECL 6 pj_sockaddr_in ipv4 ; VAR_DECL 7 pj_sockaddr_in ipv4 TYPE 8 pj_sockaddr_in TYPE_NAME 9 pj_sockaddr_in LEAF_NODE 10 pj_sockaddr_in NAME 8 ipv4 LEAF_NODE 9 ipv4 LEAF_NODE 7 ; SIMPLE_DECL 6 pj_sockaddr_in6 ipv6 ; VAR_DECL 7 pj_sockaddr_in6 ipv6 TYPE 8 pj_sockaddr_in6 TYPE_NAME 9 pj_sockaddr_in6 LEAF_NODE 10 pj_sockaddr_in6 NAME 8 ipv6 LEAF_NODE 9 ipv6 LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_sockaddr LEAF_NODE 4 pj_sockaddr LEAF_NODE 2 ; SIMPLE_DECL 1 enum pjsip_msg_type_e BASE_CLASSES { PJSIP_REQUEST_MSG , PJSIP_RESPONSE_MSG } pjsip_msg_type_e ; VAR_DECL 2 enum pjsip_msg_type_e BASE_CLASSES { PJSIP_REQUEST_MSG , PJSIP_RESPONSE_MSG } pjsip_msg_type_e TYPE 3 enum pjsip_msg_type_e BASE_CLASSES { PJSIP_REQUEST_MSG , PJSIP_RESPONSE_MSG } CLASS_DEF 4 enum pjsip_msg_type_e BASE_CLASSES { PJSIP_REQUEST_MSG , PJSIP_RESPONSE_MSG } LEAF_NODE 5 enum CLASS_NAME 5 pjsip_msg_type_e LEAF_NODE 6 pjsip_msg_type_e LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 PJSIP_REQUEST_MSG , PJSIP_RESPONSE_MSG LEAF_NODE 6 PJSIP_REQUEST_MSG LEAF_NODE 6 , LEAF_NODE 6 PJSIP_RESPONSE_MSG LEAF_NODE 5 } NAME 3 pjsip_msg_type_e LEAF_NODE 4 pjsip_msg_type_e LEAF_NODE 2 ; SIMPLE_DECL 1 struct pj_str_t BASE_CLASSES { char * ptr ; int64_t slen ; } pj_str_t ; VAR_DECL 2 struct pj_str_t BASE_CLASSES { char * ptr ; int64_t slen ; } pj_str_t TYPE 3 struct pj_str_t BASE_CLASSES { char * ptr ; int64_t slen ; } CLASS_DEF 4 struct pj_str_t BASE_CLASSES { char * ptr ; int64_t slen ; } LEAF_NODE 5 struct CLASS_NAME 5 pj_str_t LEAF_NODE 6 pj_str_t LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 char * ptr ; int64_t slen ; SIMPLE_DECL 6 char * ptr ; VAR_DECL 7 char * ptr TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 ptr LEAF_NODE 9 ptr LEAF_NODE 7 ; SIMPLE_DECL 6 int64_t slen ; VAR_DECL 7 int64_t slen TYPE 8 int64_t TYPE_NAME 9 int64_t LEAF_NODE 10 int64_t NAME 8 slen LEAF_NODE 9 slen LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pj_str_t LEAF_NODE 4 pj_str_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_param BASE_CLASSES { pj_str_t name ; pj_str_t value ; } pjsip_param ; VAR_DECL 2 struct pjsip_param BASE_CLASSES { pj_str_t name ; pj_str_t value ; } pjsip_param TYPE 3 struct pjsip_param BASE_CLASSES { pj_str_t name ; pj_str_t value ; } CLASS_DEF 4 struct pjsip_param BASE_CLASSES { pj_str_t name ; pj_str_t value ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_param LEAF_NODE 6 pjsip_param LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_str_t name ; pj_str_t value ; SIMPLE_DECL 6 pj_str_t name ; VAR_DECL 7 pj_str_t name TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t value ; VAR_DECL 7 pj_str_t value TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 value LEAF_NODE 9 value LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_param LEAF_NODE 4 pjsip_param LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_media_type BASE_CLASSES { pj_str_t type ; pj_str_t subtype ; pjsip_param param ; } pjsip_media_type ; VAR_DECL 2 struct pjsip_media_type BASE_CLASSES { pj_str_t type ; pj_str_t subtype ; pjsip_param param ; } pjsip_media_type TYPE 3 struct pjsip_media_type BASE_CLASSES { pj_str_t type ; pj_str_t subtype ; pjsip_param param ; } CLASS_DEF 4 struct pjsip_media_type BASE_CLASSES { pj_str_t type ; pj_str_t subtype ; pjsip_param param ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_media_type LEAF_NODE 6 pjsip_media_type LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_str_t type ; pj_str_t subtype ; pjsip_param param ; SIMPLE_DECL 6 pj_str_t type ; VAR_DECL 7 pj_str_t type TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 type LEAF_NODE 9 type LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t subtype ; VAR_DECL 7 pj_str_t subtype TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 subtype LEAF_NODE 9 subtype LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_param param ; VAR_DECL 7 pjsip_param param TYPE 8 pjsip_param TYPE_NAME 9 pjsip_param LEAF_NODE 10 pjsip_param NAME 8 param LEAF_NODE 9 param LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_media_type LEAF_NODE 4 pjsip_media_type LEAF_NODE 2 ; SIMPLE_DECL 1 unsigned long pj_size_t ; VAR_DECL 2 unsigned long pj_size_t TYPE 3 unsigned long TYPE_NAME 4 unsigned long LEAF_NODE 5 unsigned LEAF_NODE 5 long NAME 3 pj_size_t LEAF_NODE 4 pj_size_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_msg_body BASE_CLASSES { pjsip_media_type content_type ; void * data ; unsigned len ; int ( * print_body ) ( struct pjsip_msg_body * msg_body , char * buf , pj_size_t size ) ; void * ( * clone_data ) ( pj_pool_t * pool , const void * data , unsigned len ) ; } pjsip_msg_body ; VAR_DECL 2 struct pjsip_msg_body BASE_CLASSES { pjsip_media_type content_type ; void * data ; unsigned len ; int ( * print_body ) ( struct pjsip_msg_body * msg_body , char * buf , pj_size_t size ) ; void * ( * clone_data ) ( pj_pool_t * pool , const void * data , unsigned len ) ; } pjsip_msg_body TYPE 3 struct pjsip_msg_body BASE_CLASSES { pjsip_media_type content_type ; void * data ; unsigned len ; int ( * print_body ) ( struct pjsip_msg_body * msg_body , char * buf , pj_size_t size ) ; void * ( * clone_data ) ( pj_pool_t * pool , const void * data , unsigned len ) ; } CLASS_DEF 4 struct pjsip_msg_body BASE_CLASSES { pjsip_media_type content_type ; void * data ; unsigned len ; int ( * print_body ) ( struct pjsip_msg_body * msg_body , char * buf , pj_size_t size ) ; void * ( * clone_data ) ( pj_pool_t * pool , const void * data , unsigned len ) ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_msg_body LEAF_NODE 6 pjsip_msg_body LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_media_type content_type ; void * data ; unsigned len ; int ( * print_body ) ( struct pjsip_msg_body * msg_body , char * buf , pj_size_t size ) ; void * ( * clone_data ) ( pj_pool_t * pool , const void * data , unsigned len ) ; SIMPLE_DECL 6 pjsip_media_type content_type ; VAR_DECL 7 pjsip_media_type content_type TYPE 8 pjsip_media_type TYPE_NAME 9 pjsip_media_type LEAF_NODE 10 pjsip_media_type NAME 8 content_type LEAF_NODE 9 content_type LEAF_NODE 7 ; SIMPLE_DECL 6 void * data ; VAR_DECL 7 void * data TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 data LEAF_NODE 9 data LEAF_NODE 7 ; LEAF_NODE 6 unsigned LEAF_NODE 6 len LEAF_NODE 6 ; LEAF_NODE 6 int LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 print_body LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 struct LEAF_NODE 6 pjsip_msg_body LEAF_NODE 6 * LEAF_NODE 6 msg_body LEAF_NODE 6 , LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 buf LEAF_NODE 6 , LEAF_NODE 6 pj_size_t LEAF_NODE 6 size LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 clone_data LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 pj_pool_t LEAF_NODE 6 * LEAF_NODE 6 pool LEAF_NODE 6 , LEAF_NODE 6 const LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 data LEAF_NODE 6 , LEAF_NODE 6 unsigned LEAF_NODE 6 len LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } NAME 3 pjsip_msg_body LEAF_NODE 4 pjsip_msg_body LEAF_NODE 2 ; SIMPLE_DECL 1 enum pjsip_method_e BASE_CLASSES { PJSIP_INVITE_METHOD , PJSIP_CANCEL_METHOD , PJSIP_ACK_METHOD , PJSIP_BYE_METHOD , PJSIP_REGISTER_METHOD , PJSIP_OPTIONS_METHOD , PJSIP_OTHER_METHOD } pjsip_method_e ; VAR_DECL 2 enum pjsip_method_e BASE_CLASSES { PJSIP_INVITE_METHOD , PJSIP_CANCEL_METHOD , PJSIP_ACK_METHOD , PJSIP_BYE_METHOD , PJSIP_REGISTER_METHOD , PJSIP_OPTIONS_METHOD , PJSIP_OTHER_METHOD } pjsip_method_e TYPE 3 enum pjsip_method_e BASE_CLASSES { PJSIP_INVITE_METHOD , PJSIP_CANCEL_METHOD , PJSIP_ACK_METHOD , PJSIP_BYE_METHOD , PJSIP_REGISTER_METHOD , PJSIP_OPTIONS_METHOD , PJSIP_OTHER_METHOD } CLASS_DEF 4 enum pjsip_method_e BASE_CLASSES { PJSIP_INVITE_METHOD , PJSIP_CANCEL_METHOD , PJSIP_ACK_METHOD , PJSIP_BYE_METHOD , PJSIP_REGISTER_METHOD , PJSIP_OPTIONS_METHOD , PJSIP_OTHER_METHOD } LEAF_NODE 5 enum CLASS_NAME 5 pjsip_method_e LEAF_NODE 6 pjsip_method_e LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 PJSIP_INVITE_METHOD , PJSIP_CANCEL_METHOD , PJSIP_ACK_METHOD , PJSIP_BYE_METHOD , PJSIP_REGISTER_METHOD , PJSIP_OPTIONS_METHOD , PJSIP_OTHER_METHOD LEAF_NODE 6 PJSIP_INVITE_METHOD LEAF_NODE 6 , LEAF_NODE 6 PJSIP_CANCEL_METHOD LEAF_NODE 6 , LEAF_NODE 6 PJSIP_ACK_METHOD LEAF_NODE 6 , LEAF_NODE 6 PJSIP_BYE_METHOD LEAF_NODE 6 , LEAF_NODE 6 PJSIP_REGISTER_METHOD LEAF_NODE 6 , LEAF_NODE 6 PJSIP_OPTIONS_METHOD LEAF_NODE 6 , LEAF_NODE 6 PJSIP_OTHER_METHOD LEAF_NODE 5 } NAME 3 pjsip_method_e LEAF_NODE 4 pjsip_method_e LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_method BASE_CLASSES { pjsip_method_e id ; pj_str_t name ; } pjsip_method ; VAR_DECL 2 struct pjsip_method BASE_CLASSES { pjsip_method_e id ; pj_str_t name ; } pjsip_method TYPE 3 struct pjsip_method BASE_CLASSES { pjsip_method_e id ; pj_str_t name ; } CLASS_DEF 4 struct pjsip_method BASE_CLASSES { pjsip_method_e id ; pj_str_t name ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_method LEAF_NODE 6 pjsip_method LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_method_e id ; pj_str_t name ; SIMPLE_DECL 6 pjsip_method_e id ; VAR_DECL 7 pjsip_method_e id TYPE 8 pjsip_method_e TYPE_NAME 9 pjsip_method_e LEAF_NODE 10 pjsip_method_e NAME 8 id LEAF_NODE 9 id LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t name ; VAR_DECL 7 pj_str_t name TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 name LEAF_NODE 9 name LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_method LEAF_NODE 4 pjsip_method LEAF_NODE 2 ; SIMPLE_DECL 1 enum pjsip_uri_context_e BASE_CLASSES { PJSIP_URI_IN_REQ_URI , PJSIP_URI_IN_FROMTO_HDR , PJSIP_URI_IN_CONTACT_HDR , PJSIP_URI_IN_ROUTING_HDR , PJSIP_URI_IN_OTHER } pjsip_uri_context_e ; VAR_DECL 2 enum pjsip_uri_context_e BASE_CLASSES { PJSIP_URI_IN_REQ_URI , PJSIP_URI_IN_FROMTO_HDR , PJSIP_URI_IN_CONTACT_HDR , PJSIP_URI_IN_ROUTING_HDR , PJSIP_URI_IN_OTHER } pjsip_uri_context_e TYPE 3 enum pjsip_uri_context_e BASE_CLASSES { PJSIP_URI_IN_REQ_URI , PJSIP_URI_IN_FROMTO_HDR , PJSIP_URI_IN_CONTACT_HDR , PJSIP_URI_IN_ROUTING_HDR , PJSIP_URI_IN_OTHER } CLASS_DEF 4 enum pjsip_uri_context_e BASE_CLASSES { PJSIP_URI_IN_REQ_URI , PJSIP_URI_IN_FROMTO_HDR , PJSIP_URI_IN_CONTACT_HDR , PJSIP_URI_IN_ROUTING_HDR , PJSIP_URI_IN_OTHER } LEAF_NODE 5 enum CLASS_NAME 5 pjsip_uri_context_e LEAF_NODE 6 pjsip_uri_context_e LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 PJSIP_URI_IN_REQ_URI , PJSIP_URI_IN_FROMTO_HDR , PJSIP_URI_IN_CONTACT_HDR , PJSIP_URI_IN_ROUTING_HDR , PJSIP_URI_IN_OTHER LEAF_NODE 6 PJSIP_URI_IN_REQ_URI LEAF_NODE 6 , LEAF_NODE 6 PJSIP_URI_IN_FROMTO_HDR LEAF_NODE 6 , LEAF_NODE 6 PJSIP_URI_IN_CONTACT_HDR LEAF_NODE 6 , LEAF_NODE 6 PJSIP_URI_IN_ROUTING_HDR LEAF_NODE 6 , LEAF_NODE 6 PJSIP_URI_IN_OTHER LEAF_NODE 5 } NAME 3 pjsip_uri_context_e LEAF_NODE 4 pjsip_uri_context_e LEAF_NODE 2 ; SIMPLE_DECL 1 int pj_status_t ; VAR_DECL 2 int pj_status_t TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 pj_status_t LEAF_NODE 4 pj_status_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_uri_vptr BASE_CLASSES { const pj_str_t * ( * p_get_scheme ) ( const void * uri ) ; void * ( * p_get_uri ) ( void * uri ) ; pj_ssize_t ( * p_print ) ( pjsip_uri_context_e context , const void * uri , char * buf , pj_size_t size ) ; pj_status_t ( * p_compare ) ( pjsip_uri_context_e context , const void * uri1 , const void * uri2 ) ; void * ( * p_clone ) ( pj_pool_t * pool , const void * uri ) ; } pjsip_uri_vptr ; VAR_DECL 2 struct pjsip_uri_vptr BASE_CLASSES { const pj_str_t * ( * p_get_scheme ) ( const void * uri ) ; void * ( * p_get_uri ) ( void * uri ) ; pj_ssize_t ( * p_print ) ( pjsip_uri_context_e context , const void * uri , char * buf , pj_size_t size ) ; pj_status_t ( * p_compare ) ( pjsip_uri_context_e context , const void * uri1 , const void * uri2 ) ; void * ( * p_clone ) ( pj_pool_t * pool , const void * uri ) ; } pjsip_uri_vptr TYPE 3 struct pjsip_uri_vptr BASE_CLASSES { const pj_str_t * ( * p_get_scheme ) ( const void * uri ) ; void * ( * p_get_uri ) ( void * uri ) ; pj_ssize_t ( * p_print ) ( pjsip_uri_context_e context , const void * uri , char * buf , pj_size_t size ) ; pj_status_t ( * p_compare ) ( pjsip_uri_context_e context , const void * uri1 , const void * uri2 ) ; void * ( * p_clone ) ( pj_pool_t * pool , const void * uri ) ; } CLASS_DEF 4 struct pjsip_uri_vptr BASE_CLASSES { const pj_str_t * ( * p_get_scheme ) ( const void * uri ) ; void * ( * p_get_uri ) ( void * uri ) ; pj_ssize_t ( * p_print ) ( pjsip_uri_context_e context , const void * uri , char * buf , pj_size_t size ) ; pj_status_t ( * p_compare ) ( pjsip_uri_context_e context , const void * uri1 , const void * uri2 ) ; void * ( * p_clone ) ( pj_pool_t * pool , const void * uri ) ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_uri_vptr LEAF_NODE 6 pjsip_uri_vptr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 const pj_str_t * ( * p_get_scheme ) ( const void * uri ) ; void * ( * p_get_uri ) ( void * uri ) ; pj_ssize_t ( * p_print ) ( pjsip_uri_context_e context , const void * uri , char * buf , pj_size_t size ) ; pj_status_t ( * p_compare ) ( pjsip_uri_context_e context , const void * uri1 , const void * uri2 ) ; void * ( * p_clone ) ( pj_pool_t * pool , const void * uri ) ; LEAF_NODE 6 const LEAF_NODE 6 pj_str_t LEAF_NODE 6 * LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 p_get_scheme LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 const LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 uri LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 p_get_uri LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 uri LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 pj_ssize_t LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 p_print LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 pjsip_uri_context_e LEAF_NODE 6 context LEAF_NODE 6 , LEAF_NODE 6 const LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 uri LEAF_NODE 6 , LEAF_NODE 6 char LEAF_NODE 6 * LEAF_NODE 6 buf LEAF_NODE 6 , LEAF_NODE 6 pj_size_t LEAF_NODE 6 size LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 pj_status_t LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 p_compare LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 pjsip_uri_context_e LEAF_NODE 6 context LEAF_NODE 6 , LEAF_NODE 6 const LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 uri1 LEAF_NODE 6 , LEAF_NODE 6 const LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 uri2 LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 p_clone LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 pj_pool_t LEAF_NODE 6 * LEAF_NODE 6 pool LEAF_NODE 6 , LEAF_NODE 6 const LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 uri LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } NAME 3 pjsip_uri_vptr LEAF_NODE 4 pjsip_uri_vptr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_uri BASE_CLASSES { pjsip_uri_vptr * vptr ; } pjsip_uri ; VAR_DECL 2 struct pjsip_uri BASE_CLASSES { pjsip_uri_vptr * vptr ; } pjsip_uri TYPE 3 struct pjsip_uri BASE_CLASSES { pjsip_uri_vptr * vptr ; } CLASS_DEF 4 struct pjsip_uri BASE_CLASSES { pjsip_uri_vptr * vptr ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_uri LEAF_NODE 6 pjsip_uri LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_uri_vptr * vptr ; SIMPLE_DECL 6 pjsip_uri_vptr * vptr ; VAR_DECL 7 pjsip_uri_vptr * vptr TYPE 8 pjsip_uri_vptr * TYPE_NAME 9 pjsip_uri_vptr LEAF_NODE 10 pjsip_uri_vptr POINTER 9 * LEAF_NODE 10 * NAME 8 vptr LEAF_NODE 9 vptr LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_uri LEAF_NODE 4 pjsip_uri LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_request_line BASE_CLASSES { pjsip_method method ; pjsip_uri * uri ; } pjsip_request_line ; VAR_DECL 2 struct pjsip_request_line BASE_CLASSES { pjsip_method method ; pjsip_uri * uri ; } pjsip_request_line TYPE 3 struct pjsip_request_line BASE_CLASSES { pjsip_method method ; pjsip_uri * uri ; } CLASS_DEF 4 struct pjsip_request_line BASE_CLASSES { pjsip_method method ; pjsip_uri * uri ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_request_line LEAF_NODE 6 pjsip_request_line LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_method method ; pjsip_uri * uri ; SIMPLE_DECL 6 pjsip_method method ; VAR_DECL 7 pjsip_method method TYPE 8 pjsip_method TYPE_NAME 9 pjsip_method LEAF_NODE 10 pjsip_method NAME 8 method LEAF_NODE 9 method LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_uri * uri ; VAR_DECL 7 pjsip_uri * uri TYPE 8 pjsip_uri * TYPE_NAME 9 pjsip_uri LEAF_NODE 10 pjsip_uri POINTER 9 * LEAF_NODE 10 * NAME 8 uri LEAF_NODE 9 uri LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_request_line LEAF_NODE 4 pjsip_request_line LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_status_line BASE_CLASSES { int code ; pj_str_t reason ; } pjsip_status_line ; VAR_DECL 2 struct pjsip_status_line BASE_CLASSES { int code ; pj_str_t reason ; } pjsip_status_line TYPE 3 struct pjsip_status_line BASE_CLASSES { int code ; pj_str_t reason ; } CLASS_DEF 4 struct pjsip_status_line BASE_CLASSES { int code ; pj_str_t reason ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_status_line LEAF_NODE 6 pjsip_status_line LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int code ; pj_str_t reason ; SIMPLE_DECL 6 int code ; VAR_DECL 7 int code TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 code LEAF_NODE 9 code LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t reason ; VAR_DECL 7 pj_str_t reason TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 reason LEAF_NODE 9 reason LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_status_line LEAF_NODE 4 pjsip_status_line LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_msg BASE_CLASSES { pjsip_msg_type_e type ; union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line ; pjsip_msg_body * body ; } pjsip_msg ; VAR_DECL 2 struct pjsip_msg BASE_CLASSES { pjsip_msg_type_e type ; union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line ; pjsip_msg_body * body ; } pjsip_msg TYPE 3 struct pjsip_msg BASE_CLASSES { pjsip_msg_type_e type ; union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line ; pjsip_msg_body * body ; } CLASS_DEF 4 struct pjsip_msg BASE_CLASSES { pjsip_msg_type_e type ; union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line ; pjsip_msg_body * body ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_msg LEAF_NODE 6 pjsip_msg LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_msg_type_e type ; union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line ; pjsip_msg_body * body ; SIMPLE_DECL 6 pjsip_msg_type_e type ; VAR_DECL 7 pjsip_msg_type_e type TYPE 8 pjsip_msg_type_e TYPE_NAME 9 pjsip_msg_type_e LEAF_NODE 10 pjsip_msg_type_e NAME 8 type LEAF_NODE 9 type LEAF_NODE 7 ; SIMPLE_DECL 6 union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line ; VAR_DECL 7 union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } line TYPE 8 union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } CLASS_DEF 9 union CLASS_NAME BASE_CLASSES { struct pjsip_request_line req ; struct pjsip_status_line status ; } LEAF_NODE 10 union LEAF_NODE 10 CLASS_NAME LEAF_NODE 10 BASE_CLASSES LEAF_NODE 10 { CLASS_CONTENT 10 struct pjsip_request_line req ; struct pjsip_status_line status ; SIMPLE_DECL 11 struct pjsip_request_line req ; VAR_DECL 12 struct pjsip_request_line req TYPE 13 struct pjsip_request_line TYPE_NAME 14 struct pjsip_request_line LEAF_NODE 15 struct LEAF_NODE 15 pjsip_request_line NAME 13 req LEAF_NODE 14 req LEAF_NODE 12 ; SIMPLE_DECL 11 struct pjsip_status_line status ; VAR_DECL 12 struct pjsip_status_line status TYPE 13 struct pjsip_status_line TYPE_NAME 14 struct pjsip_status_line LEAF_NODE 15 struct LEAF_NODE 15 pjsip_status_line NAME 13 status LEAF_NODE 14 status LEAF_NODE 12 ; LEAF_NODE 10 } NAME 8 line LEAF_NODE 9 line LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_msg_body * body ; VAR_DECL 7 pjsip_msg_body * body TYPE 8 pjsip_msg_body * TYPE_NAME 9 pjsip_msg_body LEAF_NODE 10 pjsip_msg_body POINTER 9 * LEAF_NODE 10 * NAME 8 body LEAF_NODE 9 body LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_msg LEAF_NODE 4 pjsip_msg LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_cid_hdr BASE_CLASSES { pj_str_t id ; } pjsip_cid_hdr ; VAR_DECL 2 struct pjsip_cid_hdr BASE_CLASSES { pj_str_t id ; } pjsip_cid_hdr TYPE 3 struct pjsip_cid_hdr BASE_CLASSES { pj_str_t id ; } CLASS_DEF 4 struct pjsip_cid_hdr BASE_CLASSES { pj_str_t id ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_cid_hdr LEAF_NODE 6 pjsip_cid_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_str_t id ; SIMPLE_DECL 6 pj_str_t id ; VAR_DECL 7 pj_str_t id TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 id LEAF_NODE 9 id LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_cid_hdr LEAF_NODE 4 pjsip_cid_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_fromto_hdr BASE_CLASSES { pjsip_uri * uri ; pj_str_t tag ; pjsip_param other_param ; } pjsip_fromto_hdr ; VAR_DECL 2 struct pjsip_fromto_hdr BASE_CLASSES { pjsip_uri * uri ; pj_str_t tag ; pjsip_param other_param ; } pjsip_fromto_hdr TYPE 3 struct pjsip_fromto_hdr BASE_CLASSES { pjsip_uri * uri ; pj_str_t tag ; pjsip_param other_param ; } CLASS_DEF 4 struct pjsip_fromto_hdr BASE_CLASSES { pjsip_uri * uri ; pj_str_t tag ; pjsip_param other_param ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_fromto_hdr LEAF_NODE 6 pjsip_fromto_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_uri * uri ; pj_str_t tag ; pjsip_param other_param ; SIMPLE_DECL 6 pjsip_uri * uri ; VAR_DECL 7 pjsip_uri * uri TYPE 8 pjsip_uri * TYPE_NAME 9 pjsip_uri LEAF_NODE 10 pjsip_uri POINTER 9 * LEAF_NODE 10 * NAME 8 uri LEAF_NODE 9 uri LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t tag ; VAR_DECL 7 pj_str_t tag TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 tag LEAF_NODE 9 tag LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_param other_param ; VAR_DECL 7 pjsip_param other_param TYPE 8 pjsip_param TYPE_NAME 9 pjsip_param LEAF_NODE 10 pjsip_param NAME 8 other_param LEAF_NODE 9 other_param LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_fromto_hdr LEAF_NODE 4 pjsip_fromto_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_fromto_hdr pjsip_from_hdr ; VAR_DECL 2 pjsip_fromto_hdr pjsip_from_hdr TYPE 3 pjsip_fromto_hdr TYPE_NAME 4 pjsip_fromto_hdr LEAF_NODE 5 pjsip_fromto_hdr NAME 3 pjsip_from_hdr LEAF_NODE 4 pjsip_from_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_fromto_hdr pjsip_to_hdr ; VAR_DECL 2 pjsip_fromto_hdr pjsip_to_hdr TYPE 3 pjsip_fromto_hdr TYPE_NAME 4 pjsip_fromto_hdr LEAF_NODE 5 pjsip_fromto_hdr NAME 3 pjsip_to_hdr LEAF_NODE 4 pjsip_to_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_via_hdr BASE_CLASSES { pj_str_t transport ; int ttl_param ; int rport_param ; pj_str_t maddr_param ; pj_str_t recvd_param ; pj_str_t branch_param ; pjsip_param other_param ; pj_str_t comment ; } pjsip_via_hdr ; VAR_DECL 2 struct pjsip_via_hdr BASE_CLASSES { pj_str_t transport ; int ttl_param ; int rport_param ; pj_str_t maddr_param ; pj_str_t recvd_param ; pj_str_t branch_param ; pjsip_param other_param ; pj_str_t comment ; } pjsip_via_hdr TYPE 3 struct pjsip_via_hdr BASE_CLASSES { pj_str_t transport ; int ttl_param ; int rport_param ; pj_str_t maddr_param ; pj_str_t recvd_param ; pj_str_t branch_param ; pjsip_param other_param ; pj_str_t comment ; } CLASS_DEF 4 struct pjsip_via_hdr BASE_CLASSES { pj_str_t transport ; int ttl_param ; int rport_param ; pj_str_t maddr_param ; pj_str_t recvd_param ; pj_str_t branch_param ; pjsip_param other_param ; pj_str_t comment ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_via_hdr LEAF_NODE 6 pjsip_via_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_str_t transport ; int ttl_param ; int rport_param ; pj_str_t maddr_param ; pj_str_t recvd_param ; pj_str_t branch_param ; pjsip_param other_param ; pj_str_t comment ; SIMPLE_DECL 6 pj_str_t transport ; VAR_DECL 7 pj_str_t transport TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 transport LEAF_NODE 9 transport LEAF_NODE 7 ; SIMPLE_DECL 6 int ttl_param ; VAR_DECL 7 int ttl_param TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 ttl_param LEAF_NODE 9 ttl_param LEAF_NODE 7 ; SIMPLE_DECL 6 int rport_param ; VAR_DECL 7 int rport_param TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 rport_param LEAF_NODE 9 rport_param LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t maddr_param ; VAR_DECL 7 pj_str_t maddr_param TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 maddr_param LEAF_NODE 9 maddr_param LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t recvd_param ; VAR_DECL 7 pj_str_t recvd_param TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 recvd_param LEAF_NODE 9 recvd_param LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t branch_param ; VAR_DECL 7 pj_str_t branch_param TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 branch_param LEAF_NODE 9 branch_param LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_param other_param ; VAR_DECL 7 pjsip_param other_param TYPE 8 pjsip_param TYPE_NAME 9 pjsip_param LEAF_NODE 10 pjsip_param NAME 8 other_param LEAF_NODE 9 other_param LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t comment ; VAR_DECL 7 pj_str_t comment TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 comment LEAF_NODE 9 comment LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_via_hdr LEAF_NODE 4 pjsip_via_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_cseq_hdr BASE_CLASSES { int32_t cseq ; pjsip_method method ; } pjsip_cseq_hdr ; VAR_DECL 2 struct pjsip_cseq_hdr BASE_CLASSES { int32_t cseq ; pjsip_method method ; } pjsip_cseq_hdr TYPE 3 struct pjsip_cseq_hdr BASE_CLASSES { int32_t cseq ; pjsip_method method ; } CLASS_DEF 4 struct pjsip_cseq_hdr BASE_CLASSES { int32_t cseq ; pjsip_method method ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_cseq_hdr LEAF_NODE 6 pjsip_cseq_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int32_t cseq ; pjsip_method method ; SIMPLE_DECL 6 int32_t cseq ; VAR_DECL 7 int32_t cseq TYPE 8 int32_t TYPE_NAME 9 int32_t LEAF_NODE 10 int32_t NAME 8 cseq LEAF_NODE 9 cseq LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_method method ; VAR_DECL 7 pjsip_method method TYPE 8 pjsip_method TYPE_NAME 9 pjsip_method LEAF_NODE 10 pjsip_method NAME 8 method LEAF_NODE 9 method LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_cseq_hdr LEAF_NODE 4 pjsip_cseq_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_generic_int_hdr BASE_CLASSES { int32_t ivalue ; } pjsip_generic_int_hdr ; VAR_DECL 2 struct pjsip_generic_int_hdr BASE_CLASSES { int32_t ivalue ; } pjsip_generic_int_hdr TYPE 3 struct pjsip_generic_int_hdr BASE_CLASSES { int32_t ivalue ; } CLASS_DEF 4 struct pjsip_generic_int_hdr BASE_CLASSES { int32_t ivalue ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_generic_int_hdr LEAF_NODE 6 pjsip_generic_int_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int32_t ivalue ; SIMPLE_DECL 6 int32_t ivalue ; VAR_DECL 7 int32_t ivalue TYPE 8 int32_t TYPE_NAME 9 int32_t LEAF_NODE 10 int32_t NAME 8 ivalue LEAF_NODE 9 ivalue LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_generic_int_hdr LEAF_NODE 4 pjsip_generic_int_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_generic_int_hdr pjsip_max_fwd_hdr ; VAR_DECL 2 pjsip_generic_int_hdr pjsip_max_fwd_hdr TYPE 3 pjsip_generic_int_hdr TYPE_NAME 4 pjsip_generic_int_hdr LEAF_NODE 5 pjsip_generic_int_hdr NAME 3 pjsip_max_fwd_hdr LEAF_NODE 4 pjsip_max_fwd_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_name_addr BASE_CLASSES { pjsip_uri_vptr * vptr ; pj_str_t display ; pjsip_uri * uri ; } pjsip_name_addr ; VAR_DECL 2 struct pjsip_name_addr BASE_CLASSES { pjsip_uri_vptr * vptr ; pj_str_t display ; pjsip_uri * uri ; } pjsip_name_addr TYPE 3 struct pjsip_name_addr BASE_CLASSES { pjsip_uri_vptr * vptr ; pj_str_t display ; pjsip_uri * uri ; } CLASS_DEF 4 struct pjsip_name_addr BASE_CLASSES { pjsip_uri_vptr * vptr ; pj_str_t display ; pjsip_uri * uri ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_name_addr LEAF_NODE 6 pjsip_name_addr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_uri_vptr * vptr ; pj_str_t display ; pjsip_uri * uri ; SIMPLE_DECL 6 pjsip_uri_vptr * vptr ; VAR_DECL 7 pjsip_uri_vptr * vptr TYPE 8 pjsip_uri_vptr * TYPE_NAME 9 pjsip_uri_vptr LEAF_NODE 10 pjsip_uri_vptr POINTER 9 * LEAF_NODE 10 * NAME 8 vptr LEAF_NODE 9 vptr LEAF_NODE 7 ; SIMPLE_DECL 6 pj_str_t display ; VAR_DECL 7 pj_str_t display TYPE 8 pj_str_t TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t NAME 8 display LEAF_NODE 9 display LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_uri * uri ; VAR_DECL 7 pjsip_uri * uri TYPE 8 pjsip_uri * TYPE_NAME 9 pjsip_uri LEAF_NODE 10 pjsip_uri POINTER 9 * LEAF_NODE 10 * NAME 8 uri LEAF_NODE 9 uri LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_name_addr LEAF_NODE 4 pjsip_name_addr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_routing_hdr BASE_CLASSES { pjsip_name_addr name_addr ; pjsip_param other_param ; } pjsip_routing_hdr ; VAR_DECL 2 struct pjsip_routing_hdr BASE_CLASSES { pjsip_name_addr name_addr ; pjsip_param other_param ; } pjsip_routing_hdr TYPE 3 struct pjsip_routing_hdr BASE_CLASSES { pjsip_name_addr name_addr ; pjsip_param other_param ; } CLASS_DEF 4 struct pjsip_routing_hdr BASE_CLASSES { pjsip_name_addr name_addr ; pjsip_param other_param ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_routing_hdr LEAF_NODE 6 pjsip_routing_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_name_addr name_addr ; pjsip_param other_param ; SIMPLE_DECL 6 pjsip_name_addr name_addr ; VAR_DECL 7 pjsip_name_addr name_addr TYPE 8 pjsip_name_addr TYPE_NAME 9 pjsip_name_addr LEAF_NODE 10 pjsip_name_addr NAME 8 name_addr LEAF_NODE 9 name_addr LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_param other_param ; VAR_DECL 7 pjsip_param other_param TYPE 8 pjsip_param TYPE_NAME 9 pjsip_param LEAF_NODE 10 pjsip_param NAME 8 other_param LEAF_NODE 9 other_param LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_routing_hdr LEAF_NODE 4 pjsip_routing_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_routing_hdr pjsip_route_hdr ; VAR_DECL 2 pjsip_routing_hdr pjsip_route_hdr TYPE 3 pjsip_routing_hdr TYPE_NAME 4 pjsip_routing_hdr LEAF_NODE 5 pjsip_routing_hdr NAME 3 pjsip_route_hdr LEAF_NODE 4 pjsip_route_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_routing_hdr pjsip_rr_hdr ; VAR_DECL 2 pjsip_routing_hdr pjsip_rr_hdr TYPE 3 pjsip_routing_hdr TYPE_NAME 4 pjsip_routing_hdr LEAF_NODE 5 pjsip_routing_hdr NAME 3 pjsip_rr_hdr LEAF_NODE 4 pjsip_rr_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_ctype_hdr BASE_CLASSES { pjsip_media_type media ; } pjsip_ctype_hdr ; VAR_DECL 2 struct pjsip_ctype_hdr BASE_CLASSES { pjsip_media_type media ; } pjsip_ctype_hdr TYPE 3 struct pjsip_ctype_hdr BASE_CLASSES { pjsip_media_type media ; } CLASS_DEF 4 struct pjsip_ctype_hdr BASE_CLASSES { pjsip_media_type media ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_ctype_hdr LEAF_NODE 6 pjsip_ctype_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pjsip_media_type media ; SIMPLE_DECL 6 pjsip_media_type media ; VAR_DECL 7 pjsip_media_type media TYPE 8 pjsip_media_type TYPE_NAME 9 pjsip_media_type LEAF_NODE 10 pjsip_media_type NAME 8 media LEAF_NODE 9 media LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_ctype_hdr LEAF_NODE 4 pjsip_ctype_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_clen_hdr BASE_CLASSES { int len ; } pjsip_clen_hdr ; VAR_DECL 2 struct pjsip_clen_hdr BASE_CLASSES { int len ; } pjsip_clen_hdr TYPE 3 struct pjsip_clen_hdr BASE_CLASSES { int len ; } CLASS_DEF 4 struct pjsip_clen_hdr BASE_CLASSES { int len ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_clen_hdr LEAF_NODE 6 pjsip_clen_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 int len ; SIMPLE_DECL 6 int len ; VAR_DECL 7 int len TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 len LEAF_NODE 9 len LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_clen_hdr LEAF_NODE 4 pjsip_clen_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_generic_array_hdr BASE_CLASSES { unsigned count ; pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values ; } pjsip_generic_array_hdr ; VAR_DECL 2 struct pjsip_generic_array_hdr BASE_CLASSES { unsigned count ; pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values ; } pjsip_generic_array_hdr TYPE 3 struct pjsip_generic_array_hdr BASE_CLASSES { unsigned count ; pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values ; } CLASS_DEF 4 struct pjsip_generic_array_hdr BASE_CLASSES { unsigned count ; pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_generic_array_hdr LEAF_NODE 6 pjsip_generic_array_hdr LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 unsigned count ; pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values ; LEAF_NODE 6 unsigned LEAF_NODE 6 count LEAF_NODE 6 ; SIMPLE_DECL 6 pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values ; VAR_DECL 7 pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] values TYPE 8 pj_str_t [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] TYPE_NAME 9 pj_str_t LEAF_NODE 10 pj_str_t TYPE_SUFFIX 9 [ PJSIP_GENERIC_ARRAY_MAX_COUNT ] LEAF_NODE 10 [ FIELD 10 PJSIP_GENERIC_ARRAY_MAX_COUNT LEAF_NODE 11 PJSIP_GENERIC_ARRAY_MAX_COUNT LEAF_NODE 10 ] NAME 8 values LEAF_NODE 9 values LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_generic_array_hdr LEAF_NODE 4 pjsip_generic_array_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_generic_array_hdr pjsip_require_hdr ; VAR_DECL 2 pjsip_generic_array_hdr pjsip_require_hdr TYPE 3 pjsip_generic_array_hdr TYPE_NAME 4 pjsip_generic_array_hdr LEAF_NODE 5 pjsip_generic_array_hdr NAME 3 pjsip_require_hdr LEAF_NODE 4 pjsip_require_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 pjsip_generic_array_hdr pjsip_supported_hdr ; VAR_DECL 2 pjsip_generic_array_hdr pjsip_supported_hdr TYPE 3 pjsip_generic_array_hdr TYPE_NAME 4 pjsip_generic_array_hdr LEAF_NODE 5 pjsip_generic_array_hdr NAME 3 pjsip_supported_hdr LEAF_NODE 4 pjsip_supported_hdr LEAF_NODE 2 ; SIMPLE_DECL 1 struct pjsip_tx_data BASE_CLASSES { pj_pool_t * pool ; char [ PJ_MAX_OBJ_NAME ] obj_name ; char * info ; pj_time_val rx_timestamp ; pjsip_tpmgr * mgr ; pjsip_tx_data_op_key op_key ; pj_lock_t * lock ; pjsip_msg * msg ; pjsip_route_hdr * saved_strict_route ; pjsip_buffer buf ; pj_atomic_t * ref_cnt ; int is_pending ; void * token ; void ( * cb ) ( void * , pjsip_tx_data * , pj_ssize_t ) ; struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info ; struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info ; pjsip_tpselector tp_sel ; pj_bool_t auth_retry ; void * [ PJSIP_MAX_MODULE ] mod_data ; pjsip_host_port via_addr ; const void * via_tp ; } pjsip_tx_data ; VAR_DECL 2 struct pjsip_tx_data BASE_CLASSES { pj_pool_t * pool ; char [ PJ_MAX_OBJ_NAME ] obj_name ; char * info ; pj_time_val rx_timestamp ; pjsip_tpmgr * mgr ; pjsip_tx_data_op_key op_key ; pj_lock_t * lock ; pjsip_msg * msg ; pjsip_route_hdr * saved_strict_route ; pjsip_buffer buf ; pj_atomic_t * ref_cnt ; int is_pending ; void * token ; void ( * cb ) ( void * , pjsip_tx_data * , pj_ssize_t ) ; struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info ; struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info ; pjsip_tpselector tp_sel ; pj_bool_t auth_retry ; void * [ PJSIP_MAX_MODULE ] mod_data ; pjsip_host_port via_addr ; const void * via_tp ; } pjsip_tx_data TYPE 3 struct pjsip_tx_data BASE_CLASSES { pj_pool_t * pool ; char [ PJ_MAX_OBJ_NAME ] obj_name ; char * info ; pj_time_val rx_timestamp ; pjsip_tpmgr * mgr ; pjsip_tx_data_op_key op_key ; pj_lock_t * lock ; pjsip_msg * msg ; pjsip_route_hdr * saved_strict_route ; pjsip_buffer buf ; pj_atomic_t * ref_cnt ; int is_pending ; void * token ; void ( * cb ) ( void * , pjsip_tx_data * , pj_ssize_t ) ; struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info ; struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info ; pjsip_tpselector tp_sel ; pj_bool_t auth_retry ; void * [ PJSIP_MAX_MODULE ] mod_data ; pjsip_host_port via_addr ; const void * via_tp ; } CLASS_DEF 4 struct pjsip_tx_data BASE_CLASSES { pj_pool_t * pool ; char [ PJ_MAX_OBJ_NAME ] obj_name ; char * info ; pj_time_val rx_timestamp ; pjsip_tpmgr * mgr ; pjsip_tx_data_op_key op_key ; pj_lock_t * lock ; pjsip_msg * msg ; pjsip_route_hdr * saved_strict_route ; pjsip_buffer buf ; pj_atomic_t * ref_cnt ; int is_pending ; void * token ; void ( * cb ) ( void * , pjsip_tx_data * , pj_ssize_t ) ; struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info ; struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info ; pjsip_tpselector tp_sel ; pj_bool_t auth_retry ; void * [ PJSIP_MAX_MODULE ] mod_data ; pjsip_host_port via_addr ; const void * via_tp ; } LEAF_NODE 5 struct CLASS_NAME 5 pjsip_tx_data LEAF_NODE 6 pjsip_tx_data LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 pj_pool_t * pool ; char [ PJ_MAX_OBJ_NAME ] obj_name ; char * info ; pj_time_val rx_timestamp ; pjsip_tpmgr * mgr ; pjsip_tx_data_op_key op_key ; pj_lock_t * lock ; pjsip_msg * msg ; pjsip_route_hdr * saved_strict_route ; pjsip_buffer buf ; pj_atomic_t * ref_cnt ; int is_pending ; void * token ; void ( * cb ) ( void * , pjsip_tx_data * , pj_ssize_t ) ; struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info ; struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info ; pjsip_tpselector tp_sel ; pj_bool_t auth_retry ; void * [ PJSIP_MAX_MODULE ] mod_data ; pjsip_host_port via_addr ; const void * via_tp ; SIMPLE_DECL 6 pj_pool_t * pool ; VAR_DECL 7 pj_pool_t * pool TYPE 8 pj_pool_t * TYPE_NAME 9 pj_pool_t LEAF_NODE 10 pj_pool_t POINTER 9 * LEAF_NODE 10 * NAME 8 pool LEAF_NODE 9 pool LEAF_NODE 7 ; SIMPLE_DECL 6 char [ PJ_MAX_OBJ_NAME ] obj_name ; VAR_DECL 7 char [ PJ_MAX_OBJ_NAME ] obj_name TYPE 8 char [ PJ_MAX_OBJ_NAME ] TYPE_NAME 9 char LEAF_NODE 10 char TYPE_SUFFIX 9 [ PJ_MAX_OBJ_NAME ] LEAF_NODE 10 [ FIELD 10 PJ_MAX_OBJ_NAME LEAF_NODE 11 PJ_MAX_OBJ_NAME LEAF_NODE 10 ] NAME 8 obj_name LEAF_NODE 9 obj_name LEAF_NODE 7 ; SIMPLE_DECL 6 char * info ; VAR_DECL 7 char * info TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 info LEAF_NODE 9 info LEAF_NODE 7 ; SIMPLE_DECL 6 pj_time_val rx_timestamp ; VAR_DECL 7 pj_time_val rx_timestamp TYPE 8 pj_time_val TYPE_NAME 9 pj_time_val LEAF_NODE 10 pj_time_val NAME 8 rx_timestamp LEAF_NODE 9 rx_timestamp LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_tpmgr * mgr ; VAR_DECL 7 pjsip_tpmgr * mgr TYPE 8 pjsip_tpmgr * TYPE_NAME 9 pjsip_tpmgr LEAF_NODE 10 pjsip_tpmgr POINTER 9 * LEAF_NODE 10 * NAME 8 mgr LEAF_NODE 9 mgr LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_tx_data_op_key op_key ; VAR_DECL 7 pjsip_tx_data_op_key op_key TYPE 8 pjsip_tx_data_op_key TYPE_NAME 9 pjsip_tx_data_op_key LEAF_NODE 10 pjsip_tx_data_op_key NAME 8 op_key LEAF_NODE 9 op_key LEAF_NODE 7 ; SIMPLE_DECL 6 pj_lock_t * lock ; VAR_DECL 7 pj_lock_t * lock TYPE 8 pj_lock_t * TYPE_NAME 9 pj_lock_t LEAF_NODE 10 pj_lock_t POINTER 9 * LEAF_NODE 10 * NAME 8 lock LEAF_NODE 9 lock LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_msg * msg ; VAR_DECL 7 pjsip_msg * msg TYPE 8 pjsip_msg * TYPE_NAME 9 pjsip_msg LEAF_NODE 10 pjsip_msg POINTER 9 * LEAF_NODE 10 * NAME 8 msg LEAF_NODE 9 msg LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_route_hdr * saved_strict_route ; VAR_DECL 7 pjsip_route_hdr * saved_strict_route TYPE 8 pjsip_route_hdr * TYPE_NAME 9 pjsip_route_hdr LEAF_NODE 10 pjsip_route_hdr POINTER 9 * LEAF_NODE 10 * NAME 8 saved_strict_route LEAF_NODE 9 saved_strict_route LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_buffer buf ; VAR_DECL 7 pjsip_buffer buf TYPE 8 pjsip_buffer TYPE_NAME 9 pjsip_buffer LEAF_NODE 10 pjsip_buffer NAME 8 buf LEAF_NODE 9 buf LEAF_NODE 7 ; SIMPLE_DECL 6 pj_atomic_t * ref_cnt ; VAR_DECL 7 pj_atomic_t * ref_cnt TYPE 8 pj_atomic_t * TYPE_NAME 9 pj_atomic_t LEAF_NODE 10 pj_atomic_t POINTER 9 * LEAF_NODE 10 * NAME 8 ref_cnt LEAF_NODE 9 ref_cnt LEAF_NODE 7 ; SIMPLE_DECL 6 int is_pending ; VAR_DECL 7 int is_pending TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 is_pending LEAF_NODE 9 is_pending LEAF_NODE 7 ; SIMPLE_DECL 6 void * token ; VAR_DECL 7 void * token TYPE 8 void * TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 token LEAF_NODE 9 token LEAF_NODE 7 ; LEAF_NODE 6 void LEAF_NODE 6 ( LEAF_NODE 6 * LEAF_NODE 6 cb LEAF_NODE 6 ) LEAF_NODE 6 ( LEAF_NODE 6 void LEAF_NODE 6 * LEAF_NODE 6 , LEAF_NODE 6 pjsip_tx_data LEAF_NODE 6 * LEAF_NODE 6 , LEAF_NODE 6 pj_ssize_t LEAF_NODE 6 ) LEAF_NODE 6 ; SIMPLE_DECL 6 struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info ; VAR_DECL 7 struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } dest_info TYPE 8 struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } CLASS_DEF 9 struct CLASS_NAME BASE_CLASSES { pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; } LEAF_NODE 10 struct LEAF_NODE 10 CLASS_NAME LEAF_NODE 10 BASE_CLASSES LEAF_NODE 10 { CLASS_CONTENT 10 pj_str_t name ; pjsip_server_addresses addr ; unsigned cur_addr ; SIMPLE_DECL 11 pj_str_t name ; VAR_DECL 12 pj_str_t name TYPE 13 pj_str_t TYPE_NAME 14 pj_str_t LEAF_NODE 15 pj_str_t NAME 13 name LEAF_NODE 14 name LEAF_NODE 12 ; SIMPLE_DECL 11 pjsip_server_addresses addr ; VAR_DECL 12 pjsip_server_addresses addr TYPE 13 pjsip_server_addresses TYPE_NAME 14 pjsip_server_addresses LEAF_NODE 15 pjsip_server_addresses NAME 13 addr LEAF_NODE 14 addr LEAF_NODE 12 ; LEAF_NODE 11 unsigned LEAF_NODE 11 cur_addr LEAF_NODE 11 ; LEAF_NODE 10 } NAME 8 dest_info LEAF_NODE 9 dest_info LEAF_NODE 7 ; SIMPLE_DECL 6 struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info ; VAR_DECL 7 struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } tp_info TYPE 8 struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } CLASS_DEF 9 struct CLASS_NAME BASE_CLASSES { pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; } LEAF_NODE 10 struct LEAF_NODE 10 CLASS_NAME LEAF_NODE 10 BASE_CLASSES LEAF_NODE 10 { CLASS_CONTENT 10 pjsip_transport * transport ; pj_sockaddr dst_addr ; int dst_addr_len ; char [ PJ_INET6_ADDRSTRLEN ] dst_name ; int dst_port ; SIMPLE_DECL 11 pjsip_transport * transport ; VAR_DECL 12 pjsip_transport * transport TYPE 13 pjsip_transport * TYPE_NAME 14 pjsip_transport LEAF_NODE 15 pjsip_transport POINTER 14 * LEAF_NODE 15 * NAME 13 transport LEAF_NODE 14 transport LEAF_NODE 12 ; SIMPLE_DECL 11 pj_sockaddr dst_addr ; VAR_DECL 12 pj_sockaddr dst_addr TYPE 13 pj_sockaddr TYPE_NAME 14 pj_sockaddr LEAF_NODE 15 pj_sockaddr NAME 13 dst_addr LEAF_NODE 14 dst_addr LEAF_NODE 12 ; SIMPLE_DECL 11 int dst_addr_len ; VAR_DECL 12 int dst_addr_len TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 dst_addr_len LEAF_NODE 14 dst_addr_len LEAF_NODE 12 ; SIMPLE_DECL 11 char [ PJ_INET6_ADDRSTRLEN ] dst_name ; VAR_DECL 12 char [ PJ_INET6_ADDRSTRLEN ] dst_name TYPE 13 char [ PJ_INET6_ADDRSTRLEN ] TYPE_NAME 14 char LEAF_NODE 15 char TYPE_SUFFIX 14 [ PJ_INET6_ADDRSTRLEN ] LEAF_NODE 15 [ FIELD 15 PJ_INET6_ADDRSTRLEN LEAF_NODE 16 PJ_INET6_ADDRSTRLEN LEAF_NODE 15 ] NAME 13 dst_name LEAF_NODE 14 dst_name LEAF_NODE 12 ; SIMPLE_DECL 11 int dst_port ; VAR_DECL 12 int dst_port TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 dst_port LEAF_NODE 14 dst_port LEAF_NODE 12 ; LEAF_NODE 10 } NAME 8 tp_info LEAF_NODE 9 tp_info LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_tpselector tp_sel ; VAR_DECL 7 pjsip_tpselector tp_sel TYPE 8 pjsip_tpselector TYPE_NAME 9 pjsip_tpselector LEAF_NODE 10 pjsip_tpselector NAME 8 tp_sel LEAF_NODE 9 tp_sel LEAF_NODE 7 ; SIMPLE_DECL 6 pj_bool_t auth_retry ; VAR_DECL 7 pj_bool_t auth_retry TYPE 8 pj_bool_t TYPE_NAME 9 pj_bool_t LEAF_NODE 10 pj_bool_t NAME 8 auth_retry LEAF_NODE 9 auth_retry LEAF_NODE 7 ; SIMPLE_DECL 6 void * [ PJSIP_MAX_MODULE ] mod_data ; VAR_DECL 7 void * [ PJSIP_MAX_MODULE ] mod_data TYPE 8 void * [ PJSIP_MAX_MODULE ] TYPE_NAME 9 void LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * TYPE_SUFFIX 9 [ PJSIP_MAX_MODULE ] LEAF_NODE 10 [ FIELD 10 PJSIP_MAX_MODULE LEAF_NODE 11 PJSIP_MAX_MODULE LEAF_NODE 10 ] NAME 8 mod_data LEAF_NODE 9 mod_data LEAF_NODE 7 ; SIMPLE_DECL 6 pjsip_host_port via_addr ; VAR_DECL 7 pjsip_host_port via_addr TYPE 8 pjsip_host_port TYPE_NAME 9 pjsip_host_port LEAF_NODE 10 pjsip_host_port NAME 8 via_addr LEAF_NODE 9 via_addr LEAF_NODE 7 ; SIMPLE_DECL 6 const void * via_tp ; VAR_DECL 7 const void * via_tp TYPE 8 const void * TYPE_NAME 9 const void LEAF_NODE 10 const LEAF_NODE 10 void POINTER 9 * LEAF_NODE 10 * NAME 8 via_tp LEAF_NODE 9 via_tp LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 pjsip_tx_data LEAF_NODE 4 pjsip_tx_data LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 ast_sip_failover_request LEAF_NODE 3 ast_sip_failover_request PARAMETER_LIST 2 ( pjsip_tx_data * tdata ) LEAF_NODE 3 ( PARAMETER_DECL 3 pjsip_tx_data * tdata TYPE 4 pjsip_tx_data * TYPE_NAME 5 pjsip_tx_data LEAF_NODE 6 pjsip_tx_data POINTER 5 * LEAF_NODE 6 * NAME 4 tdata LEAF_NODE 5 tdata LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 pjsip_via_hdr * via ; VAR_DECL 4 pjsip_via_hdr * via TYPE 5 pjsip_via_hdr * TYPE_NAME 6 pjsip_via_hdr LEAF_NODE 7 pjsip_via_hdr POINTER 6 * LEAF_NODE 7 * NAME 5 via LEAF_NODE 6 via LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! tdata || ! tdata -> dest_info . addr . count || ( tdata -> dest_info . cur_addr == tdata -> dest_info . addr . count - 1 ) EXPR 5 ! tdata || ! tdata -> dest_info . addr . count || ( tdata -> dest_info . cur_addr == tdata -> dest_info . addr . count - 1 ) OR 6 ! tdata || ! tdata -> dest_info . addr . count || ( tdata -> dest_info . cur_addr == tdata -> dest_info . addr . count - 1 ) EXPR 7 ! tdata UNARY_EXPR 8 ! tdata UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FIELD 9 tdata LEAF_NODE 10 tdata LEAF_NODE 7 || EXPR 7 ! tdata -> dest_info . addr . count || ( tdata -> dest_info . cur_addr == tdata -> dest_info . addr . count - 1 ) OR 8 ! tdata -> dest_info . addr . count || ( tdata -> dest_info . cur_addr == tdata -> dest_info . addr . count - 1 ) EXPR 9 ! tdata -> dest_info . addr . count UNARY_EXPR 10 ! tdata -> dest_info . addr . count UNARY_OPERATOR 11 ! LEAF_NODE 12 ! FIELD 11 tdata -> dest_info . addr . count LEAF_NODE 12 tdata LEAF_NODE 12 -> LEAF_NODE 12 dest_info LEAF_NODE 12 . LEAF_NODE 12 addr LEAF_NODE 12 . LEAF_NODE 12 count LEAF_NODE 9 || EXPR 9 ( tdata -> dest_info . cur_addr == tdata -> dest_info . addr . count - 1 ) LEAF_NODE 10 ( FIELD 10 tdata -> dest_info . cur_addr LEAF_NODE 11 tdata LEAF_NODE 11 -> LEAF_NODE 11 dest_info LEAF_NODE 11 . LEAF_NODE 11 cur_addr EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 tdata -> dest_info . addr . count LEAF_NODE 11 tdata LEAF_NODE 11 -> LEAF_NODE 11 dest_info LEAF_NODE 11 . LEAF_NODE 11 addr LEAF_NODE 11 . LEAF_NODE 11 count LEAF_NODE 10 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 10 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ++ tdata -> dest_info . cur_addr ; EXPR 4 ++ tdata -> dest_info . cur_addr LEAF_NODE 5 ++ FIELD 5 tdata -> dest_info . cur_addr LEAF_NODE 6 tdata LEAF_NODE 6 -> LEAF_NODE 6 dest_info LEAF_NODE 6 . LEAF_NODE 6 cur_addr LEAF_NODE 4 ; EXPR_STATEMENT 3 via = ( pjsip_via_hdr * ) pjsip_msg_find_hdr ( tdata -> msg , PJSIP_H_VIA , NULL ) ; EXPR 4 via = ( pjsip_via_hdr * ) pjsip_msg_find_hdr ( tdata -> msg , PJSIP_H_VIA , NULL ) ASSIGN 5 via = ( pjsip_via_hdr * ) pjsip_msg_find_hdr ( tdata -> msg , PJSIP_H_VIA , NULL ) LVAL 6 via FIELD 7 via LEAF_NODE 8 via ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ( pjsip_via_hdr * ) pjsip_msg_find_hdr ( tdata -> msg , PJSIP_H_VIA , NULL ) LEAF_NODE 7 ( TYPE_NAME 7 pjsip_via_hdr LEAF_NODE 8 pjsip_via_hdr LEAF_NODE 7 * LEAF_NODE 7 ) FUNCTION_CALL 7 pjsip_msg_find_hdr ( tdata -> msg , PJSIP_H_VIA , NULL ) CALLEE 8 pjsip_msg_find_hdr LEAF_NODE 9 pjsip_msg_find_hdr LEAF_NODE 8 ( ARGUMENT 8 tdata -> msg FIELD 9 tdata -> msg LEAF_NODE 10 tdata LEAF_NODE 10 -> LEAF_NODE 10 msg LEAF_NODE 8 , ARGUMENT 8 PJSIP_H_VIA FIELD 9 PJSIP_H_VIA LEAF_NODE 10 PJSIP_H_VIA LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 via -> branch_param . slen = 0 ; EXPR 4 via -> branch_param . slen = 0 ASSIGN 5 via -> branch_param . slen = 0 LVAL 6 via -> branch_param . slen FIELD 7 via -> branch_param . slen LEAF_NODE 8 via LEAF_NODE 8 -> LEAF_NODE 8 branch_param LEAF_NODE 8 . LEAF_NODE 8 slen ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 pjsip_tx_data_invalidate_msg ( tdata ) ; EXPR 4 pjsip_tx_data_invalidate_msg ( tdata ) FUNCTION_CALL 5 pjsip_tx_data_invalidate_msg ( tdata ) CALLEE 6 pjsip_tx_data_invalidate_msg LEAF_NODE 7 pjsip_tx_data_invalidate_msg LEAF_NODE 6 ( ARGUMENT 6 tdata FIELD 7 tdata LEAF_NODE 8 tdata LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 26, "project": "openssl_ast_vul_function_test_adv_38", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 unload_module LEAF_NODE 3 unload_module PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 27, "project": "openssl_ast_vul_function_test_adv_22", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 controlplayback_manager LEAF_NODE 3 controlplayback_manager PARAMETER_LIST 2 ( struct mansession * s , const struct message * m ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct mansession * s TYPE 4 struct mansession * TYPE_NAME 5 struct mansession LEAF_NODE 6 struct LEAF_NODE 6 mansession POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const struct message * m TYPE 4 const struct message * TYPE_NAME 5 const struct message LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 message POINTER 5 * LEAF_NODE 6 * NAME 4 m LEAF_NODE 5 m LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const char * channel_name ; channel_name = astman_get_header ( m , \"Channel\" ) ; VAR_DECL 4 const char * channel_name ; channel_name = astman_get_header ( m , \"Channel\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 channel_name LEAF_NODE 6 channel_name LEAF_NODE 5 ; INIT 5 channel_name = astman_get_header ( m , \"Channel\" ) ASSIGN 6 channel_name = astman_get_header ( m , \"Channel\" ) LVAL 7 channel_name NAME 8 channel_name LEAF_NODE 9 channel_name ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Channel\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Channel\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Channel\" FIELD 10 \"Channel\" LEAF_NODE 11 \"Channel\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * control_type ; control_type = astman_get_header ( m , \"Control\" ) ; VAR_DECL 4 const char * control_type ; control_type = astman_get_header ( m , \"Control\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 control_type LEAF_NODE 6 control_type LEAF_NODE 5 ; INIT 5 control_type = astman_get_header ( m , \"Control\" ) ASSIGN 6 control_type = astman_get_header ( m , \"Control\" ) LVAL 7 control_type NAME 8 control_type LEAF_NODE 9 control_type ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Control\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Control\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Control\" FIELD 10 \"Control\" LEAF_NODE 11 \"Control\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_channel * chan ; VAR_DECL 4 struct ast_channel * chan TYPE 5 struct ast_channel * TYPE_NAME 6 struct ast_channel LEAF_NODE 7 struct LEAF_NODE 7 ast_channel POINTER 6 * LEAF_NODE 7 * NAME 5 chan LEAF_NODE 6 chan LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_strlen_zero ( channel_name ) EXPR 5 ast_strlen_zero ( channel_name ) FUNCTION_CALL 6 ast_strlen_zero ( channel_name ) CALLEE 7 ast_strlen_zero LEAF_NODE 8 ast_strlen_zero LEAF_NODE 7 ( ARGUMENT 7 channel_name FIELD 8 channel_name LEAF_NODE 9 channel_name LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"Channel not specified\" ) ; EXPR 7 astman_send_error ( s , m , \"Channel not specified\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"Channel not specified\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Channel not specified\" FIELD 10 \"Channel not specified\" LEAF_NODE 11 \"Channel not specified\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_strlen_zero ( control_type ) EXPR 5 ast_strlen_zero ( control_type ) FUNCTION_CALL 6 ast_strlen_zero ( control_type ) CALLEE 7 ast_strlen_zero LEAF_NODE 8 ast_strlen_zero LEAF_NODE 7 ( ARGUMENT 7 control_type FIELD 8 control_type LEAF_NODE 9 control_type LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"Control not specified\" ) ; EXPR 7 astman_send_error ( s , m , \"Control not specified\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"Control not specified\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Control not specified\" FIELD 10 \"Control not specified\" LEAF_NODE 11 \"Control not specified\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 chan = ast_channel_get_by_name ( channel_name ) ; EXPR 4 chan = ast_channel_get_by_name ( channel_name ) ASSIGN 5 chan = ast_channel_get_by_name ( channel_name ) LVAL 6 chan FIELD 7 chan LEAF_NODE 8 chan ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_channel_get_by_name ( channel_name ) FUNCTION_CALL 7 ast_channel_get_by_name ( channel_name ) CALLEE 8 ast_channel_get_by_name LEAF_NODE 9 ast_channel_get_by_name LEAF_NODE 8 ( ARGUMENT 8 channel_name FIELD 9 channel_name LEAF_NODE 10 channel_name LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! chan EXPR 5 ! chan UNARY_EXPR 6 ! chan UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"No such channel\" ) ; EXPR 7 astman_send_error ( s , m , \"No such channel\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"No such channel\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"No such channel\" FIELD 10 \"No such channel\" LEAF_NODE 11 \"No such channel\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! strcasecmp ( control_type , \"stop\" ) EXPR 5 ! strcasecmp ( control_type , \"stop\" ) UNARY_EXPR 6 ! strcasecmp ( control_type , \"stop\" ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 strcasecmp ( control_type , \"stop\" ) CALLEE 8 strcasecmp LEAF_NODE 9 strcasecmp LEAF_NODE 8 ( ARGUMENT 8 control_type FIELD 9 control_type LEAF_NODE 10 control_type LEAF_NODE 8 , ARGUMENT 8 \"stop\" FIELD 9 \"stop\" LEAF_NODE 10 \"stop\" LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_queue_control ( chan , AST_CONTROL_STREAM_STOP ) ; EXPR 7 ast_queue_control ( chan , AST_CONTROL_STREAM_STOP ) FUNCTION_CALL 8 ast_queue_control ( chan , AST_CONTROL_STREAM_STOP ) CALLEE 9 ast_queue_control LEAF_NODE 10 ast_queue_control LEAF_NODE 9 ( ARGUMENT 9 chan FIELD 10 chan LEAF_NODE 11 chan LEAF_NODE 9 , ARGUMENT 9 AST_CONTROL_STREAM_STOP FIELD 10 AST_CONTROL_STREAM_STOP LEAF_NODE 11 AST_CONTROL_STREAM_STOP LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! strcasecmp ( control_type , \"forward\" ) EXPR 7 ! strcasecmp ( control_type , \"forward\" ) UNARY_EXPR 8 ! strcasecmp ( control_type , \"forward\" ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 strcasecmp ( control_type , \"forward\" ) CALLEE 10 strcasecmp LEAF_NODE 11 strcasecmp LEAF_NODE 10 ( ARGUMENT 10 control_type FIELD 11 control_type LEAF_NODE 12 control_type LEAF_NODE 10 , ARGUMENT 10 \"forward\" FIELD 11 \"forward\" LEAF_NODE 12 \"forward\" LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_queue_control ( chan , AST_CONTROL_STREAM_FORWARD ) ; EXPR 9 ast_queue_control ( chan , AST_CONTROL_STREAM_FORWARD ) FUNCTION_CALL 10 ast_queue_control ( chan , AST_CONTROL_STREAM_FORWARD ) CALLEE 11 ast_queue_control LEAF_NODE 12 ast_queue_control LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 , ARGUMENT 11 AST_CONTROL_STREAM_FORWARD FIELD 12 AST_CONTROL_STREAM_FORWARD LEAF_NODE 13 AST_CONTROL_STREAM_FORWARD LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! strcasecmp ( control_type , \"reverse\" ) EXPR 7 ! strcasecmp ( control_type , \"reverse\" ) UNARY_EXPR 8 ! strcasecmp ( control_type , \"reverse\" ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 strcasecmp ( control_type , \"reverse\" ) CALLEE 10 strcasecmp LEAF_NODE 11 strcasecmp LEAF_NODE 10 ( ARGUMENT 10 control_type FIELD 11 control_type LEAF_NODE 12 control_type LEAF_NODE 10 , ARGUMENT 10 \"reverse\" FIELD 11 \"reverse\" LEAF_NODE 12 \"reverse\" LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_queue_control ( chan , AST_CONTROL_STREAM_REVERSE ) ; EXPR 9 ast_queue_control ( chan , AST_CONTROL_STREAM_REVERSE ) FUNCTION_CALL 10 ast_queue_control ( chan , AST_CONTROL_STREAM_REVERSE ) CALLEE 11 ast_queue_control LEAF_NODE 12 ast_queue_control LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 , ARGUMENT 11 AST_CONTROL_STREAM_REVERSE FIELD 12 AST_CONTROL_STREAM_REVERSE LEAF_NODE 13 AST_CONTROL_STREAM_REVERSE LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! strcasecmp ( control_type , \"pause\" ) EXPR 7 ! strcasecmp ( control_type , \"pause\" ) UNARY_EXPR 8 ! strcasecmp ( control_type , \"pause\" ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 strcasecmp ( control_type , \"pause\" ) CALLEE 10 strcasecmp LEAF_NODE 11 strcasecmp LEAF_NODE 10 ( ARGUMENT 10 control_type FIELD 11 control_type LEAF_NODE 12 control_type LEAF_NODE 10 , ARGUMENT 10 \"pause\" FIELD 11 \"pause\" LEAF_NODE 12 \"pause\" LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_queue_control ( chan , AST_CONTROL_STREAM_SUSPEND ) ; EXPR 9 ast_queue_control ( chan , AST_CONTROL_STREAM_SUSPEND ) FUNCTION_CALL 10 ast_queue_control ( chan , AST_CONTROL_STREAM_SUSPEND ) CALLEE 11 ast_queue_control LEAF_NODE 12 ast_queue_control LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 , ARGUMENT 11 AST_CONTROL_STREAM_SUSPEND FIELD 12 AST_CONTROL_STREAM_SUSPEND LEAF_NODE 13 AST_CONTROL_STREAM_SUSPEND LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! strcasecmp ( control_type , \"restart\" ) EXPR 7 ! strcasecmp ( control_type , \"restart\" ) UNARY_EXPR 8 ! strcasecmp ( control_type , \"restart\" ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 strcasecmp ( control_type , \"restart\" ) CALLEE 10 strcasecmp LEAF_NODE 11 strcasecmp LEAF_NODE 10 ( ARGUMENT 10 control_type FIELD 11 control_type LEAF_NODE 12 control_type LEAF_NODE 10 , ARGUMENT 10 \"restart\" FIELD 11 \"restart\" LEAF_NODE 12 \"restart\" LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_queue_control ( chan , AST_CONTROL_STREAM_RESTART ) ; EXPR 9 ast_queue_control ( chan , AST_CONTROL_STREAM_RESTART ) FUNCTION_CALL 10 ast_queue_control ( chan , AST_CONTROL_STREAM_RESTART ) CALLEE 11 ast_queue_control LEAF_NODE 12 ast_queue_control LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 , ARGUMENT 11 AST_CONTROL_STREAM_RESTART FIELD 12 AST_CONTROL_STREAM_RESTART LEAF_NODE 13 AST_CONTROL_STREAM_RESTART LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"Unknown control type\" ) ; EXPR 7 astman_send_error ( s , m , \"Unknown control type\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"Unknown control type\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Unknown control type\" FIELD 10 \"Unknown control type\" LEAF_NODE 11 \"Unknown control type\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 chan = ast_channel_unref ( chan ) ; EXPR 7 chan = ast_channel_unref ( chan ) ASSIGN 8 chan = ast_channel_unref ( chan ) LVAL 9 chan FIELD 10 chan LEAF_NODE 11 chan ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_channel_unref ( chan ) FUNCTION_CALL 10 ast_channel_unref ( chan ) CALLEE 11 ast_channel_unref LEAF_NODE 12 ast_channel_unref LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 chan = ast_channel_unref ( chan ) ; EXPR 4 chan = ast_channel_unref ( chan ) ASSIGN 5 chan = ast_channel_unref ( chan ) LVAL 6 chan FIELD 7 chan LEAF_NODE 8 chan ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_channel_unref ( chan ) FUNCTION_CALL 7 ast_channel_unref ( chan ) CALLEE 8 ast_channel_unref LEAF_NODE 9 ast_channel_unref LEAF_NODE 8 ( ARGUMENT 8 chan FIELD 9 chan LEAF_NODE 10 chan LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 astman_send_ack ( s , m , NULL ) ; EXPR 4 astman_send_ack ( s , m , NULL ) FUNCTION_CALL 5 astman_send_ack ( s , m , NULL ) CALLEE 6 astman_send_ack LEAF_NODE 7 astman_send_ack LEAF_NODE 6 ( ARGUMENT 6 s FIELD 7 s LEAF_NODE 8 s LEAF_NODE 6 , ARGUMENT 6 m FIELD 7 m LEAF_NODE 8 m LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 28, "project": "openssl_ast_vul_function_test_adv_17", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 unload_module LEAF_NODE 3 unload_module PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ast_unregister_application ( app ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ast_unregister_application ( app ) EXPR 5 ast_unregister_application ( app ) FUNCTION_CALL 6 ast_unregister_application ( app ) CALLEE 7 ast_unregister_application LEAF_NODE 8 ast_unregister_application LEAF_NODE 7 ( ARGUMENT 7 app FIELD 8 app LEAF_NODE 9 app LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 29, "project": "openssl_ast_vul_function_test_adv_26", "target": 1}
{"func": "SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { JB_USE = ( 1 << 0 ) , JB_TIMEBASE_INITIALIZED = ( 1 << 1 ) , JB_CREATED = ( 1 << 2 ) } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { JB_USE = ( 1 << 0 ) , JB_TIMEBASE_INITIALIZED = ( 1 << 1 ) , JB_CREATED = ( 1 << 2 ) } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { JB_USE = ( 1 << 0 ) , JB_TIMEBASE_INITIALIZED = ( 1 << 1 ) , JB_CREATED = ( 1 << 2 ) } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 JB_USE = ( 1 << 0 ) , JB_TIMEBASE_INITIALIZED = ( 1 << 1 ) , JB_CREATED = ( 1 << 2 ) LEAF_NODE 5 JB_USE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 JB_TIMEBASE_INITIALIZED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 JB_CREATED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct fixed_jb_conf BASE_CLASSES { long jbsize ; long resync_threshold ; } ; CLASS_DEF 2 struct fixed_jb_conf BASE_CLASSES { long jbsize ; long resync_threshold ; } CLASS_DEF 3 struct fixed_jb_conf BASE_CLASSES { long jbsize ; long resync_threshold ; } LEAF_NODE 4 struct CLASS_NAME 4 fixed_jb_conf LEAF_NODE 5 fixed_jb_conf LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 long jbsize ; long resync_threshold ; SIMPLE_DECL 5 long jbsize ; VAR_DECL 6 long jbsize TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 jbsize LEAF_NODE 8 jbsize LEAF_NODE 6 ; SIMPLE_DECL 5 long resync_threshold ; VAR_DECL 6 long resync_threshold TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 resync_threshold LEAF_NODE 8 resync_threshold LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_timer BASE_CLASSES { void * data ; struct timing_holder * holder ; } ; CLASS_DEF 2 struct ast_timer BASE_CLASSES { void * data ; struct timing_holder * holder ; } CLASS_DEF 3 struct ast_timer BASE_CLASSES { void * data ; struct timing_holder * holder ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_timer LEAF_NODE 5 ast_timer LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 void * data ; struct timing_holder * holder ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 struct timing_holder * holder ; VAR_DECL 6 struct timing_holder * holder TYPE 7 struct timing_holder * TYPE_NAME 8 struct timing_holder LEAF_NODE 9 struct LEAF_NODE 9 timing_holder POINTER 8 * LEAF_NODE 9 * NAME 7 holder LEAF_NODE 8 holder LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct jb_stream_sync BASE_CLASSES { unsigned int timestamp ; struct timeval_t ntp ; } ; CLASS_DEF 2 struct jb_stream_sync BASE_CLASSES { unsigned int timestamp ; struct timeval_t ntp ; } CLASS_DEF 3 struct jb_stream_sync BASE_CLASSES { unsigned int timestamp ; struct timeval_t ntp ; } LEAF_NODE 4 struct CLASS_NAME 4 jb_stream_sync LEAF_NODE 5 jb_stream_sync LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned int timestamp ; struct timeval_t ntp ; SIMPLE_DECL 5 unsigned int timestamp ; VAR_DECL 6 unsigned int timestamp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 timestamp LEAF_NODE 8 timestamp LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval_t ntp ; VAR_DECL 6 struct timeval_t ntp TYPE 7 struct timeval_t TYPE_NAME 8 struct timeval_t LEAF_NODE 9 struct LEAF_NODE 9 timeval_t NAME 7 ntp LEAF_NODE 8 ntp LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct jb_framedata BASE_CLASSES { const struct ast_jb_impl * jb_impl ; struct ast_jb_conf jb_conf ; struct timeval_t start_tv ; struct ast_format * last_format ; struct ast_timer * timer ; int timer_interval ; int timer_fd ; int first ; int audio_stream_id ; struct jb_stream_sync audio_stream_sync ; int video_stream_id ; struct jb_stream_sync video_stream_sync ; AST_LIST_HEAD_NOLOCK ( , ast_frame ) early_frames ; unsigned int early_frame_count ; struct timeval_t last_audio_ntp_timestamp ; int audio_flowing ; void * jb_obj ; } ; CLASS_DEF 2 struct jb_framedata BASE_CLASSES { const struct ast_jb_impl * jb_impl ; struct ast_jb_conf jb_conf ; struct timeval_t start_tv ; struct ast_format * last_format ; struct ast_timer * timer ; int timer_interval ; int timer_fd ; int first ; int audio_stream_id ; struct jb_stream_sync audio_stream_sync ; int video_stream_id ; struct jb_stream_sync video_stream_sync ; AST_LIST_HEAD_NOLOCK ( , ast_frame ) early_frames ; unsigned int early_frame_count ; struct timeval_t last_audio_ntp_timestamp ; int audio_flowing ; void * jb_obj ; } CLASS_DEF 3 struct jb_framedata BASE_CLASSES { const struct ast_jb_impl * jb_impl ; struct ast_jb_conf jb_conf ; struct timeval_t start_tv ; struct ast_format * last_format ; struct ast_timer * timer ; int timer_interval ; int timer_fd ; int first ; int audio_stream_id ; struct jb_stream_sync audio_stream_sync ; int video_stream_id ; struct jb_stream_sync video_stream_sync ; AST_LIST_HEAD_NOLOCK ( , ast_frame ) early_frames ; unsigned int early_frame_count ; struct timeval_t last_audio_ntp_timestamp ; int audio_flowing ; void * jb_obj ; } LEAF_NODE 4 struct CLASS_NAME 4 jb_framedata LEAF_NODE 5 jb_framedata LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const struct ast_jb_impl * jb_impl ; struct ast_jb_conf jb_conf ; struct timeval_t start_tv ; struct ast_format * last_format ; struct ast_timer * timer ; int timer_interval ; int timer_fd ; int first ; int audio_stream_id ; struct jb_stream_sync audio_stream_sync ; int video_stream_id ; struct jb_stream_sync video_stream_sync ; AST_LIST_HEAD_NOLOCK ( , ast_frame ) early_frames ; unsigned int early_frame_count ; struct timeval_t last_audio_ntp_timestamp ; int audio_flowing ; void * jb_obj ; SIMPLE_DECL 5 const struct ast_jb_impl * jb_impl ; VAR_DECL 6 const struct ast_jb_impl * jb_impl TYPE 7 const struct ast_jb_impl * TYPE_NAME 8 const struct ast_jb_impl LEAF_NODE 9 const LEAF_NODE 9 struct LEAF_NODE 9 ast_jb_impl POINTER 8 * LEAF_NODE 9 * NAME 7 jb_impl LEAF_NODE 8 jb_impl LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_jb_conf jb_conf ; VAR_DECL 6 struct ast_jb_conf jb_conf TYPE 7 struct ast_jb_conf TYPE_NAME 8 struct ast_jb_conf LEAF_NODE 9 struct LEAF_NODE 9 ast_jb_conf NAME 7 jb_conf LEAF_NODE 8 jb_conf LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval_t start_tv ; VAR_DECL 6 struct timeval_t start_tv TYPE 7 struct timeval_t TYPE_NAME 8 struct timeval_t LEAF_NODE 9 struct LEAF_NODE 9 timeval_t NAME 7 start_tv LEAF_NODE 8 start_tv LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * last_format ; VAR_DECL 6 struct ast_format * last_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 last_format LEAF_NODE 8 last_format LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_timer * timer ; VAR_DECL 6 struct ast_timer * timer TYPE 7 struct ast_timer * TYPE_NAME 8 struct ast_timer LEAF_NODE 9 struct LEAF_NODE 9 ast_timer POINTER 8 * LEAF_NODE 9 * NAME 7 timer LEAF_NODE 8 timer LEAF_NODE 6 ; SIMPLE_DECL 5 int timer_interval ; VAR_DECL 6 int timer_interval TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timer_interval LEAF_NODE 8 timer_interval LEAF_NODE 6 ; SIMPLE_DECL 5 int timer_fd ; VAR_DECL 6 int timer_fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timer_fd LEAF_NODE 8 timer_fd LEAF_NODE 6 ; SIMPLE_DECL 5 int first ; VAR_DECL 6 int first TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 first LEAF_NODE 8 first LEAF_NODE 6 ; SIMPLE_DECL 5 int audio_stream_id ; VAR_DECL 6 int audio_stream_id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 audio_stream_id LEAF_NODE 8 audio_stream_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct jb_stream_sync audio_stream_sync ; VAR_DECL 6 struct jb_stream_sync audio_stream_sync TYPE 7 struct jb_stream_sync TYPE_NAME 8 struct jb_stream_sync LEAF_NODE 9 struct LEAF_NODE 9 jb_stream_sync NAME 7 audio_stream_sync LEAF_NODE 8 audio_stream_sync LEAF_NODE 6 ; SIMPLE_DECL 5 int video_stream_id ; VAR_DECL 6 int video_stream_id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 video_stream_id LEAF_NODE 8 video_stream_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct jb_stream_sync video_stream_sync ; VAR_DECL 6 struct jb_stream_sync video_stream_sync TYPE 7 struct jb_stream_sync TYPE_NAME 8 struct jb_stream_sync LEAF_NODE 9 struct LEAF_NODE 9 jb_stream_sync NAME 7 video_stream_sync LEAF_NODE 8 video_stream_sync LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 ast_frame LEAF_NODE 5 ) LEAF_NODE 5 early_frames LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int early_frame_count ; VAR_DECL 6 unsigned int early_frame_count TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 early_frame_count LEAF_NODE 8 early_frame_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval_t last_audio_ntp_timestamp ; VAR_DECL 6 struct timeval_t last_audio_ntp_timestamp TYPE 7 struct timeval_t TYPE_NAME 8 struct timeval_t LEAF_NODE 9 struct LEAF_NODE 9 timeval_t NAME 7 last_audio_ntp_timestamp LEAF_NODE 8 last_audio_ntp_timestamp LEAF_NODE 6 ; SIMPLE_DECL 5 int audio_flowing ; VAR_DECL 6 int audio_flowing TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 audio_flowing LEAF_NODE 8 audio_flowing LEAF_NODE 6 ; SIMPLE_DECL 5 void * jb_obj ; VAR_DECL 6 void * jb_obj TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 jb_obj LEAF_NODE 8 jb_obj LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 jb_get_and_deliver LEAF_NODE 3 jb_get_and_deliver PARAMETER_LIST 2 ( struct ast_channel * chan ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_jb * jb ; jb = ast_channel_jb ( chan ) ; VAR_DECL 4 struct ast_jb * jb ; jb = ast_channel_jb ( chan ) TYPE 5 struct ast_jb * TYPE_NAME 6 struct ast_jb LEAF_NODE 7 struct LEAF_NODE 7 ast_jb POINTER 6 * LEAF_NODE 7 * NAME 5 jb LEAF_NODE 6 jb LEAF_NODE 5 ; INIT 5 jb = ast_channel_jb ( chan ) ASSIGN 6 jb = ast_channel_jb ( chan ) LVAL 7 jb NAME 8 jb LEAF_NODE 9 jb ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ast_channel_jb ( chan ) FUNCTION_CALL 8 ast_channel_jb ( chan ) CALLEE 9 ast_channel_jb LEAF_NODE 10 ast_channel_jb LEAF_NODE 9 ( ARGUMENT 9 chan FIELD 10 chan LEAF_NODE 11 chan LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const struct ast_jb_impl * jbimpl ; jbimpl = jb -> impl ; VAR_DECL 4 const struct ast_jb_impl * jbimpl ; jbimpl = jb -> impl TYPE 5 const struct ast_jb_impl * TYPE_NAME 6 const struct ast_jb_impl LEAF_NODE 7 const LEAF_NODE 7 struct LEAF_NODE 7 ast_jb_impl POINTER 6 * LEAF_NODE 7 * NAME 5 jbimpl LEAF_NODE 6 jbimpl LEAF_NODE 5 ; INIT 5 jbimpl = jb -> impl ASSIGN 6 jbimpl = jb -> impl LVAL 7 jbimpl NAME 8 jbimpl LEAF_NODE 9 jbimpl ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 jb -> impl FIELD 8 jb -> impl LEAF_NODE 9 jb LEAF_NODE 9 -> LEAF_NODE 9 impl LEAF_NODE 4 ; SIMPLE_DECL 3 void * jbobj ; jbobj = jb -> jbobj ; VAR_DECL 4 void * jbobj ; jbobj = jb -> jbobj TYPE 5 void * TYPE_NAME 6 void LEAF_NODE 7 void POINTER 6 * LEAF_NODE 7 * NAME 5 jbobj LEAF_NODE 6 jbobj LEAF_NODE 5 ; INIT 5 jbobj = jb -> jbobj ASSIGN 6 jbobj = jb -> jbobj LVAL 7 jbobj NAME 8 jbobj LEAF_NODE 9 jbobj ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 jb -> jbobj FIELD 8 jb -> jbobj LEAF_NODE 9 jb LEAF_NODE 9 -> LEAF_NODE 9 jbobj LEAF_NODE 4 ; LEAF_NODE 3 struct LEAF_NODE 3 ast_frame LEAF_NODE 3 * LEAF_NODE 3 f LEAF_NODE 3 , LEAF_NODE 3 finterp LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 . LEAF_NODE 4 frametype LEAF_NODE 4 = LEAF_NODE 4 AST_FRAME_VOICE LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SIMPLE_DECL 3 long now ; VAR_DECL 4 long now TYPE 5 long TYPE_NAME 6 long LEAF_NODE 7 long NAME 5 now LEAF_NODE 6 now LEAF_NODE 4 ; SIMPLE_DECL 3 int interpolation_len , int res ; INIT_DECL_LIST 4 int interpolation_len , int res VAR_DECL 5 int interpolation_len TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 interpolation_len LEAF_NODE 7 interpolation_len LEAF_NODE 5 , VAR_DECL 5 int res TYPE 6 int TYPE_NAME 7 int LEAF_NODE 8 int NAME 6 res LEAF_NODE 7 res LEAF_NODE 4 ; EXPR_STATEMENT 3 now = get_now ( jb , NULL ) ; EXPR 4 now = get_now ( jb , NULL ) ASSIGN 5 now = get_now ( jb , NULL ) LVAL 6 now FIELD 7 now LEAF_NODE 8 now ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 get_now ( jb , NULL ) FUNCTION_CALL 7 get_now ( jb , NULL ) CALLEE 8 get_now LEAF_NODE 9 get_now LEAF_NODE 8 ( ARGUMENT 8 jb FIELD 9 jb LEAF_NODE 10 jb LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 jb -> next = jbimpl -> next ( jbobj ) ; EXPR 4 jb -> next = jbimpl -> next ( jbobj ) ASSIGN 5 jb -> next = jbimpl -> next ( jbobj ) LVAL 6 jb -> next FIELD 7 jb -> next LEAF_NODE 8 jb LEAF_NODE 8 -> LEAF_NODE 8 next ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 jbimpl -> next ( jbobj ) FUNCTION_CALL 7 jbimpl -> next ( jbobj ) CALLEE 8 jbimpl -> next LEAF_NODE 9 jbimpl LEAF_NODE 9 -> LEAF_NODE 9 next LEAF_NODE 8 ( ARGUMENT 8 jbobj FIELD 9 jbobj LEAF_NODE 10 jbobj LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 now < jb -> next EXPR 5 now < jb -> next FIELD 6 now LEAF_NODE 7 now REL_OPERATOR 6 < LEAF_NODE 7 < FIELD 6 jb -> next LEAF_NODE 7 jb LEAF_NODE 7 -> LEAF_NODE 7 next LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 jb_framelog ( \"\\tJB_GET {now=%ld}: now < next=%ld\\n\" , now , jb -> next ) ; EXPR 7 jb_framelog ( \"\\tJB_GET {now=%ld}: now < next=%ld\\n\" , now , jb -> next ) FUNCTION_CALL 8 jb_framelog ( \"\\tJB_GET {now=%ld}: now < next=%ld\\n\" , now , jb -> next ) CALLEE 9 jb_framelog LEAF_NODE 10 jb_framelog LEAF_NODE 9 ( ARGUMENT 9 \"\\tJB_GET {now=%ld}: now < next=%ld\\n\" FIELD 10 \"\\tJB_GET {now=%ld}: now < next=%ld\\n\" LEAF_NODE 11 \"\\tJB_GET {now=%ld}: now < next=%ld\\n\" LEAF_NODE 9 , ARGUMENT 9 now FIELD 10 now LEAF_NODE 11 now LEAF_NODE 9 , ARGUMENT 9 jb -> next FIELD 10 jb -> next LEAF_NODE 11 jb LEAF_NODE 11 -> LEAF_NODE 11 next LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return DESTINATION ; KEYWORD 7 return LEAF_NODE 8 return LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 now >= jb -> next EXPR 5 now >= jb -> next FIELD 6 now LEAF_NODE 7 now REL_OPERATOR 6 >= LEAF_NODE 7 >= FIELD 6 jb -> next LEAF_NODE 7 jb LEAF_NODE 7 -> LEAF_NODE 7 next LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 interpolation_len = ast_format_get_default_ms ( jb -> last_format ) ; EXPR 7 interpolation_len = ast_format_get_default_ms ( jb -> last_format ) ASSIGN 8 interpolation_len = ast_format_get_default_ms ( jb -> last_format ) LVAL 9 interpolation_len FIELD 10 interpolation_len LEAF_NODE 11 interpolation_len ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_format_get_default_ms ( jb -> last_format ) FUNCTION_CALL 10 ast_format_get_default_ms ( jb -> last_format ) CALLEE 11 ast_format_get_default_ms LEAF_NODE 12 ast_format_get_default_ms LEAF_NODE 11 ( ARGUMENT 11 jb -> last_format FIELD 12 jb -> last_format LEAF_NODE 13 jb LEAF_NODE 13 -> LEAF_NODE 13 last_format LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 res = jbimpl -> get ( jbobj , & f , now , interpolation_len ) ; EXPR 7 res = jbimpl -> get ( jbobj , & f , now , interpolation_len ) ASSIGN 8 res = jbimpl -> get ( jbobj , & f , now , interpolation_len ) LVAL 9 res FIELD 10 res LEAF_NODE 11 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 jbimpl -> get ( jbobj , & f , now , interpolation_len ) FUNCTION_CALL 10 jbimpl -> get ( jbobj , & f , now , interpolation_len ) CALLEE 11 jbimpl -> get LEAF_NODE 12 jbimpl LEAF_NODE 12 -> LEAF_NODE 12 get LEAF_NODE 11 ( ARGUMENT 11 jbobj FIELD 12 jbobj LEAF_NODE 13 jbobj LEAF_NODE 11 , ARGUMENT 11 & f UNARY_EXPR 12 & f UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 f LEAF_NODE 14 f LEAF_NODE 11 , ARGUMENT 11 now FIELD 12 now LEAF_NODE 13 now LEAF_NODE 11 , ARGUMENT 11 interpolation_len FIELD 12 interpolation_len LEAF_NODE 13 interpolation_len LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 switch LEAF_NODE 8 switch LEAF_NODE 7 ( CONDITION 7 res EXPR 8 res FIELD 9 res LEAF_NODE 10 res LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 LABEL 9 case AST_JB_IMPL_OK : LEAF_NODE 10 case LEAF_NODE 10 AST_JB_IMPL_OK LEAF_NODE 10 : EXPR_STATEMENT 9 ast_write ( chan , f ) ; EXPR 10 ast_write ( chan , f ) FUNCTION_CALL 11 ast_write ( chan , f ) CALLEE 12 ast_write LEAF_NODE 13 ast_write LEAF_NODE 12 ( ARGUMENT 12 chan FIELD 13 chan LEAF_NODE 14 chan LEAF_NODE 12 , ARGUMENT 12 f FIELD 13 f LEAF_NODE 14 f LEAF_NODE 12 ) LEAF_NODE 10 ; LABEL 9 case AST_JB_IMPL_DROP : LEAF_NODE 10 case LEAF_NODE 10 AST_JB_IMPL_DROP LEAF_NODE 10 : EXPR_STATEMENT 9 jb_framelog ( \"\\tJB_GET {now=%ld}: %s frame with ts=%ld and len=%ld\\n\" , now , jb_get_actions [ res ] , f -> ts , f -> len ) ; EXPR 10 jb_framelog ( \"\\tJB_GET {now=%ld}: %s frame with ts=%ld and len=%ld\\n\" , now , jb_get_actions [ res ] , f -> ts , f -> len ) FUNCTION_CALL 11 jb_framelog ( \"\\tJB_GET {now=%ld}: %s frame with ts=%ld and len=%ld\\n\" , now , jb_get_actions [ res ] , f -> ts , f -> len ) CALLEE 12 jb_framelog LEAF_NODE 13 jb_framelog LEAF_NODE 12 ( ARGUMENT 12 \"\\tJB_GET {now=%ld}: %s frame with ts=%ld and len=%ld\\n\" FIELD 13 \"\\tJB_GET {now=%ld}: %s frame with ts=%ld and len=%ld\\n\" LEAF_NODE 14 \"\\tJB_GET {now=%ld}: %s frame with ts=%ld and len=%ld\\n\" LEAF_NODE 12 , ARGUMENT 12 now FIELD 13 now LEAF_NODE 14 now LEAF_NODE 12 , ARGUMENT 12 jb_get_actions [ res ] FIELD 13 jb_get_actions [ res ] LEAF_NODE 14 jb_get_actions LEAF_NODE 14 [ EXPR 14 res FIELD 15 res LEAF_NODE 16 res LEAF_NODE 14 ] LEAF_NODE 12 , ARGUMENT 12 f -> ts FIELD 13 f -> ts LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 ts LEAF_NODE 12 , ARGUMENT 12 f -> len FIELD 13 f -> len LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 len LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ao2_replace ( jb -> last_format , f -> subclass . format ) ; EXPR 10 ao2_replace ( jb -> last_format , f -> subclass . format ) FUNCTION_CALL 11 ao2_replace ( jb -> last_format , f -> subclass . format ) CALLEE 12 ao2_replace LEAF_NODE 13 ao2_replace LEAF_NODE 12 ( ARGUMENT 12 jb -> last_format FIELD 13 jb -> last_format LEAF_NODE 14 jb LEAF_NODE 14 -> LEAF_NODE 14 last_format LEAF_NODE 12 , ARGUMENT 12 f -> subclass . format FIELD 13 f -> subclass . format LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 subclass LEAF_NODE 14 . LEAF_NODE 14 format LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_frfree ( f ) ; EXPR 10 ast_frfree ( f ) FUNCTION_CALL 11 ast_frfree ( f ) CALLEE 12 ast_frfree LEAF_NODE 13 ast_frfree LEAF_NODE 12 ( ARGUMENT 12 f FIELD 13 f LEAF_NODE 14 f LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case AST_JB_IMPL_INTERP : LEAF_NODE 10 case LEAF_NODE 10 AST_JB_IMPL_INTERP LEAF_NODE 10 : EXPR_STATEMENT 9 f = & finterp ; EXPR 10 f = & finterp ASSIGN 11 f = & finterp LVAL 12 f FIELD 13 f LEAF_NODE 14 f ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 & finterp UNARY_EXPR 13 & finterp UNARY_OPERATOR 14 & LEAF_NODE 15 & FIELD 14 finterp LEAF_NODE 15 finterp LEAF_NODE 10 ; EXPR_STATEMENT 9 f -> subclass . format = jb -> last_format ; EXPR 10 f -> subclass . format = jb -> last_format ASSIGN 11 f -> subclass . format = jb -> last_format LVAL 12 f -> subclass . format FIELD 13 f -> subclass . format LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 subclass LEAF_NODE 14 . LEAF_NODE 14 format ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 jb -> last_format FIELD 13 jb -> last_format LEAF_NODE 14 jb LEAF_NODE 14 -> LEAF_NODE 14 last_format LEAF_NODE 10 ; EXPR_STATEMENT 9 f -> samples = interpolation_len * 8 ; EXPR 10 f -> samples = interpolation_len * 8 ASSIGN 11 f -> samples = interpolation_len * 8 LVAL 12 f -> samples FIELD 13 f -> samples LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 samples ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 interpolation_len * 8 FIELD 13 interpolation_len LEAF_NODE 14 interpolation_len LEAF_NODE 13 * FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 10 ; EXPR_STATEMENT 9 f -> src = \"JB interpolation\" ; EXPR 10 f -> src = \"JB interpolation\" ASSIGN 11 f -> src = \"JB interpolation\" LVAL 12 f -> src FIELD 13 f -> src LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 src ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 \"JB interpolation\" FIELD 13 \"JB interpolation\" LEAF_NODE 14 \"JB interpolation\" LEAF_NODE 10 ; EXPR_STATEMENT 9 f -> delivery = ast_tvadd ( jb -> timebase , ast_samp2tv ( jb -> next , 1000 ) ) ; EXPR 10 f -> delivery = ast_tvadd ( jb -> timebase , ast_samp2tv ( jb -> next , 1000 ) ) ASSIGN 11 f -> delivery = ast_tvadd ( jb -> timebase , ast_samp2tv ( jb -> next , 1000 ) ) LVAL 12 f -> delivery FIELD 13 f -> delivery LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 delivery ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ast_tvadd ( jb -> timebase , ast_samp2tv ( jb -> next , 1000 ) ) FUNCTION_CALL 13 ast_tvadd ( jb -> timebase , ast_samp2tv ( jb -> next , 1000 ) ) CALLEE 14 ast_tvadd LEAF_NODE 15 ast_tvadd LEAF_NODE 14 ( ARGUMENT 14 jb -> timebase FIELD 15 jb -> timebase LEAF_NODE 16 jb LEAF_NODE 16 -> LEAF_NODE 16 timebase LEAF_NODE 14 , ARGUMENT 14 ast_samp2tv ( jb -> next , 1000 ) FUNCTION_CALL 15 ast_samp2tv ( jb -> next , 1000 ) CALLEE 16 ast_samp2tv LEAF_NODE 17 ast_samp2tv LEAF_NODE 16 ( ARGUMENT 16 jb -> next FIELD 17 jb -> next LEAF_NODE 18 jb LEAF_NODE 18 -> LEAF_NODE 18 next LEAF_NODE 16 , ARGUMENT 16 1000 FIELD 17 1000 LEAF_NODE 18 1000 LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 f -> offset = AST_FRIENDLY_OFFSET ; EXPR 10 f -> offset = AST_FRIENDLY_OFFSET ASSIGN 11 f -> offset = AST_FRIENDLY_OFFSET LVAL 12 f -> offset FIELD 13 f -> offset LEAF_NODE 14 f LEAF_NODE 14 -> LEAF_NODE 14 offset ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 AST_FRIENDLY_OFFSET FIELD 13 AST_FRIENDLY_OFFSET LEAF_NODE 14 AST_FRIENDLY_OFFSET LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_write ( chan , f ) ; EXPR 10 ast_write ( chan , f ) FUNCTION_CALL 11 ast_write ( chan , f ) CALLEE 12 ast_write LEAF_NODE 13 ast_write LEAF_NODE 12 ( ARGUMENT 12 chan FIELD 13 chan LEAF_NODE 14 chan LEAF_NODE 12 , ARGUMENT 12 f FIELD 13 f LEAF_NODE 14 f LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 jb_framelog ( \"\\tJB_GET {now=%ld}: Interpolated frame with len=%d\\n\" , now , interpolation_len ) ; EXPR 10 jb_framelog ( \"\\tJB_GET {now=%ld}: Interpolated frame with len=%d\\n\" , now , interpolation_len ) FUNCTION_CALL 11 jb_framelog ( \"\\tJB_GET {now=%ld}: Interpolated frame with len=%d\\n\" , now , interpolation_len ) CALLEE 12 jb_framelog LEAF_NODE 13 jb_framelog LEAF_NODE 12 ( ARGUMENT 12 \"\\tJB_GET {now=%ld}: Interpolated frame with len=%d\\n\" FIELD 13 \"\\tJB_GET {now=%ld}: Interpolated frame with len=%d\\n\" LEAF_NODE 14 \"\\tJB_GET {now=%ld}: Interpolated frame with len=%d\\n\" LEAF_NODE 12 , ARGUMENT 12 now FIELD 13 now LEAF_NODE 14 now LEAF_NODE 12 , ARGUMENT 12 interpolation_len FIELD 13 interpolation_len LEAF_NODE 14 interpolation_len LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 case AST_JB_IMPL_NOFRAME : LEAF_NODE 10 case LEAF_NODE 10 AST_JB_IMPL_NOFRAME LEAF_NODE 10 : EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"AST_JB_IMPL_NOFRAME is returned from the %s jb when now=%ld >= next=%ld, jbnext=%ld!\\n\" , jbimpl -> name , now , jb -> next , jbimpl -> next ( jbobj ) ) ; EXPR 10 ast_log ( LOG_WARNING , \"AST_JB_IMPL_NOFRAME is returned from the %s jb when now=%ld >= next=%ld, jbnext=%ld!\\n\" , jbimpl -> name , now , jb -> next , jbimpl -> next ( jbobj ) ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"AST_JB_IMPL_NOFRAME is returned from the %s jb when now=%ld >= next=%ld, jbnext=%ld!\\n\" , jbimpl -> name , now , jb -> next , jbimpl -> next ( jbobj ) ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"AST_JB_IMPL_NOFRAME is returned from the %s jb when now=%ld >= next=%ld, jbnext=%ld!\\n\" FIELD 13 \"AST_JB_IMPL_NOFRAME is returned from the %s jb when now=%ld >= next=%ld, jbnext=%ld!\\n\" LEAF_NODE 14 \"AST_JB_IMPL_NOFRAME is returned from the %s jb when now=%ld >= next=%ld, jbnext=%ld!\\n\" LEAF_NODE 12 , ARGUMENT 12 jbimpl -> name FIELD 13 jbimpl -> name LEAF_NODE 14 jbimpl LEAF_NODE 14 -> LEAF_NODE 14 name LEAF_NODE 12 , ARGUMENT 12 now FIELD 13 now LEAF_NODE 14 now LEAF_NODE 12 , ARGUMENT 12 jb -> next FIELD 13 jb -> next LEAF_NODE 14 jb LEAF_NODE 14 -> LEAF_NODE 14 next LEAF_NODE 12 , ARGUMENT 12 jbimpl -> next ( jbobj ) FUNCTION_CALL 13 jbimpl -> next ( jbobj ) CALLEE 14 jbimpl -> next LEAF_NODE 15 jbimpl LEAF_NODE 15 -> LEAF_NODE 15 next LEAF_NODE 14 ( ARGUMENT 14 jbobj FIELD 15 jbobj LEAF_NODE 16 jbobj LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 jb_framelog ( \"\\tJB_GET {now=%ld}: No frame for now!?\\n\" , now ) ; EXPR 10 jb_framelog ( \"\\tJB_GET {now=%ld}: No frame for now!?\\n\" , now ) FUNCTION_CALL 11 jb_framelog ( \"\\tJB_GET {now=%ld}: No frame for now!?\\n\" , now ) CALLEE 12 jb_framelog LEAF_NODE 13 jb_framelog LEAF_NODE 12 ( ARGUMENT 12 \"\\tJB_GET {now=%ld}: No frame for now!?\\n\" FIELD 13 \"\\tJB_GET {now=%ld}: No frame for now!?\\n\" LEAF_NODE 14 \"\\tJB_GET {now=%ld}: No frame for now!?\\n\" LEAF_NODE 12 , ARGUMENT 12 now FIELD 13 now LEAF_NODE 14 now LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return DESTINATION ; KEYWORD 10 return LEAF_NODE 11 return LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LABEL 9 default : LEAF_NODE 10 default LEAF_NODE 10 : EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"This should never happen!\\n\" ) ; EXPR 10 ast_log ( LOG_ERROR , \"This should never happen!\\n\" ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"This should never happen!\\n\" ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"This should never happen!\\n\" FIELD 13 \"This should never happen!\\n\" LEAF_NODE 14 \"This should never happen!\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_assert ( \"JB type unknown\" == NULL ) ; EXPR 10 ast_assert ( \"JB type unknown\" == NULL ) FUNCTION_CALL 11 ast_assert ( \"JB type unknown\" == NULL ) CALLEE 12 ast_assert LEAF_NODE 13 ast_assert LEAF_NODE 12 ( ARGUMENT 12 \"JB type unknown\" == NULL FIELD 13 \"JB type unknown\" LEAF_NODE 14 \"JB type unknown\" EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 jb -> next = jbimpl -> next ( jbobj ) ; EXPR 7 jb -> next = jbimpl -> next ( jbobj ) ASSIGN 8 jb -> next = jbimpl -> next ( jbobj ) LVAL 9 jb -> next FIELD 10 jb -> next LEAF_NODE 11 jb LEAF_NODE 11 -> LEAF_NODE 11 next ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 jbimpl -> next ( jbobj ) FUNCTION_CALL 10 jbimpl -> next ( jbobj ) CALLEE 11 jbimpl -> next LEAF_NODE 12 jbimpl LEAF_NODE 12 -> LEAF_NODE 12 next LEAF_NODE 11 ( ARGUMENT 11 jbobj FIELD 12 jbobj LEAF_NODE 13 jbobj LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 30, "project": "openssl_ast_vul_function_test_adv_13", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 naptr_cancel LEAF_NODE 3 naptr_cancel PARAMETER_LIST 2 ( struct ast_dns_query * query ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_dns_query * query TYPE 4 struct ast_dns_query * TYPE_NAME 5 struct ast_dns_query LEAF_NODE 6 struct LEAF_NODE 6 ast_dns_query POINTER 5 * LEAF_NODE 6 * NAME 4 query LEAF_NODE 5 query LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 31, "project": "openssl_ast_vul_function_test_adv_27", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } ; CLASS_DEF 2 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } CLASS_DEF 3 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 stasis_app_subscription_model LEAF_NODE 5 stasis_app_subscription_model LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 5 STASIS_APP_SUBSCRIBE_MANUAL LEAF_NODE 5 , LEAF_NODE 5 STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } ; CLASS_DEF 2 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } CLASS_DEF 3 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 stasis_app LEAF_NODE 5 stasis_app LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; SIMPLE_DECL 5 struct stasis_topic * topic ; VAR_DECL 6 struct stasis_topic * topic TYPE 7 struct stasis_topic * TYPE_NAME 8 struct stasis_topic LEAF_NODE 9 struct LEAF_NODE 9 stasis_topic POINTER 8 * LEAF_NODE 9 * NAME 7 topic LEAF_NODE 8 topic LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * router ; VAR_DECL 6 struct stasis_message_router * router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 router LEAF_NODE 8 router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * bridge_router ; VAR_DECL 6 struct stasis_message_router * bridge_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 bridge_router LEAF_NODE 8 bridge_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * endpoint_router ; VAR_DECL 6 struct stasis_message_router * endpoint_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 endpoint_router LEAF_NODE 8 endpoint_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * forwards ; VAR_DECL 6 struct ao2_container * forwards TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 forwards LEAF_NODE 8 forwards LEAF_NODE 6 ; SIMPLE_DECL 5 stasis_app_cb handler ; VAR_DECL 6 stasis_app_cb handler TYPE 7 stasis_app_cb TYPE_NAME 8 stasis_app_cb LEAF_NODE 9 stasis_app_cb NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 enum stasis_app_subscription_model subscription_model ; VAR_DECL 6 enum stasis_app_subscription_model subscription_model TYPE 7 enum stasis_app_subscription_model TYPE_NAME 8 enum stasis_app_subscription_model LEAF_NODE 9 enum LEAF_NODE 9 stasis_app_subscription_model NAME 7 subscription_model LEAF_NODE 8 subscription_model LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_allowed ; VAR_DECL 6 struct ast_json * events_allowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_allowed LEAF_NODE 8 events_allowed LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_disallowed ; VAR_DECL 6 struct ast_json * events_disallowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_disallowed LEAF_NODE 8 events_disallowed LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] name ; VAR_DECL 6 char [ ] name TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } ; CLASS_DEF 2 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } CLASS_DEF 3 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } LEAF_NODE 4 enum CLASS_NAME 4 forward_type LEAF_NODE 5 forward_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , LEAF_NODE 5 FORWARD_CHANNEL LEAF_NODE 5 , LEAF_NODE 5 FORWARD_BRIDGE LEAF_NODE 5 , LEAF_NODE 5 FORWARD_ENDPOINT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } ; CLASS_DEF 2 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } CLASS_DEF 3 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } LEAF_NODE 4 struct CLASS_NAME 4 app_forwards LEAF_NODE 5 app_forwards LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; SIMPLE_DECL 5 int interested ; VAR_DECL 6 int interested TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 interested LEAF_NODE 8 interested LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_forward ; VAR_DECL 6 struct stasis_forward * topic_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_forward LEAF_NODE 8 topic_forward LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_cached_forward ; VAR_DECL 6 struct stasis_forward * topic_cached_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_cached_forward LEAF_NODE 8 topic_cached_forward LEAF_NODE 6 ; SIMPLE_DECL 5 enum forward_type forward_type ; VAR_DECL 6 enum forward_type forward_type TYPE 7 enum forward_type TYPE_NAME 8 enum forward_type LEAF_NODE 9 enum LEAF_NODE 9 forward_type NAME 7 forward_type LEAF_NODE 8 forward_type LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] id ; VAR_DECL 6 char [ ] id TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } ; CLASS_DEF 2 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } CLASS_DEF 3 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_channel_snapshot LEAF_NODE 5 ast_channel_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 uniqueid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 linkedid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appl LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 accountcode LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 peeraccount LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 userfield LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 hangupsource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_dnid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_ani LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_rdnis LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dialed_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 language LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 bridgeid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 type LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_channel_snapshot_base * base ; VAR_DECL 6 struct ast_channel_snapshot_base * base TYPE 7 struct ast_channel_snapshot_base * TYPE_NAME 8 struct ast_channel_snapshot_base LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_base POINTER 8 * LEAF_NODE 9 * NAME 7 base LEAF_NODE 8 base LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_peer * peer ; VAR_DECL 6 struct ast_channel_snapshot_peer * peer TYPE 7 struct ast_channel_snapshot_peer * TYPE_NAME 8 struct ast_channel_snapshot_peer LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_peer POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_caller * caller ; VAR_DECL 6 struct ast_channel_snapshot_caller * caller TYPE 7 struct ast_channel_snapshot_caller * TYPE_NAME 8 struct ast_channel_snapshot_caller LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_caller POINTER 8 * LEAF_NODE 9 * NAME 7 caller LEAF_NODE 8 caller LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_connected * connected ; VAR_DECL 6 struct ast_channel_snapshot_connected * connected TYPE 7 struct ast_channel_snapshot_connected * TYPE_NAME 8 struct ast_channel_snapshot_connected LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_connected POINTER 8 * LEAF_NODE 9 * NAME 7 connected LEAF_NODE 8 connected LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_bridge * bridge ; VAR_DECL 6 struct ast_channel_snapshot_bridge * bridge TYPE 7 struct ast_channel_snapshot_bridge * TYPE_NAME 8 struct ast_channel_snapshot_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_dialplan * dialplan ; VAR_DECL 6 struct ast_channel_snapshot_dialplan * dialplan TYPE 7 struct ast_channel_snapshot_dialplan * TYPE_NAME 8 struct ast_channel_snapshot_dialplan LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_dialplan POINTER 8 * LEAF_NODE 9 * NAME 7 dialplan LEAF_NODE 8 dialplan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_hangup * hangup ; VAR_DECL 6 struct ast_channel_snapshot_hangup * hangup TYPE 7 struct ast_channel_snapshot_hangup * TYPE_NAME 8 struct ast_channel_snapshot_hangup LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_hangup POINTER 8 * LEAF_NODE 9 * NAME 7 hangup LEAF_NODE 8 hangup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_channel_state state ; VAR_DECL 6 enum ast_channel_state state TYPE 7 enum ast_channel_state TYPE_NAME 8 enum ast_channel_state LEAF_NODE 9 enum LEAF_NODE 9 ast_channel_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int amaflags ; VAR_DECL 6 int amaflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 amaflags LEAF_NODE 8 amaflags LEAF_NODE 6 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 int hangupcause ; VAR_DECL 6 int hangupcause TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hangupcause LEAF_NODE 8 hangupcause LEAF_NODE 6 ; SIMPLE_DECL 5 int caller_pres ; VAR_DECL 6 int caller_pres TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 caller_pres LEAF_NODE 8 caller_pres LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags softhangup_flags ; VAR_DECL 6 struct ast_flags softhangup_flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 softhangup_flags LEAF_NODE 8 softhangup_flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * manager_vars ; VAR_DECL 6 struct varshead * manager_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 manager_vars LEAF_NODE 8 manager_vars LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * ari_vars ; VAR_DECL 6 struct varshead * ari_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 ari_vars LEAF_NODE 8 ari_vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_debug ; VAR_DECL 2 int global_debug TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_debug LEAF_NODE 4 global_debug LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } ; CLASS_DEF 2 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } CLASS_DEF 3 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_display LEAF_NODE 5 adsi_display LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 70 ] data ; VAR_DECL 6 char [ 70 ] data TYPE 7 char [ 70 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 70 ] LEAF_NODE 9 [ FIELD 9 70 LEAF_NODE 10 70 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_state LEAF_NODE 5 adsi_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } ; CLASS_DEF 2 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } CLASS_DEF 3 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_soft_key LEAF_NODE 5 adsi_soft_key LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int retstrlen ; VAR_DECL 6 int retstrlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 retstrlen LEAF_NODE 8 retstrlen LEAF_NODE 6 ; SIMPLE_DECL 5 int initlen ; VAR_DECL 6 int initlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 initlen LEAF_NODE 8 initlen LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] retstr ; VAR_DECL 6 char [ 80 ] retstr TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 retstr LEAF_NODE 8 retstr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } ; CLASS_DEF 2 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } CLASS_DEF 3 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_subscript LEAF_NODE 5 adsi_subscript LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; SIMPLE_DECL 5 int inscount ; VAR_DECL 6 int inscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inscount LEAF_NODE 8 inscount LEAF_NODE 6 ; SIMPLE_DECL 5 int ifinscount ; VAR_DECL 6 int ifinscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ifinscount LEAF_NODE 8 ifinscount LEAF_NODE 6 ; SIMPLE_DECL 5 char * ifdata ; VAR_DECL 6 char * ifdata TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 ifdata LEAF_NODE 8 ifdata LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 2048 ] data ; VAR_DECL 6 char [ 2048 ] data TYPE 7 char [ 2048 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 2048 ] LEAF_NODE 9 [ FIELD 9 2048 LEAF_NODE 10 2048 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_flag LEAF_NODE 5 adsi_flag LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } ; CLASS_DEF 2 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } CLASS_DEF 3 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_script LEAF_NODE 5 adsi_script LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; SIMPLE_DECL 5 int state ; VAR_DECL 6 int state TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int numkeys ; VAR_DECL 6 int numkeys TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numkeys LEAF_NODE 8 numkeys LEAF_NODE 6 ; SIMPLE_DECL 5 int numsubs ; VAR_DECL 6 int numsubs TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numsubs LEAF_NODE 8 numsubs LEAF_NODE 6 ; SIMPLE_DECL 5 int numstates ; VAR_DECL 6 int numstates TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numstates LEAF_NODE 8 numstates LEAF_NODE 6 ; SIMPLE_DECL 5 int numdisplays ; VAR_DECL 6 int numdisplays TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numdisplays LEAF_NODE 8 numdisplays LEAF_NODE 6 ; SIMPLE_DECL 5 int numflags ; VAR_DECL 6 int numflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numflags LEAF_NODE 8 numflags LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key * key ; VAR_DECL 6 struct adsi_soft_key * key TYPE 7 struct adsi_soft_key * TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript * sub ; VAR_DECL 6 struct adsi_subscript * sub TYPE 7 struct adsi_subscript * TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript POINTER 8 * LEAF_NODE 9 * NAME 7 sub LEAF_NODE 8 sub LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_display [ 63 ] displays ; VAR_DECL 6 struct adsi_display [ 63 ] displays TYPE 7 struct adsi_display [ 63 ] TYPE_NAME 8 struct adsi_display LEAF_NODE 9 struct LEAF_NODE 9 adsi_display TYPE_SUFFIX 8 [ 63 ] LEAF_NODE 9 [ FIELD 9 63 LEAF_NODE 10 63 LEAF_NODE 9 ] NAME 7 displays LEAF_NODE 8 displays LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_state [ 256 ] states ; VAR_DECL 6 struct adsi_state [ 256 ] states TYPE 7 struct adsi_state [ 256 ] TYPE_NAME 8 struct adsi_state LEAF_NODE 9 struct LEAF_NODE 9 adsi_state TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 states LEAF_NODE 8 states LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key [ 62 ] keys ; VAR_DECL 6 struct adsi_soft_key [ 62 ] keys TYPE 7 struct adsi_soft_key [ 62 ] TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key TYPE_SUFFIX 8 [ 62 ] LEAF_NODE 9 [ FIELD 9 62 LEAF_NODE 10 62 LEAF_NODE 9 ] NAME 7 keys LEAF_NODE 8 keys LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript [ 128 ] subs ; VAR_DECL 6 struct adsi_subscript [ 128 ] subs TYPE 7 struct adsi_subscript [ 128 ] TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript TYPE_SUFFIX 8 [ 128 ] LEAF_NODE 9 [ FIELD 9 128 LEAF_NODE 10 128 LEAF_NODE 9 ] NAME 7 subs LEAF_NODE 8 subs LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_flag [ 7 ] flags ; VAR_DECL 6 struct adsi_flag [ 7 ] flags TYPE 7 struct adsi_flag [ 7 ] TYPE_NAME 8 struct adsi_flag LEAF_NODE 9 struct LEAF_NODE 9 adsi_flag TYPE_SUFFIX 8 [ 7 ] LEAF_NODE 9 [ FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 9 ] NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] sec ; VAR_DECL 6 unsigned char [ 5 ] sec TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 sec LEAF_NODE 8 sec LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 19 ] desc ; VAR_DECL 6 char [ 19 ] desc TYPE 7 char [ 19 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 19 ] LEAF_NODE 9 [ FIELD 9 19 LEAF_NODE 10 19 LEAF_NODE 9 ] NAME 7 desc LEAF_NODE 8 desc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] fdn ; VAR_DECL 6 unsigned char [ 5 ] fdn TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 fdn LEAF_NODE 8 fdn LEAF_NODE 6 ; SIMPLE_DECL 5 int ver ; VAR_DECL 6 int ver TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ver LEAF_NODE 8 ver LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ao2_container * agents ; VAR_DECL 2 struct ao2_container * agents TYPE 3 struct ao2_container * TYPE_NAME 4 struct ao2_container LEAF_NODE 5 struct LEAF_NODE 5 ao2_container POINTER 4 * LEAF_NODE 5 * NAME 3 agents LEAF_NODE 4 agents LEAF_NODE 2 ; SIMPLE_DECL 1 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } ; CLASS_DEF 2 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } CLASS_DEF 3 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } LEAF_NODE 4 enum CLASS_NAME 4 agent_state LEAF_NODE 5 agent_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , LEAF_NODE 5 AGENT_STATE_LOGGED_OUT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_PROBATION_WAIT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_READY_FOR_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_PRESENT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WAIT_ACK LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_ON_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WRAPUP LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_LOGGING_OUT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } ; CLASS_DEF 2 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } CLASS_DEF 3 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_cfg LEAF_NODE 5 agent_cfg LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 full_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 beep_sound LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 moh LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int auto_logoff ; VAR_DECL 6 unsigned int auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 auto_logoff LEAF_NODE 8 auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wrapup_time ; VAR_DECL 6 unsigned int wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wrapup_time LEAF_NODE 8 wrapup_time LEAF_NODE 6 ; SIMPLE_DECL 5 int ack_call ; VAR_DECL 6 int ack_call TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ack_call LEAF_NODE 8 ack_call LEAF_NODE 6 ; SIMPLE_DECL 5 int record_agent_calls ; VAR_DECL 6 int record_agent_calls TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 record_agent_calls LEAF_NODE 8 record_agent_calls LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } ; CLASS_DEF 2 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } CLASS_DEF 3 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_pvt LEAF_NODE 5 agent_pvt LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 override_dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_party_connected_line waiting_colp ; VAR_DECL 6 struct ast_party_connected_line waiting_colp TYPE 7 struct ast_party_connected_line TYPE_NAME 8 struct ast_party_connected_line LEAF_NODE 9 struct LEAF_NODE 9 ast_party_connected_line NAME 7 waiting_colp LEAF_NODE 8 waiting_colp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_auto_logoff ; VAR_DECL 6 unsigned int override_auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_auto_logoff LEAF_NODE 8 override_auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_wrapup_time ; VAR_DECL 6 unsigned int override_wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_wrapup_time LEAF_NODE 8 override_wrapup_time LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 override_ack_call : LEAF_NODE 6 override_ack_call LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 deferred_logoff : LEAF_NODE 6 deferred_logoff LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 the_mark : LEAF_NODE 6 the_mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 dead : LEAF_NODE 6 dead LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 enum agent_state state ; VAR_DECL 6 enum agent_state state TYPE 7 enum agent_state TYPE_NAME 8 enum agent_state LEAF_NODE 9 enum LEAF_NODE 9 agent_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_device_state devstate ; VAR_DECL 6 enum ast_device_state devstate TYPE 7 enum ast_device_state TYPE_NAME 8 enum ast_device_state LEAF_NODE 9 enum LEAF_NODE 9 ast_device_state NAME 7 devstate LEAF_NODE 8 devstate LEAF_NODE 6 ; SIMPLE_DECL 5 time_t login_start ; VAR_DECL 6 time_t login_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 login_start LEAF_NODE 8 login_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t probation_start ; VAR_DECL 6 time_t probation_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 probation_start LEAF_NODE 8 probation_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t call_start ; VAR_DECL 6 time_t call_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 call_start LEAF_NODE 8 call_start LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval ack_time ; VAR_DECL 6 struct timeval ack_time TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 ack_time LEAF_NODE 8 ack_time LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval last_disconnect ; VAR_DECL 6 struct timeval last_disconnect TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 last_disconnect LEAF_NODE 8 last_disconnect LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_bridge * caller_bridge ; VAR_DECL 6 struct ast_bridge * caller_bridge TYPE 7 struct ast_bridge * TYPE_NAME 8 struct ast_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 caller_bridge LEAF_NODE 8 caller_bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * logged ; VAR_DECL 6 struct ast_channel * logged TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 logged LEAF_NODE 8 logged LEAF_NODE 6 ; SIMPLE_DECL 5 struct agent_cfg * cfg ; VAR_DECL 6 struct agent_cfg * cfg TYPE 7 struct agent_cfg * TYPE_NAME 8 struct agent_cfg LEAF_NODE 9 struct LEAF_NODE 9 agent_cfg POINTER 8 * LEAF_NODE 9 * NAME 7 cfg LEAF_NODE 8 cfg LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 char digit ; VAR_DECL 2 char digit TYPE 3 char TYPE_NAME 4 char LEAF_NODE 5 char NAME 3 digit LEAF_NODE 4 digit LEAF_NODE 2 ; SIMPLE_DECL 1 char weight ; VAR_DECL 2 char weight TYPE 3 char TYPE_NAME 4 char LEAF_NODE 5 char NAME 3 weight LEAF_NODE 4 weight LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"AMD\" ; VAR_DECL 2 const char [ ] app ; app = \"AMD\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"AMD\" ASSIGN 4 app = \"AMD\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"AMD\" FIELD 6 \"AMD\" LEAF_NODE 7 \"AMD\" LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltInitialSilence ; dfltInitialSilence = 2500 ; VAR_DECL 2 int dfltInitialSilence ; dfltInitialSilence = 2500 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltInitialSilence LEAF_NODE 4 dfltInitialSilence LEAF_NODE 3 ; INIT 3 dfltInitialSilence = 2500 ASSIGN 4 dfltInitialSilence = 2500 LVAL 5 dfltInitialSilence NAME 6 dfltInitialSilence LEAF_NODE 7 dfltInitialSilence ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 2500 FIELD 6 2500 LEAF_NODE 7 2500 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltGreeting ; dfltGreeting = 1500 ; VAR_DECL 2 int dfltGreeting ; dfltGreeting = 1500 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltGreeting LEAF_NODE 4 dfltGreeting LEAF_NODE 3 ; INIT 3 dfltGreeting = 1500 ASSIGN 4 dfltGreeting = 1500 LVAL 5 dfltGreeting NAME 6 dfltGreeting LEAF_NODE 7 dfltGreeting ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 1500 FIELD 6 1500 LEAF_NODE 7 1500 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltAfterGreetingSilence ; dfltAfterGreetingSilence = 800 ; VAR_DECL 2 int dfltAfterGreetingSilence ; dfltAfterGreetingSilence = 800 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltAfterGreetingSilence LEAF_NODE 4 dfltAfterGreetingSilence LEAF_NODE 3 ; INIT 3 dfltAfterGreetingSilence = 800 ASSIGN 4 dfltAfterGreetingSilence = 800 LVAL 5 dfltAfterGreetingSilence NAME 6 dfltAfterGreetingSilence LEAF_NODE 7 dfltAfterGreetingSilence ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 800 FIELD 6 800 LEAF_NODE 7 800 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltTotalAnalysisTime ; dfltTotalAnalysisTime = 5000 ; VAR_DECL 2 int dfltTotalAnalysisTime ; dfltTotalAnalysisTime = 5000 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltTotalAnalysisTime LEAF_NODE 4 dfltTotalAnalysisTime LEAF_NODE 3 ; INIT 3 dfltTotalAnalysisTime = 5000 ASSIGN 4 dfltTotalAnalysisTime = 5000 LVAL 5 dfltTotalAnalysisTime NAME 6 dfltTotalAnalysisTime LEAF_NODE 7 dfltTotalAnalysisTime ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5000 FIELD 6 5000 LEAF_NODE 7 5000 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltMinimumWordLength ; dfltMinimumWordLength = 100 ; VAR_DECL 2 int dfltMinimumWordLength ; dfltMinimumWordLength = 100 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltMinimumWordLength LEAF_NODE 4 dfltMinimumWordLength LEAF_NODE 3 ; INIT 3 dfltMinimumWordLength = 100 ASSIGN 4 dfltMinimumWordLength = 100 LVAL 5 dfltMinimumWordLength NAME 6 dfltMinimumWordLength LEAF_NODE 7 dfltMinimumWordLength ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 100 FIELD 6 100 LEAF_NODE 7 100 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltBetweenWordsSilence ; dfltBetweenWordsSilence = 50 ; VAR_DECL 2 int dfltBetweenWordsSilence ; dfltBetweenWordsSilence = 50 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltBetweenWordsSilence LEAF_NODE 4 dfltBetweenWordsSilence LEAF_NODE 3 ; INIT 3 dfltBetweenWordsSilence = 50 ASSIGN 4 dfltBetweenWordsSilence = 50 LVAL 5 dfltBetweenWordsSilence NAME 6 dfltBetweenWordsSilence LEAF_NODE 7 dfltBetweenWordsSilence ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 50 FIELD 6 50 LEAF_NODE 7 50 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltMaximumNumberOfWords ; dfltMaximumNumberOfWords = 2 ; VAR_DECL 2 int dfltMaximumNumberOfWords ; dfltMaximumNumberOfWords = 2 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltMaximumNumberOfWords LEAF_NODE 4 dfltMaximumNumberOfWords LEAF_NODE 3 ; INIT 3 dfltMaximumNumberOfWords = 2 ASSIGN 4 dfltMaximumNumberOfWords = 2 LVAL 5 dfltMaximumNumberOfWords NAME 6 dfltMaximumNumberOfWords LEAF_NODE 7 dfltMaximumNumberOfWords ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 2 FIELD 6 2 LEAF_NODE 7 2 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltSilenceThreshold ; dfltSilenceThreshold = 256 ; VAR_DECL 2 int dfltSilenceThreshold ; dfltSilenceThreshold = 256 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltSilenceThreshold LEAF_NODE 4 dfltSilenceThreshold LEAF_NODE 3 ; INIT 3 dfltSilenceThreshold = 256 ASSIGN 4 dfltSilenceThreshold = 256 LVAL 5 dfltSilenceThreshold NAME 6 dfltSilenceThreshold LEAF_NODE 7 dfltSilenceThreshold ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 256 FIELD 6 256 LEAF_NODE 7 256 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltMaximumWordLength ; dfltMaximumWordLength = 5000 ; VAR_DECL 2 int dfltMaximumWordLength ; dfltMaximumWordLength = 5000 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltMaximumWordLength LEAF_NODE 4 dfltMaximumWordLength LEAF_NODE 3 ; INIT 3 dfltMaximumWordLength = 5000 ASSIGN 4 dfltMaximumWordLength = 5000 LVAL 5 dfltMaximumWordLength NAME 6 dfltMaximumWordLength LEAF_NODE 7 dfltMaximumWordLength ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 5000 FIELD 6 5000 LEAF_NODE 7 5000 LEAF_NODE 2 ; SIMPLE_DECL 1 int dfltMaxWaitTimeForFrame ; dfltMaxWaitTimeForFrame = 50 ; VAR_DECL 2 int dfltMaxWaitTimeForFrame ; dfltMaxWaitTimeForFrame = 50 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 dfltMaxWaitTimeForFrame LEAF_NODE 4 dfltMaxWaitTimeForFrame LEAF_NODE 3 ; INIT 3 dfltMaxWaitTimeForFrame = 50 ASSIGN 4 dfltMaxWaitTimeForFrame = 50 LVAL 5 dfltMaxWaitTimeForFrame NAME 6 dfltMaxWaitTimeForFrame LEAF_NODE 7 dfltMaxWaitTimeForFrame ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 50 FIELD 6 50 LEAF_NODE 7 50 LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_module_load_result BASE_CLASSES { AST_MODULE_LOAD_SUCCESS = 0 , AST_MODULE_LOAD_DECLINE = 1 , AST_MODULE_LOAD_SKIP = 2 , AST_MODULE_LOAD_PRIORITY = 3 , AST_MODULE_LOAD_FAILURE = - 1 } ; CLASS_DEF 2 enum ast_module_load_result BASE_CLASSES { AST_MODULE_LOAD_SUCCESS = 0 , AST_MODULE_LOAD_DECLINE = 1 , AST_MODULE_LOAD_SKIP = 2 , AST_MODULE_LOAD_PRIORITY = 3 , AST_MODULE_LOAD_FAILURE = - 1 } CLASS_DEF 3 enum ast_module_load_result BASE_CLASSES { AST_MODULE_LOAD_SUCCESS = 0 , AST_MODULE_LOAD_DECLINE = 1 , AST_MODULE_LOAD_SKIP = 2 , AST_MODULE_LOAD_PRIORITY = 3 , AST_MODULE_LOAD_FAILURE = - 1 } LEAF_NODE 4 enum CLASS_NAME 4 ast_module_load_result LEAF_NODE 5 ast_module_load_result LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_MODULE_LOAD_SUCCESS = 0 , AST_MODULE_LOAD_DECLINE = 1 , AST_MODULE_LOAD_SKIP = 2 , AST_MODULE_LOAD_PRIORITY = 3 , AST_MODULE_LOAD_FAILURE = - 1 LEAF_NODE 5 AST_MODULE_LOAD_SUCCESS LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_MODULE_LOAD_DECLINE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_MODULE_LOAD_SKIP LEAF_NODE 5 = LEAF_NODE 5 2 LEAF_NODE 5 , LEAF_NODE 5 AST_MODULE_LOAD_PRIORITY LEAF_NODE 5 = LEAF_NODE 5 3 LEAF_NODE 5 , LEAF_NODE 5 AST_MODULE_LOAD_FAILURE LEAF_NODE 5 = LEAF_NODE 5 - LEAF_NODE 5 1 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum wait_bridge_roles BASE_CLASSES { ROLE_PARTICIPANT = 0 , ROLE_ANNOUNCER , ROLE_INVALID , } ; CLASS_DEF 2 enum wait_bridge_roles BASE_CLASSES { ROLE_PARTICIPANT = 0 , ROLE_ANNOUNCER , ROLE_INVALID , } CLASS_DEF 3 enum wait_bridge_roles BASE_CLASSES { ROLE_PARTICIPANT = 0 , ROLE_ANNOUNCER , ROLE_INVALID , } LEAF_NODE 4 enum CLASS_NAME 4 wait_bridge_roles LEAF_NODE 5 wait_bridge_roles LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ROLE_PARTICIPANT = 0 , ROLE_ANNOUNCER , ROLE_INVALID , LEAF_NODE 5 ROLE_PARTICIPANT LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 ROLE_ANNOUNCER LEAF_NODE 5 , LEAF_NODE 5 ROLE_INVALID LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum bridgewait_flags BASE_CLASSES { MUXFLAG_MOHCLASS = ( 1 << 0 ) , MUXFLAG_ENTERTAINMENT = ( 1 << 1 ) , MUXFLAG_TIMEOUT = ( 1 << 2 ) , } ; CLASS_DEF 2 enum bridgewait_flags BASE_CLASSES { MUXFLAG_MOHCLASS = ( 1 << 0 ) , MUXFLAG_ENTERTAINMENT = ( 1 << 1 ) , MUXFLAG_TIMEOUT = ( 1 << 2 ) , } CLASS_DEF 3 enum bridgewait_flags BASE_CLASSES { MUXFLAG_MOHCLASS = ( 1 << 0 ) , MUXFLAG_ENTERTAINMENT = ( 1 << 1 ) , MUXFLAG_TIMEOUT = ( 1 << 2 ) , } LEAF_NODE 4 enum CLASS_NAME 4 bridgewait_flags LEAF_NODE 5 bridgewait_flags LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MUXFLAG_MOHCLASS = ( 1 << 0 ) , MUXFLAG_ENTERTAINMENT = ( 1 << 1 ) , MUXFLAG_TIMEOUT = ( 1 << 2 ) , LEAF_NODE 5 MUXFLAG_MOHCLASS LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 MUXFLAG_ENTERTAINMENT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 MUXFLAG_TIMEOUT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum bridgewait_args BASE_CLASSES { OPT_ARG_ENTERTAINMENT , OPT_ARG_MOHCLASS , OPT_ARG_TIMEOUT , OPT_ARG_ARRAY_SIZE , } ; CLASS_DEF 2 enum bridgewait_args BASE_CLASSES { OPT_ARG_ENTERTAINMENT , OPT_ARG_MOHCLASS , OPT_ARG_TIMEOUT , OPT_ARG_ARRAY_SIZE , } CLASS_DEF 3 enum bridgewait_args BASE_CLASSES { OPT_ARG_ENTERTAINMENT , OPT_ARG_MOHCLASS , OPT_ARG_TIMEOUT , OPT_ARG_ARRAY_SIZE , } LEAF_NODE 4 enum CLASS_NAME 4 bridgewait_args LEAF_NODE 5 bridgewait_args LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPT_ARG_ENTERTAINMENT , OPT_ARG_MOHCLASS , OPT_ARG_TIMEOUT , OPT_ARG_ARRAY_SIZE , LEAF_NODE 5 OPT_ARG_ENTERTAINMENT LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_MOHCLASS LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_TIMEOUT LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_ARRAY_SIZE LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct wait_bridge_wrapper BASE_CLASSES { struct ast_bridge * bridge ; char [ 0 ] name ; } ; CLASS_DEF 2 struct wait_bridge_wrapper BASE_CLASSES { struct ast_bridge * bridge ; char [ 0 ] name ; } CLASS_DEF 3 struct wait_bridge_wrapper BASE_CLASSES { struct ast_bridge * bridge ; char [ 0 ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 wait_bridge_wrapper LEAF_NODE 5 wait_bridge_wrapper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_bridge * bridge ; char [ 0 ] name ; SIMPLE_DECL 5 struct ast_bridge * bridge ; VAR_DECL 6 struct ast_bridge * bridge TYPE 7 struct ast_bridge * TYPE_NAME 8 struct ast_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 0 ] name ; VAR_DECL 6 char [ 0 ] name TYPE 7 char [ 0 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 0 ] LEAF_NODE 9 [ FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 wait_bridge_sort_fn LEAF_NODE 3 wait_bridge_sort_fn PARAMETER_LIST 2 ( const void * obj_left , const void * obj_right , const int flags ) LEAF_NODE 3 ( PARAMETER_DECL 3 const void * obj_left TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 obj_left LEAF_NODE 5 obj_left LEAF_NODE 3 , PARAMETER_DECL 3 const void * obj_right TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 obj_right LEAF_NODE 5 obj_right LEAF_NODE 3 , PARAMETER_DECL 3 const int flags TYPE 4 const int TYPE_NAME 5 const int LEAF_NODE 6 const LEAF_NODE 6 int NAME 4 flags LEAF_NODE 5 flags LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const struct wait_bridge_wrapper * left ; left = obj_left ; VAR_DECL 4 const struct wait_bridge_wrapper * left ; left = obj_left TYPE 5 const struct wait_bridge_wrapper * TYPE_NAME 6 const struct wait_bridge_wrapper LEAF_NODE 7 const LEAF_NODE 7 struct LEAF_NODE 7 wait_bridge_wrapper POINTER 6 * LEAF_NODE 7 * NAME 5 left LEAF_NODE 6 left LEAF_NODE 5 ; INIT 5 left = obj_left ASSIGN 6 left = obj_left LVAL 7 left NAME 8 left LEAF_NODE 9 left ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 obj_left FIELD 8 obj_left LEAF_NODE 9 obj_left LEAF_NODE 4 ; SIMPLE_DECL 3 const struct wait_bridge_wrapper * right ; right = obj_right ; VAR_DECL 4 const struct wait_bridge_wrapper * right ; right = obj_right TYPE 5 const struct wait_bridge_wrapper * TYPE_NAME 6 const struct wait_bridge_wrapper LEAF_NODE 7 const LEAF_NODE 7 struct LEAF_NODE 7 wait_bridge_wrapper POINTER 6 * LEAF_NODE 7 * NAME 5 right LEAF_NODE 6 right LEAF_NODE 5 ; INIT 5 right = obj_right ASSIGN 6 right = obj_right LVAL 7 right NAME 8 right LEAF_NODE 9 right ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 obj_right FIELD 8 obj_right LEAF_NODE 9 obj_right LEAF_NODE 4 ; SIMPLE_DECL 3 const char * right_key ; right_key = obj_right ; VAR_DECL 4 const char * right_key ; right_key = obj_right TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 right_key LEAF_NODE 6 right_key LEAF_NODE 5 ; INIT 5 right_key = obj_right ASSIGN 6 right_key = obj_right LVAL 7 right_key NAME 8 right_key LEAF_NODE 9 right_key ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 obj_right FIELD 8 obj_right LEAF_NODE 9 obj_right LEAF_NODE 4 ; SIMPLE_DECL 3 int cmp ; VAR_DECL 4 int cmp TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 cmp LEAF_NODE 6 cmp LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 switch LEAF_NODE 5 switch LEAF_NODE 4 ( CONDITION 4 flags & ( OBJ_POINTER | OBJ_KEY | OBJ_PARTIAL_KEY ) EXPR 5 flags & ( OBJ_POINTER | OBJ_KEY | OBJ_PARTIAL_KEY ) FIELD 6 flags LEAF_NODE 7 flags LEAF_NODE 6 & LEAF_NODE 6 ( BIT_OR 6 OBJ_POINTER | OBJ_KEY | OBJ_PARTIAL_KEY BIT_OR_ELEM 7 OBJ_POINTER FIELD 8 OBJ_POINTER LEAF_NODE 9 OBJ_POINTER LEAF_NODE 7 | BIT_OR_ELEM 7 OBJ_KEY | OBJ_PARTIAL_KEY BIT_OR 8 OBJ_KEY | OBJ_PARTIAL_KEY BIT_OR_ELEM 9 OBJ_KEY FIELD 10 OBJ_KEY LEAF_NODE 11 OBJ_KEY LEAF_NODE 9 | BIT_OR_ELEM 9 OBJ_PARTIAL_KEY FIELD 10 OBJ_PARTIAL_KEY LEAF_NODE 11 OBJ_PARTIAL_KEY LEAF_NODE 6 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LABEL 6 case OBJ_POINTER : LEAF_NODE 7 case LEAF_NODE 7 OBJ_POINTER LEAF_NODE 7 : EXPR_STATEMENT 6 right_key = right -> name ; EXPR 7 right_key = right -> name ASSIGN 8 right_key = right -> name LVAL 9 right_key FIELD 10 right_key LEAF_NODE 11 right_key ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 right -> name FIELD 10 right -> name LEAF_NODE 11 right LEAF_NODE 11 -> LEAF_NODE 11 name LEAF_NODE 7 ; LABEL 6 case OBJ_KEY : LEAF_NODE 7 case LEAF_NODE 7 OBJ_KEY LEAF_NODE 7 : EXPR_STATEMENT 6 cmp = strcmp ( left -> name , right_key ) ; EXPR 7 cmp = strcmp ( left -> name , right_key ) ASSIGN 8 cmp = strcmp ( left -> name , right_key ) LVAL 9 cmp FIELD 10 cmp LEAF_NODE 11 cmp ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 strcmp ( left -> name , right_key ) FUNCTION_CALL 10 strcmp ( left -> name , right_key ) CALLEE 11 strcmp LEAF_NODE 12 strcmp LEAF_NODE 11 ( ARGUMENT 11 left -> name FIELD 12 left -> name LEAF_NODE 13 left LEAF_NODE 13 -> LEAF_NODE 13 name LEAF_NODE 11 , ARGUMENT 11 right_key FIELD 12 right_key LEAF_NODE 13 right_key LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 case OBJ_PARTIAL_KEY : LEAF_NODE 7 case LEAF_NODE 7 OBJ_PARTIAL_KEY LEAF_NODE 7 : EXPR_STATEMENT 6 cmp = strncmp ( left -> name , right_key , strlen ( right_key ) ) ; EXPR 7 cmp = strncmp ( left -> name , right_key , strlen ( right_key ) ) ASSIGN 8 cmp = strncmp ( left -> name , right_key , strlen ( right_key ) ) LVAL 9 cmp FIELD 10 cmp LEAF_NODE 11 cmp ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 strncmp ( left -> name , right_key , strlen ( right_key ) ) FUNCTION_CALL 10 strncmp ( left -> name , right_key , strlen ( right_key ) ) CALLEE 11 strncmp LEAF_NODE 12 strncmp LEAF_NODE 11 ( ARGUMENT 11 left -> name FIELD 12 left -> name LEAF_NODE 13 left LEAF_NODE 13 -> LEAF_NODE 13 name LEAF_NODE 11 , ARGUMENT 11 right_key FIELD 12 right_key LEAF_NODE 13 right_key LEAF_NODE 11 , ARGUMENT 11 strlen ( right_key ) FUNCTION_CALL 12 strlen ( right_key ) CALLEE 13 strlen LEAF_NODE 14 strlen LEAF_NODE 13 ( ARGUMENT 13 right_key FIELD 14 right_key LEAF_NODE 15 right_key LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LABEL 6 default : LEAF_NODE 7 default LEAF_NODE 7 : EXPR_STATEMENT 6 ast_assert ( 0 ) ; EXPR 7 ast_assert ( 0 ) FUNCTION_CALL 8 ast_assert ( 0 ) CALLEE 9 ast_assert LEAF_NODE 10 ast_assert LEAF_NODE 9 ( ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 cmp = 0 ; EXPR 7 cmp = 0 ASSIGN 8 cmp = 0 LVAL 9 cmp FIELD 10 cmp LEAF_NODE 11 cmp ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; JUMP_STATEMENT 6 break DESTINATION ; KEYWORD 7 break LEAF_NODE 8 break LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } JUMP_STATEMENT 3 return cmp ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 cmp EXPR 5 cmp FIELD 6 cmp LEAF_NODE 7 cmp LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 32, "project": "openssl_ast_vul_function_test_adv_31", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } ; CLASS_DEF 2 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } CLASS_DEF 3 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 stasis_app_subscription_model LEAF_NODE 5 stasis_app_subscription_model LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 5 STASIS_APP_SUBSCRIBE_MANUAL LEAF_NODE 5 , LEAF_NODE 5 STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } ; CLASS_DEF 2 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } CLASS_DEF 3 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 stasis_app LEAF_NODE 5 stasis_app LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; SIMPLE_DECL 5 struct stasis_topic * topic ; VAR_DECL 6 struct stasis_topic * topic TYPE 7 struct stasis_topic * TYPE_NAME 8 struct stasis_topic LEAF_NODE 9 struct LEAF_NODE 9 stasis_topic POINTER 8 * LEAF_NODE 9 * NAME 7 topic LEAF_NODE 8 topic LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * router ; VAR_DECL 6 struct stasis_message_router * router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 router LEAF_NODE 8 router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * bridge_router ; VAR_DECL 6 struct stasis_message_router * bridge_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 bridge_router LEAF_NODE 8 bridge_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * endpoint_router ; VAR_DECL 6 struct stasis_message_router * endpoint_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 endpoint_router LEAF_NODE 8 endpoint_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * forwards ; VAR_DECL 6 struct ao2_container * forwards TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 forwards LEAF_NODE 8 forwards LEAF_NODE 6 ; SIMPLE_DECL 5 stasis_app_cb handler ; VAR_DECL 6 stasis_app_cb handler TYPE 7 stasis_app_cb TYPE_NAME 8 stasis_app_cb LEAF_NODE 9 stasis_app_cb NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 enum stasis_app_subscription_model subscription_model ; VAR_DECL 6 enum stasis_app_subscription_model subscription_model TYPE 7 enum stasis_app_subscription_model TYPE_NAME 8 enum stasis_app_subscription_model LEAF_NODE 9 enum LEAF_NODE 9 stasis_app_subscription_model NAME 7 subscription_model LEAF_NODE 8 subscription_model LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_allowed ; VAR_DECL 6 struct ast_json * events_allowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_allowed LEAF_NODE 8 events_allowed LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_disallowed ; VAR_DECL 6 struct ast_json * events_disallowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_disallowed LEAF_NODE 8 events_disallowed LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] name ; VAR_DECL 6 char [ ] name TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } ; CLASS_DEF 2 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } CLASS_DEF 3 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } LEAF_NODE 4 enum CLASS_NAME 4 forward_type LEAF_NODE 5 forward_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , LEAF_NODE 5 FORWARD_CHANNEL LEAF_NODE 5 , LEAF_NODE 5 FORWARD_BRIDGE LEAF_NODE 5 , LEAF_NODE 5 FORWARD_ENDPOINT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } ; CLASS_DEF 2 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } CLASS_DEF 3 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } LEAF_NODE 4 struct CLASS_NAME 4 app_forwards LEAF_NODE 5 app_forwards LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; SIMPLE_DECL 5 int interested ; VAR_DECL 6 int interested TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 interested LEAF_NODE 8 interested LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_forward ; VAR_DECL 6 struct stasis_forward * topic_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_forward LEAF_NODE 8 topic_forward LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_cached_forward ; VAR_DECL 6 struct stasis_forward * topic_cached_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_cached_forward LEAF_NODE 8 topic_cached_forward LEAF_NODE 6 ; SIMPLE_DECL 5 enum forward_type forward_type ; VAR_DECL 6 enum forward_type forward_type TYPE 7 enum forward_type TYPE_NAME 8 enum forward_type LEAF_NODE 9 enum LEAF_NODE 9 forward_type NAME 7 forward_type LEAF_NODE 8 forward_type LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] id ; VAR_DECL 6 char [ ] id TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } ; CLASS_DEF 2 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } CLASS_DEF 3 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_channel_snapshot LEAF_NODE 5 ast_channel_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 uniqueid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 linkedid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appl LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 accountcode LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 peeraccount LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 userfield LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 hangupsource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_dnid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_ani LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_rdnis LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dialed_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 language LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 bridgeid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 type LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_channel_snapshot_base * base ; VAR_DECL 6 struct ast_channel_snapshot_base * base TYPE 7 struct ast_channel_snapshot_base * TYPE_NAME 8 struct ast_channel_snapshot_base LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_base POINTER 8 * LEAF_NODE 9 * NAME 7 base LEAF_NODE 8 base LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_peer * peer ; VAR_DECL 6 struct ast_channel_snapshot_peer * peer TYPE 7 struct ast_channel_snapshot_peer * TYPE_NAME 8 struct ast_channel_snapshot_peer LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_peer POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_caller * caller ; VAR_DECL 6 struct ast_channel_snapshot_caller * caller TYPE 7 struct ast_channel_snapshot_caller * TYPE_NAME 8 struct ast_channel_snapshot_caller LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_caller POINTER 8 * LEAF_NODE 9 * NAME 7 caller LEAF_NODE 8 caller LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_connected * connected ; VAR_DECL 6 struct ast_channel_snapshot_connected * connected TYPE 7 struct ast_channel_snapshot_connected * TYPE_NAME 8 struct ast_channel_snapshot_connected LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_connected POINTER 8 * LEAF_NODE 9 * NAME 7 connected LEAF_NODE 8 connected LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_bridge * bridge ; VAR_DECL 6 struct ast_channel_snapshot_bridge * bridge TYPE 7 struct ast_channel_snapshot_bridge * TYPE_NAME 8 struct ast_channel_snapshot_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_dialplan * dialplan ; VAR_DECL 6 struct ast_channel_snapshot_dialplan * dialplan TYPE 7 struct ast_channel_snapshot_dialplan * TYPE_NAME 8 struct ast_channel_snapshot_dialplan LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_dialplan POINTER 8 * LEAF_NODE 9 * NAME 7 dialplan LEAF_NODE 8 dialplan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_hangup * hangup ; VAR_DECL 6 struct ast_channel_snapshot_hangup * hangup TYPE 7 struct ast_channel_snapshot_hangup * TYPE_NAME 8 struct ast_channel_snapshot_hangup LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_hangup POINTER 8 * LEAF_NODE 9 * NAME 7 hangup LEAF_NODE 8 hangup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_channel_state state ; VAR_DECL 6 enum ast_channel_state state TYPE 7 enum ast_channel_state TYPE_NAME 8 enum ast_channel_state LEAF_NODE 9 enum LEAF_NODE 9 ast_channel_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int amaflags ; VAR_DECL 6 int amaflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 amaflags LEAF_NODE 8 amaflags LEAF_NODE 6 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 int hangupcause ; VAR_DECL 6 int hangupcause TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hangupcause LEAF_NODE 8 hangupcause LEAF_NODE 6 ; SIMPLE_DECL 5 int caller_pres ; VAR_DECL 6 int caller_pres TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 caller_pres LEAF_NODE 8 caller_pres LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags softhangup_flags ; VAR_DECL 6 struct ast_flags softhangup_flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 softhangup_flags LEAF_NODE 8 softhangup_flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * manager_vars ; VAR_DECL 6 struct varshead * manager_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 manager_vars LEAF_NODE 8 manager_vars LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * ari_vars ; VAR_DECL 6 struct varshead * ari_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 ari_vars LEAF_NODE 8 ari_vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void * LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void LEAF_NODE 3 * FUNCTION_NAME 2 endpoint_find LEAF_NODE 3 endpoint_find PARAMETER_LIST 2 ( const struct stasis_app * app , const char * id ) LEAF_NODE 3 ( PARAMETER_DECL 3 const struct stasis_app * app TYPE 4 const struct stasis_app * TYPE_NAME 5 const struct stasis_app LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 stasis_app POINTER 5 * LEAF_NODE 6 * NAME 4 app LEAF_NODE 5 app LEAF_NODE 3 , PARAMETER_DECL 3 const char * id TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 id LEAF_NODE 5 id LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ast_endpoint_find_by_id ( id ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ast_endpoint_find_by_id ( id ) EXPR 5 ast_endpoint_find_by_id ( id ) FUNCTION_CALL 6 ast_endpoint_find_by_id ( id ) CALLEE 7 ast_endpoint_find_by_id LEAF_NODE 8 ast_endpoint_find_by_id LEAF_NODE 7 ( ARGUMENT 7 id FIELD 8 id LEAF_NODE 9 id LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 33, "project": "openssl_ast_vul_function_test_adv_6", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 remove_spaces_before_equals LEAF_NODE 3 remove_spaces_before_equals PARAMETER_LIST 2 ( char * str ) LEAF_NODE 3 ( PARAMETER_DECL 3 char * str TYPE 4 char * TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 str LEAF_NODE 5 str LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * p ; VAR_DECL 4 char * p TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 p LEAF_NODE 6 p LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 while LEAF_NODE 5 while LEAF_NODE 4 ( CONDITION 4 str && * str && * str != '=' EXPR 5 str && * str && * str != '=' AND 6 str && * str && * str != '=' EXPR 7 str FIELD 8 str LEAF_NODE 9 str LEAF_NODE 7 && EXPR 7 * str && * str != '=' AND 8 * str && * str != '=' EXPR 9 * str UNARY_EXPR 10 * str UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str LEAF_NODE 12 str LEAF_NODE 9 && EXPR 9 * str != '=' UNARY_EXPR 10 * str UNARY_OPERATOR 11 * LEAF_NODE 12 * FIELD 11 str LEAF_NODE 12 str EQ_OPERATOR 10 != LEAF_NODE 11 != FIELD 10 '=' LEAF_NODE 11 '=' LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 * str == ' ' || * str == '\\n' || * str == '\\r' || * str == '\\t' EXPR 8 * str == ' ' || * str == '\\n' || * str == '\\r' || * str == '\\t' OR 9 * str == ' ' || * str == '\\n' || * str == '\\r' || * str == '\\t' EXPR 10 * str == ' ' UNARY_EXPR 11 * str UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 str LEAF_NODE 13 str EQ_OPERATOR 11 == LEAF_NODE 12 == FIELD 11 ' ' LEAF_NODE 12 ' ' LEAF_NODE 10 || EXPR 10 * str == '\\n' || * str == '\\r' || * str == '\\t' OR 11 * str == '\\n' || * str == '\\r' || * str == '\\t' EXPR 12 * str == '\\n' UNARY_EXPR 13 * str UNARY_OPERATOR 14 * LEAF_NODE 15 * FIELD 14 str LEAF_NODE 15 str EQ_OPERATOR 13 == LEAF_NODE 14 == FIELD 13 '\\n' LEAF_NODE 14 '\\n' LEAF_NODE 12 || EXPR 12 * str == '\\r' || * str == '\\t' OR 13 * str == '\\r' || * str == '\\t' EXPR 14 * str == '\\r' UNARY_EXPR 15 * str UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 str LEAF_NODE 17 str EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\r' LEAF_NODE 16 '\\r' LEAF_NODE 14 || EXPR 14 * str == '\\t' UNARY_EXPR 15 * str UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 str LEAF_NODE 17 str EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 '\\t' LEAF_NODE 16 '\\t' LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 p = str ; EXPR 10 p = str ASSIGN 11 p = str LVAL 12 p FIELD 13 p LEAF_NODE 14 p ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 str FIELD 13 str LEAF_NODE 14 str LEAF_NODE 10 ; ITERATION 9 KEYWORD 10 while LEAF_NODE 11 while LEAF_NODE 10 ( CONDITION 10 * p EXPR 11 * p UNARY_EXPR 12 * p UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 p LEAF_NODE 14 p LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 * p = * ( p + 1 ) ; EXPR 13 * p = * ( p + 1 ) ASSIGN 14 * p = * ( p + 1 ) LVAL 15 * p UNARY_EXPR 16 * p UNARY_OPERATOR 17 * LEAF_NODE 18 * FIELD 17 p LEAF_NODE 18 p ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 * ( p + 1 ) UNARY_EXPR 16 * ( p + 1 ) UNARY_OPERATOR 17 * LEAF_NODE 18 * LEAF_NODE 17 ( FIELD 17 p LEAF_NODE 18 p LEAF_NODE 17 + FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 17 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 p ++ ; EXPR 13 p ++ FIELD 14 p ++ LEAF_NODE 15 p LEAF_NODE 15 ++ LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 EXPR_STATEMENT 8 str ++ ; EXPR 9 str ++ FIELD 10 str ++ LEAF_NODE 11 str LEAF_NODE 11 ++ LEAF_NODE 9 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 34, "project": "openssl_ast_vul_function_test_adv_23", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app2 ; app2 = \"PickupChan\" ; VAR_DECL 2 const char [ ] app2 ; app2 = \"PickupChan\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app2 LEAF_NODE 4 app2 LEAF_NODE 3 ; INIT 3 app2 = \"PickupChan\" ASSIGN 4 app2 = \"PickupChan\" LVAL 5 app2 NAME 6 app2 LEAF_NODE 7 app2 ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"PickupChan\" FIELD 6 \"PickupChan\" LEAF_NODE 7 \"PickupChan\" LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 load_module LEAF_NODE 3 load_module PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; VAR_DECL 4 int res TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 4 ; EXPR_STATEMENT 3 res = ast_register_application_xml ( app , pickup_exec ) ; EXPR 4 res = ast_register_application_xml ( app , pickup_exec ) ASSIGN 5 res = ast_register_application_xml ( app , pickup_exec ) LVAL 6 res FIELD 7 res LEAF_NODE 8 res ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_register_application_xml ( app , pickup_exec ) FUNCTION_CALL 7 ast_register_application_xml ( app , pickup_exec ) CALLEE 8 ast_register_application_xml LEAF_NODE 9 ast_register_application_xml LEAF_NODE 8 ( ARGUMENT 8 app FIELD 9 app LEAF_NODE 10 app LEAF_NODE 8 , ARGUMENT 8 pickup_exec FIELD 9 pickup_exec LEAF_NODE 10 pickup_exec LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 res |= ast_register_application_xml ( app2 , pickupchan_exec ) ; EXPR 4 res |= ast_register_application_xml ( app2 , pickupchan_exec ) ASSIGN 5 res |= ast_register_application_xml ( app2 , pickupchan_exec ) LVAL 6 res FIELD 7 res LEAF_NODE 8 res ASSIGN_OP 6 |= LEAF_NODE 7 |= RVAL 6 ast_register_application_xml ( app2 , pickupchan_exec ) FUNCTION_CALL 7 ast_register_application_xml ( app2 , pickupchan_exec ) CALLEE 8 ast_register_application_xml LEAF_NODE 9 ast_register_application_xml LEAF_NODE 8 ( ARGUMENT 8 app2 FIELD 9 app2 LEAF_NODE 10 app2 LEAF_NODE 8 , ARGUMENT 8 pickupchan_exec FIELD 9 pickupchan_exec LEAF_NODE 10 pickupchan_exec LEAF_NODE 8 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return res ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 res EXPR 5 res FIELD 6 res LEAF_NODE 7 res LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 35, "project": "openssl_ast_vul_function_test_adv_15", "target": 1}
{"func": "SIMPLE_DECL 1 enum skinny_codecs BASE_CLASSES { SKINNY_CODEC_ALAW = 2 , SKINNY_CODEC_ULAW = 4 , SKINNY_CODEC_G722 = 6 , SKINNY_CODEC_G723_1 = 9 , SKINNY_CODEC_G729A = 12 , SKINNY_CODEC_G726_32 = 82 , SKINNY_CODEC_H261 = 100 , SKINNY_CODEC_H263 = 101 } ; CLASS_DEF 2 enum skinny_codecs BASE_CLASSES { SKINNY_CODEC_ALAW = 2 , SKINNY_CODEC_ULAW = 4 , SKINNY_CODEC_G722 = 6 , SKINNY_CODEC_G723_1 = 9 , SKINNY_CODEC_G729A = 12 , SKINNY_CODEC_G726_32 = 82 , SKINNY_CODEC_H261 = 100 , SKINNY_CODEC_H263 = 101 } CLASS_DEF 3 enum skinny_codecs BASE_CLASSES { SKINNY_CODEC_ALAW = 2 , SKINNY_CODEC_ULAW = 4 , SKINNY_CODEC_G722 = 6 , SKINNY_CODEC_G723_1 = 9 , SKINNY_CODEC_G729A = 12 , SKINNY_CODEC_G726_32 = 82 , SKINNY_CODEC_H261 = 100 , SKINNY_CODEC_H263 = 101 } LEAF_NODE 4 enum CLASS_NAME 4 skinny_codecs LEAF_NODE 5 skinny_codecs LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SKINNY_CODEC_ALAW = 2 , SKINNY_CODEC_ULAW = 4 , SKINNY_CODEC_G722 = 6 , SKINNY_CODEC_G723_1 = 9 , SKINNY_CODEC_G729A = 12 , SKINNY_CODEC_G726_32 = 82 , SKINNY_CODEC_H261 = 100 , SKINNY_CODEC_H263 = 101 LEAF_NODE 5 SKINNY_CODEC_ALAW LEAF_NODE 5 = LEAF_NODE 5 2 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_ULAW LEAF_NODE 5 = LEAF_NODE 5 4 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_G722 LEAF_NODE 5 = LEAF_NODE 5 6 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_G723_1 LEAF_NODE 5 = LEAF_NODE 5 9 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_G729A LEAF_NODE 5 = LEAF_NODE 5 12 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_G726_32 LEAF_NODE 5 = LEAF_NODE 5 82 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_H261 LEAF_NODE 5 = LEAF_NODE 5 100 LEAF_NODE 5 , LEAF_NODE 5 SKINNY_CODEC_H263 LEAF_NODE 5 = LEAF_NODE 5 101 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct skinny_req BASE_CLASSES { uint32_t len ; uint32_t res ; uint32_t e ; } ; CLASS_DEF 2 struct skinny_req BASE_CLASSES { uint32_t len ; uint32_t res ; uint32_t e ; } CLASS_DEF 3 struct skinny_req BASE_CLASSES { uint32_t len ; uint32_t res ; uint32_t e ; } LEAF_NODE 4 struct CLASS_NAME 4 skinny_req LEAF_NODE 5 skinny_req LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 uint32_t len ; uint32_t res ; uint32_t e ; SIMPLE_DECL 5 uint32_t len ; VAR_DECL 6 uint32_t len TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 len LEAF_NODE 8 len LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t res ; VAR_DECL 6 uint32_t res TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 res LEAF_NODE 8 res LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t e ; VAR_DECL 6 uint32_t e TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 e LEAF_NODE 8 e LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sockaddr_in bindaddr ; VAR_DECL 2 struct sockaddr_in bindaddr TYPE 3 struct sockaddr_in TYPE_NAME 4 struct sockaddr_in LEAF_NODE 5 struct LEAF_NODE 5 sockaddr_in NAME 3 bindaddr LEAF_NODE 4 bindaddr LEAF_NODE 2 ; SIMPLE_DECL 1 struct skinnysession BASE_CLASSES { pthread_t t ; ast_mutex_t lock ; struct timeval_t start ; struct sockaddr_in sin ; int fd ; char [ SKINNY_MAX_PACKET ] outbuf ; struct skinny_device * device ; AST_LIST_ENTRY ( skinnysession ) list ; int lockstate ; int auth_timeout_sched ; int keepalive_timeout_sched ; struct timeval_t last_keepalive ; int keepalive_count ; } ; CLASS_DEF 2 struct skinnysession BASE_CLASSES { pthread_t t ; ast_mutex_t lock ; struct timeval_t start ; struct sockaddr_in sin ; int fd ; char [ SKINNY_MAX_PACKET ] outbuf ; struct skinny_device * device ; AST_LIST_ENTRY ( skinnysession ) list ; int lockstate ; int auth_timeout_sched ; int keepalive_timeout_sched ; struct timeval_t last_keepalive ; int keepalive_count ; } CLASS_DEF 3 struct skinnysession BASE_CLASSES { pthread_t t ; ast_mutex_t lock ; struct timeval_t start ; struct sockaddr_in sin ; int fd ; char [ SKINNY_MAX_PACKET ] outbuf ; struct skinny_device * device ; AST_LIST_ENTRY ( skinnysession ) list ; int lockstate ; int auth_timeout_sched ; int keepalive_timeout_sched ; struct timeval_t last_keepalive ; int keepalive_count ; } LEAF_NODE 4 struct CLASS_NAME 4 skinnysession LEAF_NODE 5 skinnysession LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 pthread_t t ; ast_mutex_t lock ; struct timeval_t start ; struct sockaddr_in sin ; int fd ; char [ SKINNY_MAX_PACKET ] outbuf ; struct skinny_device * device ; AST_LIST_ENTRY ( skinnysession ) list ; int lockstate ; int auth_timeout_sched ; int keepalive_timeout_sched ; struct timeval_t last_keepalive ; int keepalive_count ; SIMPLE_DECL 5 pthread_t t ; VAR_DECL 6 pthread_t t TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 t LEAF_NODE 8 t LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval_t start ; VAR_DECL 6 struct timeval_t start TYPE 7 struct timeval_t TYPE_NAME 8 struct timeval_t LEAF_NODE 9 struct LEAF_NODE 9 timeval_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 struct sockaddr_in sin ; VAR_DECL 6 struct sockaddr_in sin TYPE 7 struct sockaddr_in TYPE_NAME 8 struct sockaddr_in LEAF_NODE 9 struct LEAF_NODE 9 sockaddr_in NAME 7 sin LEAF_NODE 8 sin LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 char [ SKINNY_MAX_PACKET ] outbuf ; VAR_DECL 6 char [ SKINNY_MAX_PACKET ] outbuf TYPE 7 char [ SKINNY_MAX_PACKET ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ SKINNY_MAX_PACKET ] LEAF_NODE 9 [ FIELD 9 SKINNY_MAX_PACKET LEAF_NODE 10 SKINNY_MAX_PACKET LEAF_NODE 9 ] NAME 7 outbuf LEAF_NODE 8 outbuf LEAF_NODE 6 ; SIMPLE_DECL 5 struct skinny_device * device ; VAR_DECL 6 struct skinny_device * device TYPE 7 struct skinny_device * TYPE_NAME 8 struct skinny_device LEAF_NODE 9 struct LEAF_NODE 9 skinny_device POINTER 8 * LEAF_NODE 9 * NAME 7 device LEAF_NODE 8 device LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 skinnysession LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 int lockstate ; VAR_DECL 6 int lockstate TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 lockstate LEAF_NODE 8 lockstate LEAF_NODE 6 ; SIMPLE_DECL 5 int auth_timeout_sched ; VAR_DECL 6 int auth_timeout_sched TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 auth_timeout_sched LEAF_NODE 8 auth_timeout_sched LEAF_NODE 6 ; SIMPLE_DECL 5 int keepalive_timeout_sched ; VAR_DECL 6 int keepalive_timeout_sched TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 keepalive_timeout_sched LEAF_NODE 8 keepalive_timeout_sched LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval_t last_keepalive ; VAR_DECL 6 struct timeval_t last_keepalive TYPE 7 struct timeval_t TYPE_NAME 8 struct timeval_t LEAF_NODE 9 struct LEAF_NODE 9 timeval_t NAME 7 last_keepalive LEAF_NODE 8 last_keepalive LEAF_NODE 6 ; SIMPLE_DECL 5 int keepalive_count ; VAR_DECL 6 int keepalive_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 keepalive_count LEAF_NODE 8 keepalive_count LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_sched_context * sched ; sched = NULL ; VAR_DECL 2 struct ast_sched_context * sched ; sched = NULL TYPE 3 struct ast_sched_context * TYPE_NAME 4 struct ast_sched_context LEAF_NODE 5 struct LEAF_NODE 5 ast_sched_context POINTER 4 * LEAF_NODE 5 * NAME 3 sched LEAF_NODE 4 sched LEAF_NODE 3 ; INIT 3 sched = NULL ASSIGN 4 sched = NULL LVAL 5 sched NAME 6 sched LEAF_NODE 7 sched ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 2 ; SIMPLE_DECL 1 int auth_timeout ; auth_timeout = DEFAULT_AUTH_TIMEOUT ; VAR_DECL 2 int auth_timeout ; auth_timeout = DEFAULT_AUTH_TIMEOUT TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 auth_timeout LEAF_NODE 4 auth_timeout LEAF_NODE 3 ; INIT 3 auth_timeout = DEFAULT_AUTH_TIMEOUT ASSIGN 4 auth_timeout = DEFAULT_AUTH_TIMEOUT LVAL 5 auth_timeout NAME 6 auth_timeout LEAF_NODE 7 auth_timeout ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 DEFAULT_AUTH_TIMEOUT FIELD 6 DEFAULT_AUTH_TIMEOUT LEAF_NODE 7 DEFAULT_AUTH_TIMEOUT LEAF_NODE 2 ; SIMPLE_DECL 1 int keep_alive ; keep_alive = 120 ; VAR_DECL 2 int keep_alive ; keep_alive = 120 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 keep_alive LEAF_NODE 4 keep_alive LEAF_NODE 3 ; INIT 3 keep_alive = 120 ASSIGN 4 keep_alive = 120 LVAL 5 keep_alive NAME 6 keep_alive LEAF_NODE 7 keep_alive ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 120 FIELD 6 120 LEAF_NODE 7 120 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 skinny_noauth_cb LEAF_NODE 3 skinny_noauth_cb PARAMETER_LIST 2 ( const void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 const void * data TYPE 4 const void * TYPE_NAME 5 const void LEAF_NODE 6 const LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct skinnysession * s ; s = ( struct skinnysession * ) data ; VAR_DECL 4 struct skinnysession * s ; s = ( struct skinnysession * ) data TYPE 5 struct skinnysession * TYPE_NAME 6 struct skinnysession LEAF_NODE 7 struct LEAF_NODE 7 skinnysession POINTER 6 * LEAF_NODE 7 * NAME 5 s LEAF_NODE 6 s LEAF_NODE 5 ; INIT 5 s = ( struct skinnysession * ) data ASSIGN 6 s = ( struct skinnysession * ) data LVAL 7 s NAME 8 s LEAF_NODE 9 s ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( struct skinnysession * ) data LEAF_NODE 8 ( TYPE_NAME 8 struct skinnysession LEAF_NODE 9 struct LEAF_NODE 9 skinnysession LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_log ( LOG_WARNING , \"Skinny Client failed to authenticate in %d seconds (SCHED %d)\\n\" , auth_timeout , s -> auth_timeout_sched ) ; EXPR 4 ast_log ( LOG_WARNING , \"Skinny Client failed to authenticate in %d seconds (SCHED %d)\\n\" , auth_timeout , s -> auth_timeout_sched ) FUNCTION_CALL 5 ast_log ( LOG_WARNING , \"Skinny Client failed to authenticate in %d seconds (SCHED %d)\\n\" , auth_timeout , s -> auth_timeout_sched ) CALLEE 6 ast_log LEAF_NODE 7 ast_log LEAF_NODE 6 ( ARGUMENT 6 LOG_WARNING FIELD 7 LOG_WARNING LEAF_NODE 8 LOG_WARNING LEAF_NODE 6 , ARGUMENT 6 \"Skinny Client failed to authenticate in %d seconds (SCHED %d)\\n\" FIELD 7 \"Skinny Client failed to authenticate in %d seconds (SCHED %d)\\n\" LEAF_NODE 8 \"Skinny Client failed to authenticate in %d seconds (SCHED %d)\\n\" LEAF_NODE 6 , ARGUMENT 6 auth_timeout FIELD 7 auth_timeout LEAF_NODE 8 auth_timeout LEAF_NODE 6 , ARGUMENT 6 s -> auth_timeout_sched FIELD 7 s -> auth_timeout_sched LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 auth_timeout_sched LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> auth_timeout_sched = - 1 ; EXPR 4 s -> auth_timeout_sched = - 1 ASSIGN 5 s -> auth_timeout_sched = - 1 LVAL 6 s -> auth_timeout_sched FIELD 7 s -> auth_timeout_sched LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 auth_timeout_sched ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 4 ; EXPR_STATEMENT 3 end_session ( s ) ; EXPR 4 end_session ( s ) FUNCTION_CALL 5 end_session ( s ) CALLEE 6 end_session LEAF_NODE 7 end_session LEAF_NODE 6 ( ARGUMENT 6 s FIELD 7 s LEAF_NODE 8 s LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 } SIMPLE_DECL 1 int skinny_header_size ; skinny_header_size = 12 ; VAR_DECL 2 int skinny_header_size ; skinny_header_size = 12 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 skinny_header_size LEAF_NODE 4 skinny_header_size LEAF_NODE 3 ; INIT 3 skinny_header_size = 12 ASSIGN 4 skinny_header_size = 12 LVAL 5 skinny_header_size NAME 6 skinny_header_size LEAF_NODE 7 skinny_header_size ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 12 FIELD 6 12 LEAF_NODE 7 12 LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void * LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void LEAF_NODE 3 * FUNCTION_NAME 2 skinny_session LEAF_NODE 3 skinny_session PARAMETER_LIST 2 ( void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 int res ; VAR_DECL 4 int res TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 4 ; SIMPLE_DECL 3 int bytesread ; VAR_DECL 4 int bytesread TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 bytesread LEAF_NODE 6 bytesread LEAF_NODE 4 ; SIMPLE_DECL 3 struct skinny_req * req ; req = NULL ; VAR_DECL 4 struct skinny_req * req ; req = NULL TYPE 5 struct skinny_req * TYPE_NAME 6 struct skinny_req LEAF_NODE 7 struct LEAF_NODE 7 skinny_req POINTER 6 * LEAF_NODE 7 * NAME 5 req LEAF_NODE 6 req LEAF_NODE 5 ; INIT 5 req = NULL ASSIGN 6 req = NULL LVAL 7 req NAME 8 req LEAF_NODE 9 req ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 NULL FIELD 8 NULL LEAF_NODE 9 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 struct skinnysession * s ; s = data ; VAR_DECL 4 struct skinnysession * s ; s = data TYPE 5 struct skinnysession * TYPE_NAME 6 struct skinnysession LEAF_NODE 7 struct LEAF_NODE 7 skinnysession POINTER 6 * LEAF_NODE 7 * NAME 5 s LEAF_NODE 6 s LEAF_NODE 5 ; INIT 5 s = data ASSIGN 6 s = data LVAL 7 s NAME 8 s LEAF_NODE 9 s ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; SIMPLE_DECL 3 int dlen ; dlen = 0 ; VAR_DECL 4 int dlen ; dlen = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 dlen LEAF_NODE 6 dlen LEAF_NODE 5 ; INIT 5 dlen = 0 ASSIGN 6 dlen = 0 LVAL 7 dlen NAME 8 dlen LEAF_NODE 9 dlen ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int eventmessage ; eventmessage = 0 ; VAR_DECL 4 int eventmessage ; eventmessage = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 eventmessage LEAF_NODE 6 eventmessage LEAF_NODE 5 ; INIT 5 eventmessage = 0 ASSIGN 6 eventmessage = 0 LVAL 7 eventmessage NAME 8 eventmessage LEAF_NODE 9 eventmessage ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 struct pollfd [ 1 ] fds ; VAR_DECL 4 struct pollfd [ 1 ] fds TYPE 5 struct pollfd [ 1 ] TYPE_NAME 6 struct pollfd LEAF_NODE 7 struct LEAF_NODE 7 pollfd TYPE_SUFFIX 6 [ 1 ] LEAF_NODE 7 [ FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 7 ] NAME 5 fds LEAF_NODE 6 fds LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_log ( LOG_NOTICE , \"Starting Skinny session from %s\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) ; EXPR 4 ast_log ( LOG_NOTICE , \"Starting Skinny session from %s\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) FUNCTION_CALL 5 ast_log ( LOG_NOTICE , \"Starting Skinny session from %s\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) CALLEE 6 ast_log LEAF_NODE 7 ast_log LEAF_NODE 6 ( ARGUMENT 6 LOG_NOTICE FIELD 7 LOG_NOTICE LEAF_NODE 8 LOG_NOTICE LEAF_NODE 6 , ARGUMENT 6 \"Starting Skinny session from %s\\n\" FIELD 7 \"Starting Skinny session from %s\\n\" LEAF_NODE 8 \"Starting Skinny session from %s\\n\" LEAF_NODE 6 , ARGUMENT 6 ast_inet_ntoa ( s -> sin . sin_addr ) FUNCTION_CALL 7 ast_inet_ntoa ( s -> sin . sin_addr ) CALLEE 8 ast_inet_ntoa LEAF_NODE 9 ast_inet_ntoa LEAF_NODE 8 ( ARGUMENT 8 s -> sin . sin_addr FIELD 9 s -> sin . sin_addr LEAF_NODE 10 s LEAF_NODE 10 -> LEAF_NODE 10 sin LEAF_NODE 10 . LEAF_NODE 10 sin_addr LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> start = ast_tvnow ( ) ; EXPR 4 s -> start = ast_tvnow ( ) ASSIGN 5 s -> start = ast_tvnow ( ) LVAL 6 s -> start FIELD 7 s -> start LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 start ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_tvnow ( ) FUNCTION_CALL 7 ast_tvnow ( ) CALLEE 8 ast_tvnow LEAF_NODE 9 ast_tvnow LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> last_keepalive = ast_tvnow ( ) ; EXPR 4 s -> last_keepalive = ast_tvnow ( ) ASSIGN 5 s -> last_keepalive = ast_tvnow ( ) LVAL 6 s -> last_keepalive FIELD 7 s -> last_keepalive LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 last_keepalive ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_tvnow ( ) FUNCTION_CALL 7 ast_tvnow ( ) CALLEE 8 ast_tvnow LEAF_NODE 9 ast_tvnow LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> keepalive_count = 0 ; EXPR 4 s -> keepalive_count = 0 ASSIGN 5 s -> keepalive_count = 0 LVAL 6 s -> keepalive_count FIELD 7 s -> keepalive_count LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 keepalive_count ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> lockstate = 0 ; EXPR 4 s -> lockstate = 0 ASSIGN 5 s -> lockstate = 0 LVAL 6 s -> lockstate FIELD 7 s -> lockstate LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 lockstate ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 0 FIELD 7 0 LEAF_NODE 8 0 LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> auth_timeout_sched = ast_sched_add ( sched , auth_timeout * 1000 , skinny_noauth_cb , s ) ; EXPR 4 s -> auth_timeout_sched = ast_sched_add ( sched , auth_timeout * 1000 , skinny_noauth_cb , s ) ASSIGN 5 s -> auth_timeout_sched = ast_sched_add ( sched , auth_timeout * 1000 , skinny_noauth_cb , s ) LVAL 6 s -> auth_timeout_sched FIELD 7 s -> auth_timeout_sched LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 auth_timeout_sched ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_sched_add ( sched , auth_timeout * 1000 , skinny_noauth_cb , s ) FUNCTION_CALL 7 ast_sched_add ( sched , auth_timeout * 1000 , skinny_noauth_cb , s ) CALLEE 8 ast_sched_add LEAF_NODE 9 ast_sched_add LEAF_NODE 8 ( ARGUMENT 8 sched FIELD 9 sched LEAF_NODE 10 sched LEAF_NODE 8 , ARGUMENT 8 auth_timeout * 1000 FIELD 9 auth_timeout LEAF_NODE 10 auth_timeout LEAF_NODE 9 * FIELD 9 1000 LEAF_NODE 10 1000 LEAF_NODE 8 , ARGUMENT 8 skinny_noauth_cb FIELD 9 skinny_noauth_cb LEAF_NODE 10 skinny_noauth_cb LEAF_NODE 8 , ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 s -> keepalive_timeout_sched = ast_sched_add ( sched , keep_alive * 3000 , skinny_nokeepalive_cb , s ) ; EXPR 4 s -> keepalive_timeout_sched = ast_sched_add ( sched , keep_alive * 3000 , skinny_nokeepalive_cb , s ) ASSIGN 5 s -> keepalive_timeout_sched = ast_sched_add ( sched , keep_alive * 3000 , skinny_nokeepalive_cb , s ) LVAL 6 s -> keepalive_timeout_sched FIELD 7 s -> keepalive_timeout_sched LEAF_NODE 8 s LEAF_NODE 8 -> LEAF_NODE 8 keepalive_timeout_sched ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_sched_add ( sched , keep_alive * 3000 , skinny_nokeepalive_cb , s ) FUNCTION_CALL 7 ast_sched_add ( sched , keep_alive * 3000 , skinny_nokeepalive_cb , s ) CALLEE 8 ast_sched_add LEAF_NODE 9 ast_sched_add LEAF_NODE 8 ( ARGUMENT 8 sched FIELD 9 sched LEAF_NODE 10 sched LEAF_NODE 8 , ARGUMENT 8 keep_alive * 3000 FIELD 9 keep_alive LEAF_NODE 10 keep_alive LEAF_NODE 9 * FIELD 9 3000 LEAF_NODE 10 3000 LEAF_NODE 8 , ARGUMENT 8 skinny_nokeepalive_cb FIELD 9 skinny_nokeepalive_cb LEAF_NODE 10 skinny_nokeepalive_cb LEAF_NODE 8 , ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 ) LEAF_NODE 4 ; ITERATION 3 KEYWORD 4 for LEAF_NODE 5 for LEAF_NODE 4 ( FOR_INIT 4 ; LEAF_NODE 5 ; LEAF_NODE 4 CONDITION LEAF_NODE 4 ; LEAF_NODE 4 FOR_EXPR LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 fds [ 0 ] . fd = s -> fd ; EXPR 7 fds [ 0 ] . fd = s -> fd ASSIGN 8 fds [ 0 ] . fd = s -> fd LVAL 9 fds [ 0 ] . fd FIELD 10 fds [ 0 ] . fd LEAF_NODE 11 fds LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 11 . LEAF_NODE 11 fd ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 s -> fd FIELD 10 s -> fd LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 fd LEAF_NODE 7 ; EXPR_STATEMENT 6 fds [ 0 ] . events = POLLIN ; EXPR 7 fds [ 0 ] . events = POLLIN ASSIGN 8 fds [ 0 ] . events = POLLIN LVAL 9 fds [ 0 ] . events FIELD 10 fds [ 0 ] . events LEAF_NODE 11 fds LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 11 . LEAF_NODE 11 events ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 POLLIN FIELD 10 POLLIN LEAF_NODE 11 POLLIN LEAF_NODE 7 ; EXPR_STATEMENT 6 fds [ 0 ] . revents = 0 ; EXPR 7 fds [ 0 ] . revents = 0 ASSIGN 8 fds [ 0 ] . revents = 0 LVAL 9 fds [ 0 ] . revents FIELD 10 fds [ 0 ] . revents LEAF_NODE 11 fds LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 11 . LEAF_NODE 11 revents ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 res = ast_poll ( fds , 1 , - 1 ) ; EXPR 7 res = ast_poll ( fds , 1 , - 1 ) ASSIGN 8 res = ast_poll ( fds , 1 , - 1 ) LVAL 9 res FIELD 10 res LEAF_NODE 11 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_poll ( fds , 1 , - 1 ) FUNCTION_CALL 10 ast_poll ( fds , 1 , - 1 ) CALLEE 11 ast_poll LEAF_NODE 12 ast_poll LEAF_NODE 11 ( ARGUMENT 11 fds FIELD 12 fds LEAF_NODE 13 fds LEAF_NODE 11 , ARGUMENT 11 1 FIELD 12 1 LEAF_NODE 13 1 LEAF_NODE 11 , ARGUMENT 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 res < 0 EXPR 8 res < 0 FIELD 9 res LEAF_NODE 10 res REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 errno != EINTR EXPR 11 errno != EINTR FIELD 12 errno LEAF_NODE 13 errno EQ_OPERATOR 12 != LEAF_NODE 13 != FIELD 12 EINTR LEAF_NODE 13 EINTR LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_WARNING , \"Select returned error: %s\\n\" , strerror ( errno ) ) ; EXPR 13 ast_log ( LOG_WARNING , \"Select returned error: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 14 ast_log ( LOG_WARNING , \"Select returned error: %s\\n\" , strerror ( errno ) ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_WARNING FIELD 16 LOG_WARNING LEAF_NODE 17 LOG_WARNING LEAF_NODE 15 , ARGUMENT 15 \"Select returned error: %s\\n\" FIELD 16 \"Select returned error: %s\\n\" LEAF_NODE 17 \"Select returned error: %s\\n\" LEAF_NODE 15 , ARGUMENT 15 strerror ( errno ) FUNCTION_CALL 16 strerror ( errno ) CALLEE 17 strerror LEAF_NODE 18 strerror LEAF_NODE 17 ( ARGUMENT 17 errno FIELD 18 errno LEAF_NODE 19 errno LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 ast_verb ( 3 , \"Ending Skinny session from %s (function input)\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) ; EXPR 13 ast_verb ( 3 , \"Ending Skinny session from %s (function input)\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) FUNCTION_CALL 14 ast_verb ( 3 , \"Ending Skinny session from %s (function input)\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) CALLEE 15 ast_verb LEAF_NODE 16 ast_verb LEAF_NODE 15 ( ARGUMENT 15 3 FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 15 , ARGUMENT 15 \"Ending Skinny session from %s (function input)\\n\" FIELD 16 \"Ending Skinny session from %s (function input)\\n\" LEAF_NODE 17 \"Ending Skinny session from %s (function input)\\n\" LEAF_NODE 15 , ARGUMENT 15 ast_inet_ntoa ( s -> sin . sin_addr ) FUNCTION_CALL 16 ast_inet_ntoa ( s -> sin . sin_addr ) CALLEE 17 ast_inet_ntoa LEAF_NODE 18 ast_inet_ntoa LEAF_NODE 17 ( ARGUMENT 17 s -> sin . sin_addr FIELD 18 s -> sin . sin_addr LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 sin LEAF_NODE 19 . LEAF_NODE 19 sin_addr LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! fds [ 0 ] . revents EXPR 8 ! fds [ 0 ] . revents UNARY_EXPR 9 ! fds [ 0 ] . revents UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 fds [ 0 ] . revents LEAF_NODE 11 fds LEAF_NODE 11 [ EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 11 ] LEAF_NODE 11 . LEAF_NODE 11 revents LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 continue DESTINATION ; KEYWORD 10 continue LEAF_NODE 11 continue LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ast_debug ( 1 , \"Reading header\\n\" ) ; EXPR 7 ast_debug ( 1 , \"Reading header\\n\" ) FUNCTION_CALL 8 ast_debug ( 1 , \"Reading header\\n\" ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"Reading header\\n\" FIELD 10 \"Reading header\\n\" LEAF_NODE 11 \"Reading header\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! ( req = ast_calloc ( 1 , SKINNY_MAX_PACKET ) ) EXPR 8 ! ( req = ast_calloc ( 1 , SKINNY_MAX_PACKET ) ) UNARY_EXPR 9 ! ( req = ast_calloc ( 1 , SKINNY_MAX_PACKET ) ) UNARY_OPERATOR 10 ! LEAF_NODE 11 ! LEAF_NODE 10 ( ASSIGN 10 req = ast_calloc ( 1 , SKINNY_MAX_PACKET ) LVAL 11 req FIELD 12 req LEAF_NODE 13 req ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ast_calloc ( 1 , SKINNY_MAX_PACKET ) FUNCTION_CALL 12 ast_calloc ( 1 , SKINNY_MAX_PACKET ) CALLEE 13 ast_calloc LEAF_NODE 14 ast_calloc LEAF_NODE 13 ( ARGUMENT 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 , ARGUMENT 13 SKINNY_MAX_PACKET FIELD 14 SKINNY_MAX_PACKET LEAF_NODE 15 SKINNY_MAX_PACKET LEAF_NODE 13 ) LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"Unable to allocated memorey for skinny_req.\\n\" ) ; EXPR 10 ast_log ( LOG_WARNING , \"Unable to allocated memorey for skinny_req.\\n\" ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"Unable to allocated memorey for skinny_req.\\n\" ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"Unable to allocated memorey for skinny_req.\\n\" FIELD 13 \"Unable to allocated memorey for skinny_req.\\n\" LEAF_NODE 14 \"Unable to allocated memorey for skinny_req.\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ast_mutex_lock ( & s -> lock ) ; EXPR 7 ast_mutex_lock ( & s -> lock ) FUNCTION_CALL 8 ast_mutex_lock ( & s -> lock ) CALLEE 9 ast_mutex_lock LEAF_NODE 10 ast_mutex_lock LEAF_NODE 9 ( ARGUMENT 9 & s -> lock UNARY_EXPR 10 & s -> lock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 s -> lock LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 lock LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 s -> lockstate = 1 ; EXPR 7 s -> lockstate = 1 ASSIGN 8 s -> lockstate = 1 LVAL 9 s -> lockstate FIELD 10 s -> lockstate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 lockstate ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( res = read ( s -> fd , req , skinny_header_size ) ) != skinny_header_size EXPR 8 ( res = read ( s -> fd , req , skinny_header_size ) ) != skinny_header_size LEAF_NODE 9 ( ASSIGN 9 res = read ( s -> fd , req , skinny_header_size ) LVAL 10 res FIELD 11 res LEAF_NODE 12 res ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 read ( s -> fd , req , skinny_header_size ) FUNCTION_CALL 11 read ( s -> fd , req , skinny_header_size ) CALLEE 12 read LEAF_NODE 13 read LEAF_NODE 12 ( ARGUMENT 12 s -> fd FIELD 13 s -> fd LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 fd LEAF_NODE 12 , ARGUMENT 12 req FIELD 13 req LEAF_NODE 14 req LEAF_NODE 12 , ARGUMENT 12 skinny_header_size FIELD 13 skinny_header_size LEAF_NODE 14 skinny_header_size LEAF_NODE 12 ) LEAF_NODE 9 ) EQ_OPERATOR 9 != LEAF_NODE 10 != FIELD 9 skinny_header_size LEAF_NODE 10 skinny_header_size LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 res < 0 EXPR 11 res < 0 FIELD 12 res LEAF_NODE 13 res REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_WARNING , \"Header read() returned error: %s\\n\" , strerror ( errno ) ) ; EXPR 13 ast_log ( LOG_WARNING , \"Header read() returned error: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 14 ast_log ( LOG_WARNING , \"Header read() returned error: %s\\n\" , strerror ( errno ) ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_WARNING FIELD 16 LOG_WARNING LEAF_NODE 17 LOG_WARNING LEAF_NODE 15 , ARGUMENT 15 \"Header read() returned error: %s\\n\" FIELD 16 \"Header read() returned error: %s\\n\" LEAF_NODE 17 \"Header read() returned error: %s\\n\" LEAF_NODE 15 , ARGUMENT 15 strerror ( errno ) FUNCTION_CALL 16 strerror ( errno ) CALLEE 17 strerror LEAF_NODE 18 strerror LEAF_NODE 17 ( ARGUMENT 17 errno FIELD 18 errno LEAF_NODE 19 errno LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_WARNING , \"Unable to read header. Only found %d bytes.\\n\" , res ) ; EXPR 13 ast_log ( LOG_WARNING , \"Unable to read header. Only found %d bytes.\\n\" , res ) FUNCTION_CALL 14 ast_log ( LOG_WARNING , \"Unable to read header. Only found %d bytes.\\n\" , res ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_WARNING FIELD 16 LOG_WARNING LEAF_NODE 17 LOG_WARNING LEAF_NODE 15 , ARGUMENT 15 \"Unable to read header. Only found %d bytes.\\n\" FIELD 16 \"Unable to read header. Only found %d bytes.\\n\" LEAF_NODE 17 \"Unable to read header. Only found %d bytes.\\n\" LEAF_NODE 15 , ARGUMENT 15 res FIELD 16 res LEAF_NODE 17 res LEAF_NODE 15 ) LEAF_NODE 13 ; LEAF_NODE 11 } JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 eventmessage = letohl ( req -> e ) ; EXPR 7 eventmessage = letohl ( req -> e ) ASSIGN 8 eventmessage = letohl ( req -> e ) LVAL 9 eventmessage FIELD 10 eventmessage LEAF_NODE 11 eventmessage ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 letohl ( req -> e ) FUNCTION_CALL 10 letohl ( req -> e ) CALLEE 11 letohl LEAF_NODE 12 letohl LEAF_NODE 11 ( ARGUMENT 11 req -> e FIELD 12 req -> e LEAF_NODE 13 req LEAF_NODE 13 -> LEAF_NODE 13 e LEAF_NODE 11 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 eventmessage < 0 EXPR 8 eventmessage < 0 FIELD 9 eventmessage LEAF_NODE 10 eventmessage REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_ERROR , \"Event Message is NULL from socket %d, This is function\\n\" , s -> fd ) ; EXPR 10 ast_log ( LOG_ERROR , \"Event Message is NULL from socket %d, This is function\\n\" , s -> fd ) FUNCTION_CALL 11 ast_log ( LOG_ERROR , \"Event Message is NULL from socket %d, This is function\\n\" , s -> fd ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_ERROR FIELD 13 LOG_ERROR LEAF_NODE 14 LOG_ERROR LEAF_NODE 12 , ARGUMENT 12 \"Event Message is NULL from socket %d, This is function\\n\" FIELD 13 \"Event Message is NULL from socket %d, This is function\\n\" LEAF_NODE 14 \"Event Message is NULL from socket %d, This is function\\n\" LEAF_NODE 12 , ARGUMENT 12 s -> fd FIELD 13 s -> fd LEAF_NODE 14 s LEAF_NODE 14 -> LEAF_NODE 14 fd LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 dlen = letohl ( req -> len ) - 4 ; EXPR 7 dlen = letohl ( req -> len ) - 4 ASSIGN 8 dlen = letohl ( req -> len ) - 4 LVAL 9 dlen FIELD 10 dlen LEAF_NODE 11 dlen ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 letohl ( req -> len ) - 4 FUNCTION_CALL 10 letohl ( req -> len ) CALLEE 11 letohl LEAF_NODE 12 letohl LEAF_NODE 11 ( ARGUMENT 11 req -> len FIELD 12 req -> len LEAF_NODE 13 req LEAF_NODE 13 -> LEAF_NODE 13 len LEAF_NODE 11 ) LEAF_NODE 10 - FIELD 10 4 LEAF_NODE 11 4 LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 dlen < 0 EXPR 8 dlen < 0 FIELD 9 dlen LEAF_NODE 10 dlen REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"Skinny Client sent invalid data.\\n\" ) ; EXPR 10 ast_log ( LOG_WARNING , \"Skinny Client sent invalid data.\\n\" ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"Skinny Client sent invalid data.\\n\" ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"Skinny Client sent invalid data.\\n\" FIELD 13 \"Skinny Client sent invalid data.\\n\" LEAF_NODE 14 \"Skinny Client sent invalid data.\\n\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 dlen > ( SKINNY_MAX_PACKET - skinny_header_size ) EXPR 8 dlen > ( SKINNY_MAX_PACKET - skinny_header_size ) FIELD 9 dlen LEAF_NODE 10 dlen REL_OPERATOR 9 > LEAF_NODE 10 > LEAF_NODE 9 ( FIELD 9 SKINNY_MAX_PACKET LEAF_NODE 10 SKINNY_MAX_PACKET LEAF_NODE 9 - FIELD 9 skinny_header_size LEAF_NODE 10 skinny_header_size LEAF_NODE 9 ) LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"Skinny packet too large (%d bytes), max length(%d bytes)\\n\" , dlen + 8 , SKINNY_MAX_PACKET ) ; EXPR 10 ast_log ( LOG_WARNING , \"Skinny packet too large (%d bytes), max length(%d bytes)\\n\" , dlen + 8 , SKINNY_MAX_PACKET ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"Skinny packet too large (%d bytes), max length(%d bytes)\\n\" , dlen + 8 , SKINNY_MAX_PACKET ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"Skinny packet too large (%d bytes), max length(%d bytes)\\n\" FIELD 13 \"Skinny packet too large (%d bytes), max length(%d bytes)\\n\" LEAF_NODE 14 \"Skinny packet too large (%d bytes), max length(%d bytes)\\n\" LEAF_NODE 12 , ARGUMENT 12 dlen + 8 FIELD 13 dlen LEAF_NODE 14 dlen LEAF_NODE 13 + FIELD 13 8 LEAF_NODE 14 8 LEAF_NODE 12 , ARGUMENT 12 SKINNY_MAX_PACKET FIELD 13 SKINNY_MAX_PACKET LEAF_NODE 14 SKINNY_MAX_PACKET LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ast_debug ( 1 , \"Read header: Message ID: 0x%04x, %d bytes in packet\\n\" , eventmessage , dlen ) ; EXPR 7 ast_debug ( 1 , \"Read header: Message ID: 0x%04x, %d bytes in packet\\n\" , eventmessage , dlen ) FUNCTION_CALL 8 ast_debug ( 1 , \"Read header: Message ID: 0x%04x, %d bytes in packet\\n\" , eventmessage , dlen ) CALLEE 9 ast_debug LEAF_NODE 10 ast_debug LEAF_NODE 9 ( ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 , ARGUMENT 9 \"Read header: Message ID: 0x%04x, %d bytes in packet\\n\" FIELD 10 \"Read header: Message ID: 0x%04x, %d bytes in packet\\n\" LEAF_NODE 11 \"Read header: Message ID: 0x%04x, %d bytes in packet\\n\" LEAF_NODE 9 , ARGUMENT 9 eventmessage FIELD 10 eventmessage LEAF_NODE 11 eventmessage LEAF_NODE 9 , ARGUMENT 9 dlen FIELD 10 dlen LEAF_NODE 11 dlen LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 bytesread = 0 ; EXPR 7 bytesread = 0 ASSIGN 8 bytesread = 0 LVAL 9 bytesread FIELD 10 bytesread LEAF_NODE 11 bytesread ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 while LEAF_NODE 8 while LEAF_NODE 7 ( CONDITION 7 bytesread < dlen EXPR 8 bytesread < dlen FIELD 9 bytesread LEAF_NODE 10 bytesread REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 dlen LEAF_NODE 10 dlen LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_debug ( 1 , \"Waiting %dms for %d bytes of %d\\n\" , PACKET_TIMEOUT , dlen - bytesread , dlen ) ; EXPR 10 ast_debug ( 1 , \"Waiting %dms for %d bytes of %d\\n\" , PACKET_TIMEOUT , dlen - bytesread , dlen ) FUNCTION_CALL 11 ast_debug ( 1 , \"Waiting %dms for %d bytes of %d\\n\" , PACKET_TIMEOUT , dlen - bytesread , dlen ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 \"Waiting %dms for %d bytes of %d\\n\" FIELD 13 \"Waiting %dms for %d bytes of %d\\n\" LEAF_NODE 14 \"Waiting %dms for %d bytes of %d\\n\" LEAF_NODE 12 , ARGUMENT 12 PACKET_TIMEOUT FIELD 13 PACKET_TIMEOUT LEAF_NODE 14 PACKET_TIMEOUT LEAF_NODE 12 , ARGUMENT 12 dlen - bytesread FIELD 13 dlen LEAF_NODE 14 dlen LEAF_NODE 13 - FIELD 13 bytesread LEAF_NODE 14 bytesread LEAF_NODE 12 , ARGUMENT 12 dlen FIELD 13 dlen LEAF_NODE 14 dlen LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 fds [ 0 ] . revents = 0 ; EXPR 10 fds [ 0 ] . revents = 0 ASSIGN 11 fds [ 0 ] . revents = 0 LVAL 12 fds [ 0 ] . revents FIELD 13 fds [ 0 ] . revents LEAF_NODE 14 fds LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 revents ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 0 FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 10 ; EXPR_STATEMENT 9 res = ast_poll ( fds , 1 , PACKET_TIMEOUT ) ; EXPR 10 res = ast_poll ( fds , 1 , PACKET_TIMEOUT ) ASSIGN 11 res = ast_poll ( fds , 1 , PACKET_TIMEOUT ) LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ast_poll ( fds , 1 , PACKET_TIMEOUT ) FUNCTION_CALL 13 ast_poll ( fds , 1 , PACKET_TIMEOUT ) CALLEE 14 ast_poll LEAF_NODE 15 ast_poll LEAF_NODE 14 ( ARGUMENT 14 fds FIELD 15 fds LEAF_NODE 16 fds LEAF_NODE 14 , ARGUMENT 14 1 FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 14 , ARGUMENT 14 PACKET_TIMEOUT FIELD 15 PACKET_TIMEOUT LEAF_NODE 16 PACKET_TIMEOUT LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 res <= 0 EXPR 11 res <= 0 FIELD 12 res LEAF_NODE 13 res REL_OPERATOR 12 <= LEAF_NODE 13 <= FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 SELECTION 12 KEYWORD 13 if LEAF_NODE 14 if LEAF_NODE 13 ( CONDITION 13 res == 0 EXPR 14 res == 0 FIELD 15 res LEAF_NODE 16 res EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 13 ) STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ast_debug ( 1 , \"Poll timed out waiting for %d bytes\\n\" , dlen - bytesread ) ; EXPR 16 ast_debug ( 1 , \"Poll timed out waiting for %d bytes\\n\" , dlen - bytesread ) FUNCTION_CALL 17 ast_debug ( 1 , \"Poll timed out waiting for %d bytes\\n\" , dlen - bytesread ) CALLEE 18 ast_debug LEAF_NODE 19 ast_debug LEAF_NODE 18 ( ARGUMENT 18 1 FIELD 19 1 LEAF_NODE 20 1 LEAF_NODE 18 , ARGUMENT 18 \"Poll timed out waiting for %d bytes\\n\" FIELD 19 \"Poll timed out waiting for %d bytes\\n\" LEAF_NODE 20 \"Poll timed out waiting for %d bytes\\n\" LEAF_NODE 18 , ARGUMENT 18 dlen - bytesread FIELD 19 dlen LEAF_NODE 20 dlen LEAF_NODE 19 - FIELD 19 bytesread LEAF_NODE 20 bytesread LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } SELECTION 12 KEYWORD 13 else LEAF_NODE 14 else STATEMENTS 13 LEAF_NODE 14 { STATEMENTS 14 EXPR_STATEMENT 15 ast_log ( LOG_WARNING , \"Poll failed waiting for %d bytes: %s\\n\" , dlen - bytesread , strerror ( errno ) ) ; EXPR 16 ast_log ( LOG_WARNING , \"Poll failed waiting for %d bytes: %s\\n\" , dlen - bytesread , strerror ( errno ) ) FUNCTION_CALL 17 ast_log ( LOG_WARNING , \"Poll failed waiting for %d bytes: %s\\n\" , dlen - bytesread , strerror ( errno ) ) CALLEE 18 ast_log LEAF_NODE 19 ast_log LEAF_NODE 18 ( ARGUMENT 18 LOG_WARNING FIELD 19 LOG_WARNING LEAF_NODE 20 LOG_WARNING LEAF_NODE 18 , ARGUMENT 18 \"Poll failed waiting for %d bytes: %s\\n\" FIELD 19 \"Poll failed waiting for %d bytes: %s\\n\" LEAF_NODE 20 \"Poll failed waiting for %d bytes: %s\\n\" LEAF_NODE 18 , ARGUMENT 18 dlen - bytesread FIELD 19 dlen LEAF_NODE 20 dlen LEAF_NODE 19 - FIELD 19 bytesread LEAF_NODE 20 bytesread LEAF_NODE 18 , ARGUMENT 18 strerror ( errno ) FUNCTION_CALL 19 strerror ( errno ) CALLEE 20 strerror LEAF_NODE 21 strerror LEAF_NODE 20 ( ARGUMENT 20 errno FIELD 21 errno LEAF_NODE 22 errno LEAF_NODE 20 ) LEAF_NODE 18 ) LEAF_NODE 16 ; LEAF_NODE 14 } EXPR_STATEMENT 12 ast_verb ( 3 , \"Ending Skinny session from %s (function input)\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) ; EXPR 13 ast_verb ( 3 , \"Ending Skinny session from %s (function input)\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) FUNCTION_CALL 14 ast_verb ( 3 , \"Ending Skinny session from %s (function input)\\n\" , ast_inet_ntoa ( s -> sin . sin_addr ) ) CALLEE 15 ast_verb LEAF_NODE 16 ast_verb LEAF_NODE 15 ( ARGUMENT 15 3 FIELD 16 3 LEAF_NODE 17 3 LEAF_NODE 15 , ARGUMENT 15 \"Ending Skinny session from %s (function input)\\n\" FIELD 16 \"Ending Skinny session from %s (function input)\\n\" LEAF_NODE 17 \"Ending Skinny session from %s (function input)\\n\" LEAF_NODE 15 , ARGUMENT 15 ast_inet_ntoa ( s -> sin . sin_addr ) FUNCTION_CALL 16 ast_inet_ntoa ( s -> sin . sin_addr ) CALLEE 17 ast_inet_ntoa LEAF_NODE 18 ast_inet_ntoa LEAF_NODE 17 ( ARGUMENT 17 s -> sin . sin_addr FIELD 18 s -> sin . sin_addr LEAF_NODE 19 s LEAF_NODE 19 -> LEAF_NODE 19 sin LEAF_NODE 19 . LEAF_NODE 19 sin_addr LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 res = - 1 ; EXPR 13 res = - 1 ASSIGN 14 res = - 1 LVAL 15 res FIELD 16 res LEAF_NODE 17 res ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 - 1 UNARY_EXPR 16 - 1 UNARY_OPERATOR 17 - LEAF_NODE 18 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! fds [ 0 ] . revents EXPR 11 ! fds [ 0 ] . revents UNARY_EXPR 12 ! fds [ 0 ] . revents UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FIELD 13 fds [ 0 ] . revents LEAF_NODE 14 fds LEAF_NODE 14 [ EXPR 14 0 FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 ] LEAF_NODE 14 . LEAF_NODE 14 revents LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 JUMP_STATEMENT 12 continue DESTINATION ; KEYWORD 13 continue LEAF_NODE 14 continue LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 res = read ( s -> fd , ( ( char * ) & req ) + bytesread , dlen - bytesread ) ; EXPR 10 res = read ( s -> fd , ( ( char * ) & req ) + bytesread , dlen - bytesread ) ASSIGN 11 res = read ( s -> fd , ( ( char * ) & req ) + bytesread , dlen - bytesread ) LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 read ( s -> fd , ( ( char * ) & req ) + bytesread , dlen - bytesread ) FUNCTION_CALL 13 read ( s -> fd , ( ( char * ) & req ) + bytesread , dlen - bytesread ) CALLEE 14 read LEAF_NODE 15 read LEAF_NODE 14 ( ARGUMENT 14 s -> fd FIELD 15 s -> fd LEAF_NODE 16 s LEAF_NODE 16 -> LEAF_NODE 16 fd LEAF_NODE 14 , ARGUMENT 14 ( ( char * ) & req ) + bytesread LEAF_NODE 15 ( LEAF_NODE 15 ( TYPE_NAME 15 char LEAF_NODE 16 char LEAF_NODE 15 * LEAF_NODE 15 ) UNARY_EXPR 15 & req UNARY_OPERATOR 16 & LEAF_NODE 17 & FIELD 16 req LEAF_NODE 17 req LEAF_NODE 15 ) LEAF_NODE 15 + FIELD 15 bytesread LEAF_NODE 16 bytesread LEAF_NODE 14 , ARGUMENT 14 dlen - bytesread FIELD 15 dlen LEAF_NODE 16 dlen LEAF_NODE 15 - FIELD 15 bytesread LEAF_NODE 16 bytesread LEAF_NODE 14 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 res < 0 EXPR 11 res < 0 FIELD 12 res LEAF_NODE 13 res REL_OPERATOR 12 < LEAF_NODE 13 < FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_log ( LOG_WARNING , \"Data read() returned error: %s\\n\" , strerror ( errno ) ) ; EXPR 13 ast_log ( LOG_WARNING , \"Data read() returned error: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 14 ast_log ( LOG_WARNING , \"Data read() returned error: %s\\n\" , strerror ( errno ) ) CALLEE 15 ast_log LEAF_NODE 16 ast_log LEAF_NODE 15 ( ARGUMENT 15 LOG_WARNING FIELD 16 LOG_WARNING LEAF_NODE 17 LOG_WARNING LEAF_NODE 15 , ARGUMENT 15 \"Data read() returned error: %s\\n\" FIELD 16 \"Data read() returned error: %s\\n\" LEAF_NODE 17 \"Data read() returned error: %s\\n\" LEAF_NODE 15 , ARGUMENT 15 strerror ( errno ) FUNCTION_CALL 16 strerror ( errno ) CALLEE 17 strerror LEAF_NODE 18 strerror LEAF_NODE 17 ( ARGUMENT 17 errno FIELD 18 errno LEAF_NODE 19 errno LEAF_NODE 17 ) LEAF_NODE 15 ) LEAF_NODE 13 ; JUMP_STATEMENT 12 break DESTINATION ; KEYWORD 13 break LEAF_NODE 14 break LEAF_NODE 13 DESTINATION LEAF_NODE 13 ; LEAF_NODE 11 } EXPR_STATEMENT 9 bytesread += res ; EXPR 10 bytesread += res ASSIGN 11 bytesread += res LVAL 12 bytesread FIELD 13 bytesread LEAF_NODE 14 bytesread ASSIGN_OP 12 += LEAF_NODE 13 += RVAL 12 res FIELD 13 res LEAF_NODE 14 res LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_debug ( 1 , \"Read %d bytes. %d of %d now read\\n\" , res , bytesread , dlen ) ; EXPR 10 ast_debug ( 1 , \"Read %d bytes. %d of %d now read\\n\" , res , bytesread , dlen ) FUNCTION_CALL 11 ast_debug ( 1 , \"Read %d bytes. %d of %d now read\\n\" , res , bytesread , dlen ) CALLEE 12 ast_debug LEAF_NODE 13 ast_debug LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 \"Read %d bytes. %d of %d now read\\n\" FIELD 13 \"Read %d bytes. %d of %d now read\\n\" LEAF_NODE 14 \"Read %d bytes. %d of %d now read\\n\" LEAF_NODE 12 , ARGUMENT 12 res FIELD 13 res LEAF_NODE 14 res LEAF_NODE 12 , ARGUMENT 12 bytesread FIELD 13 bytesread LEAF_NODE 14 bytesread LEAF_NODE 12 , ARGUMENT 12 dlen FIELD 13 dlen LEAF_NODE 14 dlen LEAF_NODE 12 ) LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 s -> lockstate = 0 ; EXPR 7 s -> lockstate = 0 ASSIGN 8 s -> lockstate = 0 LVAL 9 s -> lockstate FIELD 10 s -> lockstate LEAF_NODE 11 s LEAF_NODE 11 -> LEAF_NODE 11 lockstate ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_mutex_unlock ( & s -> lock ) ; EXPR 7 ast_mutex_unlock ( & s -> lock ) FUNCTION_CALL 8 ast_mutex_unlock ( & s -> lock ) CALLEE 9 ast_mutex_unlock LEAF_NODE 10 ast_mutex_unlock LEAF_NODE 9 ( ARGUMENT 9 & s -> lock UNARY_EXPR 10 & s -> lock UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 s -> lock LEAF_NODE 12 s LEAF_NODE 12 -> LEAF_NODE 12 lock LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 res < 0 EXPR 8 res < 0 FIELD 9 res LEAF_NODE 10 res REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 JUMP_STATEMENT 9 break DESTINATION ; KEYWORD 10 break LEAF_NODE 11 break LEAF_NODE 10 DESTINATION LEAF_NODE 10 ; LEAF_NODE 8 } EXPR_STATEMENT 6 pthread_setcancelstate ( PTHREAD_CANCEL_DISABLE , NULL ) ; EXPR 7 pthread_setcancelstate ( PTHREAD_CANCEL_DISABLE , NULL ) FUNCTION_CALL 8 pthread_setcancelstate ( PTHREAD_CANCEL_DISABLE , NULL ) CALLEE 9 pthread_setcancelstate LEAF_NODE 10 pthread_setcancelstate LEAF_NODE 9 ( ARGUMENT 9 PTHREAD_CANCEL_DISABLE FIELD 10 PTHREAD_CANCEL_DISABLE LEAF_NODE 11 PTHREAD_CANCEL_DISABLE LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 res = handle_message ( req , s ) ; EXPR 7 res = handle_message ( req , s ) ASSIGN 8 res = handle_message ( req , s ) LVAL 9 res FIELD 10 res LEAF_NODE 11 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 handle_message ( req , s ) FUNCTION_CALL 10 handle_message ( req , s ) CALLEE 11 handle_message LEAF_NODE 12 handle_message LEAF_NODE 11 ( ARGUMENT 11 req FIELD 12 req LEAF_NODE 13 req LEAF_NODE 11 , ARGUMENT 11 s FIELD 12 s LEAF_NODE 13 s LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pthread_setcancelstate ( PTHREAD_CANCEL_ENABLE , NULL ) ; EXPR 7 pthread_setcancelstate ( PTHREAD_CANCEL_ENABLE , NULL ) FUNCTION_CALL 8 pthread_setcancelstate ( PTHREAD_CANCEL_ENABLE , NULL ) CALLEE 9 pthread_setcancelstate LEAF_NODE 10 pthread_setcancelstate LEAF_NODE 9 ( ARGUMENT 9 PTHREAD_CANCEL_ENABLE FIELD 10 PTHREAD_CANCEL_ENABLE LEAF_NODE 11 PTHREAD_CANCEL_ENABLE LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 req EXPR 8 req FIELD 9 req LEAF_NODE 10 req LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_free ( req ) ; EXPR 10 ast_free ( req ) FUNCTION_CALL 11 ast_free ( req ) CALLEE 12 ast_free LEAF_NODE 13 ast_free LEAF_NODE 12 ( ARGUMENT 12 req FIELD 13 req LEAF_NODE 14 req LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 req = NULL ; EXPR 10 req = NULL ASSIGN 11 req = NULL LVAL 12 req FIELD 13 req LEAF_NODE 14 req ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } EXPR_STATEMENT 3 ast_log ( LOG_NOTICE , \"Skinny Session returned: %s\\n\" , strerror ( errno ) ) ; EXPR 4 ast_log ( LOG_NOTICE , \"Skinny Session returned: %s\\n\" , strerror ( errno ) ) FUNCTION_CALL 5 ast_log ( LOG_NOTICE , \"Skinny Session returned: %s\\n\" , strerror ( errno ) ) CALLEE 6 ast_log LEAF_NODE 7 ast_log LEAF_NODE 6 ( ARGUMENT 6 LOG_NOTICE FIELD 7 LOG_NOTICE LEAF_NODE 8 LOG_NOTICE LEAF_NODE 6 , ARGUMENT 6 \"Skinny Session returned: %s\\n\" FIELD 7 \"Skinny Session returned: %s\\n\" LEAF_NODE 8 \"Skinny Session returned: %s\\n\" LEAF_NODE 6 , ARGUMENT 6 strerror ( errno ) FUNCTION_CALL 7 strerror ( errno ) CALLEE 8 strerror LEAF_NODE 9 strerror LEAF_NODE 8 ( ARGUMENT 8 errno FIELD 9 errno LEAF_NODE 10 errno LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 req EXPR 5 req FIELD 6 req LEAF_NODE 7 req LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_free ( req ) ; EXPR 7 ast_free ( req ) FUNCTION_CALL 8 ast_free ( req ) CALLEE 9 ast_free LEAF_NODE 10 ast_free LEAF_NODE 9 ( ARGUMENT 9 req FIELD 10 req LEAF_NODE 11 req LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 pthread_cleanup_pop ( 1 ) ; EXPR 4 pthread_cleanup_pop ( 1 ) FUNCTION_CALL 5 pthread_cleanup_pop ( 1 ) CALLEE 6 pthread_cleanup_pop LEAF_NODE 7 pthread_cleanup_pop LEAF_NODE 6 ( ARGUMENT 6 1 FIELD 7 1 LEAF_NODE 8 1 LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 36, "project": "openssl_ast_vul_function_test_adv_44", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 load_module LEAF_NODE 3 load_module PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ast_register_application_xml ( app , skel_exec ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ast_register_application_xml ( app , skel_exec ) EXPR 5 ast_register_application_xml ( app , skel_exec ) FUNCTION_CALL 6 ast_register_application_xml ( app , skel_exec ) CALLEE 7 ast_register_application_xml LEAF_NODE 8 ast_register_application_xml LEAF_NODE 7 ( ARGUMENT 7 app FIELD 8 app LEAF_NODE 9 app LEAF_NODE 7 , ARGUMENT 7 skel_exec FIELD 8 skel_exec LEAF_NODE 9 skel_exec LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 37, "project": "openssl_ast_vul_function_test_adv_4", "target": 1}
{"func": "SIMPLE_DECL 1 struct mansession_session BASE_CLASSES { struct ast_sockaddr addr ; struct ast_iostream * stream ; int inuse ; int needdestroy ; pthread_t waiting_thread ; uint32_t managerid ; time_t sessionstart ; struct timeval sessionstart_tv ; time_t sessiontimeout ; char [ 80 ] username ; char [ 10 ] challenge ; int authenticated ; int readperm ; int writeperm ; char [ 1025 ] inbuf ; int inlen ; struct ao2_container * whitefilters ; struct ao2_container * blackfilters ; struct ast_variable * chanvars ; int send_events ; struct eventqent * last_ev ; int writetimeout ; time_t authstart ; int pending_event ; time_t noncetime ; unsigned long oldnonce ; unsigned long nc ; ast_mutex_t notify_lock ; AST_LIST_HEAD_NOLOCK ( mansession_datastores , ast_datastore ) datastores ; AST_LIST_ENTRY ( mansession_session ) list ; } ; CLASS_DEF 2 struct mansession_session BASE_CLASSES { struct ast_sockaddr addr ; struct ast_iostream * stream ; int inuse ; int needdestroy ; pthread_t waiting_thread ; uint32_t managerid ; time_t sessionstart ; struct timeval sessionstart_tv ; time_t sessiontimeout ; char [ 80 ] username ; char [ 10 ] challenge ; int authenticated ; int readperm ; int writeperm ; char [ 1025 ] inbuf ; int inlen ; struct ao2_container * whitefilters ; struct ao2_container * blackfilters ; struct ast_variable * chanvars ; int send_events ; struct eventqent * last_ev ; int writetimeout ; time_t authstart ; int pending_event ; time_t noncetime ; unsigned long oldnonce ; unsigned long nc ; ast_mutex_t notify_lock ; AST_LIST_HEAD_NOLOCK ( mansession_datastores , ast_datastore ) datastores ; AST_LIST_ENTRY ( mansession_session ) list ; } CLASS_DEF 3 struct mansession_session BASE_CLASSES { struct ast_sockaddr addr ; struct ast_iostream * stream ; int inuse ; int needdestroy ; pthread_t waiting_thread ; uint32_t managerid ; time_t sessionstart ; struct timeval sessionstart_tv ; time_t sessiontimeout ; char [ 80 ] username ; char [ 10 ] challenge ; int authenticated ; int readperm ; int writeperm ; char [ 1025 ] inbuf ; int inlen ; struct ao2_container * whitefilters ; struct ao2_container * blackfilters ; struct ast_variable * chanvars ; int send_events ; struct eventqent * last_ev ; int writetimeout ; time_t authstart ; int pending_event ; time_t noncetime ; unsigned long oldnonce ; unsigned long nc ; ast_mutex_t notify_lock ; AST_LIST_HEAD_NOLOCK ( mansession_datastores , ast_datastore ) datastores ; AST_LIST_ENTRY ( mansession_session ) list ; } LEAF_NODE 4 struct CLASS_NAME 4 mansession_session LEAF_NODE 5 mansession_session LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_sockaddr addr ; struct ast_iostream * stream ; int inuse ; int needdestroy ; pthread_t waiting_thread ; uint32_t managerid ; time_t sessionstart ; struct timeval sessionstart_tv ; time_t sessiontimeout ; char [ 80 ] username ; char [ 10 ] challenge ; int authenticated ; int readperm ; int writeperm ; char [ 1025 ] inbuf ; int inlen ; struct ao2_container * whitefilters ; struct ao2_container * blackfilters ; struct ast_variable * chanvars ; int send_events ; struct eventqent * last_ev ; int writetimeout ; time_t authstart ; int pending_event ; time_t noncetime ; unsigned long oldnonce ; unsigned long nc ; ast_mutex_t notify_lock ; AST_LIST_HEAD_NOLOCK ( mansession_datastores , ast_datastore ) datastores ; AST_LIST_ENTRY ( mansession_session ) list ; SIMPLE_DECL 5 struct ast_sockaddr addr ; VAR_DECL 6 struct ast_sockaddr addr TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 addr LEAF_NODE 8 addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_iostream * stream ; VAR_DECL 6 struct ast_iostream * stream TYPE 7 struct ast_iostream * TYPE_NAME 8 struct ast_iostream LEAF_NODE 9 struct LEAF_NODE 9 ast_iostream POINTER 8 * LEAF_NODE 9 * NAME 7 stream LEAF_NODE 8 stream LEAF_NODE 6 ; SIMPLE_DECL 5 int inuse ; VAR_DECL 6 int inuse TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inuse LEAF_NODE 8 inuse LEAF_NODE 6 ; SIMPLE_DECL 5 int needdestroy ; VAR_DECL 6 int needdestroy TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 needdestroy LEAF_NODE 8 needdestroy LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_t waiting_thread ; VAR_DECL 6 pthread_t waiting_thread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 waiting_thread LEAF_NODE 8 waiting_thread LEAF_NODE 6 ; SIMPLE_DECL 5 uint32_t managerid ; VAR_DECL 6 uint32_t managerid TYPE 7 uint32_t TYPE_NAME 8 uint32_t LEAF_NODE 9 uint32_t NAME 7 managerid LEAF_NODE 8 managerid LEAF_NODE 6 ; SIMPLE_DECL 5 time_t sessionstart ; VAR_DECL 6 time_t sessionstart TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 sessionstart LEAF_NODE 8 sessionstart LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval sessionstart_tv ; VAR_DECL 6 struct timeval sessionstart_tv TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 sessionstart_tv LEAF_NODE 8 sessionstart_tv LEAF_NODE 6 ; SIMPLE_DECL 5 time_t sessiontimeout ; VAR_DECL 6 time_t sessiontimeout TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 sessiontimeout LEAF_NODE 8 sessiontimeout LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] username ; VAR_DECL 6 char [ 80 ] username TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 username LEAF_NODE 8 username LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 10 ] challenge ; VAR_DECL 6 char [ 10 ] challenge TYPE 7 char [ 10 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 challenge LEAF_NODE 8 challenge LEAF_NODE 6 ; SIMPLE_DECL 5 int authenticated ; VAR_DECL 6 int authenticated TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 authenticated LEAF_NODE 8 authenticated LEAF_NODE 6 ; SIMPLE_DECL 5 int readperm ; VAR_DECL 6 int readperm TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 readperm LEAF_NODE 8 readperm LEAF_NODE 6 ; SIMPLE_DECL 5 int writeperm ; VAR_DECL 6 int writeperm TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 writeperm LEAF_NODE 8 writeperm LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 1025 ] inbuf ; VAR_DECL 6 char [ 1025 ] inbuf TYPE 7 char [ 1025 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1025 ] LEAF_NODE 9 [ FIELD 9 1025 LEAF_NODE 10 1025 LEAF_NODE 9 ] NAME 7 inbuf LEAF_NODE 8 inbuf LEAF_NODE 6 ; SIMPLE_DECL 5 int inlen ; VAR_DECL 6 int inlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inlen LEAF_NODE 8 inlen LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * whitefilters ; VAR_DECL 6 struct ao2_container * whitefilters TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 whitefilters LEAF_NODE 8 whitefilters LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * blackfilters ; VAR_DECL 6 struct ao2_container * blackfilters TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 blackfilters LEAF_NODE 8 blackfilters LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_variable * chanvars ; VAR_DECL 6 struct ast_variable * chanvars TYPE 7 struct ast_variable * TYPE_NAME 8 struct ast_variable LEAF_NODE 9 struct LEAF_NODE 9 ast_variable POINTER 8 * LEAF_NODE 9 * NAME 7 chanvars LEAF_NODE 8 chanvars LEAF_NODE 6 ; SIMPLE_DECL 5 int send_events ; VAR_DECL 6 int send_events TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 send_events LEAF_NODE 8 send_events LEAF_NODE 6 ; SIMPLE_DECL 5 struct eventqent * last_ev ; VAR_DECL 6 struct eventqent * last_ev TYPE 7 struct eventqent * TYPE_NAME 8 struct eventqent LEAF_NODE 9 struct LEAF_NODE 9 eventqent POINTER 8 * LEAF_NODE 9 * NAME 7 last_ev LEAF_NODE 8 last_ev LEAF_NODE 6 ; SIMPLE_DECL 5 int writetimeout ; VAR_DECL 6 int writetimeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 writetimeout LEAF_NODE 8 writetimeout LEAF_NODE 6 ; SIMPLE_DECL 5 time_t authstart ; VAR_DECL 6 time_t authstart TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 authstart LEAF_NODE 8 authstart LEAF_NODE 6 ; SIMPLE_DECL 5 int pending_event ; VAR_DECL 6 int pending_event TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pending_event LEAF_NODE 8 pending_event LEAF_NODE 6 ; SIMPLE_DECL 5 time_t noncetime ; VAR_DECL 6 time_t noncetime TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 noncetime LEAF_NODE 8 noncetime LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long oldnonce ; VAR_DECL 6 unsigned long oldnonce TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 oldnonce LEAF_NODE 8 oldnonce LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned long nc ; VAR_DECL 6 unsigned long nc TYPE 7 unsigned long TYPE_NAME 8 unsigned long LEAF_NODE 9 unsigned LEAF_NODE 9 long NAME 7 nc LEAF_NODE 8 nc LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t notify_lock ; VAR_DECL 6 ast_mutex_t notify_lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 notify_lock LEAF_NODE 8 notify_lock LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 mansession_datastores LEAF_NODE 5 , LEAF_NODE 5 ast_datastore LEAF_NODE 5 ) LEAF_NODE 5 datastores LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 mansession_session LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum mansession_message_parsing BASE_CLASSES { MESSAGE_OKAY , MESSAGE_LINE_TOO_LONG } ; CLASS_DEF 2 enum mansession_message_parsing BASE_CLASSES { MESSAGE_OKAY , MESSAGE_LINE_TOO_LONG } CLASS_DEF 3 enum mansession_message_parsing BASE_CLASSES { MESSAGE_OKAY , MESSAGE_LINE_TOO_LONG } LEAF_NODE 4 enum CLASS_NAME 4 mansession_message_parsing LEAF_NODE 5 mansession_message_parsing LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MESSAGE_OKAY , MESSAGE_LINE_TOO_LONG LEAF_NODE 5 MESSAGE_OKAY LEAF_NODE 5 , LEAF_NODE 5 MESSAGE_LINE_TOO_LONG LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct mansession BASE_CLASSES { struct mansession_session * session ; struct ast_iostream * stream ; struct ast_tcptls_session_instance * tcptls_session ; enum mansession_message_parsing parsing ; unsigned int write_error : 1 ; struct manager_custom_hook * hook ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct mansession BASE_CLASSES { struct mansession_session * session ; struct ast_iostream * stream ; struct ast_tcptls_session_instance * tcptls_session ; enum mansession_message_parsing parsing ; unsigned int write_error : 1 ; struct manager_custom_hook * hook ; ast_mutex_t lock ; } CLASS_DEF 3 struct mansession BASE_CLASSES { struct mansession_session * session ; struct ast_iostream * stream ; struct ast_tcptls_session_instance * tcptls_session ; enum mansession_message_parsing parsing ; unsigned int write_error : 1 ; struct manager_custom_hook * hook ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 mansession LEAF_NODE 5 mansession LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct mansession_session * session ; struct ast_iostream * stream ; struct ast_tcptls_session_instance * tcptls_session ; enum mansession_message_parsing parsing ; unsigned int write_error : 1 ; struct manager_custom_hook * hook ; ast_mutex_t lock ; SIMPLE_DECL 5 struct mansession_session * session ; VAR_DECL 6 struct mansession_session * session TYPE 7 struct mansession_session * TYPE_NAME 8 struct mansession_session LEAF_NODE 9 struct LEAF_NODE 9 mansession_session POINTER 8 * LEAF_NODE 9 * NAME 7 session LEAF_NODE 8 session LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_iostream * stream ; VAR_DECL 6 struct ast_iostream * stream TYPE 7 struct ast_iostream * TYPE_NAME 8 struct ast_iostream LEAF_NODE 9 struct LEAF_NODE 9 ast_iostream POINTER 8 * LEAF_NODE 9 * NAME 7 stream LEAF_NODE 8 stream LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_tcptls_session_instance * tcptls_session ; VAR_DECL 6 struct ast_tcptls_session_instance * tcptls_session TYPE 7 struct ast_tcptls_session_instance * TYPE_NAME 8 struct ast_tcptls_session_instance LEAF_NODE 9 struct LEAF_NODE 9 ast_tcptls_session_instance POINTER 8 * LEAF_NODE 9 * NAME 7 tcptls_session LEAF_NODE 8 tcptls_session LEAF_NODE 6 ; SIMPLE_DECL 5 enum mansession_message_parsing parsing ; VAR_DECL 6 enum mansession_message_parsing parsing TYPE 7 enum mansession_message_parsing TYPE_NAME 8 enum mansession_message_parsing LEAF_NODE 9 enum LEAF_NODE 9 mansession_message_parsing NAME 7 parsing LEAF_NODE 8 parsing LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 write_error : LEAF_NODE 6 write_error LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct manager_custom_hook * hook ; VAR_DECL 6 struct manager_custom_hook * hook TYPE 7 struct manager_custom_hook * TYPE_NAME 8 struct manager_custom_hook LEAF_NODE 9 struct LEAF_NODE 9 manager_custom_hook POINTER 8 * LEAF_NODE 9 * NAME 7 hook LEAF_NODE 8 hook LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct fast_originate_helper BASE_CLASSES { int timeout ; int format ; struct ast_format_cap * cap ; int early_media ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( app ) ; AST_STRING_FIELD ( appdata ) ; AST_STRING_FIELD ( cid_name ) ; AST_STRING_FIELD ( cid_num ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( idtext ) ; AST_STRING_FIELD ( account ) ; AST_STRING_FIELD ( channelid ) ; AST_STRING_FIELD ( otherchannelid ) ; ) ; int priority ; struct ast_variable * vars ; } ; CLASS_DEF 2 struct fast_originate_helper BASE_CLASSES { int timeout ; int format ; struct ast_format_cap * cap ; int early_media ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( app ) ; AST_STRING_FIELD ( appdata ) ; AST_STRING_FIELD ( cid_name ) ; AST_STRING_FIELD ( cid_num ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( idtext ) ; AST_STRING_FIELD ( account ) ; AST_STRING_FIELD ( channelid ) ; AST_STRING_FIELD ( otherchannelid ) ; ) ; int priority ; struct ast_variable * vars ; } CLASS_DEF 3 struct fast_originate_helper BASE_CLASSES { int timeout ; int format ; struct ast_format_cap * cap ; int early_media ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( app ) ; AST_STRING_FIELD ( appdata ) ; AST_STRING_FIELD ( cid_name ) ; AST_STRING_FIELD ( cid_num ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( idtext ) ; AST_STRING_FIELD ( account ) ; AST_STRING_FIELD ( channelid ) ; AST_STRING_FIELD ( otherchannelid ) ; ) ; int priority ; struct ast_variable * vars ; } LEAF_NODE 4 struct CLASS_NAME 4 fast_originate_helper LEAF_NODE 5 fast_originate_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int timeout ; int format ; struct ast_format_cap * cap ; int early_media ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( tech ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( app ) ; AST_STRING_FIELD ( appdata ) ; AST_STRING_FIELD ( cid_name ) ; AST_STRING_FIELD ( cid_num ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( idtext ) ; AST_STRING_FIELD ( account ) ; AST_STRING_FIELD ( channelid ) ; AST_STRING_FIELD ( otherchannelid ) ; ) ; int priority ; struct ast_variable * vars ; SIMPLE_DECL 5 int timeout ; VAR_DECL 6 int timeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timeout LEAF_NODE 8 timeout LEAF_NODE 6 ; SIMPLE_DECL 5 int format ; VAR_DECL 6 int format TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 format LEAF_NODE 8 format LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format_cap * cap ; VAR_DECL 6 struct ast_format_cap * cap TYPE 7 struct ast_format_cap * TYPE_NAME 8 struct ast_format_cap LEAF_NODE 9 struct LEAF_NODE 9 ast_format_cap POINTER 8 * LEAF_NODE 9 * NAME 7 cap LEAF_NODE 8 cap LEAF_NODE 6 ; SIMPLE_DECL 5 int early_media ; VAR_DECL 6 int early_media TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 early_media LEAF_NODE 8 early_media LEAF_NODE 6 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 tech LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 app LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appdata LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 cid_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 cid_num LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 idtext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 account LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 channelid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 otherchannelid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_variable * vars ; VAR_DECL 6 struct ast_variable * vars TYPE 7 struct ast_variable * TYPE_NAME 8 struct ast_variable LEAF_NODE 9 struct LEAF_NODE 9 ast_variable POINTER 8 * LEAF_NODE 9 * NAME 7 vars LEAF_NODE 8 vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void * LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void LEAF_NODE 3 * FUNCTION_NAME 2 fast_originate LEAF_NODE 3 fast_originate PARAMETER_LIST 2 ( void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct fast_originate_helper * in ; in = data ; VAR_DECL 4 struct fast_originate_helper * in ; in = data TYPE 5 struct fast_originate_helper * TYPE_NAME 6 struct fast_originate_helper LEAF_NODE 7 struct LEAF_NODE 7 fast_originate_helper POINTER 6 * LEAF_NODE 7 * NAME 5 in LEAF_NODE 6 in LEAF_NODE 5 ; INIT 5 in = data ASSIGN 6 in = data LVAL 7 in NAME 8 in LEAF_NODE 9 in ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; SIMPLE_DECL 3 int res ; VAR_DECL 4 int res TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 4 ; SIMPLE_DECL 3 int reason ; reason = 0 ; VAR_DECL 4 int reason ; reason = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 reason LEAF_NODE 6 reason LEAF_NODE 5 ; INIT 5 reason = 0 ASSIGN 6 reason = 0 LVAL 7 reason NAME 8 reason LEAF_NODE 9 reason ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_channel * chan ; chan = NULL , struct ast_channel * [ 1 ] chans ; INIT_DECL_LIST 4 struct ast_channel * chan ; chan = NULL , struct ast_channel * [ 1 ] chans VAR_DECL 5 struct ast_channel * chan ; chan = NULL TYPE 6 struct ast_channel * TYPE_NAME 7 struct ast_channel LEAF_NODE 8 struct LEAF_NODE 8 ast_channel POINTER 7 * LEAF_NODE 8 * NAME 6 chan LEAF_NODE 7 chan LEAF_NODE 6 ; INIT 6 chan = NULL ASSIGN 7 chan = NULL LVAL 8 chan NAME 9 chan LEAF_NODE 10 chan ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , VAR_DECL 5 struct ast_channel * [ 1 ] chans TYPE 6 struct ast_channel * [ 1 ] TYPE_NAME 7 struct ast_channel LEAF_NODE 8 struct LEAF_NODE 8 ast_channel POINTER 7 * LEAF_NODE 8 * TYPE_SUFFIX 7 [ 1 ] LEAF_NODE 8 [ FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ] NAME 6 chans LEAF_NODE 7 chans LEAF_NODE 4 ; SIMPLE_DECL 3 char [ AST_CHANNEL_NAME ] requested_channel ; VAR_DECL 4 char [ AST_CHANNEL_NAME ] requested_channel TYPE 5 char [ AST_CHANNEL_NAME ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ AST_CHANNEL_NAME ] LEAF_NODE 7 [ FIELD 7 AST_CHANNEL_NAME LEAF_NODE 8 AST_CHANNEL_NAME LEAF_NODE 7 ] NAME 5 requested_channel LEAF_NODE 6 requested_channel LEAF_NODE 4 ; LEAF_NODE 3 struct LEAF_NODE 3 ast_assigned_ids LEAF_NODE 3 assignedids LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 . LEAF_NODE 4 uniqueid LEAF_NODE 4 = LEAF_NODE 4 in LEAF_NODE 4 -> LEAF_NODE 4 channelid LEAF_NODE 4 , LEAF_NODE 4 . LEAF_NODE 4 uniqueid2 LEAF_NODE 4 = LEAF_NODE 4 in LEAF_NODE 4 -> LEAF_NODE 4 otherchannelid LEAF_NODE 3 } LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( in -> app ) EXPR 5 ! ast_strlen_zero ( in -> app ) UNARY_EXPR 6 ! ast_strlen_zero ( in -> app ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ast_strlen_zero ( in -> app ) CALLEE 8 ast_strlen_zero LEAF_NODE 9 ast_strlen_zero LEAF_NODE 8 ( ARGUMENT 8 in -> app FIELD 9 in -> app LEAF_NODE 10 in LEAF_NODE 10 -> LEAF_NODE 10 app LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 res = ast_pbx_outgoing_app ( in -> tech , in -> cap , in -> data , in -> timeout , in -> app , in -> appdata , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , & assignedids ) ; EXPR 7 res = ast_pbx_outgoing_app ( in -> tech , in -> cap , in -> data , in -> timeout , in -> app , in -> appdata , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , & assignedids ) ASSIGN 8 res = ast_pbx_outgoing_app ( in -> tech , in -> cap , in -> data , in -> timeout , in -> app , in -> appdata , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , & assignedids ) LVAL 9 res FIELD 10 res LEAF_NODE 11 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_pbx_outgoing_app ( in -> tech , in -> cap , in -> data , in -> timeout , in -> app , in -> appdata , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , & assignedids ) FUNCTION_CALL 10 ast_pbx_outgoing_app ( in -> tech , in -> cap , in -> data , in -> timeout , in -> app , in -> appdata , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , & assignedids ) CALLEE 11 ast_pbx_outgoing_app LEAF_NODE 12 ast_pbx_outgoing_app LEAF_NODE 11 ( ARGUMENT 11 in -> tech FIELD 12 in -> tech LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 tech LEAF_NODE 11 , ARGUMENT 11 in -> cap FIELD 12 in -> cap LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 cap LEAF_NODE 11 , ARGUMENT 11 in -> data FIELD 12 in -> data LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 data LEAF_NODE 11 , ARGUMENT 11 in -> timeout FIELD 12 in -> timeout LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 timeout LEAF_NODE 11 , ARGUMENT 11 in -> app FIELD 12 in -> app LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 app LEAF_NODE 11 , ARGUMENT 11 in -> appdata FIELD 12 in -> appdata LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 appdata LEAF_NODE 11 , ARGUMENT 11 & reason UNARY_EXPR 12 & reason UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 reason LEAF_NODE 14 reason LEAF_NODE 11 , ARGUMENT 11 AST_OUTGOING_WAIT FIELD 12 AST_OUTGOING_WAIT LEAF_NODE 13 AST_OUTGOING_WAIT LEAF_NODE 11 , ARGUMENT 11 S_OR ( in -> cid_num , NULL ) FUNCTION_CALL 12 S_OR ( in -> cid_num , NULL ) CALLEE 13 S_OR LEAF_NODE 14 S_OR LEAF_NODE 13 ( ARGUMENT 13 in -> cid_num FIELD 14 in -> cid_num LEAF_NODE 15 in LEAF_NODE 15 -> LEAF_NODE 15 cid_num LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 S_OR ( in -> cid_name , NULL ) FUNCTION_CALL 12 S_OR ( in -> cid_name , NULL ) CALLEE 13 S_OR LEAF_NODE 14 S_OR LEAF_NODE 13 ( ARGUMENT 13 in -> cid_name FIELD 14 in -> cid_name LEAF_NODE 15 in LEAF_NODE 15 -> LEAF_NODE 15 cid_name LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 in -> vars FIELD 12 in -> vars LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 vars LEAF_NODE 11 , ARGUMENT 11 in -> account FIELD 12 in -> account LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 account LEAF_NODE 11 , ARGUMENT 11 & chan UNARY_EXPR 12 & chan UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 chan LEAF_NODE 14 chan LEAF_NODE 11 , ARGUMENT 11 & assignedids UNARY_EXPR 12 & assignedids UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 assignedids LEAF_NODE 14 assignedids LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 res = ast_pbx_outgoing_exten ( in -> tech , in -> cap , in -> data , in -> timeout , in -> context , in -> exten , in -> priority , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , in -> early_media , & assignedids ) ; EXPR 7 res = ast_pbx_outgoing_exten ( in -> tech , in -> cap , in -> data , in -> timeout , in -> context , in -> exten , in -> priority , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , in -> early_media , & assignedids ) ASSIGN 8 res = ast_pbx_outgoing_exten ( in -> tech , in -> cap , in -> data , in -> timeout , in -> context , in -> exten , in -> priority , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , in -> early_media , & assignedids ) LVAL 9 res FIELD 10 res LEAF_NODE 11 res ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_pbx_outgoing_exten ( in -> tech , in -> cap , in -> data , in -> timeout , in -> context , in -> exten , in -> priority , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , in -> early_media , & assignedids ) FUNCTION_CALL 10 ast_pbx_outgoing_exten ( in -> tech , in -> cap , in -> data , in -> timeout , in -> context , in -> exten , in -> priority , & reason , AST_OUTGOING_WAIT , S_OR ( in -> cid_num , NULL ) , S_OR ( in -> cid_name , NULL ) , in -> vars , in -> account , & chan , in -> early_media , & assignedids ) CALLEE 11 ast_pbx_outgoing_exten LEAF_NODE 12 ast_pbx_outgoing_exten LEAF_NODE 11 ( ARGUMENT 11 in -> tech FIELD 12 in -> tech LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 tech LEAF_NODE 11 , ARGUMENT 11 in -> cap FIELD 12 in -> cap LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 cap LEAF_NODE 11 , ARGUMENT 11 in -> data FIELD 12 in -> data LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 data LEAF_NODE 11 , ARGUMENT 11 in -> timeout FIELD 12 in -> timeout LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 timeout LEAF_NODE 11 , ARGUMENT 11 in -> context FIELD 12 in -> context LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 context LEAF_NODE 11 , ARGUMENT 11 in -> exten FIELD 12 in -> exten LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 exten LEAF_NODE 11 , ARGUMENT 11 in -> priority FIELD 12 in -> priority LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 priority LEAF_NODE 11 , ARGUMENT 11 & reason UNARY_EXPR 12 & reason UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 reason LEAF_NODE 14 reason LEAF_NODE 11 , ARGUMENT 11 AST_OUTGOING_WAIT FIELD 12 AST_OUTGOING_WAIT LEAF_NODE 13 AST_OUTGOING_WAIT LEAF_NODE 11 , ARGUMENT 11 S_OR ( in -> cid_num , NULL ) FUNCTION_CALL 12 S_OR ( in -> cid_num , NULL ) CALLEE 13 S_OR LEAF_NODE 14 S_OR LEAF_NODE 13 ( ARGUMENT 13 in -> cid_num FIELD 14 in -> cid_num LEAF_NODE 15 in LEAF_NODE 15 -> LEAF_NODE 15 cid_num LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 S_OR ( in -> cid_name , NULL ) FUNCTION_CALL 12 S_OR ( in -> cid_name , NULL ) CALLEE 13 S_OR LEAF_NODE 14 S_OR LEAF_NODE 13 ( ARGUMENT 13 in -> cid_name FIELD 14 in -> cid_name LEAF_NODE 15 in LEAF_NODE 15 -> LEAF_NODE 15 cid_name LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 in -> vars FIELD 12 in -> vars LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 vars LEAF_NODE 11 , ARGUMENT 11 in -> account FIELD 12 in -> account LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 account LEAF_NODE 11 , ARGUMENT 11 & chan UNARY_EXPR 12 & chan UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 chan LEAF_NODE 14 chan LEAF_NODE 11 , ARGUMENT 11 in -> early_media FIELD 12 in -> early_media LEAF_NODE 13 in LEAF_NODE 13 -> LEAF_NODE 13 early_media LEAF_NODE 11 , ARGUMENT 11 & assignedids UNARY_EXPR 12 & assignedids UNARY_OPERATOR 13 & LEAF_NODE 14 & FIELD 13 assignedids LEAF_NODE 14 assignedids LEAF_NODE 11 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! chan EXPR 5 ! chan UNARY_EXPR 6 ! chan UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 snprintf ( requested_channel , AST_CHANNEL_NAME , \"%s/%s\" , in -> tech , in -> data ) ; EXPR 7 snprintf ( requested_channel , AST_CHANNEL_NAME , \"%s/%s\" , in -> tech , in -> data ) FUNCTION_CALL 8 snprintf ( requested_channel , AST_CHANNEL_NAME , \"%s/%s\" , in -> tech , in -> data ) CALLEE 9 snprintf LEAF_NODE 10 snprintf LEAF_NODE 9 ( ARGUMENT 9 requested_channel FIELD 10 requested_channel LEAF_NODE 11 requested_channel LEAF_NODE 9 , ARGUMENT 9 AST_CHANNEL_NAME FIELD 10 AST_CHANNEL_NAME LEAF_NODE 11 AST_CHANNEL_NAME LEAF_NODE 9 , ARGUMENT 9 \"%s/%s\" FIELD 10 \"%s/%s\" LEAF_NODE 11 \"%s/%s\" LEAF_NODE 9 , ARGUMENT 9 in -> tech FIELD 10 in -> tech LEAF_NODE 11 in LEAF_NODE 11 -> LEAF_NODE 11 tech LEAF_NODE 9 , ARGUMENT 9 in -> data FIELD 10 in -> data LEAF_NODE 11 in LEAF_NODE 11 -> LEAF_NODE 11 data LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 chans [ 0 ] = chan ; EXPR 4 chans [ 0 ] = chan ASSIGN 5 chans [ 0 ] = chan LVAL 6 chans [ 0 ] FIELD 7 chans [ 0 ] LEAF_NODE 8 chans LEAF_NODE 8 [ EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ] ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( in -> app ) EXPR 5 ! ast_strlen_zero ( in -> app ) UNARY_EXPR 6 ! ast_strlen_zero ( in -> app ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ast_strlen_zero ( in -> app ) CALLEE 8 ast_strlen_zero LEAF_NODE 9 ast_strlen_zero LEAF_NODE 8 ( ARGUMENT 8 in -> app FIELD 9 in -> app LEAF_NODE 10 in LEAF_NODE 10 -> LEAF_NODE 10 app LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 ast_manager_event_multichan LEAF_NODE 6 ( LEAF_NODE 6 EVENT_FLAG_CALL LEAF_NODE 6 , LEAF_NODE 6 \"OriginateResponse\" LEAF_NODE 6 , LEAF_NODE 6 chan LEAF_NODE 6 ? LABEL 6 1 : LEAF_NODE 7 1 LEAF_NODE 7 : LEAF_NODE 6 0 LEAF_NODE 6 , LEAF_NODE 6 chans LEAF_NODE 6 , LEAF_NODE 6 \"%s\" LEAF_NODE 6 \"Response: %s\\r\\n\" LEAF_NODE 6 \"Channel: %s\\r\\n\" LEAF_NODE 6 \"Application: %s\\r\\n\" LEAF_NODE 6 \"Data: %s\\r\\n\" LEAF_NODE 6 \"Reason: %d\\r\\n\" LEAF_NODE 6 \"Uniqueid: %s\\r\\n\" LEAF_NODE 6 \"CallerIDNum: %s\\r\\n\" LEAF_NODE 6 \"CallerIDName: %s\\r\\n\" LEAF_NODE 6 , LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 idtext LEAF_NODE 6 , LEAF_NODE 6 res LEAF_NODE 6 ? LEAF_NODE 6 \"Failure\" LEAF_NODE 6 : LEAF_NODE 6 \"Success\" LEAF_NODE 6 , LEAF_NODE 6 chan LEAF_NODE 6 ? LEAF_NODE 6 ast_channel_name LEAF_NODE 6 ( LEAF_NODE 6 chan LEAF_NODE 6 ) LEAF_NODE 6 : LEAF_NODE 6 requested_channel LEAF_NODE 6 , LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 app LEAF_NODE 6 , LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 appdata LEAF_NODE 6 , LEAF_NODE 6 reason LEAF_NODE 6 , LEAF_NODE 6 chan LEAF_NODE 6 ? LEAF_NODE 6 ast_channel_uniqueid LEAF_NODE 6 ( LEAF_NODE 6 chan LEAF_NODE 6 ) LEAF_NODE 6 : LEAF_NODE 6 S_OR LEAF_NODE 6 ( LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 channelid LEAF_NODE 6 , LEAF_NODE 6 \"<unknown>\" LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 S_OR LEAF_NODE 6 ( LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 cid_num LEAF_NODE 6 , LEAF_NODE 6 \"<unknown>\" LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 S_OR LEAF_NODE 6 ( LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 cid_name LEAF_NODE 6 , LEAF_NODE 6 \"<unknown>\" LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 LEAF_NODE 6 ast_manager_event_multichan LEAF_NODE 6 ( LEAF_NODE 6 EVENT_FLAG_CALL LEAF_NODE 6 , LEAF_NODE 6 \"OriginateResponse\" LEAF_NODE 6 , LEAF_NODE 6 chan LEAF_NODE 6 ? LABEL 6 1 : LEAF_NODE 7 1 LEAF_NODE 7 : LEAF_NODE 6 0 LEAF_NODE 6 , LEAF_NODE 6 chans LEAF_NODE 6 , LEAF_NODE 6 \"%s\" LEAF_NODE 6 \"Response: %s\\r\\n\" LEAF_NODE 6 \"Channel: %s\\r\\n\" LEAF_NODE 6 \"Context: %s\\r\\n\" LEAF_NODE 6 \"Exten: %s\\r\\n\" LEAF_NODE 6 \"Reason: %d\\r\\n\" LEAF_NODE 6 \"Uniqueid: %s\\r\\n\" LEAF_NODE 6 \"CallerIDNum: %s\\r\\n\" LEAF_NODE 6 \"CallerIDName: %s\\r\\n\" LEAF_NODE 6 , LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 idtext LEAF_NODE 6 , LEAF_NODE 6 res LEAF_NODE 6 ? LEAF_NODE 6 \"Failure\" LEAF_NODE 6 : LEAF_NODE 6 \"Success\" LEAF_NODE 6 , LEAF_NODE 6 chan LEAF_NODE 6 ? LEAF_NODE 6 ast_channel_name LEAF_NODE 6 ( LEAF_NODE 6 chan LEAF_NODE 6 ) LEAF_NODE 6 : LEAF_NODE 6 requested_channel LEAF_NODE 6 , LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 context LEAF_NODE 6 , LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 exten LEAF_NODE 6 , LEAF_NODE 6 reason LEAF_NODE 6 , LEAF_NODE 6 chan LEAF_NODE 6 ? LEAF_NODE 6 ast_channel_uniqueid LEAF_NODE 6 ( LEAF_NODE 6 chan LEAF_NODE 6 ) LEAF_NODE 6 : LEAF_NODE 6 S_OR LEAF_NODE 6 ( LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 channelid LEAF_NODE 6 , LEAF_NODE 6 \"<unknown>\" LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 S_OR LEAF_NODE 6 ( LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 cid_num LEAF_NODE 6 , LEAF_NODE 6 \"<unknown>\" LEAF_NODE 6 ) LEAF_NODE 6 , LEAF_NODE 6 S_OR LEAF_NODE 6 ( LEAF_NODE 6 in LEAF_NODE 6 -> LEAF_NODE 6 cid_name LEAF_NODE 6 , LEAF_NODE 6 \"<unknown>\" LEAF_NODE 6 ) LEAF_NODE 6 ) LEAF_NODE 6 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 chan EXPR 5 chan FIELD 6 chan LEAF_NODE 7 chan LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_channel_unlock ( chan ) ; EXPR 7 ast_channel_unlock ( chan ) FUNCTION_CALL 8 ast_channel_unlock ( chan ) CALLEE 9 ast_channel_unlock LEAF_NODE 10 ast_channel_unlock LEAF_NODE 9 ( ARGUMENT 9 chan FIELD 10 chan LEAF_NODE 11 chan LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_channel_unref ( chan ) ; EXPR 7 ast_channel_unref ( chan ) FUNCTION_CALL 8 ast_channel_unref ( chan ) CALLEE 9 ast_channel_unref LEAF_NODE 10 ast_channel_unref LEAF_NODE 9 ( ARGUMENT 9 chan FIELD 10 chan LEAF_NODE 11 chan LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 destroy_fast_originate_helper ( in ) ; EXPR 4 destroy_fast_originate_helper ( in ) FUNCTION_CALL 5 destroy_fast_originate_helper ( in ) CALLEE 6 destroy_fast_originate_helper LEAF_NODE 7 destroy_fast_originate_helper LEAF_NODE 6 ( ARGUMENT 6 in FIELD 7 in LEAF_NODE 8 in LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return NULL ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 NULL EXPR 5 NULL FIELD 6 NULL LEAF_NODE 7 NULL LEAF_NODE 4 ; LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 action_originate LEAF_NODE 3 action_originate PARAMETER_LIST 2 ( struct mansession * s , const struct message * m ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct mansession * s TYPE 4 struct mansession * TYPE_NAME 5 struct mansession LEAF_NODE 6 struct LEAF_NODE 6 mansession POINTER 5 * LEAF_NODE 6 * NAME 4 s LEAF_NODE 5 s LEAF_NODE 3 , PARAMETER_DECL 3 const struct message * m TYPE 4 const struct message * TYPE_NAME 5 const struct message LEAF_NODE 6 const LEAF_NODE 6 struct LEAF_NODE 6 message POINTER 5 * LEAF_NODE 6 * NAME 4 m LEAF_NODE 5 m LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 const char * name ; name = astman_get_header ( m , \"Channel\" ) ; VAR_DECL 4 const char * name ; name = astman_get_header ( m , \"Channel\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 name LEAF_NODE 6 name LEAF_NODE 5 ; INIT 5 name = astman_get_header ( m , \"Channel\" ) ASSIGN 6 name = astman_get_header ( m , \"Channel\" ) LVAL 7 name NAME 8 name LEAF_NODE 9 name ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Channel\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Channel\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Channel\" FIELD 10 \"Channel\" LEAF_NODE 11 \"Channel\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * exten ; exten = astman_get_header ( m , \"Exten\" ) ; VAR_DECL 4 const char * exten ; exten = astman_get_header ( m , \"Exten\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 exten LEAF_NODE 6 exten LEAF_NODE 5 ; INIT 5 exten = astman_get_header ( m , \"Exten\" ) ASSIGN 6 exten = astman_get_header ( m , \"Exten\" ) LVAL 7 exten NAME 8 exten LEAF_NODE 9 exten ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Exten\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Exten\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Exten\" FIELD 10 \"Exten\" LEAF_NODE 11 \"Exten\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * context ; context = astman_get_header ( m , \"Context\" ) ; VAR_DECL 4 const char * context ; context = astman_get_header ( m , \"Context\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 context LEAF_NODE 6 context LEAF_NODE 5 ; INIT 5 context = astman_get_header ( m , \"Context\" ) ASSIGN 6 context = astman_get_header ( m , \"Context\" ) LVAL 7 context NAME 8 context LEAF_NODE 9 context ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Context\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Context\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Context\" FIELD 10 \"Context\" LEAF_NODE 11 \"Context\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * priority ; priority = astman_get_header ( m , \"Priority\" ) ; VAR_DECL 4 const char * priority ; priority = astman_get_header ( m , \"Priority\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 priority LEAF_NODE 6 priority LEAF_NODE 5 ; INIT 5 priority = astman_get_header ( m , \"Priority\" ) ASSIGN 6 priority = astman_get_header ( m , \"Priority\" ) LVAL 7 priority NAME 8 priority LEAF_NODE 9 priority ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Priority\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Priority\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Priority\" FIELD 10 \"Priority\" LEAF_NODE 11 \"Priority\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * timeout ; timeout = astman_get_header ( m , \"Timeout\" ) ; VAR_DECL 4 const char * timeout ; timeout = astman_get_header ( m , \"Timeout\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 timeout LEAF_NODE 6 timeout LEAF_NODE 5 ; INIT 5 timeout = astman_get_header ( m , \"Timeout\" ) ASSIGN 6 timeout = astman_get_header ( m , \"Timeout\" ) LVAL 7 timeout NAME 8 timeout LEAF_NODE 9 timeout ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Timeout\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Timeout\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Timeout\" FIELD 10 \"Timeout\" LEAF_NODE 11 \"Timeout\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * callerid ; callerid = astman_get_header ( m , \"CallerID\" ) ; VAR_DECL 4 const char * callerid ; callerid = astman_get_header ( m , \"CallerID\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 callerid LEAF_NODE 6 callerid LEAF_NODE 5 ; INIT 5 callerid = astman_get_header ( m , \"CallerID\" ) ASSIGN 6 callerid = astman_get_header ( m , \"CallerID\" ) LVAL 7 callerid NAME 8 callerid LEAF_NODE 9 callerid ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"CallerID\" ) FUNCTION_CALL 8 astman_get_header ( m , \"CallerID\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"CallerID\" FIELD 10 \"CallerID\" LEAF_NODE 11 \"CallerID\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * account ; account = astman_get_header ( m , \"Account\" ) ; VAR_DECL 4 const char * account ; account = astman_get_header ( m , \"Account\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 account LEAF_NODE 6 account LEAF_NODE 5 ; INIT 5 account = astman_get_header ( m , \"Account\" ) ASSIGN 6 account = astman_get_header ( m , \"Account\" ) LVAL 7 account NAME 8 account LEAF_NODE 9 account ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Account\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Account\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Account\" FIELD 10 \"Account\" LEAF_NODE 11 \"Account\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * app ; app = astman_get_header ( m , \"Application\" ) ; VAR_DECL 4 const char * app ; app = astman_get_header ( m , \"Application\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 app LEAF_NODE 6 app LEAF_NODE 5 ; INIT 5 app = astman_get_header ( m , \"Application\" ) ASSIGN 6 app = astman_get_header ( m , \"Application\" ) LVAL 7 app NAME 8 app LEAF_NODE 9 app ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Application\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Application\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Application\" FIELD 10 \"Application\" LEAF_NODE 11 \"Application\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * appdata ; appdata = astman_get_header ( m , \"Data\" ) ; VAR_DECL 4 const char * appdata ; appdata = astman_get_header ( m , \"Data\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 appdata LEAF_NODE 6 appdata LEAF_NODE 5 ; INIT 5 appdata = astman_get_header ( m , \"Data\" ) ASSIGN 6 appdata = astman_get_header ( m , \"Data\" ) LVAL 7 appdata NAME 8 appdata LEAF_NODE 9 appdata ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Data\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Data\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Data\" FIELD 10 \"Data\" LEAF_NODE 11 \"Data\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * async ; async = astman_get_header ( m , \"Async\" ) ; VAR_DECL 4 const char * async ; async = astman_get_header ( m , \"Async\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 async LEAF_NODE 6 async LEAF_NODE 5 ; INIT 5 async = astman_get_header ( m , \"Async\" ) ASSIGN 6 async = astman_get_header ( m , \"Async\" ) LVAL 7 async NAME 8 async LEAF_NODE 9 async ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Async\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Async\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Async\" FIELD 10 \"Async\" LEAF_NODE 11 \"Async\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * id ; id = astman_get_header ( m , \"ActionID\" ) ; VAR_DECL 4 const char * id ; id = astman_get_header ( m , \"ActionID\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 id LEAF_NODE 6 id LEAF_NODE 5 ; INIT 5 id = astman_get_header ( m , \"ActionID\" ) ASSIGN 6 id = astman_get_header ( m , \"ActionID\" ) LVAL 7 id NAME 8 id LEAF_NODE 9 id ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"ActionID\" ) FUNCTION_CALL 8 astman_get_header ( m , \"ActionID\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"ActionID\" FIELD 10 \"ActionID\" LEAF_NODE 11 \"ActionID\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 const char * codecs ; codecs = astman_get_header ( m , \"Codecs\" ) ; VAR_DECL 4 const char * codecs ; codecs = astman_get_header ( m , \"Codecs\" ) TYPE 5 const char * TYPE_NAME 6 const char LEAF_NODE 7 const LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 codecs LEAF_NODE 6 codecs LEAF_NODE 5 ; INIT 5 codecs = astman_get_header ( m , \"Codecs\" ) ASSIGN 6 codecs = astman_get_header ( m , \"Codecs\" ) LVAL 7 codecs NAME 8 codecs LEAF_NODE 9 codecs ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_header ( m , \"Codecs\" ) FUNCTION_CALL 8 astman_get_header ( m , \"Codecs\" ) CALLEE 9 astman_get_header LEAF_NODE 10 astman_get_header LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Codecs\" FIELD 10 \"Codecs\" LEAF_NODE 11 \"Codecs\" LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 struct ast_variable * vars ; vars = astman_get_variables ( m ) ; VAR_DECL 4 struct ast_variable * vars ; vars = astman_get_variables ( m ) TYPE 5 struct ast_variable * TYPE_NAME 6 struct ast_variable LEAF_NODE 7 struct LEAF_NODE 7 ast_variable POINTER 6 * LEAF_NODE 7 * NAME 5 vars LEAF_NODE 6 vars LEAF_NODE 5 ; INIT 5 vars = astman_get_variables ( m ) ASSIGN 6 vars = astman_get_variables ( m ) LVAL 7 vars NAME 8 vars LEAF_NODE 9 vars ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 astman_get_variables ( m ) FUNCTION_CALL 8 astman_get_variables ( m ) CALLEE 9 astman_get_variables LEAF_NODE 10 astman_get_variables LEAF_NODE 9 ( ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 ) LEAF_NODE 4 ; SIMPLE_DECL 3 char * tech , char * data ; INIT_DECL_LIST 4 char * tech , char * data VAR_DECL 5 char * tech TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 tech LEAF_NODE 7 tech LEAF_NODE 5 , VAR_DECL 5 char * data TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 data LEAF_NODE 7 data LEAF_NODE 4 ; SIMPLE_DECL 3 char * l ; l = NULL , char * n ; n = NULL ; INIT_DECL_LIST 4 char * l ; l = NULL , char * n ; n = NULL VAR_DECL 5 char * l ; l = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 l LEAF_NODE 7 l LEAF_NODE 6 ; INIT 6 l = NULL ASSIGN 7 l = NULL LVAL 8 l NAME 9 l LEAF_NODE 10 l ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 5 , VAR_DECL 5 char * n ; n = NULL TYPE 6 char * TYPE_NAME 7 char LEAF_NODE 8 char POINTER 7 * LEAF_NODE 8 * NAME 6 n LEAF_NODE 7 n LEAF_NODE 6 ; INIT 6 n = NULL ASSIGN 7 n = NULL LVAL 8 n NAME 9 n LEAF_NODE 10 n ASSIGN_OP 8 = LEAF_NODE 9 = RVAL 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 4 ; SIMPLE_DECL 3 int pi ; pi = 0 ; VAR_DECL 4 int pi ; pi = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 pi LEAF_NODE 6 pi LEAF_NODE 5 ; INIT 5 pi = 0 ASSIGN 6 pi = 0 LVAL 7 pi NAME 8 pi LEAF_NODE 9 pi ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 int res ; VAR_DECL 4 int res TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 4 ; SIMPLE_DECL 3 int to ; to = 30000 ; VAR_DECL 4 int to ; to = 30000 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 to LEAF_NODE 6 to LEAF_NODE 5 ; INIT 5 to = 30000 ASSIGN 6 to = 30000 LVAL 7 to NAME 8 to LEAF_NODE 9 to ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 30000 FIELD 8 30000 LEAF_NODE 9 30000 LEAF_NODE 4 ; SIMPLE_DECL 3 int reason ; reason = 0 ; VAR_DECL 4 int reason ; reason = 0 TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 reason LEAF_NODE 6 reason LEAF_NODE 5 ; INIT 5 reason = 0 ASSIGN 6 reason = 0 LVAL 7 reason NAME 8 reason LEAF_NODE 9 reason ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 0 FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 256 ] tmp ; VAR_DECL 4 char [ 256 ] tmp TYPE 5 char [ 256 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 256 ] LEAF_NODE 7 [ FIELD 7 256 LEAF_NODE 8 256 LEAF_NODE 7 ] NAME 5 tmp LEAF_NODE 6 tmp LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 256 ] tmp2 ; VAR_DECL 4 char [ 256 ] tmp2 TYPE 5 char [ 256 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 256 ] LEAF_NODE 7 [ FIELD 7 256 LEAF_NODE 8 256 LEAF_NODE 7 ] NAME 5 tmp2 LEAF_NODE 6 tmp2 LEAF_NODE 4 ; SIMPLE_DECL 3 int format ; format = AST_FORMAT_SLINEAR ; VAR_DECL 4 int format ; format = AST_FORMAT_SLINEAR TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 format LEAF_NODE 6 format LEAF_NODE 5 ; INIT 5 format = AST_FORMAT_SLINEAR ASSIGN 6 format = AST_FORMAT_SLINEAR LVAL 7 format NAME 8 format LEAF_NODE 9 format ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 AST_FORMAT_SLINEAR FIELD 8 AST_FORMAT_SLINEAR LEAF_NODE 9 AST_FORMAT_SLINEAR LEAF_NODE 4 ; SIMPLE_DECL 3 pthread_t th ; VAR_DECL 4 pthread_t th TYPE 5 pthread_t TYPE_NAME 6 pthread_t LEAF_NODE 7 pthread_t NAME 5 th LEAF_NODE 6 th LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_strlen_zero ( name ) EXPR 5 ast_strlen_zero ( name ) FUNCTION_CALL 6 ast_strlen_zero ( name ) CALLEE 7 ast_strlen_zero LEAF_NODE 8 ast_strlen_zero LEAF_NODE 7 ( ARGUMENT 7 name FIELD 8 name LEAF_NODE 9 name LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"Channel not specified\" ) ; EXPR 7 astman_send_error ( s , m , \"Channel not specified\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"Channel not specified\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Channel not specified\" FIELD 10 \"Channel not specified\" LEAF_NODE 11 \"Channel not specified\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( priority ) && ( sscanf ( priority , \"%30d\" , & pi ) != 1 ) EXPR 5 ! ast_strlen_zero ( priority ) && ( sscanf ( priority , \"%30d\" , & pi ) != 1 ) AND 6 ! ast_strlen_zero ( priority ) && ( sscanf ( priority , \"%30d\" , & pi ) != 1 ) EXPR 7 ! ast_strlen_zero ( priority ) UNARY_EXPR 8 ! ast_strlen_zero ( priority ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ast_strlen_zero ( priority ) CALLEE 10 ast_strlen_zero LEAF_NODE 11 ast_strlen_zero LEAF_NODE 10 ( ARGUMENT 10 priority FIELD 11 priority LEAF_NODE 12 priority LEAF_NODE 10 ) LEAF_NODE 7 && EXPR 7 ( sscanf ( priority , \"%30d\" , & pi ) != 1 ) LEAF_NODE 8 ( FUNCTION_CALL 8 sscanf ( priority , \"%30d\" , & pi ) CALLEE 9 sscanf LEAF_NODE 10 sscanf LEAF_NODE 9 ( ARGUMENT 9 priority FIELD 10 priority LEAF_NODE 11 priority LEAF_NODE 9 , ARGUMENT 9 \"%30d\" FIELD 10 \"%30d\" LEAF_NODE 11 \"%30d\" LEAF_NODE 9 , ARGUMENT 9 & pi UNARY_EXPR 10 & pi UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 pi LEAF_NODE 12 pi LEAF_NODE 9 ) EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ( pi = ast_findlabel_extension ( NULL , context , exten , priority , NULL ) ) < 1 EXPR 8 ( pi = ast_findlabel_extension ( NULL , context , exten , priority , NULL ) ) < 1 LEAF_NODE 9 ( ASSIGN 9 pi = ast_findlabel_extension ( NULL , context , exten , priority , NULL ) LVAL 10 pi FIELD 11 pi LEAF_NODE 12 pi ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ast_findlabel_extension ( NULL , context , exten , priority , NULL ) FUNCTION_CALL 11 ast_findlabel_extension ( NULL , context , exten , priority , NULL ) CALLEE 12 ast_findlabel_extension LEAF_NODE 13 ast_findlabel_extension LEAF_NODE 12 ( ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 , ARGUMENT 12 context FIELD 13 context LEAF_NODE 14 context LEAF_NODE 12 , ARGUMENT 12 exten FIELD 13 exten LEAF_NODE 14 exten LEAF_NODE 12 , ARGUMENT 12 priority FIELD 13 priority LEAF_NODE 14 priority LEAF_NODE 12 , ARGUMENT 12 NULL FIELD 13 NULL LEAF_NODE 14 NULL LEAF_NODE 12 ) LEAF_NODE 9 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 astman_send_error ( s , m , \"Invalid priority\" ) ; EXPR 10 astman_send_error ( s , m , \"Invalid priority\" ) FUNCTION_CALL 11 astman_send_error ( s , m , \"Invalid priority\" ) CALLEE 12 astman_send_error LEAF_NODE 13 astman_send_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 m FIELD 13 m LEAF_NODE 14 m LEAF_NODE 12 , ARGUMENT 12 \"Invalid priority\" FIELD 13 \"Invalid priority\" LEAF_NODE 14 \"Invalid priority\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( timeout ) && ( sscanf ( timeout , \"%30d\" , & to ) != 1 ) EXPR 5 ! ast_strlen_zero ( timeout ) && ( sscanf ( timeout , \"%30d\" , & to ) != 1 ) AND 6 ! ast_strlen_zero ( timeout ) && ( sscanf ( timeout , \"%30d\" , & to ) != 1 ) EXPR 7 ! ast_strlen_zero ( timeout ) UNARY_EXPR 8 ! ast_strlen_zero ( timeout ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ast_strlen_zero ( timeout ) CALLEE 10 ast_strlen_zero LEAF_NODE 11 ast_strlen_zero LEAF_NODE 10 ( ARGUMENT 10 timeout FIELD 11 timeout LEAF_NODE 12 timeout LEAF_NODE 10 ) LEAF_NODE 7 && EXPR 7 ( sscanf ( timeout , \"%30d\" , & to ) != 1 ) LEAF_NODE 8 ( FUNCTION_CALL 8 sscanf ( timeout , \"%30d\" , & to ) CALLEE 9 sscanf LEAF_NODE 10 sscanf LEAF_NODE 9 ( ARGUMENT 9 timeout FIELD 10 timeout LEAF_NODE 11 timeout LEAF_NODE 9 , ARGUMENT 9 \"%30d\" FIELD 10 \"%30d\" LEAF_NODE 11 \"%30d\" LEAF_NODE 9 , ARGUMENT 9 & to UNARY_EXPR 10 & to UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 to LEAF_NODE 12 to LEAF_NODE 9 ) EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"Invalid timeout\" ) ; EXPR 7 astman_send_error ( s , m , \"Invalid timeout\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"Invalid timeout\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Invalid timeout\" FIELD 10 \"Invalid timeout\" LEAF_NODE 11 \"Invalid timeout\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_copy_string ( tmp , name , sizeof ( tmp ) ) ; EXPR 4 ast_copy_string ( tmp , name , sizeof ( tmp ) ) FUNCTION_CALL 5 ast_copy_string ( tmp , name , sizeof ( tmp ) ) CALLEE 6 ast_copy_string LEAF_NODE 7 ast_copy_string LEAF_NODE 6 ( ARGUMENT 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 6 , ARGUMENT 6 name FIELD 7 name LEAF_NODE 8 name LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmp ) FUNCTION_CALL 7 sizeof ( tmp ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 tech = tmp ; EXPR 4 tech = tmp ASSIGN 5 tech = tmp LVAL 6 tech FIELD 7 tech LEAF_NODE 8 tech ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 tmp FIELD 7 tmp LEAF_NODE 8 tmp LEAF_NODE 4 ; EXPR_STATEMENT 3 data = strchr ( tmp , '/' ) ; EXPR 4 data = strchr ( tmp , '/' ) ASSIGN 5 data = strchr ( tmp , '/' ) LVAL 6 data FIELD 7 data LEAF_NODE 8 data ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 strchr ( tmp , '/' ) FUNCTION_CALL 7 strchr ( tmp , '/' ) CALLEE 8 strchr LEAF_NODE 9 strchr LEAF_NODE 8 ( ARGUMENT 8 tmp FIELD 9 tmp LEAF_NODE 10 tmp LEAF_NODE 8 , ARGUMENT 8 '/' FIELD 9 '/' LEAF_NODE 10 '/' LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! data EXPR 5 ! data UNARY_EXPR 6 ! data UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 data LEAF_NODE 8 data LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 astman_send_error ( s , m , \"Invalid channel\" ) ; EXPR 7 astman_send_error ( s , m , \"Invalid channel\" ) FUNCTION_CALL 8 astman_send_error ( s , m , \"Invalid channel\" ) CALLEE 9 astman_send_error LEAF_NODE 10 astman_send_error LEAF_NODE 9 ( ARGUMENT 9 s FIELD 10 s LEAF_NODE 11 s LEAF_NODE 9 , ARGUMENT 9 m FIELD 10 m LEAF_NODE 11 m LEAF_NODE 9 , ARGUMENT 9 \"Invalid channel\" FIELD 10 \"Invalid channel\" LEAF_NODE 11 \"Invalid channel\" LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 * data ++ = '\\0' ; EXPR 4 * data ++ = '\\0' ASSIGN 5 * data ++ = '\\0' LVAL 6 * data ++ UNARY_EXPR 7 * data ++ UNARY_OPERATOR 8 * LEAF_NODE 9 * FIELD 8 data ++ LEAF_NODE 9 data LEAF_NODE 9 ++ ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 '\\0' FIELD 7 '\\0' LEAF_NODE 8 '\\0' LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_copy_string ( tmp2 , callerid , sizeof ( tmp2 ) ) ; EXPR 4 ast_copy_string ( tmp2 , callerid , sizeof ( tmp2 ) ) FUNCTION_CALL 5 ast_copy_string ( tmp2 , callerid , sizeof ( tmp2 ) ) CALLEE 6 ast_copy_string LEAF_NODE 7 ast_copy_string LEAF_NODE 6 ( ARGUMENT 6 tmp2 FIELD 7 tmp2 LEAF_NODE 8 tmp2 LEAF_NODE 6 , ARGUMENT 6 callerid FIELD 7 callerid LEAF_NODE 8 callerid LEAF_NODE 6 , ARGUMENT 6 sizeof ( tmp2 ) FUNCTION_CALL 7 sizeof ( tmp2 ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 tmp2 FIELD 9 tmp2 LEAF_NODE 10 tmp2 LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_callerid_parse ( tmp2 , & n , & l ) ; EXPR 4 ast_callerid_parse ( tmp2 , & n , & l ) FUNCTION_CALL 5 ast_callerid_parse ( tmp2 , & n , & l ) CALLEE 6 ast_callerid_parse LEAF_NODE 7 ast_callerid_parse LEAF_NODE 6 ( ARGUMENT 6 tmp2 FIELD 7 tmp2 LEAF_NODE 8 tmp2 LEAF_NODE 6 , ARGUMENT 6 & n UNARY_EXPR 7 & n UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 n LEAF_NODE 9 n LEAF_NODE 6 , ARGUMENT 6 & l UNARY_EXPR 7 & l UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 l LEAF_NODE 9 l LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 n EXPR 5 n FIELD 6 n LEAF_NODE 7 n LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ast_strlen_zero ( n ) EXPR 8 ast_strlen_zero ( n ) FUNCTION_CALL 9 ast_strlen_zero ( n ) CALLEE 10 ast_strlen_zero LEAF_NODE 11 ast_strlen_zero LEAF_NODE 10 ( ARGUMENT 10 n FIELD 11 n LEAF_NODE 12 n LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 n = NULL ; EXPR 9 n = NULL ASSIGN 10 n = NULL LVAL 11 n FIELD 12 n LEAF_NODE 13 n ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 l EXPR 5 l FIELD 6 l LEAF_NODE 7 l LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_shrink_phone_number ( l ) ; EXPR 7 ast_shrink_phone_number ( l ) FUNCTION_CALL 8 ast_shrink_phone_number ( l ) CALLEE 9 ast_shrink_phone_number LEAF_NODE 10 ast_shrink_phone_number LEAF_NODE 9 ( ARGUMENT 9 l FIELD 10 l LEAF_NODE 11 l LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ast_strlen_zero ( l ) EXPR 8 ast_strlen_zero ( l ) FUNCTION_CALL 9 ast_strlen_zero ( l ) CALLEE 10 ast_strlen_zero LEAF_NODE 11 ast_strlen_zero LEAF_NODE 10 ( ARGUMENT 10 l FIELD 11 l LEAF_NODE 12 l LEAF_NODE 10 ) LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 l = NULL ; EXPR 9 l = NULL ASSIGN 10 l = NULL LVAL 11 l FIELD 12 l LEAF_NODE 13 l ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 NULL FIELD 12 NULL LEAF_NODE 13 NULL LEAF_NODE 9 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( codecs ) EXPR 5 ! ast_strlen_zero ( codecs ) UNARY_EXPR 6 ! ast_strlen_zero ( codecs ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ast_strlen_zero ( codecs ) CALLEE 8 ast_strlen_zero LEAF_NODE 9 ast_strlen_zero LEAF_NODE 8 ( ARGUMENT 8 codecs FIELD 9 codecs LEAF_NODE 10 codecs LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 format = 0 ; EXPR 7 format = 0 ASSIGN 8 format = 0 LVAL 9 format FIELD 10 format LEAF_NODE 11 format ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_parse_allow_disallow ( NULL , & format , codecs , 1 ) ; EXPR 7 ast_parse_allow_disallow ( NULL , & format , codecs , 1 ) FUNCTION_CALL 8 ast_parse_allow_disallow ( NULL , & format , codecs , 1 ) CALLEE 9 ast_parse_allow_disallow LEAF_NODE 10 ast_parse_allow_disallow LEAF_NODE 9 ( ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 & format UNARY_EXPR 10 & format UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 format LEAF_NODE 12 format LEAF_NODE 9 , ARGUMENT 9 codecs FIELD 10 codecs LEAF_NODE 11 codecs LEAF_NODE 9 , ARGUMENT 9 1 FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ast_true ( async ) EXPR 5 ast_true ( async ) FUNCTION_CALL 6 ast_true ( async ) CALLEE 7 ast_true LEAF_NODE 8 ast_true LEAF_NODE 7 ( ARGUMENT 7 async FIELD 8 async LEAF_NODE 9 async LEAF_NODE 7 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 struct fast_originate_helper * fast ; fast = ast_calloc ( 1 , sizeof ( * fast ) ) ; VAR_DECL 7 struct fast_originate_helper * fast ; fast = ast_calloc ( 1 , sizeof ( * fast ) ) TYPE 8 struct fast_originate_helper * TYPE_NAME 9 struct fast_originate_helper LEAF_NODE 10 struct LEAF_NODE 10 fast_originate_helper POINTER 9 * LEAF_NODE 10 * NAME 8 fast LEAF_NODE 9 fast LEAF_NODE 8 ; INIT 8 fast = ast_calloc ( 1 , sizeof ( * fast ) ) ASSIGN 9 fast = ast_calloc ( 1 , sizeof ( * fast ) ) LVAL 10 fast NAME 11 fast LEAF_NODE 12 fast ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ast_calloc ( 1 , sizeof ( * fast ) ) FUNCTION_CALL 11 ast_calloc ( 1 , sizeof ( * fast ) ) CALLEE 12 ast_calloc LEAF_NODE 13 ast_calloc LEAF_NODE 12 ( ARGUMENT 12 1 FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 12 , ARGUMENT 12 sizeof ( * fast ) FUNCTION_CALL 13 sizeof ( * fast ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 * fast UNARY_EXPR 15 * fast UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 fast LEAF_NODE 17 fast LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ! fast EXPR 8 ! fast UNARY_EXPR 9 ! fast UNARY_OPERATOR 10 ! LEAF_NODE 11 ! FIELD 10 fast LEAF_NODE 11 fast LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 res = - 1 ; EXPR 10 res = - 1 ASSIGN 11 res = - 1 LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 - 1 UNARY_EXPR 13 - 1 UNARY_OPERATOR 14 - LEAF_NODE 15 - FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 10 ; LEAF_NODE 8 } SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ! ast_strlen_zero ( id ) EXPR 11 ! ast_strlen_zero ( id ) UNARY_EXPR 12 ! ast_strlen_zero ( id ) UNARY_OPERATOR 13 ! LEAF_NODE 14 ! FUNCTION_CALL 13 ast_strlen_zero ( id ) CALLEE 14 ast_strlen_zero LEAF_NODE 15 ast_strlen_zero LEAF_NODE 14 ( ARGUMENT 14 id FIELD 15 id LEAF_NODE 16 id LEAF_NODE 14 ) LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 snprintf ( fast -> idtext , sizeof ( fast -> idtext ) , \"ActionID: %s\" , id ) ; EXPR 12 snprintf ( fast -> idtext , sizeof ( fast -> idtext ) , \"ActionID: %s\" , id ) FUNCTION_CALL 13 snprintf ( fast -> idtext , sizeof ( fast -> idtext ) , \"ActionID: %s\" , id ) CALLEE 14 snprintf LEAF_NODE 15 snprintf LEAF_NODE 14 ( ARGUMENT 14 fast -> idtext FIELD 15 fast -> idtext LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 idtext LEAF_NODE 14 , ARGUMENT 14 sizeof ( fast -> idtext ) FUNCTION_CALL 15 sizeof ( fast -> idtext ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 fast -> idtext FIELD 17 fast -> idtext LEAF_NODE 18 fast LEAF_NODE 18 -> LEAF_NODE 18 idtext LEAF_NODE 16 ) LEAF_NODE 14 , ARGUMENT 14 \"ActionID: %s\" FIELD 15 \"ActionID: %s\" LEAF_NODE 16 \"ActionID: %s\" LEAF_NODE 14 , ARGUMENT 14 id FIELD 15 id LEAF_NODE 16 id LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> tech , tech , sizeof ( fast -> tech ) ) ; EXPR 10 ast_copy_string ( fast -> tech , tech , sizeof ( fast -> tech ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> tech , tech , sizeof ( fast -> tech ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> tech FIELD 13 fast -> tech LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 tech LEAF_NODE 12 , ARGUMENT 12 tech FIELD 13 tech LEAF_NODE 14 tech LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> tech ) FUNCTION_CALL 13 sizeof ( fast -> tech ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> tech FIELD 15 fast -> tech LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 tech LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> data , data , sizeof ( fast -> data ) ) ; EXPR 10 ast_copy_string ( fast -> data , data , sizeof ( fast -> data ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> data , data , sizeof ( fast -> data ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> data FIELD 13 fast -> data LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 data FIELD 13 data LEAF_NODE 14 data LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> data ) FUNCTION_CALL 13 sizeof ( fast -> data ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> data FIELD 15 fast -> data LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 data LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> app , app , sizeof ( fast -> app ) ) ; EXPR 10 ast_copy_string ( fast -> app , app , sizeof ( fast -> app ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> app , app , sizeof ( fast -> app ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> app FIELD 13 fast -> app LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 app LEAF_NODE 12 , ARGUMENT 12 app FIELD 13 app LEAF_NODE 14 app LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> app ) FUNCTION_CALL 13 sizeof ( fast -> app ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> app FIELD 15 fast -> app LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 app LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> appdata , appdata , sizeof ( fast -> appdata ) ) ; EXPR 10 ast_copy_string ( fast -> appdata , appdata , sizeof ( fast -> appdata ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> appdata , appdata , sizeof ( fast -> appdata ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> appdata FIELD 13 fast -> appdata LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 appdata LEAF_NODE 12 , ARGUMENT 12 appdata FIELD 13 appdata LEAF_NODE 14 appdata LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> appdata ) FUNCTION_CALL 13 sizeof ( fast -> appdata ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> appdata FIELD 15 fast -> appdata LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 appdata LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 l EXPR 11 l FIELD 12 l LEAF_NODE 13 l LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 ast_copy_string ( fast -> cid_num , l , sizeof ( fast -> cid_num ) ) ; EXPR 12 ast_copy_string ( fast -> cid_num , l , sizeof ( fast -> cid_num ) ) FUNCTION_CALL 13 ast_copy_string ( fast -> cid_num , l , sizeof ( fast -> cid_num ) ) CALLEE 14 ast_copy_string LEAF_NODE 15 ast_copy_string LEAF_NODE 14 ( ARGUMENT 14 fast -> cid_num FIELD 15 fast -> cid_num LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 cid_num LEAF_NODE 14 , ARGUMENT 14 l FIELD 15 l LEAF_NODE 16 l LEAF_NODE 14 , ARGUMENT 14 sizeof ( fast -> cid_num ) FUNCTION_CALL 15 sizeof ( fast -> cid_num ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 fast -> cid_num FIELD 17 fast -> cid_num LEAF_NODE 18 fast LEAF_NODE 18 -> LEAF_NODE 18 cid_num LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 n EXPR 11 n FIELD 12 n LEAF_NODE 13 n LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 ast_copy_string ( fast -> cid_name , n , sizeof ( fast -> cid_name ) ) ; EXPR 12 ast_copy_string ( fast -> cid_name , n , sizeof ( fast -> cid_name ) ) FUNCTION_CALL 13 ast_copy_string ( fast -> cid_name , n , sizeof ( fast -> cid_name ) ) CALLEE 14 ast_copy_string LEAF_NODE 15 ast_copy_string LEAF_NODE 14 ( ARGUMENT 14 fast -> cid_name FIELD 15 fast -> cid_name LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 cid_name LEAF_NODE 14 , ARGUMENT 14 n FIELD 15 n LEAF_NODE 16 n LEAF_NODE 14 , ARGUMENT 14 sizeof ( fast -> cid_name ) FUNCTION_CALL 15 sizeof ( fast -> cid_name ) CALLEE 16 sizeof LEAF_NODE 17 sizeof LEAF_NODE 16 ( ARGUMENT 16 fast -> cid_name FIELD 17 fast -> cid_name LEAF_NODE 18 fast LEAF_NODE 18 -> LEAF_NODE 18 cid_name LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 9 fast -> vars = vars ; EXPR 10 fast -> vars = vars ASSIGN 11 fast -> vars = vars LVAL 12 fast -> vars FIELD 13 fast -> vars LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 vars ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 vars FIELD 13 vars LEAF_NODE 14 vars LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> context , context , sizeof ( fast -> context ) ) ; EXPR 10 ast_copy_string ( fast -> context , context , sizeof ( fast -> context ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> context , context , sizeof ( fast -> context ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> context FIELD 13 fast -> context LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 context LEAF_NODE 12 , ARGUMENT 12 context FIELD 13 context LEAF_NODE 14 context LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> context ) FUNCTION_CALL 13 sizeof ( fast -> context ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> context FIELD 15 fast -> context LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 context LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> exten , exten , sizeof ( fast -> exten ) ) ; EXPR 10 ast_copy_string ( fast -> exten , exten , sizeof ( fast -> exten ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> exten , exten , sizeof ( fast -> exten ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> exten FIELD 13 fast -> exten LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 exten LEAF_NODE 12 , ARGUMENT 12 exten FIELD 13 exten LEAF_NODE 14 exten LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> exten ) FUNCTION_CALL 13 sizeof ( fast -> exten ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> exten FIELD 15 fast -> exten LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 exten LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 ast_copy_string ( fast -> account , account , sizeof ( fast -> account ) ) ; EXPR 10 ast_copy_string ( fast -> account , account , sizeof ( fast -> account ) ) FUNCTION_CALL 11 ast_copy_string ( fast -> account , account , sizeof ( fast -> account ) ) CALLEE 12 ast_copy_string LEAF_NODE 13 ast_copy_string LEAF_NODE 12 ( ARGUMENT 12 fast -> account FIELD 13 fast -> account LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 account LEAF_NODE 12 , ARGUMENT 12 account FIELD 13 account LEAF_NODE 14 account LEAF_NODE 12 , ARGUMENT 12 sizeof ( fast -> account ) FUNCTION_CALL 13 sizeof ( fast -> account ) CALLEE 14 sizeof LEAF_NODE 15 sizeof LEAF_NODE 14 ( ARGUMENT 14 fast -> account FIELD 15 fast -> account LEAF_NODE 16 fast LEAF_NODE 16 -> LEAF_NODE 16 account LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; EXPR_STATEMENT 9 fast -> format = format ; EXPR 10 fast -> format = format ASSIGN 11 fast -> format = format LVAL 12 fast -> format FIELD 13 fast -> format LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 format ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 format FIELD 13 format LEAF_NODE 14 format LEAF_NODE 10 ; EXPR_STATEMENT 9 fast -> timeout = to ; EXPR 10 fast -> timeout = to ASSIGN 11 fast -> timeout = to LVAL 12 fast -> timeout FIELD 13 fast -> timeout LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 timeout ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 to FIELD 13 to LEAF_NODE 14 to LEAF_NODE 10 ; EXPR_STATEMENT 9 fast -> priority = pi ; EXPR 10 fast -> priority = pi ASSIGN 11 fast -> priority = pi LVAL 12 fast -> priority FIELD 13 fast -> priority LEAF_NODE 14 fast LEAF_NODE 14 -> LEAF_NODE 14 priority ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 pi FIELD 13 pi LEAF_NODE 14 pi LEAF_NODE 10 ; SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 ast_pthread_create_detached ( & th , NULL , fast_originate , fast ) EXPR 11 ast_pthread_create_detached ( & th , NULL , fast_originate , fast ) FUNCTION_CALL 12 ast_pthread_create_detached ( & th , NULL , fast_originate , fast ) CALLEE 13 ast_pthread_create_detached LEAF_NODE 14 ast_pthread_create_detached LEAF_NODE 13 ( ARGUMENT 13 & th UNARY_EXPR 14 & th UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 th LEAF_NODE 16 th LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 , ARGUMENT 13 fast_originate FIELD 14 fast_originate LEAF_NODE 15 fast_originate LEAF_NODE 13 , ARGUMENT 13 fast FIELD 14 fast LEAF_NODE 15 fast LEAF_NODE 13 ) LEAF_NODE 10 ) STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 ast_free ( fast ) ; EXPR 13 ast_free ( fast ) FUNCTION_CALL 14 ast_free ( fast ) CALLEE 15 ast_free LEAF_NODE 16 ast_free LEAF_NODE 15 ( ARGUMENT 15 fast FIELD 16 fast LEAF_NODE 17 fast LEAF_NODE 15 ) LEAF_NODE 13 ; EXPR_STATEMENT 12 res = - 1 ; EXPR 13 res = - 1 ASSIGN 14 res = - 1 LVAL 15 res FIELD 16 res LEAF_NODE 17 res ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 - 1 UNARY_EXPR 16 - 1 UNARY_OPERATOR 17 - LEAF_NODE 18 - FIELD 17 1 LEAF_NODE 18 1 LEAF_NODE 13 ; LEAF_NODE 11 } SELECTION 9 KEYWORD 10 else LEAF_NODE 11 else STATEMENTS 10 LEAF_NODE 11 { STATEMENTS 11 EXPR_STATEMENT 12 res = 0 ; EXPR 13 res = 0 ASSIGN 14 res = 0 LVAL 15 res FIELD 16 res LEAF_NODE 17 res ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 0 FIELD 16 0 LEAF_NODE 17 0 LEAF_NODE 13 ; LEAF_NODE 11 } LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ! ast_strlen_zero ( app ) EXPR 7 ! ast_strlen_zero ( app ) UNARY_EXPR 8 ! ast_strlen_zero ( app ) UNARY_OPERATOR 9 ! LEAF_NODE 10 ! FUNCTION_CALL 9 ast_strlen_zero ( app ) CALLEE 10 ast_strlen_zero LEAF_NODE 11 ast_strlen_zero LEAF_NODE 10 ( ARGUMENT 10 app FIELD 11 app LEAF_NODE 12 app LEAF_NODE 10 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! ( s -> session -> writeperm & EVENT_FLAG_SYSTEM ) && ( strcasestr ( app , \"system\" ) == 0 || strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) ) EXPR 10 ! ( s -> session -> writeperm & EVENT_FLAG_SYSTEM ) && ( strcasestr ( app , \"system\" ) == 0 || strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) ) AND 11 ! ( s -> session -> writeperm & EVENT_FLAG_SYSTEM ) && ( strcasestr ( app , \"system\" ) == 0 || strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) ) EXPR 12 ! ( s -> session -> writeperm & EVENT_FLAG_SYSTEM ) UNARY_EXPR 13 ! ( s -> session -> writeperm & EVENT_FLAG_SYSTEM ) UNARY_OPERATOR 14 ! LEAF_NODE 15 ! LEAF_NODE 14 ( FIELD 14 s -> session -> writeperm LEAF_NODE 15 s LEAF_NODE 15 -> LEAF_NODE 15 session LEAF_NODE 15 -> LEAF_NODE 15 writeperm LEAF_NODE 14 & FIELD 14 EVENT_FLAG_SYSTEM LEAF_NODE 15 EVENT_FLAG_SYSTEM LEAF_NODE 14 ) LEAF_NODE 12 && EXPR 12 ( strcasestr ( app , \"system\" ) == 0 || strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) ) LEAF_NODE 13 ( OR 13 strcasestr ( app , \"system\" ) == 0 || strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) EXPR 14 strcasestr ( app , \"system\" ) == 0 FUNCTION_CALL 15 strcasestr ( app , \"system\" ) CALLEE 16 strcasestr LEAF_NODE 17 strcasestr LEAF_NODE 16 ( ARGUMENT 16 app FIELD 17 app LEAF_NODE 18 app LEAF_NODE 16 , ARGUMENT 16 \"system\" FIELD 17 \"system\" LEAF_NODE 18 \"system\" LEAF_NODE 16 ) EQ_OPERATOR 15 == LEAF_NODE 16 == FIELD 15 0 LEAF_NODE 16 0 LEAF_NODE 14 || EXPR 14 strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) OR 15 strcasestr ( app , \"exec\" ) || strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) EXPR 16 strcasestr ( app , \"exec\" ) FUNCTION_CALL 17 strcasestr ( app , \"exec\" ) CALLEE 18 strcasestr LEAF_NODE 19 strcasestr LEAF_NODE 18 ( ARGUMENT 18 app FIELD 19 app LEAF_NODE 20 app LEAF_NODE 18 , ARGUMENT 18 \"exec\" FIELD 19 \"exec\" LEAF_NODE 20 \"exec\" LEAF_NODE 18 ) LEAF_NODE 16 || EXPR 16 strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) OR 17 strcasestr ( app , \"agi\" ) || strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) EXPR 18 strcasestr ( app , \"agi\" ) FUNCTION_CALL 19 strcasestr ( app , \"agi\" ) CALLEE 20 strcasestr LEAF_NODE 21 strcasestr LEAF_NODE 20 ( ARGUMENT 20 app FIELD 21 app LEAF_NODE 22 app LEAF_NODE 20 , ARGUMENT 20 \"agi\" FIELD 21 \"agi\" LEAF_NODE 22 \"agi\" LEAF_NODE 20 ) LEAF_NODE 18 || EXPR 18 strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) OR 19 strstr ( appdata , \"SHELL\" ) || strstr ( appdata , \"EVAL\" ) EXPR 20 strstr ( appdata , \"SHELL\" ) FUNCTION_CALL 21 strstr ( appdata , \"SHELL\" ) CALLEE 22 strstr LEAF_NODE 23 strstr LEAF_NODE 22 ( ARGUMENT 22 appdata FIELD 23 appdata LEAF_NODE 24 appdata LEAF_NODE 22 , ARGUMENT 22 \"SHELL\" FIELD 23 \"SHELL\" LEAF_NODE 24 \"SHELL\" LEAF_NODE 22 ) LEAF_NODE 20 || EXPR 20 strstr ( appdata , \"EVAL\" ) FUNCTION_CALL 21 strstr ( appdata , \"EVAL\" ) CALLEE 22 strstr LEAF_NODE 23 strstr LEAF_NODE 22 ( ARGUMENT 22 appdata FIELD 23 appdata LEAF_NODE 24 appdata LEAF_NODE 22 , ARGUMENT 22 \"EVAL\" FIELD 23 \"EVAL\" LEAF_NODE 24 \"EVAL\" LEAF_NODE 22 ) LEAF_NODE 13 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 astman_send_error ( s , m , \"Originate with certain 'Application' arguments requires the additional System privilege, which you do not have.\" ) ; EXPR 12 astman_send_error ( s , m , \"Originate with certain 'Application' arguments requires the additional System privilege, which you do not have.\" ) FUNCTION_CALL 13 astman_send_error ( s , m , \"Originate with certain 'Application' arguments requires the additional System privilege, which you do not have.\" ) CALLEE 14 astman_send_error LEAF_NODE 15 astman_send_error LEAF_NODE 14 ( ARGUMENT 14 s FIELD 15 s LEAF_NODE 16 s LEAF_NODE 14 , ARGUMENT 14 m FIELD 15 m LEAF_NODE 16 m LEAF_NODE 14 , ARGUMENT 14 \"Originate with certain 'Application' arguments requires the additional System privilege, which you do not have.\" FIELD 15 \"Originate with certain 'Application' arguments requires the additional System privilege, which you do not have.\" LEAF_NODE 16 \"Originate with certain 'Application' arguments requires the additional System privilege, which you do not have.\" LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 return 0 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 0 EXPR 13 0 FIELD 14 0 LEAF_NODE 15 0 LEAF_NODE 12 ; LEAF_NODE 10 } EXPR_STATEMENT 8 res = ast_pbx_outgoing_app ( tech , format , data , to , app , appdata , & reason , 1 , l , n , vars , account , NULL ) ; EXPR 9 res = ast_pbx_outgoing_app ( tech , format , data , to , app , appdata , & reason , 1 , l , n , vars , account , NULL ) ASSIGN 10 res = ast_pbx_outgoing_app ( tech , format , data , to , app , appdata , & reason , 1 , l , n , vars , account , NULL ) LVAL 11 res FIELD 12 res LEAF_NODE 13 res ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ast_pbx_outgoing_app ( tech , format , data , to , app , appdata , & reason , 1 , l , n , vars , account , NULL ) FUNCTION_CALL 12 ast_pbx_outgoing_app ( tech , format , data , to , app , appdata , & reason , 1 , l , n , vars , account , NULL ) CALLEE 13 ast_pbx_outgoing_app LEAF_NODE 14 ast_pbx_outgoing_app LEAF_NODE 13 ( ARGUMENT 13 tech FIELD 14 tech LEAF_NODE 15 tech LEAF_NODE 13 , ARGUMENT 13 format FIELD 14 format LEAF_NODE 15 format LEAF_NODE 13 , ARGUMENT 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 , ARGUMENT 13 to FIELD 14 to LEAF_NODE 15 to LEAF_NODE 13 , ARGUMENT 13 app FIELD 14 app LEAF_NODE 15 app LEAF_NODE 13 , ARGUMENT 13 appdata FIELD 14 appdata LEAF_NODE 15 appdata LEAF_NODE 13 , ARGUMENT 13 & reason UNARY_EXPR 14 & reason UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 reason LEAF_NODE 16 reason LEAF_NODE 13 , ARGUMENT 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 , ARGUMENT 13 l FIELD 14 l LEAF_NODE 15 l LEAF_NODE 13 , ARGUMENT 13 n FIELD 14 n LEAF_NODE 15 n LEAF_NODE 13 , ARGUMENT 13 vars FIELD 14 vars LEAF_NODE 15 vars LEAF_NODE 13 , ARGUMENT 13 account FIELD 14 account LEAF_NODE 15 account LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 exten && context && pi EXPR 8 exten && context && pi AND 9 exten && context && pi EXPR 10 exten FIELD 11 exten LEAF_NODE 12 exten LEAF_NODE 10 && EXPR 10 context && pi AND 11 context && pi EXPR 12 context FIELD 13 context LEAF_NODE 14 context LEAF_NODE 12 && EXPR 12 pi FIELD 13 pi LEAF_NODE 14 pi LEAF_NODE 7 ) STATEMENTS 7 EXPR_STATEMENT 8 res = ast_pbx_outgoing_exten ( tech , format , data , to , context , exten , pi , & reason , 1 , l , n , vars , account , NULL ) ; EXPR 9 res = ast_pbx_outgoing_exten ( tech , format , data , to , context , exten , pi , & reason , 1 , l , n , vars , account , NULL ) ASSIGN 10 res = ast_pbx_outgoing_exten ( tech , format , data , to , context , exten , pi , & reason , 1 , l , n , vars , account , NULL ) LVAL 11 res FIELD 12 res LEAF_NODE 13 res ASSIGN_OP 11 = LEAF_NODE 12 = RVAL 11 ast_pbx_outgoing_exten ( tech , format , data , to , context , exten , pi , & reason , 1 , l , n , vars , account , NULL ) FUNCTION_CALL 12 ast_pbx_outgoing_exten ( tech , format , data , to , context , exten , pi , & reason , 1 , l , n , vars , account , NULL ) CALLEE 13 ast_pbx_outgoing_exten LEAF_NODE 14 ast_pbx_outgoing_exten LEAF_NODE 13 ( ARGUMENT 13 tech FIELD 14 tech LEAF_NODE 15 tech LEAF_NODE 13 , ARGUMENT 13 format FIELD 14 format LEAF_NODE 15 format LEAF_NODE 13 , ARGUMENT 13 data FIELD 14 data LEAF_NODE 15 data LEAF_NODE 13 , ARGUMENT 13 to FIELD 14 to LEAF_NODE 15 to LEAF_NODE 13 , ARGUMENT 13 context FIELD 14 context LEAF_NODE 15 context LEAF_NODE 13 , ARGUMENT 13 exten FIELD 14 exten LEAF_NODE 15 exten LEAF_NODE 13 , ARGUMENT 13 pi FIELD 14 pi LEAF_NODE 15 pi LEAF_NODE 13 , ARGUMENT 13 & reason UNARY_EXPR 14 & reason UNARY_OPERATOR 15 & LEAF_NODE 16 & FIELD 15 reason LEAF_NODE 16 reason LEAF_NODE 13 , ARGUMENT 13 1 FIELD 14 1 LEAF_NODE 15 1 LEAF_NODE 13 , ARGUMENT 13 l FIELD 14 l LEAF_NODE 15 l LEAF_NODE 13 , ARGUMENT 13 n FIELD 14 n LEAF_NODE 15 n LEAF_NODE 13 , ARGUMENT 13 vars FIELD 14 vars LEAF_NODE 15 vars LEAF_NODE 13 , ARGUMENT 13 account FIELD 14 account LEAF_NODE 15 account LEAF_NODE 13 , ARGUMENT 13 NULL FIELD 14 NULL LEAF_NODE 15 NULL LEAF_NODE 13 ) LEAF_NODE 9 ; SELECTION 6 KEYWORD 7 else LEAF_NODE 8 else STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 astman_send_error ( s , m , \"Originate with 'Exten' requires 'Context' and 'Priority'\" ) ; EXPR 10 astman_send_error ( s , m , \"Originate with 'Exten' requires 'Context' and 'Priority'\" ) FUNCTION_CALL 11 astman_send_error ( s , m , \"Originate with 'Exten' requires 'Context' and 'Priority'\" ) CALLEE 12 astman_send_error LEAF_NODE 13 astman_send_error LEAF_NODE 12 ( ARGUMENT 12 s FIELD 13 s LEAF_NODE 14 s LEAF_NODE 12 , ARGUMENT 12 m FIELD 13 m LEAF_NODE 14 m LEAF_NODE 12 , ARGUMENT 12 \"Originate with 'Exten' requires 'Context' and 'Priority'\" FIELD 13 \"Originate with 'Exten' requires 'Context' and 'Priority'\" LEAF_NODE 14 \"Originate with 'Exten' requires 'Context' and 'Priority'\" LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return 0 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 0 EXPR 11 0 FIELD 12 0 LEAF_NODE 13 0 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! res EXPR 5 ! res UNARY_EXPR 6 ! res UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 res LEAF_NODE 8 res LEAF_NODE 4 ) STATEMENTS 4 EXPR_STATEMENT 5 astman_send_ack ( s , m , \"Originate successfully queued\" ) ; EXPR 6 astman_send_ack ( s , m , \"Originate successfully queued\" ) FUNCTION_CALL 7 astman_send_ack ( s , m , \"Originate successfully queued\" ) CALLEE 8 astman_send_ack LEAF_NODE 9 astman_send_ack LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 m FIELD 9 m LEAF_NODE 10 m LEAF_NODE 8 , ARGUMENT 8 \"Originate successfully queued\" FIELD 9 \"Originate successfully queued\" LEAF_NODE 10 \"Originate successfully queued\" LEAF_NODE 8 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 EXPR_STATEMENT 5 astman_send_error ( s , m , \"Originate failed\" ) ; EXPR 6 astman_send_error ( s , m , \"Originate failed\" ) FUNCTION_CALL 7 astman_send_error ( s , m , \"Originate failed\" ) CALLEE 8 astman_send_error LEAF_NODE 9 astman_send_error LEAF_NODE 8 ( ARGUMENT 8 s FIELD 9 s LEAF_NODE 10 s LEAF_NODE 8 , ARGUMENT 8 m FIELD 9 m LEAF_NODE 10 m LEAF_NODE 8 , ARGUMENT 8 \"Originate failed\" FIELD 9 \"Originate failed\" LEAF_NODE 10 \"Originate failed\" LEAF_NODE 8 ) LEAF_NODE 6 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 38, "project": "openssl_ast_vul_function_test_adv_46", "target": 1}
{"func": "FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 reload LEAF_NODE 3 reload PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ( load_config ( 1 ) ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ( load_config ( 1 ) ) EXPR 5 ( load_config ( 1 ) ) LEAF_NODE 6 ( FUNCTION_CALL 6 load_config ( 1 ) CALLEE 7 load_config LEAF_NODE 8 load_config LEAF_NODE 7 ( ARGUMENT 7 1 FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 7 ) LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 39, "project": "openssl_ast_vul_function_test_adv_9", "target": 1}
{"func": "SIMPLE_DECL 1 enum ast_sip_session_media_encryption BASE_CLASSES { AST_SIP_MEDIA_TRANSPORT_INVALID = 0 , AST_SIP_MEDIA_ENCRYPT_NONE , AST_SIP_MEDIA_ENCRYPT_SDES , AST_SIP_MEDIA_ENCRYPT_DTLS , } ; CLASS_DEF 2 enum ast_sip_session_media_encryption BASE_CLASSES { AST_SIP_MEDIA_TRANSPORT_INVALID = 0 , AST_SIP_MEDIA_ENCRYPT_NONE , AST_SIP_MEDIA_ENCRYPT_SDES , AST_SIP_MEDIA_ENCRYPT_DTLS , } CLASS_DEF 3 enum ast_sip_session_media_encryption BASE_CLASSES { AST_SIP_MEDIA_TRANSPORT_INVALID = 0 , AST_SIP_MEDIA_ENCRYPT_NONE , AST_SIP_MEDIA_ENCRYPT_SDES , AST_SIP_MEDIA_ENCRYPT_DTLS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_sip_session_media_encryption LEAF_NODE 5 ast_sip_session_media_encryption LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SIP_MEDIA_TRANSPORT_INVALID = 0 , AST_SIP_MEDIA_ENCRYPT_NONE , AST_SIP_MEDIA_ENCRYPT_SDES , AST_SIP_MEDIA_ENCRYPT_DTLS , LEAF_NODE 5 AST_SIP_MEDIA_TRANSPORT_INVALID LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_SIP_MEDIA_ENCRYPT_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SIP_MEDIA_ENCRYPT_SDES LEAF_NODE 5 , LEAF_NODE 5 AST_SIP_MEDIA_ENCRYPT_DTLS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_sip_session_media BASE_CLASSES { struct ast_rtp_instance * rtp ; struct ast_udptl * udptl ; struct ast_sockaddr direct_media_addr ; struct ast_sip_session_sdp_handler * handler ; struct ast_sdp_srtp * srtp ; enum ast_sip_session_media_encryption encryption ; int keepalive_sched_id ; int timeout_sched_id ; unsigned int remotely_held : 1 ; unsigned int remotely_held_changed : 1 ; unsigned int locally_held : 1 ; unsigned int remote_rtcp_mux : 1 ; unsigned int remote_ice : 1 ; enum ast_media_type type ; ast_sip_session_media_write_cb write_callback ; int stream_num ; char * mid ; int bundle_group ; unsigned int bundled ; char [ AST_UUID_STR_LEN ] mslabel ; char [ AST_UUID_STR_LEN ] label ; unsigned int changed ; char * remote_mslabel ; char * remote_label ; char * stream_name ; } ; CLASS_DEF 2 struct ast_sip_session_media BASE_CLASSES { struct ast_rtp_instance * rtp ; struct ast_udptl * udptl ; struct ast_sockaddr direct_media_addr ; struct ast_sip_session_sdp_handler * handler ; struct ast_sdp_srtp * srtp ; enum ast_sip_session_media_encryption encryption ; int keepalive_sched_id ; int timeout_sched_id ; unsigned int remotely_held : 1 ; unsigned int remotely_held_changed : 1 ; unsigned int locally_held : 1 ; unsigned int remote_rtcp_mux : 1 ; unsigned int remote_ice : 1 ; enum ast_media_type type ; ast_sip_session_media_write_cb write_callback ; int stream_num ; char * mid ; int bundle_group ; unsigned int bundled ; char [ AST_UUID_STR_LEN ] mslabel ; char [ AST_UUID_STR_LEN ] label ; unsigned int changed ; char * remote_mslabel ; char * remote_label ; char * stream_name ; } CLASS_DEF 3 struct ast_sip_session_media BASE_CLASSES { struct ast_rtp_instance * rtp ; struct ast_udptl * udptl ; struct ast_sockaddr direct_media_addr ; struct ast_sip_session_sdp_handler * handler ; struct ast_sdp_srtp * srtp ; enum ast_sip_session_media_encryption encryption ; int keepalive_sched_id ; int timeout_sched_id ; unsigned int remotely_held : 1 ; unsigned int remotely_held_changed : 1 ; unsigned int locally_held : 1 ; unsigned int remote_rtcp_mux : 1 ; unsigned int remote_ice : 1 ; enum ast_media_type type ; ast_sip_session_media_write_cb write_callback ; int stream_num ; char * mid ; int bundle_group ; unsigned int bundled ; char [ AST_UUID_STR_LEN ] mslabel ; char [ AST_UUID_STR_LEN ] label ; unsigned int changed ; char * remote_mslabel ; char * remote_label ; char * stream_name ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_sip_session_media LEAF_NODE 5 ast_sip_session_media LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_rtp_instance * rtp ; struct ast_udptl * udptl ; struct ast_sockaddr direct_media_addr ; struct ast_sip_session_sdp_handler * handler ; struct ast_sdp_srtp * srtp ; enum ast_sip_session_media_encryption encryption ; int keepalive_sched_id ; int timeout_sched_id ; unsigned int remotely_held : 1 ; unsigned int remotely_held_changed : 1 ; unsigned int locally_held : 1 ; unsigned int remote_rtcp_mux : 1 ; unsigned int remote_ice : 1 ; enum ast_media_type type ; ast_sip_session_media_write_cb write_callback ; int stream_num ; char * mid ; int bundle_group ; unsigned int bundled ; char [ AST_UUID_STR_LEN ] mslabel ; char [ AST_UUID_STR_LEN ] label ; unsigned int changed ; char * remote_mslabel ; char * remote_label ; char * stream_name ; SIMPLE_DECL 5 struct ast_rtp_instance * rtp ; VAR_DECL 6 struct ast_rtp_instance * rtp TYPE 7 struct ast_rtp_instance * TYPE_NAME 8 struct ast_rtp_instance LEAF_NODE 9 struct LEAF_NODE 9 ast_rtp_instance POINTER 8 * LEAF_NODE 9 * NAME 7 rtp LEAF_NODE 8 rtp LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_udptl * udptl ; VAR_DECL 6 struct ast_udptl * udptl TYPE 7 struct ast_udptl * TYPE_NAME 8 struct ast_udptl LEAF_NODE 9 struct LEAF_NODE 9 ast_udptl POINTER 8 * LEAF_NODE 9 * NAME 7 udptl LEAF_NODE 8 udptl LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr direct_media_addr ; VAR_DECL 6 struct ast_sockaddr direct_media_addr TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 direct_media_addr LEAF_NODE 8 direct_media_addr LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sip_session_sdp_handler * handler ; VAR_DECL 6 struct ast_sip_session_sdp_handler * handler TYPE 7 struct ast_sip_session_sdp_handler * TYPE_NAME 8 struct ast_sip_session_sdp_handler LEAF_NODE 9 struct LEAF_NODE 9 ast_sip_session_sdp_handler POINTER 8 * LEAF_NODE 9 * NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sdp_srtp * srtp ; VAR_DECL 6 struct ast_sdp_srtp * srtp TYPE 7 struct ast_sdp_srtp * TYPE_NAME 8 struct ast_sdp_srtp LEAF_NODE 9 struct LEAF_NODE 9 ast_sdp_srtp POINTER 8 * LEAF_NODE 9 * NAME 7 srtp LEAF_NODE 8 srtp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_sip_session_media_encryption encryption ; VAR_DECL 6 enum ast_sip_session_media_encryption encryption TYPE 7 enum ast_sip_session_media_encryption TYPE_NAME 8 enum ast_sip_session_media_encryption LEAF_NODE 9 enum LEAF_NODE 9 ast_sip_session_media_encryption NAME 7 encryption LEAF_NODE 8 encryption LEAF_NODE 6 ; SIMPLE_DECL 5 int keepalive_sched_id ; VAR_DECL 6 int keepalive_sched_id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 keepalive_sched_id LEAF_NODE 8 keepalive_sched_id LEAF_NODE 6 ; SIMPLE_DECL 5 int timeout_sched_id ; VAR_DECL 6 int timeout_sched_id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timeout_sched_id LEAF_NODE 8 timeout_sched_id LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 remotely_held : LEAF_NODE 6 remotely_held LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 remotely_held_changed : LEAF_NODE 6 remotely_held_changed LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locally_held : LEAF_NODE 6 locally_held LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 remote_rtcp_mux : LEAF_NODE 6 remote_rtcp_mux LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 remote_ice : LEAF_NODE 6 remote_ice LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 enum ast_media_type type ; VAR_DECL 6 enum ast_media_type type TYPE 7 enum ast_media_type TYPE_NAME 8 enum ast_media_type LEAF_NODE 9 enum LEAF_NODE 9 ast_media_type NAME 7 type LEAF_NODE 8 type LEAF_NODE 6 ; SIMPLE_DECL 5 ast_sip_session_media_write_cb write_callback ; VAR_DECL 6 ast_sip_session_media_write_cb write_callback TYPE 7 ast_sip_session_media_write_cb TYPE_NAME 8 ast_sip_session_media_write_cb LEAF_NODE 9 ast_sip_session_media_write_cb NAME 7 write_callback LEAF_NODE 8 write_callback LEAF_NODE 6 ; SIMPLE_DECL 5 int stream_num ; VAR_DECL 6 int stream_num TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 stream_num LEAF_NODE 8 stream_num LEAF_NODE 6 ; SIMPLE_DECL 5 char * mid ; VAR_DECL 6 char * mid TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 mid LEAF_NODE 8 mid LEAF_NODE 6 ; SIMPLE_DECL 5 int bundle_group ; VAR_DECL 6 int bundle_group TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 bundle_group LEAF_NODE 8 bundle_group LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int bundled ; VAR_DECL 6 unsigned int bundled TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 bundled LEAF_NODE 8 bundled LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_UUID_STR_LEN ] mslabel ; VAR_DECL 6 char [ AST_UUID_STR_LEN ] mslabel TYPE 7 char [ AST_UUID_STR_LEN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_UUID_STR_LEN ] LEAF_NODE 9 [ FIELD 9 AST_UUID_STR_LEN LEAF_NODE 10 AST_UUID_STR_LEN LEAF_NODE 9 ] NAME 7 mslabel LEAF_NODE 8 mslabel LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_UUID_STR_LEN ] label ; VAR_DECL 6 char [ AST_UUID_STR_LEN ] label TYPE 7 char [ AST_UUID_STR_LEN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_UUID_STR_LEN ] LEAF_NODE 9 [ FIELD 9 AST_UUID_STR_LEN LEAF_NODE 10 AST_UUID_STR_LEN LEAF_NODE 9 ] NAME 7 label LEAF_NODE 8 label LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int changed ; VAR_DECL 6 unsigned int changed TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 changed LEAF_NODE 8 changed LEAF_NODE 6 ; SIMPLE_DECL 5 char * remote_mslabel ; VAR_DECL 6 char * remote_mslabel TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 remote_mslabel LEAF_NODE 8 remote_mslabel LEAF_NODE 6 ; SIMPLE_DECL 5 char * remote_label ; VAR_DECL 6 char * remote_label TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 remote_label LEAF_NODE 8 remote_label LEAF_NODE 6 ; SIMPLE_DECL 5 char * stream_name ; VAR_DECL 6 char * stream_name TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 stream_name LEAF_NODE 8 stream_name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 stream_destroy LEAF_NODE 3 stream_destroy PARAMETER_LIST 2 ( struct ast_sip_session_media * session_media ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_sip_session_media * session_media TYPE 4 struct ast_sip_session_media * TYPE_NAME 5 struct ast_sip_session_media LEAF_NODE 6 struct LEAF_NODE 6 ast_sip_session_media POINTER 5 * LEAF_NODE 6 * NAME 4 session_media LEAF_NODE 5 session_media LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 session_media -> rtp EXPR 5 session_media -> rtp FIELD 6 session_media -> rtp LEAF_NODE 7 session_media LEAF_NODE 7 -> LEAF_NODE 7 rtp LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_rtp_instance_stop ( session_media -> rtp ) ; EXPR 7 ast_rtp_instance_stop ( session_media -> rtp ) FUNCTION_CALL 8 ast_rtp_instance_stop ( session_media -> rtp ) CALLEE 9 ast_rtp_instance_stop LEAF_NODE 10 ast_rtp_instance_stop LEAF_NODE 9 ( ARGUMENT 9 session_media -> rtp FIELD 10 session_media -> rtp LEAF_NODE 11 session_media LEAF_NODE 11 -> LEAF_NODE 11 rtp LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_rtp_instance_destroy ( session_media -> rtp ) ; EXPR 7 ast_rtp_instance_destroy ( session_media -> rtp ) FUNCTION_CALL 8 ast_rtp_instance_destroy ( session_media -> rtp ) CALLEE 9 ast_rtp_instance_destroy LEAF_NODE 10 ast_rtp_instance_destroy LEAF_NODE 9 ( ARGUMENT 9 session_media -> rtp FIELD 10 session_media -> rtp LEAF_NODE 11 session_media LEAF_NODE 11 -> LEAF_NODE 11 rtp LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } LEAF_NODE 2 }", "idx": 40, "project": "openssl_ast_vul_function_test_adv_43", "target": 1}
{"func": "SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { CLASS_CONTENT } SSL ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { CLASS_CONTENT } SSL TYPE 3 struct CLASS_NAME BASE_CLASSES { CLASS_CONTENT } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { CLASS_CONTENT } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { LEAF_NODE 5 CLASS_CONTENT LEAF_NODE 5 } NAME 3 SSL LEAF_NODE 4 SSL LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_tcptls_session_args BASE_CLASSES { struct ast_sockaddr local_address ; struct ast_sockaddr old_address ; struct ast_sockaddr remote_address ; char [ MAXHOSTNAMELEN ] hostname ; struct ast_tls_config * tls_cfg ; int accept_fd ; int poll_timeout ; pthread_t master ; void * ( * accept_fn ) ( void * ) ; void ( * periodic_fn ) ( void * ) ; void * ( * worker_fn ) ( void * ) ; const char * name ; } ; CLASS_DEF 2 struct ast_tcptls_session_args BASE_CLASSES { struct ast_sockaddr local_address ; struct ast_sockaddr old_address ; struct ast_sockaddr remote_address ; char [ MAXHOSTNAMELEN ] hostname ; struct ast_tls_config * tls_cfg ; int accept_fd ; int poll_timeout ; pthread_t master ; void * ( * accept_fn ) ( void * ) ; void ( * periodic_fn ) ( void * ) ; void * ( * worker_fn ) ( void * ) ; const char * name ; } CLASS_DEF 3 struct ast_tcptls_session_args BASE_CLASSES { struct ast_sockaddr local_address ; struct ast_sockaddr old_address ; struct ast_sockaddr remote_address ; char [ MAXHOSTNAMELEN ] hostname ; struct ast_tls_config * tls_cfg ; int accept_fd ; int poll_timeout ; pthread_t master ; void * ( * accept_fn ) ( void * ) ; void ( * periodic_fn ) ( void * ) ; void * ( * worker_fn ) ( void * ) ; const char * name ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_tcptls_session_args LEAF_NODE 5 ast_tcptls_session_args LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_sockaddr local_address ; struct ast_sockaddr old_address ; struct ast_sockaddr remote_address ; char [ MAXHOSTNAMELEN ] hostname ; struct ast_tls_config * tls_cfg ; int accept_fd ; int poll_timeout ; pthread_t master ; void * ( * accept_fn ) ( void * ) ; void ( * periodic_fn ) ( void * ) ; void * ( * worker_fn ) ( void * ) ; const char * name ; SIMPLE_DECL 5 struct ast_sockaddr local_address ; VAR_DECL 6 struct ast_sockaddr local_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 local_address LEAF_NODE 8 local_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr old_address ; VAR_DECL 6 struct ast_sockaddr old_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 old_address LEAF_NODE 8 old_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr remote_address ; VAR_DECL 6 struct ast_sockaddr remote_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 remote_address LEAF_NODE 8 remote_address LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAXHOSTNAMELEN ] hostname ; VAR_DECL 6 char [ MAXHOSTNAMELEN ] hostname TYPE 7 char [ MAXHOSTNAMELEN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAXHOSTNAMELEN ] LEAF_NODE 9 [ FIELD 9 MAXHOSTNAMELEN LEAF_NODE 10 MAXHOSTNAMELEN LEAF_NODE 9 ] NAME 7 hostname LEAF_NODE 8 hostname LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_tls_config * tls_cfg ; VAR_DECL 6 struct ast_tls_config * tls_cfg TYPE 7 struct ast_tls_config * TYPE_NAME 8 struct ast_tls_config LEAF_NODE 9 struct LEAF_NODE 9 ast_tls_config POINTER 8 * LEAF_NODE 9 * NAME 7 tls_cfg LEAF_NODE 8 tls_cfg LEAF_NODE 6 ; SIMPLE_DECL 5 int accept_fd ; VAR_DECL 6 int accept_fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 accept_fd LEAF_NODE 8 accept_fd LEAF_NODE 6 ; SIMPLE_DECL 5 int poll_timeout ; VAR_DECL 6 int poll_timeout TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 poll_timeout LEAF_NODE 8 poll_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_t master ; VAR_DECL 6 pthread_t master TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 master LEAF_NODE 8 master LEAF_NODE 6 ; LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 accept_fn LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 void LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 periodic_fn LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ( LEAF_NODE 5 * LEAF_NODE 5 worker_fn LEAF_NODE 5 ) LEAF_NODE 5 ( LEAF_NODE 5 void LEAF_NODE 5 * LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 const char * name ; VAR_DECL 6 const char * name TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_tcptls_session_instance BASE_CLASSES { FILE * f ; int fd ; SSL * ssl ; int client ; struct ast_sockaddr remote_address ; struct ast_tcptls_session_args * parent ; struct ast_str * overflow_buf ; } ; CLASS_DEF 2 struct ast_tcptls_session_instance BASE_CLASSES { FILE * f ; int fd ; SSL * ssl ; int client ; struct ast_sockaddr remote_address ; struct ast_tcptls_session_args * parent ; struct ast_str * overflow_buf ; } CLASS_DEF 3 struct ast_tcptls_session_instance BASE_CLASSES { FILE * f ; int fd ; SSL * ssl ; int client ; struct ast_sockaddr remote_address ; struct ast_tcptls_session_args * parent ; struct ast_str * overflow_buf ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_tcptls_session_instance LEAF_NODE 5 ast_tcptls_session_instance LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FILE * f ; int fd ; SSL * ssl ; int client ; struct ast_sockaddr remote_address ; struct ast_tcptls_session_args * parent ; struct ast_str * overflow_buf ; SIMPLE_DECL 5 FILE * f ; VAR_DECL 6 FILE * f TYPE 7 FILE * TYPE_NAME 8 FILE LEAF_NODE 9 FILE POINTER 8 * LEAF_NODE 9 * NAME 7 f LEAF_NODE 8 f LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 SSL * ssl ; VAR_DECL 6 SSL * ssl TYPE 7 SSL * TYPE_NAME 8 SSL LEAF_NODE 9 SSL POINTER 8 * LEAF_NODE 9 * NAME 7 ssl LEAF_NODE 8 ssl LEAF_NODE 6 ; SIMPLE_DECL 5 int client ; VAR_DECL 6 int client TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_sockaddr remote_address ; VAR_DECL 6 struct ast_sockaddr remote_address TYPE 7 struct ast_sockaddr TYPE_NAME 8 struct ast_sockaddr LEAF_NODE 9 struct LEAF_NODE 9 ast_sockaddr NAME 7 remote_address LEAF_NODE 8 remote_address LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_tcptls_session_args * parent ; VAR_DECL 6 struct ast_tcptls_session_args * parent TYPE 7 struct ast_tcptls_session_args * TYPE_NAME 8 struct ast_tcptls_session_args LEAF_NODE 9 struct LEAF_NODE 9 ast_tcptls_session_args POINTER 8 * LEAF_NODE 9 * NAME 7 parent LEAF_NODE 8 parent LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_str * overflow_buf ; VAR_DECL 6 struct ast_str * overflow_buf TYPE 7 struct ast_str * TYPE_NAME 8 struct ast_str LEAF_NODE 9 struct LEAF_NODE 9 ast_str POINTER 8 * LEAF_NODE 9 * NAME 7 overflow_buf LEAF_NODE 8 overflow_buf LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void * LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void LEAF_NODE 3 * FUNCTION_NAME 2 handle_tcptls_connection LEAF_NODE 3 handle_tcptls_connection PARAMETER_LIST 2 ( void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_tcptls_session_instance * tcptls_session ; tcptls_session = data ; VAR_DECL 4 struct ast_tcptls_session_instance * tcptls_session ; tcptls_session = data TYPE 5 struct ast_tcptls_session_instance * TYPE_NAME 6 struct ast_tcptls_session_instance LEAF_NODE 7 struct LEAF_NODE 7 ast_tcptls_session_instance POINTER 6 * LEAF_NODE 7 * NAME 5 tcptls_session LEAF_NODE 6 tcptls_session LEAF_NODE 5 ; INIT 5 tcptls_session = data ASSIGN 6 tcptls_session = data LVAL 7 tcptls_session NAME 8 tcptls_session LEAF_NODE 9 tcptls_session ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; LEAF_NODE 3 int LEAF_NODE 3 ( LEAF_NODE 3 * LEAF_NODE 3 ssl_setup LEAF_NODE 3 ) LEAF_NODE 3 ( LEAF_NODE 3 SSL LEAF_NODE 3 * LEAF_NODE 3 ) LEAF_NODE 3 = EXPR_STATEMENT 3 ( tcptls_session -> client ) ? SSL_connect : SSL_accept ; EXPR 4 ( tcptls_session -> client ) ? SSL_connect : SSL_accept COND_EXPR 5 ( tcptls_session -> client ) ? SSL_connect : SSL_accept CONDITION 6 ( tcptls_session -> client ) LEAF_NODE 7 ( FIELD 7 tcptls_session -> client LEAF_NODE 8 tcptls_session LEAF_NODE 8 -> LEAF_NODE 8 client LEAF_NODE 7 ) LEAF_NODE 6 ? EXPR 6 SSL_connect FIELD 7 SSL_connect LEAF_NODE 8 SSL_connect LEAF_NODE 6 : FIELD 6 SSL_accept LEAF_NODE 7 SSL_accept LEAF_NODE 4 ; SIMPLE_DECL 3 int ret ; VAR_DECL 4 int ret TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 ret LEAF_NODE 6 ret LEAF_NODE 4 ; SIMPLE_DECL 3 char [ 256 ] err ; VAR_DECL 4 char [ 256 ] err TYPE 5 char [ 256 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 256 ] LEAF_NODE 7 [ FIELD 7 256 LEAF_NODE 8 256 LEAF_NODE 7 ] NAME 5 err LEAF_NODE 6 err LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! tcptls_session -> parent -> tls_cfg EXPR 5 ! tcptls_session -> parent -> tls_cfg UNARY_EXPR 6 ! tcptls_session -> parent -> tls_cfg UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 tcptls_session -> parent -> tls_cfg LEAF_NODE 8 tcptls_session LEAF_NODE 8 -> LEAF_NODE 8 parent LEAF_NODE 8 -> LEAF_NODE 8 tls_cfg LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 tcptls_session -> f = fdopen ( tcptls_session -> fd , \"w+\" ) ; EXPR 7 tcptls_session -> f = fdopen ( tcptls_session -> fd , \"w+\" ) ASSIGN 8 tcptls_session -> f = fdopen ( tcptls_session -> fd , \"w+\" ) LVAL 9 tcptls_session -> f FIELD 10 tcptls_session -> f LEAF_NODE 11 tcptls_session LEAF_NODE 11 -> LEAF_NODE 11 f ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 fdopen ( tcptls_session -> fd , \"w+\" ) FUNCTION_CALL 10 fdopen ( tcptls_session -> fd , \"w+\" ) CALLEE 11 fdopen LEAF_NODE 12 fdopen LEAF_NODE 11 ( ARGUMENT 11 tcptls_session -> fd FIELD 12 tcptls_session -> fd LEAF_NODE 13 tcptls_session LEAF_NODE 13 -> LEAF_NODE 13 fd LEAF_NODE 11 , ARGUMENT 11 \"w+\" FIELD 12 \"w+\" LEAF_NODE 13 \"w+\" LEAF_NODE 11 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 setvbuf ( tcptls_session -> f , NULL , _IONBF , 0 ) ; EXPR 7 setvbuf ( tcptls_session -> f , NULL , _IONBF , 0 ) FUNCTION_CALL 8 setvbuf ( tcptls_session -> f , NULL , _IONBF , 0 ) CALLEE 9 setvbuf LEAF_NODE 10 setvbuf LEAF_NODE 9 ( ARGUMENT 9 tcptls_session -> f FIELD 10 tcptls_session -> f LEAF_NODE 11 tcptls_session LEAF_NODE 11 -> LEAF_NODE 11 f LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 _IONBF FIELD 10 _IONBF LEAF_NODE 11 _IONBF LEAF_NODE 9 , ARGUMENT 9 0 FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ( tcptls_session -> ssl = SSL_new ( tcptls_session -> parent -> tls_cfg -> ssl_ctx ) ) EXPR 7 ( tcptls_session -> ssl = SSL_new ( tcptls_session -> parent -> tls_cfg -> ssl_ctx ) ) LEAF_NODE 8 ( ASSIGN 8 tcptls_session -> ssl = SSL_new ( tcptls_session -> parent -> tls_cfg -> ssl_ctx ) LVAL 9 tcptls_session -> ssl FIELD 10 tcptls_session -> ssl LEAF_NODE 11 tcptls_session LEAF_NODE 11 -> LEAF_NODE 11 ssl ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 SSL_new ( tcptls_session -> parent -> tls_cfg -> ssl_ctx ) FUNCTION_CALL 10 SSL_new ( tcptls_session -> parent -> tls_cfg -> ssl_ctx ) CALLEE 11 SSL_new LEAF_NODE 12 SSL_new LEAF_NODE 11 ( ARGUMENT 11 tcptls_session -> parent -> tls_cfg -> ssl_ctx FIELD 12 tcptls_session -> parent -> tls_cfg -> ssl_ctx LEAF_NODE 13 tcptls_session LEAF_NODE 13 -> LEAF_NODE 13 parent LEAF_NODE 13 -> LEAF_NODE 13 tls_cfg LEAF_NODE 13 -> LEAF_NODE 13 ssl_ctx LEAF_NODE 11 ) LEAF_NODE 8 ) LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 SSL_set_fd ( tcptls_session -> ssl , tcptls_session -> fd ) ; EXPR 9 SSL_set_fd ( tcptls_session -> ssl , tcptls_session -> fd ) FUNCTION_CALL 10 SSL_set_fd ( tcptls_session -> ssl , tcptls_session -> fd ) CALLEE 11 SSL_set_fd LEAF_NODE 12 SSL_set_fd LEAF_NODE 11 ( ARGUMENT 11 tcptls_session -> ssl FIELD 12 tcptls_session -> ssl LEAF_NODE 13 tcptls_session LEAF_NODE 13 -> LEAF_NODE 13 ssl LEAF_NODE 11 , ARGUMENT 11 tcptls_session -> fd FIELD 12 tcptls_session -> fd LEAF_NODE 13 tcptls_session LEAF_NODE 13 -> LEAF_NODE 13 fd LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( ret = ssl_setup ( tcptls_session -> ssl ) ) <= 0 EXPR 10 ( ret = ssl_setup ( tcptls_session -> ssl ) ) <= 0 LEAF_NODE 11 ( ASSIGN 11 ret = ssl_setup ( tcptls_session -> ssl ) LVAL 12 ret FIELD 13 ret LEAF_NODE 14 ret ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ssl_setup ( tcptls_session -> ssl ) FUNCTION_CALL 13 ssl_setup ( tcptls_session -> ssl ) CALLEE 14 ssl_setup LEAF_NODE 15 ssl_setup LEAF_NODE 14 ( ARGUMENT 14 tcptls_session -> ssl FIELD 15 tcptls_session -> ssl LEAF_NODE 16 tcptls_session LEAF_NODE 16 -> LEAF_NODE 16 ssl LEAF_NODE 14 ) LEAF_NODE 11 ) REL_OPERATOR 11 <= LEAF_NODE 12 <= FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ast_verb ( 2 , \"Problem setting up ssl connection: %s\\n\" , ERR_error_string ( ERR_get_error ( ) , err ) ) ; EXPR 12 ast_verb ( 2 , \"Problem setting up ssl connection: %s\\n\" , ERR_error_string ( ERR_get_error ( ) , err ) ) FUNCTION_CALL 13 ast_verb ( 2 , \"Problem setting up ssl connection: %s\\n\" , ERR_error_string ( ERR_get_error ( ) , err ) ) CALLEE 14 ast_verb LEAF_NODE 15 ast_verb LEAF_NODE 14 ( ARGUMENT 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 , ARGUMENT 14 \"Problem setting up ssl connection: %s\\n\" FIELD 15 \"Problem setting up ssl connection: %s\\n\" LEAF_NODE 16 \"Problem setting up ssl connection: %s\\n\" LEAF_NODE 14 , ARGUMENT 14 ERR_error_string ( ERR_get_error ( ) , err ) FUNCTION_CALL 15 ERR_error_string ( ERR_get_error ( ) , err ) CALLEE 16 ERR_error_string LEAF_NODE 17 ERR_error_string LEAF_NODE 16 ( ARGUMENT 16 ERR_get_error ( ) FUNCTION_CALL 17 ERR_get_error ( ) CALLEE 18 ERR_get_error LEAF_NODE 19 ERR_get_error LEAF_NODE 18 ( LEAF_NODE 18 ) LEAF_NODE 16 , ARGUMENT 16 err FIELD 17 err LEAF_NODE 18 err LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 tcptls_session -> f = funopen ( tcptls_session -> ssl , ssl_read , ssl_write , NULL , ssl_close ) ; EXPR 12 tcptls_session -> f = funopen ( tcptls_session -> ssl , ssl_read , ssl_write , NULL , ssl_close ) ASSIGN 13 tcptls_session -> f = funopen ( tcptls_session -> ssl , ssl_read , ssl_write , NULL , ssl_close ) LVAL 14 tcptls_session -> f FIELD 15 tcptls_session -> f LEAF_NODE 16 tcptls_session LEAF_NODE 16 -> LEAF_NODE 16 f ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 funopen ( tcptls_session -> ssl , ssl_read , ssl_write , NULL , ssl_close ) FUNCTION_CALL 15 funopen ( tcptls_session -> ssl , ssl_read , ssl_write , NULL , ssl_close ) CALLEE 16 funopen LEAF_NODE 17 funopen LEAF_NODE 16 ( ARGUMENT 16 tcptls_session -> ssl FIELD 17 tcptls_session -> ssl LEAF_NODE 18 tcptls_session LEAF_NODE 18 -> LEAF_NODE 18 ssl LEAF_NODE 16 , ARGUMENT 16 ssl_read FIELD 17 ssl_read LEAF_NODE 18 ssl_read LEAF_NODE 16 , ARGUMENT 16 ssl_write FIELD 17 ssl_write LEAF_NODE 18 ssl_write LEAF_NODE 16 , ARGUMENT 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 , ARGUMENT 16 ssl_close FIELD 17 ssl_close LEAF_NODE 18 ssl_close LEAF_NODE 16 ) LEAF_NODE 12 ; LEAF_NODE 11 static LEAF_NODE 11 const LEAF_NODE 11 cookie_io_functions_t LEAF_NODE 11 cookie_funcs LEAF_NODE 11 = LEAF_NODE 11 { STATEMENTS 11 LEAF_NODE 12 ssl_read LEAF_NODE 12 , LEAF_NODE 12 ssl_write LEAF_NODE 12 , LEAF_NODE 12 NULL LEAF_NODE 12 , LEAF_NODE 12 ssl_close LEAF_NODE 11 } LEAF_NODE 11 ; EXPR_STATEMENT 11 tcptls_session -> f = fopencookie ( tcptls_session -> ssl , \"w+\" , cookie_funcs ) ; EXPR 12 tcptls_session -> f = fopencookie ( tcptls_session -> ssl , \"w+\" , cookie_funcs ) ASSIGN 13 tcptls_session -> f = fopencookie ( tcptls_session -> ssl , \"w+\" , cookie_funcs ) LVAL 14 tcptls_session -> f FIELD 15 tcptls_session -> f LEAF_NODE 16 tcptls_session LEAF_NODE 16 -> LEAF_NODE 16 f ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 fopencookie ( tcptls_session -> ssl , \"w+\" , cookie_funcs ) FUNCTION_CALL 15 fopencookie ( tcptls_session -> ssl , \"w+\" , cookie_funcs ) CALLEE 16 fopencookie LEAF_NODE 17 fopencookie LEAF_NODE 16 ( ARGUMENT 16 tcptls_session -> ssl FIELD 17 tcptls_session -> ssl LEAF_NODE 18 tcptls_session LEAF_NODE 18 -> LEAF_NODE 18 ssl LEAF_NODE 16 , ARGUMENT 16 \"w+\" FIELD 17 \"w+\" LEAF_NODE 18 \"w+\" LEAF_NODE 16 , ARGUMENT 16 cookie_funcs FIELD 17 cookie_funcs LEAF_NODE 18 cookie_funcs LEAF_NODE 16 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 ast_debug ( 2 , \"no tcptls_session->f methods attempted!\" ) ; EXPR 12 ast_debug ( 2 , \"no tcptls_session->f methods attempted!\" ) FUNCTION_CALL 13 ast_debug ( 2 , \"no tcptls_session->f methods attempted!\" ) CALLEE 14 ast_debug LEAF_NODE 15 ast_debug LEAF_NODE 14 ( ARGUMENT 14 2 FIELD 15 2 LEAF_NODE 16 2 LEAF_NODE 14 , ARGUMENT 14 \"no tcptls_session->f methods attempted!\" FIELD 15 \"no tcptls_session->f methods attempted!\" LEAF_NODE 16 \"no tcptls_session->f methods attempted!\" LEAF_NODE 14 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ( tcptls_session -> client && ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) ) || ( ! tcptls_session -> client && ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) ) EXPR 13 ( tcptls_session -> client && ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) ) || ( ! tcptls_session -> client && ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) ) OR 14 ( tcptls_session -> client && ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) ) || ( ! tcptls_session -> client && ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) ) EXPR 15 ( tcptls_session -> client && ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) ) LEAF_NODE 16 ( AND 16 tcptls_session -> client && ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) EXPR 17 tcptls_session -> client FIELD 18 tcptls_session -> client LEAF_NODE 19 tcptls_session LEAF_NODE 19 -> LEAF_NODE 19 client LEAF_NODE 17 && EXPR 17 ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) UNARY_EXPR 18 ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) UNARY_OPERATOR 19 ! LEAF_NODE 20 ! FUNCTION_CALL 19 ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_DONT_VERIFY_SERVER ) CALLEE 20 ast_test_flag LEAF_NODE 21 ast_test_flag LEAF_NODE 20 ( ARGUMENT 20 & tcptls_session -> parent -> tls_cfg -> flags UNARY_EXPR 21 & tcptls_session -> parent -> tls_cfg -> flags UNARY_OPERATOR 22 & LEAF_NODE 23 & FIELD 22 tcptls_session -> parent -> tls_cfg -> flags LEAF_NODE 23 tcptls_session LEAF_NODE 23 -> LEAF_NODE 23 parent LEAF_NODE 23 -> LEAF_NODE 23 tls_cfg LEAF_NODE 23 -> LEAF_NODE 23 flags LEAF_NODE 20 , ARGUMENT 20 AST_SSL_DONT_VERIFY_SERVER FIELD 21 AST_SSL_DONT_VERIFY_SERVER LEAF_NODE 22 AST_SSL_DONT_VERIFY_SERVER LEAF_NODE 20 ) LEAF_NODE 16 ) LEAF_NODE 15 || EXPR 15 ( ! tcptls_session -> client && ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) ) LEAF_NODE 16 ( AND 16 ! tcptls_session -> client && ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) EXPR 17 ! tcptls_session -> client UNARY_EXPR 18 ! tcptls_session -> client UNARY_OPERATOR 19 ! LEAF_NODE 20 ! FIELD 19 tcptls_session -> client LEAF_NODE 20 tcptls_session LEAF_NODE 20 -> LEAF_NODE 20 client LEAF_NODE 17 && EXPR 17 ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) FUNCTION_CALL 18 ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_VERIFY_CLIENT ) CALLEE 19 ast_test_flag LEAF_NODE 20 ast_test_flag LEAF_NODE 19 ( ARGUMENT 19 & tcptls_session -> parent -> tls_cfg -> flags UNARY_EXPR 20 & tcptls_session -> parent -> tls_cfg -> flags UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 tcptls_session -> parent -> tls_cfg -> flags LEAF_NODE 22 tcptls_session LEAF_NODE 22 -> LEAF_NODE 22 parent LEAF_NODE 22 -> LEAF_NODE 22 tls_cfg LEAF_NODE 22 -> LEAF_NODE 22 flags LEAF_NODE 19 , ARGUMENT 19 AST_SSL_VERIFY_CLIENT FIELD 20 AST_SSL_VERIFY_CLIENT LEAF_NODE 21 AST_SSL_VERIFY_CLIENT LEAF_NODE 19 ) LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 SIMPLE_DECL 14 X509 * peer ; VAR_DECL 15 X509 * peer TYPE 16 X509 * TYPE_NAME 17 X509 LEAF_NODE 18 X509 POINTER 17 * LEAF_NODE 18 * NAME 16 peer LEAF_NODE 17 peer LEAF_NODE 15 ; SIMPLE_DECL 14 long res ; VAR_DECL 15 long res TYPE 16 long TYPE_NAME 17 long LEAF_NODE 18 long NAME 16 res LEAF_NODE 17 res LEAF_NODE 15 ; EXPR_STATEMENT 14 peer = SSL_get_peer_certificate ( tcptls_session -> ssl ) ; EXPR 15 peer = SSL_get_peer_certificate ( tcptls_session -> ssl ) ASSIGN 16 peer = SSL_get_peer_certificate ( tcptls_session -> ssl ) LVAL 17 peer FIELD 18 peer LEAF_NODE 19 peer ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_get_peer_certificate ( tcptls_session -> ssl ) FUNCTION_CALL 18 SSL_get_peer_certificate ( tcptls_session -> ssl ) CALLEE 19 SSL_get_peer_certificate LEAF_NODE 20 SSL_get_peer_certificate LEAF_NODE 19 ( ARGUMENT 19 tcptls_session -> ssl FIELD 20 tcptls_session -> ssl LEAF_NODE 21 tcptls_session LEAF_NODE 21 -> LEAF_NODE 21 ssl LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ! peer EXPR 16 ! peer UNARY_EXPR 17 ! peer UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FIELD 18 peer LEAF_NODE 19 peer LEAF_NODE 15 ) STATEMENTS 15 EXPR_STATEMENT 16 ast_log ( LOG_WARNING , \"No peer SSL certificate\\n\" ) ; EXPR 17 ast_log ( LOG_WARNING , \"No peer SSL certificate\\n\" ) FUNCTION_CALL 18 ast_log ( LOG_WARNING , \"No peer SSL certificate\\n\" ) CALLEE 19 ast_log LEAF_NODE 20 ast_log LEAF_NODE 19 ( ARGUMENT 19 LOG_WARNING FIELD 20 LOG_WARNING LEAF_NODE 21 LOG_WARNING LEAF_NODE 19 , ARGUMENT 19 \"No peer SSL certificate\\n\" FIELD 20 \"No peer SSL certificate\\n\" LEAF_NODE 21 \"No peer SSL certificate\\n\" LEAF_NODE 19 ) LEAF_NODE 17 ; EXPR_STATEMENT 14 res = SSL_get_verify_result ( tcptls_session -> ssl ) ; EXPR 15 res = SSL_get_verify_result ( tcptls_session -> ssl ) ASSIGN 16 res = SSL_get_verify_result ( tcptls_session -> ssl ) LVAL 17 res FIELD 18 res LEAF_NODE 19 res ASSIGN_OP 17 = LEAF_NODE 18 = RVAL 17 SSL_get_verify_result ( tcptls_session -> ssl ) FUNCTION_CALL 18 SSL_get_verify_result ( tcptls_session -> ssl ) CALLEE 19 SSL_get_verify_result LEAF_NODE 20 SSL_get_verify_result LEAF_NODE 19 ( ARGUMENT 19 tcptls_session -> ssl FIELD 20 tcptls_session -> ssl LEAF_NODE 21 tcptls_session LEAF_NODE 21 -> LEAF_NODE 21 ssl LEAF_NODE 19 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 res != X509_V_OK EXPR 16 res != X509_V_OK FIELD 17 res LEAF_NODE 18 res EQ_OPERATOR 17 != LEAF_NODE 18 != FIELD 17 X509_V_OK LEAF_NODE 18 X509_V_OK LEAF_NODE 15 ) STATEMENTS 15 EXPR_STATEMENT 16 ast_log ( LOG_ERROR , \"Certificate did not verify: %s\\n\" , X509_verify_cert_error_string ( res ) ) ; EXPR 17 ast_log ( LOG_ERROR , \"Certificate did not verify: %s\\n\" , X509_verify_cert_error_string ( res ) ) FUNCTION_CALL 18 ast_log ( LOG_ERROR , \"Certificate did not verify: %s\\n\" , X509_verify_cert_error_string ( res ) ) CALLEE 19 ast_log LEAF_NODE 20 ast_log LEAF_NODE 19 ( ARGUMENT 19 LOG_ERROR FIELD 20 LOG_ERROR LEAF_NODE 21 LOG_ERROR LEAF_NODE 19 , ARGUMENT 19 \"Certificate did not verify: %s\\n\" FIELD 20 \"Certificate did not verify: %s\\n\" LEAF_NODE 21 \"Certificate did not verify: %s\\n\" LEAF_NODE 19 , ARGUMENT 19 X509_verify_cert_error_string ( res ) FUNCTION_CALL 20 X509_verify_cert_error_string ( res ) CALLEE 21 X509_verify_cert_error_string LEAF_NODE 22 X509_verify_cert_error_string LEAF_NODE 21 ( ARGUMENT 21 res FIELD 22 res LEAF_NODE 23 res LEAF_NODE 21 ) LEAF_NODE 19 ) LEAF_NODE 17 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_IGNORE_COMMON_NAME ) EXPR 16 ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_IGNORE_COMMON_NAME ) UNARY_EXPR 17 ! ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_IGNORE_COMMON_NAME ) UNARY_OPERATOR 18 ! LEAF_NODE 19 ! FUNCTION_CALL 18 ast_test_flag ( & tcptls_session -> parent -> tls_cfg -> flags , AST_SSL_IGNORE_COMMON_NAME ) CALLEE 19 ast_test_flag LEAF_NODE 20 ast_test_flag LEAF_NODE 19 ( ARGUMENT 19 & tcptls_session -> parent -> tls_cfg -> flags UNARY_EXPR 20 & tcptls_session -> parent -> tls_cfg -> flags UNARY_OPERATOR 21 & LEAF_NODE 22 & FIELD 21 tcptls_session -> parent -> tls_cfg -> flags LEAF_NODE 22 tcptls_session LEAF_NODE 22 -> LEAF_NODE 22 parent LEAF_NODE 22 -> LEAF_NODE 22 tls_cfg LEAF_NODE 22 -> LEAF_NODE 22 flags LEAF_NODE 19 , ARGUMENT 19 AST_SSL_IGNORE_COMMON_NAME FIELD 20 AST_SSL_IGNORE_COMMON_NAME LEAF_NODE 21 AST_SSL_IGNORE_COMMON_NAME LEAF_NODE 19 ) LEAF_NODE 15 ) STATEMENTS 15 LEAF_NODE 16 { STATEMENTS 16 SIMPLE_DECL 17 ASN1_STRING * str ; VAR_DECL 18 ASN1_STRING * str TYPE 19 ASN1_STRING * TYPE_NAME 20 ASN1_STRING LEAF_NODE 21 ASN1_STRING POINTER 20 * LEAF_NODE 21 * NAME 19 str LEAF_NODE 20 str LEAF_NODE 18 ; SIMPLE_DECL 17 unsigned char * str2 ; VAR_DECL 18 unsigned char * str2 TYPE 19 unsigned char * TYPE_NAME 20 unsigned char LEAF_NODE 21 unsigned LEAF_NODE 21 char POINTER 20 * LEAF_NODE 21 * NAME 19 str2 LEAF_NODE 20 str2 LEAF_NODE 18 ; SIMPLE_DECL 17 X509_NAME * name ; name = X509_get_subject_name ( peer ) ; VAR_DECL 18 X509_NAME * name ; name = X509_get_subject_name ( peer ) TYPE 19 X509_NAME * TYPE_NAME 20 X509_NAME LEAF_NODE 21 X509_NAME POINTER 20 * LEAF_NODE 21 * NAME 19 name LEAF_NODE 20 name LEAF_NODE 19 ; INIT 19 name = X509_get_subject_name ( peer ) ASSIGN 20 name = X509_get_subject_name ( peer ) LVAL 21 name NAME 22 name LEAF_NODE 23 name ASSIGN_OP 21 = LEAF_NODE 22 = RVAL 21 X509_get_subject_name ( peer ) FUNCTION_CALL 22 X509_get_subject_name ( peer ) CALLEE 23 X509_get_subject_name LEAF_NODE 24 X509_get_subject_name LEAF_NODE 23 ( ARGUMENT 23 peer FIELD 24 peer LEAF_NODE 25 peer LEAF_NODE 23 ) LEAF_NODE 18 ; SIMPLE_DECL 17 int pos ; pos = - 1 ; VAR_DECL 18 int pos ; pos = - 1 TYPE 19 int TYPE_NAME 20 int LEAF_NODE 21 int NAME 19 pos LEAF_NODE 20 pos LEAF_NODE 19 ; INIT 19 pos = - 1 ASSIGN 20 pos = - 1 LVAL 21 pos NAME 22 pos LEAF_NODE 23 pos ASSIGN_OP 21 = LEAF_NODE 22 = RVAL 21 - 1 UNARY_EXPR 22 - 1 UNARY_OPERATOR 23 - LEAF_NODE 24 - FIELD 23 1 LEAF_NODE 24 1 LEAF_NODE 18 ; SIMPLE_DECL 17 int found ; found = 0 ; VAR_DECL 18 int found ; found = 0 TYPE 19 int TYPE_NAME 20 int LEAF_NODE 21 int NAME 19 found LEAF_NODE 20 found LEAF_NODE 19 ; INIT 19 found = 0 ASSIGN 20 found = 0 LVAL 21 found NAME 22 found LEAF_NODE 23 found ASSIGN_OP 21 = LEAF_NODE 22 = RVAL 21 0 FIELD 22 0 LEAF_NODE 23 0 LEAF_NODE 18 ; ITERATION 17 KEYWORD 18 for LEAF_NODE 19 for LEAF_NODE 18 ( FOR_INIT 18 ; LEAF_NODE 19 ; LEAF_NODE 18 CONDITION LEAF_NODE 18 ; LEAF_NODE 18 FOR_EXPR LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 pos = X509_NAME_get_index_by_NID ( name , NID_commonName , pos ) ; EXPR 21 pos = X509_NAME_get_index_by_NID ( name , NID_commonName , pos ) ASSIGN 22 pos = X509_NAME_get_index_by_NID ( name , NID_commonName , pos ) LVAL 23 pos FIELD 24 pos LEAF_NODE 25 pos ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 X509_NAME_get_index_by_NID ( name , NID_commonName , pos ) FUNCTION_CALL 24 X509_NAME_get_index_by_NID ( name , NID_commonName , pos ) CALLEE 25 X509_NAME_get_index_by_NID LEAF_NODE 26 X509_NAME_get_index_by_NID LEAF_NODE 25 ( ARGUMENT 25 name FIELD 26 name LEAF_NODE 27 name LEAF_NODE 25 , ARGUMENT 25 NID_commonName FIELD 26 NID_commonName LEAF_NODE 27 NID_commonName LEAF_NODE 25 , ARGUMENT 25 pos FIELD 26 pos LEAF_NODE 27 pos LEAF_NODE 25 ) LEAF_NODE 21 ; SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 pos < 0 EXPR 22 pos < 0 FIELD 23 pos LEAF_NODE 24 pos REL_OPERATOR 23 < LEAF_NODE 24 < FIELD 23 0 LEAF_NODE 24 0 LEAF_NODE 21 ) STATEMENTS 21 JUMP_STATEMENT 22 break DESTINATION ; KEYWORD 23 break LEAF_NODE 24 break LEAF_NODE 23 DESTINATION LEAF_NODE 23 ; EXPR_STATEMENT 20 str = X509_NAME_ENTRY_get_data ( X509_NAME_get_entry ( name , pos ) ) ; EXPR 21 str = X509_NAME_ENTRY_get_data ( X509_NAME_get_entry ( name , pos ) ) ASSIGN 22 str = X509_NAME_ENTRY_get_data ( X509_NAME_get_entry ( name , pos ) ) LVAL 23 str FIELD 24 str LEAF_NODE 25 str ASSIGN_OP 23 = LEAF_NODE 24 = RVAL 23 X509_NAME_ENTRY_get_data ( X509_NAME_get_entry ( name , pos ) ) FUNCTION_CALL 24 X509_NAME_ENTRY_get_data ( X509_NAME_get_entry ( name , pos ) ) CALLEE 25 X509_NAME_ENTRY_get_data LEAF_NODE 26 X509_NAME_ENTRY_get_data LEAF_NODE 25 ( ARGUMENT 25 X509_NAME_get_entry ( name , pos ) FUNCTION_CALL 26 X509_NAME_get_entry ( name , pos ) CALLEE 27 X509_NAME_get_entry LEAF_NODE 28 X509_NAME_get_entry LEAF_NODE 27 ( ARGUMENT 27 name FIELD 28 name LEAF_NODE 29 name LEAF_NODE 27 , ARGUMENT 27 pos FIELD 28 pos LEAF_NODE 29 pos LEAF_NODE 27 ) LEAF_NODE 25 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 ASN1_STRING_to_UTF8 ( & str2 , str ) ; EXPR 21 ASN1_STRING_to_UTF8 ( & str2 , str ) FUNCTION_CALL 22 ASN1_STRING_to_UTF8 ( & str2 , str ) CALLEE 23 ASN1_STRING_to_UTF8 LEAF_NODE 24 ASN1_STRING_to_UTF8 LEAF_NODE 23 ( ARGUMENT 23 & str2 UNARY_EXPR 24 & str2 UNARY_OPERATOR 25 & LEAF_NODE 26 & FIELD 25 str2 LEAF_NODE 26 str2 LEAF_NODE 23 , ARGUMENT 23 str FIELD 24 str LEAF_NODE 25 str LEAF_NODE 23 ) LEAF_NODE 21 ; SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 str2 EXPR 22 str2 FIELD 23 str2 LEAF_NODE 24 str2 LEAF_NODE 21 ) STATEMENTS 21 LEAF_NODE 22 { STATEMENTS 22 SELECTION 23 KEYWORD 24 if LEAF_NODE 25 if LEAF_NODE 24 ( CONDITION 24 ! strcasecmp ( tcptls_session -> parent -> hostname , ( char * ) str2 ) EXPR 25 ! strcasecmp ( tcptls_session -> parent -> hostname , ( char * ) str2 ) UNARY_EXPR 26 ! strcasecmp ( tcptls_session -> parent -> hostname , ( char * ) str2 ) UNARY_OPERATOR 27 ! LEAF_NODE 28 ! FUNCTION_CALL 27 strcasecmp ( tcptls_session -> parent -> hostname , ( char * ) str2 ) CALLEE 28 strcasecmp LEAF_NODE 29 strcasecmp LEAF_NODE 28 ( ARGUMENT 28 tcptls_session -> parent -> hostname FIELD 29 tcptls_session -> parent -> hostname LEAF_NODE 30 tcptls_session LEAF_NODE 30 -> LEAF_NODE 30 parent LEAF_NODE 30 -> LEAF_NODE 30 hostname LEAF_NODE 28 , ARGUMENT 28 ( char * ) str2 LEAF_NODE 29 ( TYPE_NAME 29 char LEAF_NODE 30 char LEAF_NODE 29 * LEAF_NODE 29 ) FIELD 29 str2 LEAF_NODE 30 str2 LEAF_NODE 28 ) LEAF_NODE 24 ) STATEMENTS 24 EXPR_STATEMENT 25 found = 1 ; EXPR 26 found = 1 ASSIGN 27 found = 1 LVAL 28 found FIELD 29 found LEAF_NODE 30 found ASSIGN_OP 28 = LEAF_NODE 29 = RVAL 28 1 FIELD 29 1 LEAF_NODE 30 1 LEAF_NODE 26 ; EXPR_STATEMENT 23 ast_debug ( 3 , \"SSL Common Name compare s1='%s' s2='%s'\\n\" , tcptls_session -> parent -> hostname , str2 ) ; EXPR 24 ast_debug ( 3 , \"SSL Common Name compare s1='%s' s2='%s'\\n\" , tcptls_session -> parent -> hostname , str2 ) FUNCTION_CALL 25 ast_debug ( 3 , \"SSL Common Name compare s1='%s' s2='%s'\\n\" , tcptls_session -> parent -> hostname , str2 ) CALLEE 26 ast_debug LEAF_NODE 27 ast_debug LEAF_NODE 26 ( ARGUMENT 26 3 FIELD 27 3 LEAF_NODE 28 3 LEAF_NODE 26 , ARGUMENT 26 \"SSL Common Name compare s1='%s' s2='%s'\\n\" FIELD 27 \"SSL Common Name compare s1='%s' s2='%s'\\n\" LEAF_NODE 28 \"SSL Common Name compare s1='%s' s2='%s'\\n\" LEAF_NODE 26 , ARGUMENT 26 tcptls_session -> parent -> hostname FIELD 27 tcptls_session -> parent -> hostname LEAF_NODE 28 tcptls_session LEAF_NODE 28 -> LEAF_NODE 28 parent LEAF_NODE 28 -> LEAF_NODE 28 hostname LEAF_NODE 26 , ARGUMENT 26 str2 FIELD 27 str2 LEAF_NODE 28 str2 LEAF_NODE 26 ) LEAF_NODE 24 ; EXPR_STATEMENT 23 OPENSSL_free ( str2 ) ; EXPR 24 OPENSSL_free ( str2 ) FUNCTION_CALL 25 OPENSSL_free ( str2 ) CALLEE 26 OPENSSL_free LEAF_NODE 27 OPENSSL_free LEAF_NODE 26 ( ARGUMENT 26 str2 FIELD 27 str2 LEAF_NODE 28 str2 LEAF_NODE 26 ) LEAF_NODE 24 ; LEAF_NODE 22 } SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 found EXPR 22 found FIELD 23 found LEAF_NODE 24 found LEAF_NODE 21 ) STATEMENTS 21 JUMP_STATEMENT 22 break DESTINATION ; KEYWORD 23 break LEAF_NODE 24 break LEAF_NODE 23 DESTINATION LEAF_NODE 23 ; LEAF_NODE 19 } SELECTION 17 KEYWORD 18 if LEAF_NODE 19 if LEAF_NODE 18 ( CONDITION 18 ! found EXPR 19 ! found UNARY_EXPR 20 ! found UNARY_OPERATOR 21 ! LEAF_NODE 22 ! FIELD 21 found LEAF_NODE 22 found LEAF_NODE 18 ) STATEMENTS 18 LEAF_NODE 19 { STATEMENTS 19 EXPR_STATEMENT 20 ast_log ( LOG_ERROR , \"Certificate common name did not match (%s)\\n\" , tcptls_session -> parent -> hostname ) ; EXPR 21 ast_log ( LOG_ERROR , \"Certificate common name did not match (%s)\\n\" , tcptls_session -> parent -> hostname ) FUNCTION_CALL 22 ast_log ( LOG_ERROR , \"Certificate common name did not match (%s)\\n\" , tcptls_session -> parent -> hostname ) CALLEE 23 ast_log LEAF_NODE 24 ast_log LEAF_NODE 23 ( ARGUMENT 23 LOG_ERROR FIELD 24 LOG_ERROR LEAF_NODE 25 LOG_ERROR LEAF_NODE 23 , ARGUMENT 23 \"Certificate common name did not match (%s)\\n\" FIELD 24 \"Certificate common name did not match (%s)\\n\" LEAF_NODE 25 \"Certificate common name did not match (%s)\\n\" LEAF_NODE 23 , ARGUMENT 23 tcptls_session -> parent -> hostname FIELD 24 tcptls_session -> parent -> hostname LEAF_NODE 25 tcptls_session LEAF_NODE 25 -> LEAF_NODE 25 parent LEAF_NODE 25 -> LEAF_NODE 25 hostname LEAF_NODE 23 ) LEAF_NODE 21 ; SELECTION 20 KEYWORD 21 if LEAF_NODE 22 if LEAF_NODE 21 ( CONDITION 21 peer EXPR 22 peer FIELD 23 peer LEAF_NODE 24 peer LEAF_NODE 21 ) STATEMENTS 21 EXPR_STATEMENT 22 X509_free ( peer ) ; EXPR 23 X509_free ( peer ) FUNCTION_CALL 24 X509_free ( peer ) CALLEE 25 X509_free LEAF_NODE 26 X509_free LEAF_NODE 25 ( ARGUMENT 25 peer FIELD 26 peer LEAF_NODE 27 peer LEAF_NODE 25 ) LEAF_NODE 23 ; EXPR_STATEMENT 20 close ( tcptls_session -> fd ) ; EXPR 21 close ( tcptls_session -> fd ) FUNCTION_CALL 22 close ( tcptls_session -> fd ) CALLEE 23 close LEAF_NODE 24 close LEAF_NODE 23 ( ARGUMENT 23 tcptls_session -> fd FIELD 24 tcptls_session -> fd LEAF_NODE 25 tcptls_session LEAF_NODE 25 -> LEAF_NODE 25 fd LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 fclose ( tcptls_session -> f ) ; EXPR 21 fclose ( tcptls_session -> f ) FUNCTION_CALL 22 fclose ( tcptls_session -> f ) CALLEE 23 fclose LEAF_NODE 24 fclose LEAF_NODE 23 ( ARGUMENT 23 tcptls_session -> f FIELD 24 tcptls_session -> f LEAF_NODE 25 tcptls_session LEAF_NODE 25 -> LEAF_NODE 25 f LEAF_NODE 23 ) LEAF_NODE 21 ; EXPR_STATEMENT 20 ao2_ref ( tcptls_session , - 1 ) ; EXPR 21 ao2_ref ( tcptls_session , - 1 ) FUNCTION_CALL 22 ao2_ref ( tcptls_session , - 1 ) CALLEE 23 ao2_ref LEAF_NODE 24 ao2_ref LEAF_NODE 23 ( ARGUMENT 23 tcptls_session FIELD 24 tcptls_session LEAF_NODE 25 tcptls_session LEAF_NODE 23 , ARGUMENT 23 - 1 UNARY_EXPR 24 - 1 UNARY_OPERATOR 25 - LEAF_NODE 26 - FIELD 25 1 LEAF_NODE 26 1 LEAF_NODE 23 ) LEAF_NODE 21 ; JUMP_STATEMENT 20 return NULL ; KEYWORD 21 return LEAF_NODE 22 return DESTINATION 21 NULL EXPR 22 NULL FIELD 23 NULL LEAF_NODE 24 NULL LEAF_NODE 21 ; LEAF_NODE 19 } LEAF_NODE 16 } SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 peer EXPR 16 peer FIELD 17 peer LEAF_NODE 18 peer LEAF_NODE 15 ) STATEMENTS 15 EXPR_STATEMENT 16 X509_free ( peer ) ; EXPR 17 X509_free ( peer ) FUNCTION_CALL 18 X509_free ( peer ) CALLEE 19 X509_free LEAF_NODE 20 X509_free LEAF_NODE 19 ( ARGUMENT 19 peer FIELD 20 peer LEAF_NODE 21 peer LEAF_NODE 19 ) LEAF_NODE 17 ; LEAF_NODE 13 } LEAF_NODE 10 } SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ! tcptls_session -> f EXPR 10 ! tcptls_session -> f UNARY_EXPR 11 ! tcptls_session -> f UNARY_OPERATOR 12 ! LEAF_NODE 13 ! FIELD 12 tcptls_session -> f LEAF_NODE 13 tcptls_session LEAF_NODE 13 -> LEAF_NODE 13 f LEAF_NODE 9 ) STATEMENTS 9 EXPR_STATEMENT 10 SSL_free ( tcptls_session -> ssl ) ; EXPR 11 SSL_free ( tcptls_session -> ssl ) FUNCTION_CALL 12 SSL_free ( tcptls_session -> ssl ) CALLEE 13 SSL_free LEAF_NODE 14 SSL_free LEAF_NODE 13 ( ARGUMENT 13 tcptls_session -> ssl FIELD 14 tcptls_session -> ssl LEAF_NODE 15 tcptls_session LEAF_NODE 15 -> LEAF_NODE 15 ssl LEAF_NODE 13 ) LEAF_NODE 11 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! tcptls_session -> f EXPR 5 ! tcptls_session -> f UNARY_EXPR 6 ! tcptls_session -> f UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 tcptls_session -> f LEAF_NODE 8 tcptls_session LEAF_NODE 8 -> LEAF_NODE 8 f LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 close ( tcptls_session -> fd ) ; EXPR 7 close ( tcptls_session -> fd ) FUNCTION_CALL 8 close ( tcptls_session -> fd ) CALLEE 9 close LEAF_NODE 10 close LEAF_NODE 9 ( ARGUMENT 9 tcptls_session -> fd FIELD 10 tcptls_session -> fd LEAF_NODE 11 tcptls_session LEAF_NODE 11 -> LEAF_NODE 11 fd LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"FILE * open failed!\\n\" ) ; EXPR 7 ast_log ( LOG_WARNING , \"FILE * open failed!\\n\" ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"FILE * open failed!\\n\" ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"FILE * open failed!\\n\" FIELD 10 \"FILE * open failed!\\n\" LEAF_NODE 11 \"FILE * open failed!\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ao2_ref ( tcptls_session , - 1 ) ; EXPR 7 ao2_ref ( tcptls_session , - 1 ) FUNCTION_CALL 8 ao2_ref ( tcptls_session , - 1 ) CALLEE 9 ao2_ref LEAF_NODE 10 ao2_ref LEAF_NODE 9 ( ARGUMENT 9 tcptls_session FIELD 10 tcptls_session LEAF_NODE 11 tcptls_session LEAF_NODE 9 , ARGUMENT 9 - 1 UNARY_EXPR 10 - 1 UNARY_OPERATOR 11 - LEAF_NODE 12 - FIELD 11 1 LEAF_NODE 12 1 LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return NULL ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 NULL EXPR 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 tcptls_session && tcptls_session -> parent -> worker_fn EXPR 5 tcptls_session && tcptls_session -> parent -> worker_fn AND 6 tcptls_session && tcptls_session -> parent -> worker_fn EXPR 7 tcptls_session FIELD 8 tcptls_session LEAF_NODE 9 tcptls_session LEAF_NODE 7 && EXPR 7 tcptls_session -> parent -> worker_fn FIELD 8 tcptls_session -> parent -> worker_fn LEAF_NODE 9 tcptls_session LEAF_NODE 9 -> LEAF_NODE 9 parent LEAF_NODE 9 -> LEAF_NODE 9 worker_fn LEAF_NODE 4 ) STATEMENTS 4 JUMP_STATEMENT 5 return tcptls_session -> parent -> worker_fn ( tcptls_session ) ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 tcptls_session -> parent -> worker_fn ( tcptls_session ) EXPR 7 tcptls_session -> parent -> worker_fn ( tcptls_session ) FUNCTION_CALL 8 tcptls_session -> parent -> worker_fn ( tcptls_session ) CALLEE 9 tcptls_session -> parent -> worker_fn LEAF_NODE 10 tcptls_session LEAF_NODE 10 -> LEAF_NODE 10 parent LEAF_NODE 10 -> LEAF_NODE 10 worker_fn LEAF_NODE 9 ( ARGUMENT 9 tcptls_session FIELD 10 tcptls_session LEAF_NODE 11 tcptls_session LEAF_NODE 9 ) LEAF_NODE 6 ; SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 JUMP_STATEMENT 5 return tcptls_session ; KEYWORD 6 return LEAF_NODE 7 return DESTINATION 6 tcptls_session EXPR 7 tcptls_session FIELD 8 tcptls_session LEAF_NODE 9 tcptls_session LEAF_NODE 6 ; LEAF_NODE 2 }", "idx": 41, "project": "openssl_ast_vul_function_test_adv_42", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 struct fork_cdr_message_payload BASE_CLASSES { const char * channel_name ; struct ast_flags * flags ; } ; CLASS_DEF 2 struct fork_cdr_message_payload BASE_CLASSES { const char * channel_name ; struct ast_flags * flags ; } CLASS_DEF 3 struct fork_cdr_message_payload BASE_CLASSES { const char * channel_name ; struct ast_flags * flags ; } LEAF_NODE 4 struct CLASS_NAME 4 fork_cdr_message_payload LEAF_NODE 5 fork_cdr_message_payload LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 const char * channel_name ; struct ast_flags * flags ; SIMPLE_DECL 5 const char * channel_name ; VAR_DECL 6 const char * channel_name TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 channel_name LEAF_NODE 8 channel_name LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags * flags ; VAR_DECL 6 struct ast_flags * flags TYPE 7 struct ast_flags * TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags POINTER 8 * LEAF_NODE 9 * NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 forkcdr_exec LEAF_NODE 3 forkcdr_exec PARAMETER_LIST 2 ( struct ast_channel * chan , const char * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 , PARAMETER_DECL 3 const char * data TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 LEAF_NODE 3 RAII_VAR LEAF_NODE 3 ( LEAF_NODE 3 struct LEAF_NODE 3 stasis_message LEAF_NODE 3 * LEAF_NODE 3 , LEAF_NODE 3 message LEAF_NODE 3 , LEAF_NODE 3 NULL LEAF_NODE 3 , LEAF_NODE 3 ao2_cleanup LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 RAII_VAR LEAF_NODE 3 ( LEAF_NODE 3 struct LEAF_NODE 3 fork_cdr_message_payload LEAF_NODE 3 * LEAF_NODE 3 , LEAF_NODE 3 payload LEAF_NODE 3 , LEAF_NODE 3 NULL LEAF_NODE 3 , LEAF_NODE 3 ao2_cleanup LEAF_NODE 3 ) LEAF_NODE 3 ; LEAF_NODE 3 RAII_VAR LEAF_NODE 3 ( LEAF_NODE 3 struct LEAF_NODE 3 stasis_message_router LEAF_NODE 3 * LEAF_NODE 3 , LEAF_NODE 3 router LEAF_NODE 3 , LEAF_NODE 3 ast_cdr_message_router LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 3 , LEAF_NODE 3 ao2_cleanup LEAF_NODE 3 ) LEAF_NODE 3 ; SIMPLE_DECL 3 char * parse ; VAR_DECL 4 char * parse TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 parse LEAF_NODE 6 parse LEAF_NODE 4 ; LEAF_NODE 3 struct LEAF_NODE 3 ast_flags LEAF_NODE 3 flags LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 0 LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; LEAF_NODE 3 AST_DECLARE_APP_ARGS LEAF_NODE 3 ( EXPR_STATEMENT 3 args , AST_APP_ARG ( options ) ; EXPR 4 args , AST_APP_ARG ( options ) FIELD 5 args LEAF_NODE 6 args LEAF_NODE 5 , FUNCTION_CALL 5 AST_APP_ARG ( options ) CALLEE 6 AST_APP_ARG LEAF_NODE 7 AST_APP_ARG LEAF_NODE 6 ( ARGUMENT 6 options FIELD 7 options LEAF_NODE 8 options LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 3 ) LEAF_NODE 3 ; EXPR_STATEMENT 3 parse = ast_strdupa ( data ) ; EXPR 4 parse = ast_strdupa ( data ) ASSIGN 5 parse = ast_strdupa ( data ) LVAL 6 parse FIELD 7 parse LEAF_NODE 8 parse ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_strdupa ( data ) FUNCTION_CALL 7 ast_strdupa ( data ) CALLEE 8 ast_strdupa LEAF_NODE 9 ast_strdupa LEAF_NODE 8 ( ARGUMENT 8 data FIELD 9 data LEAF_NODE 10 data LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 AST_STANDARD_APP_ARGS ( args , parse ) ; EXPR 4 AST_STANDARD_APP_ARGS ( args , parse ) FUNCTION_CALL 5 AST_STANDARD_APP_ARGS ( args , parse ) CALLEE 6 AST_STANDARD_APP_ARGS LEAF_NODE 7 AST_STANDARD_APP_ARGS LEAF_NODE 6 ( ARGUMENT 6 args FIELD 7 args LEAF_NODE 8 args LEAF_NODE 6 , ARGUMENT 6 parse FIELD 7 parse LEAF_NODE 8 parse LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! ast_strlen_zero ( args . options ) EXPR 5 ! ast_strlen_zero ( args . options ) UNARY_EXPR 6 ! ast_strlen_zero ( args . options ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 ast_strlen_zero ( args . options ) CALLEE 8 ast_strlen_zero LEAF_NODE 9 ast_strlen_zero LEAF_NODE 8 ( ARGUMENT 8 args . options FIELD 9 args . options LEAF_NODE 10 args LEAF_NODE 10 . LEAF_NODE 10 options LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_app_parse_options ( forkcdr_exec_options , & flags , NULL , args . options ) ; EXPR 7 ast_app_parse_options ( forkcdr_exec_options , & flags , NULL , args . options ) FUNCTION_CALL 8 ast_app_parse_options ( forkcdr_exec_options , & flags , NULL , args . options ) CALLEE 9 ast_app_parse_options LEAF_NODE 10 ast_app_parse_options LEAF_NODE 9 ( ARGUMENT 9 forkcdr_exec_options FIELD 10 forkcdr_exec_options LEAF_NODE 11 forkcdr_exec_options LEAF_NODE 9 , ARGUMENT 9 & flags UNARY_EXPR 10 & flags UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 flags LEAF_NODE 12 flags LEAF_NODE 9 , ARGUMENT 9 NULL FIELD 10 NULL LEAF_NODE 11 NULL LEAF_NODE 9 , ARGUMENT 9 args . options FIELD 10 args . options LEAF_NODE 11 args LEAF_NODE 11 . LEAF_NODE 11 options LEAF_NODE 9 ) LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! forkcdr_message_type ( ) EXPR 5 ! forkcdr_message_type ( ) UNARY_EXPR 6 ! forkcdr_message_type ( ) UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FUNCTION_CALL 7 forkcdr_message_type ( ) CALLEE 8 forkcdr_message_type LEAF_NODE 9 forkcdr_message_type LEAF_NODE 8 ( LEAF_NODE 8 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( AST_LOG_WARNING , \"Failed to manipulate CDR for channel %s: no message type\\n\" , ast_channel_name ( chan ) ) ; EXPR 7 ast_log ( AST_LOG_WARNING , \"Failed to manipulate CDR for channel %s: no message type\\n\" , ast_channel_name ( chan ) ) FUNCTION_CALL 8 ast_log ( AST_LOG_WARNING , \"Failed to manipulate CDR for channel %s: no message type\\n\" , ast_channel_name ( chan ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 AST_LOG_WARNING FIELD 10 AST_LOG_WARNING LEAF_NODE 11 AST_LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"Failed to manipulate CDR for channel %s: no message type\\n\" FIELD 10 \"Failed to manipulate CDR for channel %s: no message type\\n\" LEAF_NODE 11 \"Failed to manipulate CDR for channel %s: no message type\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_channel_name ( chan ) FUNCTION_CALL 10 ast_channel_name ( chan ) CALLEE 11 ast_channel_name LEAF_NODE 12 ast_channel_name LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 payload = ao2_alloc ( sizeof ( * payload ) , NULL ) ; EXPR 4 payload = ao2_alloc ( sizeof ( * payload ) , NULL ) ASSIGN 5 payload = ao2_alloc ( sizeof ( * payload ) , NULL ) LVAL 6 payload FIELD 7 payload LEAF_NODE 8 payload ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ao2_alloc ( sizeof ( * payload ) , NULL ) FUNCTION_CALL 7 ao2_alloc ( sizeof ( * payload ) , NULL ) CALLEE 8 ao2_alloc LEAF_NODE 9 ao2_alloc LEAF_NODE 8 ( ARGUMENT 8 sizeof ( * payload ) FUNCTION_CALL 9 sizeof ( * payload ) CALLEE 10 sizeof LEAF_NODE 11 sizeof LEAF_NODE 10 ( ARGUMENT 10 * payload UNARY_EXPR 11 * payload UNARY_OPERATOR 12 * LEAF_NODE 13 * FIELD 12 payload LEAF_NODE 13 payload LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 NULL FIELD 9 NULL LEAF_NODE 10 NULL LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! payload EXPR 5 ! payload UNARY_EXPR 6 ! payload UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 payload LEAF_NODE 8 payload LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! router EXPR 5 ! router UNARY_EXPR 6 ! router UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 router LEAF_NODE 8 router LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( AST_LOG_WARNING , \"Failed to manipulate CDR for channel %s: no message router\\n\" , ast_channel_name ( chan ) ) ; EXPR 7 ast_log ( AST_LOG_WARNING , \"Failed to manipulate CDR for channel %s: no message router\\n\" , ast_channel_name ( chan ) ) FUNCTION_CALL 8 ast_log ( AST_LOG_WARNING , \"Failed to manipulate CDR for channel %s: no message router\\n\" , ast_channel_name ( chan ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 AST_LOG_WARNING FIELD 10 AST_LOG_WARNING LEAF_NODE 11 AST_LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"Failed to manipulate CDR for channel %s: no message router\\n\" FIELD 10 \"Failed to manipulate CDR for channel %s: no message router\\n\" LEAF_NODE 11 \"Failed to manipulate CDR for channel %s: no message router\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_channel_name ( chan ) FUNCTION_CALL 10 ast_channel_name ( chan ) CALLEE 11 ast_channel_name LEAF_NODE 12 ast_channel_name LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 payload -> channel_name = ast_channel_name ( chan ) ; EXPR 4 payload -> channel_name = ast_channel_name ( chan ) ASSIGN 5 payload -> channel_name = ast_channel_name ( chan ) LVAL 6 payload -> channel_name FIELD 7 payload -> channel_name LEAF_NODE 8 payload LEAF_NODE 8 -> LEAF_NODE 8 channel_name ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_channel_name ( chan ) FUNCTION_CALL 7 ast_channel_name ( chan ) CALLEE 8 ast_channel_name LEAF_NODE 9 ast_channel_name LEAF_NODE 8 ( ARGUMENT 8 chan FIELD 9 chan LEAF_NODE 10 chan LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 payload -> flags = & flags ; EXPR 4 payload -> flags = & flags ASSIGN 5 payload -> flags = & flags LVAL 6 payload -> flags FIELD 7 payload -> flags LEAF_NODE 8 payload LEAF_NODE 8 -> LEAF_NODE 8 flags ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 & flags UNARY_EXPR 7 & flags UNARY_OPERATOR 8 & LEAF_NODE 9 & FIELD 8 flags LEAF_NODE 9 flags LEAF_NODE 4 ; EXPR_STATEMENT 3 message = stasis_message_create ( forkcdr_message_type ( ) , payload ) ; EXPR 4 message = stasis_message_create ( forkcdr_message_type ( ) , payload ) ASSIGN 5 message = stasis_message_create ( forkcdr_message_type ( ) , payload ) LVAL 6 message FIELD 7 message LEAF_NODE 8 message ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 stasis_message_create ( forkcdr_message_type ( ) , payload ) FUNCTION_CALL 7 stasis_message_create ( forkcdr_message_type ( ) , payload ) CALLEE 8 stasis_message_create LEAF_NODE 9 stasis_message_create LEAF_NODE 8 ( ARGUMENT 8 forkcdr_message_type ( ) FUNCTION_CALL 9 forkcdr_message_type ( ) CALLEE 10 forkcdr_message_type LEAF_NODE 11 forkcdr_message_type LEAF_NODE 10 ( LEAF_NODE 10 ) LEAF_NODE 8 , ARGUMENT 8 payload FIELD 9 payload LEAF_NODE 10 payload LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! message EXPR 5 ! message UNARY_EXPR 6 ! message UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 message LEAF_NODE 8 message LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( AST_LOG_WARNING , \"Failed to fork CDR for channel %s: unable to create message\\n\" , ast_channel_name ( chan ) ) ; EXPR 7 ast_log ( AST_LOG_WARNING , \"Failed to fork CDR for channel %s: unable to create message\\n\" , ast_channel_name ( chan ) ) FUNCTION_CALL 8 ast_log ( AST_LOG_WARNING , \"Failed to fork CDR for channel %s: unable to create message\\n\" , ast_channel_name ( chan ) ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 AST_LOG_WARNING FIELD 10 AST_LOG_WARNING LEAF_NODE 11 AST_LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"Failed to fork CDR for channel %s: unable to create message\\n\" FIELD 10 \"Failed to fork CDR for channel %s: unable to create message\\n\" LEAF_NODE 11 \"Failed to fork CDR for channel %s: unable to create message\\n\" LEAF_NODE 9 , ARGUMENT 9 ast_channel_name ( chan ) FUNCTION_CALL 10 ast_channel_name ( chan ) CALLEE 11 ast_channel_name LEAF_NODE 12 ast_channel_name LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return - 1 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 - 1 EXPR 8 - 1 UNARY_EXPR 9 - 1 UNARY_OPERATOR 10 - LEAF_NODE 11 - FIELD 10 1 LEAF_NODE 11 1 LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 stasis_message_router_publish_sync ( router , message ) ; EXPR 4 stasis_message_router_publish_sync ( router , message ) FUNCTION_CALL 5 stasis_message_router_publish_sync ( router , message ) CALLEE 6 stasis_message_router_publish_sync LEAF_NODE 7 stasis_message_router_publish_sync LEAF_NODE 6 ( ARGUMENT 6 router FIELD 7 router LEAF_NODE 8 router LEAF_NODE 6 , ARGUMENT 6 message FIELD 7 message LEAF_NODE 8 message LEAF_NODE 6 ) LEAF_NODE 4 ; JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 42, "project": "openssl_ast_vul_function_test_adv_25", "target": 1}
{"func": "SIMPLE_DECL 1 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } ; CLASS_DEF 2 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } CLASS_DEF 3 struct ast_aoc_decoded BASE_CLASSES { enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_aoc_decoded LEAF_NODE 5 ast_aoc_decoded LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_aoc_type msg_type ; enum ast_aoc_charge_type charge_type ; enum ast_aoc_request request_flag ; enum ast_aoc_total_type total_type ; enum ast_aoc_currency_multiplier multiplier ; unsigned int currency_amount ; char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; int unit_count ; struct ast_aoc_unit_entry [ 32 ] unit_list ; enum ast_aoc_billing_id billing_id ; struct ast_aoc_charging_association charging_association ; int aoc_s_count ; struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; char termination_request ; SIMPLE_DECL 5 enum ast_aoc_type msg_type ; VAR_DECL 6 enum ast_aoc_type msg_type TYPE 7 enum ast_aoc_type TYPE_NAME 8 enum ast_aoc_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_type NAME 7 msg_type LEAF_NODE 8 msg_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_charge_type charge_type ; VAR_DECL 6 enum ast_aoc_charge_type charge_type TYPE 7 enum ast_aoc_charge_type TYPE_NAME 8 enum ast_aoc_charge_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_charge_type NAME 7 charge_type LEAF_NODE 8 charge_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_request request_flag ; VAR_DECL 6 enum ast_aoc_request request_flag TYPE 7 enum ast_aoc_request TYPE_NAME 8 enum ast_aoc_request LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_request NAME 7 request_flag LEAF_NODE 8 request_flag LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_total_type total_type ; VAR_DECL 6 enum ast_aoc_total_type total_type TYPE 7 enum ast_aoc_total_type TYPE_NAME 8 enum ast_aoc_total_type LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_total_type NAME 7 total_type LEAF_NODE 8 total_type LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_currency_multiplier multiplier ; VAR_DECL 6 enum ast_aoc_currency_multiplier multiplier TYPE 7 enum ast_aoc_currency_multiplier TYPE_NAME 8 enum ast_aoc_currency_multiplier LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_currency_multiplier NAME 7 multiplier LEAF_NODE 8 multiplier LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int currency_amount ; VAR_DECL 6 unsigned int currency_amount TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 currency_amount LEAF_NODE 8 currency_amount LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AOC_CURRENCY_NAME_SIZE ] currency_name ; VAR_DECL 6 char [ AOC_CURRENCY_NAME_SIZE ] currency_name TYPE 7 char [ AOC_CURRENCY_NAME_SIZE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AOC_CURRENCY_NAME_SIZE ] LEAF_NODE 9 [ FIELD 9 AOC_CURRENCY_NAME_SIZE LEAF_NODE 10 AOC_CURRENCY_NAME_SIZE LEAF_NODE 9 ] NAME 7 currency_name LEAF_NODE 8 currency_name LEAF_NODE 6 ; SIMPLE_DECL 5 int unit_count ; VAR_DECL 6 int unit_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 unit_count LEAF_NODE 8 unit_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_unit_entry [ 32 ] unit_list ; VAR_DECL 6 struct ast_aoc_unit_entry [ 32 ] unit_list TYPE 7 struct ast_aoc_unit_entry [ 32 ] TYPE_NAME 8 struct ast_aoc_unit_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_unit_entry TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 unit_list LEAF_NODE 8 unit_list LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_aoc_billing_id billing_id ; VAR_DECL 6 enum ast_aoc_billing_id billing_id TYPE 7 enum ast_aoc_billing_id TYPE_NAME 8 enum ast_aoc_billing_id LEAF_NODE 9 enum LEAF_NODE 9 ast_aoc_billing_id NAME 7 billing_id LEAF_NODE 8 billing_id LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_charging_association charging_association ; VAR_DECL 6 struct ast_aoc_charging_association charging_association TYPE 7 struct ast_aoc_charging_association TYPE_NAME 8 struct ast_aoc_charging_association LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_charging_association NAME 7 charging_association LEAF_NODE 8 charging_association LEAF_NODE 6 ; SIMPLE_DECL 5 int aoc_s_count ; VAR_DECL 6 int aoc_s_count TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 aoc_s_count LEAF_NODE 8 aoc_s_count LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_aoc_s_entry [ 10 ] aoc_s_entries ; VAR_DECL 6 struct ast_aoc_s_entry [ 10 ] aoc_s_entries TYPE 7 struct ast_aoc_s_entry [ 10 ] TYPE_NAME 8 struct ast_aoc_s_entry LEAF_NODE 9 struct LEAF_NODE 9 ast_aoc_s_entry TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 aoc_s_entries LEAF_NODE 8 aoc_s_entries LEAF_NODE 6 ; SIMPLE_DECL 5 char termination_request ; VAR_DECL 6 char termination_request TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 termination_request LEAF_NODE 8 termination_request LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } ; CLASS_DEF 2 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } CLASS_DEF 3 struct aoc_ie_data BASE_CLASSES { unsigned char [ 1024 ] buf ; int pos ; } LEAF_NODE 4 struct CLASS_NAME 4 aoc_ie_data LEAF_NODE 5 aoc_ie_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 unsigned char [ 1024 ] buf ; int pos ; SIMPLE_DECL 5 unsigned char [ 1024 ] buf ; VAR_DECL 6 unsigned char [ 1024 ] buf TYPE 7 unsigned char [ 1024 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 buf LEAF_NODE 8 buf LEAF_NODE 6 ; SIMPLE_DECL 5 int pos ; VAR_DECL 6 int pos TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 pos LEAF_NODE 8 pos LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } ; CLASS_DEF 2 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } CLASS_DEF 3 enum stasis_app_subscription_model BASE_CLASSES { STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 stasis_app_subscription_model LEAF_NODE 5 stasis_app_subscription_model LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 STASIS_APP_SUBSCRIBE_MANUAL , STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 5 STASIS_APP_SUBSCRIBE_MANUAL LEAF_NODE 5 , LEAF_NODE 5 STASIS_APP_SUBSCRIBE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } ; CLASS_DEF 2 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } CLASS_DEF 3 struct stasis_app BASE_CLASSES { struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; } LEAF_NODE 4 struct CLASS_NAME 4 stasis_app LEAF_NODE 5 stasis_app LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct stasis_topic * topic ; struct stasis_message_router * router ; struct stasis_message_router * bridge_router ; struct stasis_message_router * endpoint_router ; struct ao2_container * forwards ; stasis_app_cb handler ; void * data ; enum stasis_app_subscription_model subscription_model ; int debug ; struct ast_json * events_allowed ; struct ast_json * events_disallowed ; char [ ] name ; SIMPLE_DECL 5 struct stasis_topic * topic ; VAR_DECL 6 struct stasis_topic * topic TYPE 7 struct stasis_topic * TYPE_NAME 8 struct stasis_topic LEAF_NODE 9 struct LEAF_NODE 9 stasis_topic POINTER 8 * LEAF_NODE 9 * NAME 7 topic LEAF_NODE 8 topic LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * router ; VAR_DECL 6 struct stasis_message_router * router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 router LEAF_NODE 8 router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * bridge_router ; VAR_DECL 6 struct stasis_message_router * bridge_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 bridge_router LEAF_NODE 8 bridge_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_message_router * endpoint_router ; VAR_DECL 6 struct stasis_message_router * endpoint_router TYPE 7 struct stasis_message_router * TYPE_NAME 8 struct stasis_message_router LEAF_NODE 9 struct LEAF_NODE 9 stasis_message_router POINTER 8 * LEAF_NODE 9 * NAME 7 endpoint_router LEAF_NODE 8 endpoint_router LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * forwards ; VAR_DECL 6 struct ao2_container * forwards TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 forwards LEAF_NODE 8 forwards LEAF_NODE 6 ; SIMPLE_DECL 5 stasis_app_cb handler ; VAR_DECL 6 stasis_app_cb handler TYPE 7 stasis_app_cb TYPE_NAME 8 stasis_app_cb LEAF_NODE 9 stasis_app_cb NAME 7 handler LEAF_NODE 8 handler LEAF_NODE 6 ; SIMPLE_DECL 5 void * data ; VAR_DECL 6 void * data TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 enum stasis_app_subscription_model subscription_model ; VAR_DECL 6 enum stasis_app_subscription_model subscription_model TYPE 7 enum stasis_app_subscription_model TYPE_NAME 8 enum stasis_app_subscription_model LEAF_NODE 9 enum LEAF_NODE 9 stasis_app_subscription_model NAME 7 subscription_model LEAF_NODE 8 subscription_model LEAF_NODE 6 ; SIMPLE_DECL 5 int debug ; VAR_DECL 6 int debug TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 debug LEAF_NODE 8 debug LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_allowed ; VAR_DECL 6 struct ast_json * events_allowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_allowed LEAF_NODE 8 events_allowed LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_json * events_disallowed ; VAR_DECL 6 struct ast_json * events_disallowed TYPE 7 struct ast_json * TYPE_NAME 8 struct ast_json LEAF_NODE 9 struct LEAF_NODE 9 ast_json POINTER 8 * LEAF_NODE 9 * NAME 7 events_disallowed LEAF_NODE 8 events_disallowed LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] name ; VAR_DECL 6 char [ ] name TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 name LEAF_NODE 8 name LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } ; CLASS_DEF 2 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } CLASS_DEF 3 enum forward_type BASE_CLASSES { FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , } LEAF_NODE 4 enum CLASS_NAME 4 forward_type LEAF_NODE 5 forward_type LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 FORWARD_CHANNEL , FORWARD_BRIDGE , FORWARD_ENDPOINT , LEAF_NODE 5 FORWARD_CHANNEL LEAF_NODE 5 , LEAF_NODE 5 FORWARD_BRIDGE LEAF_NODE 5 , LEAF_NODE 5 FORWARD_ENDPOINT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } ; CLASS_DEF 2 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } CLASS_DEF 3 struct app_forwards BASE_CLASSES { int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; } LEAF_NODE 4 struct CLASS_NAME 4 app_forwards LEAF_NODE 5 app_forwards LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int interested ; struct stasis_forward * topic_forward ; struct stasis_forward * topic_cached_forward ; enum forward_type forward_type ; char [ ] id ; SIMPLE_DECL 5 int interested ; VAR_DECL 6 int interested TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 interested LEAF_NODE 8 interested LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_forward ; VAR_DECL 6 struct stasis_forward * topic_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_forward LEAF_NODE 8 topic_forward LEAF_NODE 6 ; SIMPLE_DECL 5 struct stasis_forward * topic_cached_forward ; VAR_DECL 6 struct stasis_forward * topic_cached_forward TYPE 7 struct stasis_forward * TYPE_NAME 8 struct stasis_forward LEAF_NODE 9 struct LEAF_NODE 9 stasis_forward POINTER 8 * LEAF_NODE 9 * NAME 7 topic_cached_forward LEAF_NODE 8 topic_cached_forward LEAF_NODE 6 ; SIMPLE_DECL 5 enum forward_type forward_type ; VAR_DECL 6 enum forward_type forward_type TYPE 7 enum forward_type TYPE_NAME 8 enum forward_type LEAF_NODE 9 enum LEAF_NODE 9 forward_type NAME 7 forward_type LEAF_NODE 8 forward_type LEAF_NODE 6 ; SIMPLE_DECL 5 char [ ] id ; VAR_DECL 6 char [ ] id TYPE 7 char [ ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ ] LEAF_NODE 9 [ LEAF_NODE 9 ] NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } ; CLASS_DEF 2 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } CLASS_DEF 3 struct ast_channel_snapshot BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_channel_snapshot LEAF_NODE 5 ast_channel_snapshot LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( uniqueid ) ; AST_STRING_FIELD ( linkedid ) ; AST_STRING_FIELD ( appl ) ; AST_STRING_FIELD ( data ) ; AST_STRING_FIELD ( context ) ; AST_STRING_FIELD ( exten ) ; AST_STRING_FIELD ( accountcode ) ; AST_STRING_FIELD ( peeraccount ) ; AST_STRING_FIELD ( userfield ) ; AST_STRING_FIELD ( hangupsource ) ; AST_STRING_FIELD ( caller_name ) ; AST_STRING_FIELD ( caller_number ) ; AST_STRING_FIELD ( caller_dnid ) ; AST_STRING_FIELD ( caller_ani ) ; AST_STRING_FIELD ( caller_rdnis ) ; AST_STRING_FIELD ( caller_sufunctiondr ) ; AST_STRING_FIELD ( dialed_sufunctiondr ) ; AST_STRING_FIELD ( connected_name ) ; AST_STRING_FIELD ( connected_number ) ; AST_STRING_FIELD ( language ) ; AST_STRING_FIELD ( bridgeid ) ; AST_STRING_FIELD ( type ) ; ) ; struct ast_channel_snapshot_base * base ; struct ast_channel_snapshot_peer * peer ; struct ast_channel_snapshot_caller * caller ; struct ast_channel_snapshot_connected * connected ; struct ast_channel_snapshot_bridge * bridge ; struct ast_channel_snapshot_dialplan * dialplan ; struct ast_channel_snapshot_hangup * hangup ; enum ast_channel_state state ; int amaflags ; int priority ; int hangupcause ; int caller_pres ; struct ast_flags flags ; struct ast_flags softhangup_flags ; struct varshead * manager_vars ; struct varshead * ari_vars ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 uniqueid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 linkedid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 appl LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 data LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 context LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 exten LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 accountcode LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 peeraccount LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 userfield LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 hangupsource LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_dnid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_ani LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_rdnis LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 caller_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dialed_sufunctiondr LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connected_number LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 language LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 bridgeid LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 type LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_channel_snapshot_base * base ; VAR_DECL 6 struct ast_channel_snapshot_base * base TYPE 7 struct ast_channel_snapshot_base * TYPE_NAME 8 struct ast_channel_snapshot_base LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_base POINTER 8 * LEAF_NODE 9 * NAME 7 base LEAF_NODE 8 base LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_peer * peer ; VAR_DECL 6 struct ast_channel_snapshot_peer * peer TYPE 7 struct ast_channel_snapshot_peer * TYPE_NAME 8 struct ast_channel_snapshot_peer LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_peer POINTER 8 * LEAF_NODE 9 * NAME 7 peer LEAF_NODE 8 peer LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_caller * caller ; VAR_DECL 6 struct ast_channel_snapshot_caller * caller TYPE 7 struct ast_channel_snapshot_caller * TYPE_NAME 8 struct ast_channel_snapshot_caller LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_caller POINTER 8 * LEAF_NODE 9 * NAME 7 caller LEAF_NODE 8 caller LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_connected * connected ; VAR_DECL 6 struct ast_channel_snapshot_connected * connected TYPE 7 struct ast_channel_snapshot_connected * TYPE_NAME 8 struct ast_channel_snapshot_connected LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_connected POINTER 8 * LEAF_NODE 9 * NAME 7 connected LEAF_NODE 8 connected LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_bridge * bridge ; VAR_DECL 6 struct ast_channel_snapshot_bridge * bridge TYPE 7 struct ast_channel_snapshot_bridge * TYPE_NAME 8 struct ast_channel_snapshot_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 bridge LEAF_NODE 8 bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_dialplan * dialplan ; VAR_DECL 6 struct ast_channel_snapshot_dialplan * dialplan TYPE 7 struct ast_channel_snapshot_dialplan * TYPE_NAME 8 struct ast_channel_snapshot_dialplan LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_dialplan POINTER 8 * LEAF_NODE 9 * NAME 7 dialplan LEAF_NODE 8 dialplan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel_snapshot_hangup * hangup ; VAR_DECL 6 struct ast_channel_snapshot_hangup * hangup TYPE 7 struct ast_channel_snapshot_hangup * TYPE_NAME 8 struct ast_channel_snapshot_hangup LEAF_NODE 9 struct LEAF_NODE 9 ast_channel_snapshot_hangup POINTER 8 * LEAF_NODE 9 * NAME 7 hangup LEAF_NODE 8 hangup LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_channel_state state ; VAR_DECL 6 enum ast_channel_state state TYPE 7 enum ast_channel_state TYPE_NAME 8 enum ast_channel_state LEAF_NODE 9 enum LEAF_NODE 9 ast_channel_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int amaflags ; VAR_DECL 6 int amaflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 amaflags LEAF_NODE 8 amaflags LEAF_NODE 6 ; SIMPLE_DECL 5 int priority ; VAR_DECL 6 int priority TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 priority LEAF_NODE 8 priority LEAF_NODE 6 ; SIMPLE_DECL 5 int hangupcause ; VAR_DECL 6 int hangupcause TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 hangupcause LEAF_NODE 8 hangupcause LEAF_NODE 6 ; SIMPLE_DECL 5 int caller_pres ; VAR_DECL 6 int caller_pres TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 caller_pres LEAF_NODE 8 caller_pres LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags softhangup_flags ; VAR_DECL 6 struct ast_flags softhangup_flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 softhangup_flags LEAF_NODE 8 softhangup_flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * manager_vars ; VAR_DECL 6 struct varshead * manager_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 manager_vars LEAF_NODE 8 manager_vars LEAF_NODE 6 ; SIMPLE_DECL 5 struct varshead * ari_vars ; VAR_DECL 6 struct varshead * ari_vars TYPE 7 struct varshead * TYPE_NAME 8 struct varshead LEAF_NODE 9 struct LEAF_NODE 9 varshead POINTER 8 * LEAF_NODE 9 * NAME 7 ari_vars LEAF_NODE 8 ari_vars LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_debug ; VAR_DECL 2 int global_debug TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_debug LEAF_NODE 4 global_debug LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } ; CLASS_DEF 2 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } CLASS_DEF 3 struct adsi_display BASE_CLASSES { char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_display LEAF_NODE 5 adsi_display LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; char [ 70 ] data ; int datalen ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 70 ] data ; VAR_DECL 6 char [ 70 ] data TYPE 7 char [ 70 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 70 ] LEAF_NODE 9 [ FIELD 9 70 LEAF_NODE 10 70 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_state BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_state LEAF_NODE 5 adsi_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } ; CLASS_DEF 2 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } CLASS_DEF 3 struct adsi_soft_key BASE_CLASSES { char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_soft_key LEAF_NODE 5 adsi_soft_key LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int retstrlen ; int initlen ; int id ; int defined ; char [ 80 ] retstr ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int retstrlen ; VAR_DECL 6 int retstrlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 retstrlen LEAF_NODE 8 retstrlen LEAF_NODE 6 ; SIMPLE_DECL 5 int initlen ; VAR_DECL 6 int initlen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 initlen LEAF_NODE 8 initlen LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] retstr ; VAR_DECL 6 char [ 80 ] retstr TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 retstr LEAF_NODE 8 retstr LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } ; CLASS_DEF 2 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } CLASS_DEF 3 struct adsi_subscript BASE_CLASSES { char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_subscript LEAF_NODE 5 adsi_subscript LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; int defined ; int datalen ; int inscount ; int ifinscount ; char * ifdata ; char [ 2048 ] data ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; SIMPLE_DECL 5 int defined ; VAR_DECL 6 int defined TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 defined LEAF_NODE 8 defined LEAF_NODE 6 ; SIMPLE_DECL 5 int datalen ; VAR_DECL 6 int datalen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 datalen LEAF_NODE 8 datalen LEAF_NODE 6 ; SIMPLE_DECL 5 int inscount ; VAR_DECL 6 int inscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 inscount LEAF_NODE 8 inscount LEAF_NODE 6 ; SIMPLE_DECL 5 int ifinscount ; VAR_DECL 6 int ifinscount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ifinscount LEAF_NODE 8 ifinscount LEAF_NODE 6 ; SIMPLE_DECL 5 char * ifdata ; VAR_DECL 6 char * ifdata TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 ifdata LEAF_NODE 8 ifdata LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 2048 ] data ; VAR_DECL 6 char [ 2048 ] data TYPE 7 char [ 2048 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 2048 ] LEAF_NODE 9 [ FIELD 9 2048 LEAF_NODE 10 2048 LEAF_NODE 9 ] NAME 7 data LEAF_NODE 8 data LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } ; CLASS_DEF 2 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } CLASS_DEF 3 struct adsi_flag BASE_CLASSES { char [ 40 ] vname ; int id ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_flag LEAF_NODE 5 adsi_flag LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ 40 ] vname ; int id ; SIMPLE_DECL 5 char [ 40 ] vname ; VAR_DECL 6 char [ 40 ] vname TYPE 7 char [ 40 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 40 ] LEAF_NODE 9 [ FIELD 9 40 LEAF_NODE 10 40 LEAF_NODE 9 ] NAME 7 vname LEAF_NODE 8 vname LEAF_NODE 6 ; SIMPLE_DECL 5 int id ; VAR_DECL 6 int id TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 id LEAF_NODE 8 id LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } ; CLASS_DEF 2 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } CLASS_DEF 3 struct adsi_script BASE_CLASSES { int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; } LEAF_NODE 4 struct CLASS_NAME 4 adsi_script LEAF_NODE 5 adsi_script LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int state ; int numkeys ; int numsubs ; int numstates ; int numdisplays ; int numflags ; struct adsi_soft_key * key ; struct adsi_subscript * sub ; struct adsi_display [ 63 ] displays ; struct adsi_state [ 256 ] states ; struct adsi_soft_key [ 62 ] keys ; struct adsi_subscript [ 128 ] subs ; struct adsi_flag [ 7 ] flags ; unsigned char [ 5 ] sec ; char [ 19 ] desc ; unsigned char [ 5 ] fdn ; int ver ; SIMPLE_DECL 5 int state ; VAR_DECL 6 int state TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 int numkeys ; VAR_DECL 6 int numkeys TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numkeys LEAF_NODE 8 numkeys LEAF_NODE 6 ; SIMPLE_DECL 5 int numsubs ; VAR_DECL 6 int numsubs TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numsubs LEAF_NODE 8 numsubs LEAF_NODE 6 ; SIMPLE_DECL 5 int numstates ; VAR_DECL 6 int numstates TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numstates LEAF_NODE 8 numstates LEAF_NODE 6 ; SIMPLE_DECL 5 int numdisplays ; VAR_DECL 6 int numdisplays TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numdisplays LEAF_NODE 8 numdisplays LEAF_NODE 6 ; SIMPLE_DECL 5 int numflags ; VAR_DECL 6 int numflags TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 numflags LEAF_NODE 8 numflags LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key * key ; VAR_DECL 6 struct adsi_soft_key * key TYPE 7 struct adsi_soft_key * TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key POINTER 8 * LEAF_NODE 9 * NAME 7 key LEAF_NODE 8 key LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript * sub ; VAR_DECL 6 struct adsi_subscript * sub TYPE 7 struct adsi_subscript * TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript POINTER 8 * LEAF_NODE 9 * NAME 7 sub LEAF_NODE 8 sub LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_display [ 63 ] displays ; VAR_DECL 6 struct adsi_display [ 63 ] displays TYPE 7 struct adsi_display [ 63 ] TYPE_NAME 8 struct adsi_display LEAF_NODE 9 struct LEAF_NODE 9 adsi_display TYPE_SUFFIX 8 [ 63 ] LEAF_NODE 9 [ FIELD 9 63 LEAF_NODE 10 63 LEAF_NODE 9 ] NAME 7 displays LEAF_NODE 8 displays LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_state [ 256 ] states ; VAR_DECL 6 struct adsi_state [ 256 ] states TYPE 7 struct adsi_state [ 256 ] TYPE_NAME 8 struct adsi_state LEAF_NODE 9 struct LEAF_NODE 9 adsi_state TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 states LEAF_NODE 8 states LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_soft_key [ 62 ] keys ; VAR_DECL 6 struct adsi_soft_key [ 62 ] keys TYPE 7 struct adsi_soft_key [ 62 ] TYPE_NAME 8 struct adsi_soft_key LEAF_NODE 9 struct LEAF_NODE 9 adsi_soft_key TYPE_SUFFIX 8 [ 62 ] LEAF_NODE 9 [ FIELD 9 62 LEAF_NODE 10 62 LEAF_NODE 9 ] NAME 7 keys LEAF_NODE 8 keys LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_subscript [ 128 ] subs ; VAR_DECL 6 struct adsi_subscript [ 128 ] subs TYPE 7 struct adsi_subscript [ 128 ] TYPE_NAME 8 struct adsi_subscript LEAF_NODE 9 struct LEAF_NODE 9 adsi_subscript TYPE_SUFFIX 8 [ 128 ] LEAF_NODE 9 [ FIELD 9 128 LEAF_NODE 10 128 LEAF_NODE 9 ] NAME 7 subs LEAF_NODE 8 subs LEAF_NODE 6 ; SIMPLE_DECL 5 struct adsi_flag [ 7 ] flags ; VAR_DECL 6 struct adsi_flag [ 7 ] flags TYPE 7 struct adsi_flag [ 7 ] TYPE_NAME 8 struct adsi_flag LEAF_NODE 9 struct LEAF_NODE 9 adsi_flag TYPE_SUFFIX 8 [ 7 ] LEAF_NODE 9 [ FIELD 9 7 LEAF_NODE 10 7 LEAF_NODE 9 ] NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] sec ; VAR_DECL 6 unsigned char [ 5 ] sec TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 sec LEAF_NODE 8 sec LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 19 ] desc ; VAR_DECL 6 char [ 19 ] desc TYPE 7 char [ 19 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 19 ] LEAF_NODE 9 [ FIELD 9 19 LEAF_NODE 10 19 LEAF_NODE 9 ] NAME 7 desc LEAF_NODE 8 desc LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ 5 ] fdn ; VAR_DECL 6 unsigned char [ 5 ] fdn TYPE 7 unsigned char [ 5 ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ 5 ] LEAF_NODE 9 [ FIELD 9 5 LEAF_NODE 10 5 LEAF_NODE 9 ] NAME 7 fdn LEAF_NODE 8 fdn LEAF_NODE 6 ; SIMPLE_DECL 5 int ver ; VAR_DECL 6 int ver TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ver LEAF_NODE 8 ver LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ao2_container * agents ; VAR_DECL 2 struct ao2_container * agents TYPE 3 struct ao2_container * TYPE_NAME 4 struct ao2_container LEAF_NODE 5 struct LEAF_NODE 5 ao2_container POINTER 4 * LEAF_NODE 5 * NAME 3 agents LEAF_NODE 4 agents LEAF_NODE 2 ; SIMPLE_DECL 1 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } ; CLASS_DEF 2 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } CLASS_DEF 3 enum agent_state BASE_CLASSES { AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , } LEAF_NODE 4 enum CLASS_NAME 4 agent_state LEAF_NODE 5 agent_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AGENT_STATE_LOGGED_OUT , AGENT_STATE_PROBATION_WAIT , AGENT_STATE_READY_FOR_CALL , AGENT_STATE_CALL_PRESENT , AGENT_STATE_CALL_WAIT_ACK , AGENT_STATE_ON_CALL , AGENT_STATE_CALL_WRAPUP , AGENT_STATE_LOGGING_OUT , LEAF_NODE 5 AGENT_STATE_LOGGED_OUT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_PROBATION_WAIT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_READY_FOR_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_PRESENT LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WAIT_ACK LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_ON_CALL LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_CALL_WRAPUP LEAF_NODE 5 , LEAF_NODE 5 AGENT_STATE_LOGGING_OUT LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } ; CLASS_DEF 2 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } CLASS_DEF 3 struct agent_cfg BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_cfg LEAF_NODE 5 agent_cfg LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( full_name ) ; AST_STRING_FIELD ( dtmf_accept ) ; AST_STRING_FIELD ( beep_sound ) ; AST_STRING_FIELD ( moh ) ; ) ; unsigned int auto_logoff ; unsigned int wrapup_time ; int ack_call ; int record_agent_calls ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 full_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 beep_sound LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 moh LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int auto_logoff ; VAR_DECL 6 unsigned int auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 auto_logoff LEAF_NODE 8 auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int wrapup_time ; VAR_DECL 6 unsigned int wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 wrapup_time LEAF_NODE 8 wrapup_time LEAF_NODE 6 ; SIMPLE_DECL 5 int ack_call ; VAR_DECL 6 int ack_call TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ack_call LEAF_NODE 8 ack_call LEAF_NODE 6 ; SIMPLE_DECL 5 int record_agent_calls ; VAR_DECL 6 int record_agent_calls TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 record_agent_calls LEAF_NODE 8 record_agent_calls LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } ; CLASS_DEF 2 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } CLASS_DEF 3 struct agent_pvt BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; } LEAF_NODE 4 struct CLASS_NAME 4 agent_pvt LEAF_NODE 5 agent_pvt LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( username ) ; AST_STRING_FIELD ( override_dtmf_accept ) ; ) ; struct ast_party_connected_line waiting_colp ; unsigned int flags ; unsigned int override_auto_logoff ; unsigned int override_wrapup_time ; unsigned int override_ack_call : 1 ; unsigned int deferred_logoff : 1 ; unsigned int the_mark : 1 ; unsigned int dead : 1 ; enum agent_state state ; enum ast_device_state devstate ; time_t login_start ; time_t probation_start ; time_t call_start ; struct timeval ack_time ; struct timeval last_disconnect ; struct ast_bridge * caller_bridge ; struct ast_channel * logged ; struct agent_cfg * cfg ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 username LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 override_dtmf_accept LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_party_connected_line waiting_colp ; VAR_DECL 6 struct ast_party_connected_line waiting_colp TYPE 7 struct ast_party_connected_line TYPE_NAME 8 struct ast_party_connected_line LEAF_NODE 9 struct LEAF_NODE 9 ast_party_connected_line NAME 7 waiting_colp LEAF_NODE 8 waiting_colp LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_auto_logoff ; VAR_DECL 6 unsigned int override_auto_logoff TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_auto_logoff LEAF_NODE 8 override_auto_logoff LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int override_wrapup_time ; VAR_DECL 6 unsigned int override_wrapup_time TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 override_wrapup_time LEAF_NODE 8 override_wrapup_time LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 override_ack_call : LEAF_NODE 6 override_ack_call LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 deferred_logoff : LEAF_NODE 6 deferred_logoff LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 the_mark : LEAF_NODE 6 the_mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 dead : LEAF_NODE 6 dead LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 enum agent_state state ; VAR_DECL 6 enum agent_state state TYPE 7 enum agent_state TYPE_NAME 8 enum agent_state LEAF_NODE 9 enum LEAF_NODE 9 agent_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_device_state devstate ; VAR_DECL 6 enum ast_device_state devstate TYPE 7 enum ast_device_state TYPE_NAME 8 enum ast_device_state LEAF_NODE 9 enum LEAF_NODE 9 ast_device_state NAME 7 devstate LEAF_NODE 8 devstate LEAF_NODE 6 ; SIMPLE_DECL 5 time_t login_start ; VAR_DECL 6 time_t login_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 login_start LEAF_NODE 8 login_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t probation_start ; VAR_DECL 6 time_t probation_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 probation_start LEAF_NODE 8 probation_start LEAF_NODE 6 ; SIMPLE_DECL 5 time_t call_start ; VAR_DECL 6 time_t call_start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 call_start LEAF_NODE 8 call_start LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval ack_time ; VAR_DECL 6 struct timeval ack_time TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 ack_time LEAF_NODE 8 ack_time LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval last_disconnect ; VAR_DECL 6 struct timeval last_disconnect TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 last_disconnect LEAF_NODE 8 last_disconnect LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_bridge * caller_bridge ; VAR_DECL 6 struct ast_bridge * caller_bridge TYPE 7 struct ast_bridge * TYPE_NAME 8 struct ast_bridge LEAF_NODE 9 struct LEAF_NODE 9 ast_bridge POINTER 8 * LEAF_NODE 9 * NAME 7 caller_bridge LEAF_NODE 8 caller_bridge LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * logged ; VAR_DECL 6 struct ast_channel * logged TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 logged LEAF_NODE 8 logged LEAF_NODE 6 ; SIMPLE_DECL 5 struct agent_cfg * cfg ; VAR_DECL 6 struct agent_cfg * cfg TYPE 7 struct agent_cfg * TYPE_NAME 8 struct agent_cfg LEAF_NODE 9 struct LEAF_NODE 9 agent_cfg POINTER 8 * LEAF_NODE 9 * NAME 7 cfg LEAF_NODE 8 cfg LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_bridge_after_cb_reason BASE_CLASSES { AST_BRIDGE_AFTER_CB_REASON_DESTROY , AST_BRIDGE_AFTER_CB_REASON_REPLACED , AST_BRIDGE_AFTER_CB_REASON_MASQUERADE , AST_BRIDGE_AFTER_CB_REASON_DEPART , AST_BRIDGE_AFTER_CB_REASON_REMOVED , AST_BRIDGE_AFTER_CB_REASON_IMPART_FAILED , } ; CLASS_DEF 2 enum ast_bridge_after_cb_reason BASE_CLASSES { AST_BRIDGE_AFTER_CB_REASON_DESTROY , AST_BRIDGE_AFTER_CB_REASON_REPLACED , AST_BRIDGE_AFTER_CB_REASON_MASQUERADE , AST_BRIDGE_AFTER_CB_REASON_DEPART , AST_BRIDGE_AFTER_CB_REASON_REMOVED , AST_BRIDGE_AFTER_CB_REASON_IMPART_FAILED , } CLASS_DEF 3 enum ast_bridge_after_cb_reason BASE_CLASSES { AST_BRIDGE_AFTER_CB_REASON_DESTROY , AST_BRIDGE_AFTER_CB_REASON_REPLACED , AST_BRIDGE_AFTER_CB_REASON_MASQUERADE , AST_BRIDGE_AFTER_CB_REASON_DEPART , AST_BRIDGE_AFTER_CB_REASON_REMOVED , AST_BRIDGE_AFTER_CB_REASON_IMPART_FAILED , } LEAF_NODE 4 enum CLASS_NAME 4 ast_bridge_after_cb_reason LEAF_NODE 5 ast_bridge_after_cb_reason LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_BRIDGE_AFTER_CB_REASON_DESTROY , AST_BRIDGE_AFTER_CB_REASON_REPLACED , AST_BRIDGE_AFTER_CB_REASON_MASQUERADE , AST_BRIDGE_AFTER_CB_REASON_DEPART , AST_BRIDGE_AFTER_CB_REASON_REMOVED , AST_BRIDGE_AFTER_CB_REASON_IMPART_FAILED , LEAF_NODE 5 AST_BRIDGE_AFTER_CB_REASON_DESTROY LEAF_NODE 5 , LEAF_NODE 5 AST_BRIDGE_AFTER_CB_REASON_REPLACED LEAF_NODE 5 , LEAF_NODE 5 AST_BRIDGE_AFTER_CB_REASON_MASQUERADE LEAF_NODE 5 , LEAF_NODE 5 AST_BRIDGE_AFTER_CB_REASON_DEPART LEAF_NODE 5 , LEAF_NODE 5 AST_BRIDGE_AFTER_CB_REASON_REMOVED LEAF_NODE 5 , LEAF_NODE 5 AST_BRIDGE_AFTER_CB_REASON_IMPART_FAILED LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 agent_after_bridge_cb_failed LEAF_NODE 3 agent_after_bridge_cb_failed PARAMETER_LIST 2 ( enum ast_bridge_after_cb_reason reason , void * data ) LEAF_NODE 3 ( PARAMETER_DECL 3 enum ast_bridge_after_cb_reason reason TYPE 4 enum ast_bridge_after_cb_reason TYPE_NAME 5 enum ast_bridge_after_cb_reason LEAF_NODE 6 enum LEAF_NODE 6 ast_bridge_after_cb_reason NAME 4 reason LEAF_NODE 5 reason LEAF_NODE 3 , PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 struct ast_channel * chan ; chan = data ; VAR_DECL 4 struct ast_channel * chan ; chan = data TYPE 5 struct ast_channel * TYPE_NAME 6 struct ast_channel LEAF_NODE 7 struct LEAF_NODE 7 ast_channel POINTER 6 * LEAF_NODE 7 * NAME 5 chan LEAF_NODE 6 chan LEAF_NODE 5 ; INIT 5 chan = data ASSIGN 6 chan = data LVAL 7 chan NAME 8 chan LEAF_NODE 9 chan ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 data FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; SIMPLE_DECL 3 struct agent_pvt * agent ; VAR_DECL 4 struct agent_pvt * agent TYPE 5 struct agent_pvt * TYPE_NAME 6 struct agent_pvt LEAF_NODE 7 struct LEAF_NODE 7 agent_pvt POINTER 6 * LEAF_NODE 7 * NAME 5 agent LEAF_NODE 6 agent LEAF_NODE 4 ; EXPR_STATEMENT 3 agent = ao2_find ( agents , chan , 0 ) ; EXPR 4 agent = ao2_find ( agents , chan , 0 ) ASSIGN 5 agent = ao2_find ( agents , chan , 0 ) LVAL 6 agent FIELD 7 agent LEAF_NODE 8 agent ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ao2_find ( agents , chan , 0 ) FUNCTION_CALL 7 ao2_find ( agents , chan , 0 ) CALLEE 8 ao2_find LEAF_NODE 9 ao2_find LEAF_NODE 8 ( ARGUMENT 8 agents FIELD 9 agents LEAF_NODE 10 agents LEAF_NODE 8 , ARGUMENT 8 chan FIELD 9 chan LEAF_NODE 10 chan LEAF_NODE 8 , ARGUMENT 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 8 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ! agent EXPR 5 ! agent UNARY_EXPR 6 ! agent UNARY_OPERATOR 7 ! LEAF_NODE 8 ! FIELD 7 agent LEAF_NODE 8 agent LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 JUMP_STATEMENT 6 return DESTINATION ; KEYWORD 7 return LEAF_NODE 8 return LEAF_NODE 7 DESTINATION LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_log ( LOG_WARNING , \"Agent %s: Forced logout. Lost control of %s because: %s\\n\" , agent -> username , ast_channel_name ( chan ) , ast_bridge_after_cb_reason_string ( reason ) ) ; EXPR 4 ast_log ( LOG_WARNING , \"Agent %s: Forced logout. Lost control of %s because: %s\\n\" , agent -> username , ast_channel_name ( chan ) , ast_bridge_after_cb_reason_string ( reason ) ) FUNCTION_CALL 5 ast_log ( LOG_WARNING , \"Agent %s: Forced logout. Lost control of %s because: %s\\n\" , agent -> username , ast_channel_name ( chan ) , ast_bridge_after_cb_reason_string ( reason ) ) CALLEE 6 ast_log LEAF_NODE 7 ast_log LEAF_NODE 6 ( ARGUMENT 6 LOG_WARNING FIELD 7 LOG_WARNING LEAF_NODE 8 LOG_WARNING LEAF_NODE 6 , ARGUMENT 6 \"Agent %s: Forced logout. Lost control of %s because: %s\\n\" FIELD 7 \"Agent %s: Forced logout. Lost control of %s because: %s\\n\" LEAF_NODE 8 \"Agent %s: Forced logout. Lost control of %s because: %s\\n\" LEAF_NODE 6 , ARGUMENT 6 agent -> username FIELD 7 agent -> username LEAF_NODE 8 agent LEAF_NODE 8 -> LEAF_NODE 8 username LEAF_NODE 6 , ARGUMENT 6 ast_channel_name ( chan ) FUNCTION_CALL 7 ast_channel_name ( chan ) CALLEE 8 ast_channel_name LEAF_NODE 9 ast_channel_name LEAF_NODE 8 ( ARGUMENT 8 chan FIELD 9 chan LEAF_NODE 10 chan LEAF_NODE 8 ) LEAF_NODE 6 , ARGUMENT 6 ast_bridge_after_cb_reason_string ( reason ) FUNCTION_CALL 7 ast_bridge_after_cb_reason_string ( reason ) CALLEE 8 ast_bridge_after_cb_reason_string LEAF_NODE 9 ast_bridge_after_cb_reason_string LEAF_NODE 8 ( ARGUMENT 8 reason FIELD 9 reason LEAF_NODE 10 reason LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 agent_lock ( agent ) ; EXPR 4 agent_lock ( agent ) FUNCTION_CALL 5 agent_lock ( agent ) CALLEE 6 agent_lock LEAF_NODE 7 agent_lock LEAF_NODE 6 ( ARGUMENT 6 agent FIELD 7 agent LEAF_NODE 8 agent LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 agent_logout ( agent ) ; EXPR 4 agent_logout ( agent ) FUNCTION_CALL 5 agent_logout ( agent ) CALLEE 6 agent_logout LEAF_NODE 7 agent_logout LEAF_NODE 6 ( ARGUMENT 6 agent FIELD 7 agent LEAF_NODE 8 agent LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ao2_ref ( agent , - 1 ) ; EXPR 4 ao2_ref ( agent , - 1 ) FUNCTION_CALL 5 ao2_ref ( agent , - 1 ) CALLEE 6 ao2_ref LEAF_NODE 7 ao2_ref LEAF_NODE 6 ( ARGUMENT 6 agent FIELD 7 agent LEAF_NODE 8 agent LEAF_NODE 6 , ARGUMENT 6 - 1 UNARY_EXPR 7 - 1 UNARY_OPERATOR 8 - LEAF_NODE 9 - FIELD 8 1 LEAF_NODE 9 1 LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 43, "project": "openssl_ast_vul_function_test_adv_20", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 unload_module LEAF_NODE 3 unload_module PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return ast_unregister_application ( app ) ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 ast_unregister_application ( app ) EXPR 5 ast_unregister_application ( app ) FUNCTION_CALL 6 ast_unregister_application ( app ) CALLEE 7 ast_unregister_application LEAF_NODE 8 ast_unregister_application LEAF_NODE 7 ( ARGUMENT 7 app FIELD 8 app LEAF_NODE 9 app LEAF_NODE 7 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 44, "project": "openssl_ast_vul_function_test_adv_12", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk LEAF_NODE 5 sla_trunk LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_station_ref ) stations ; unsigned int num_stations ; unsigned int active_stations ; unsigned int hold_stations ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int barge_disabled : 1 ; unsigned int hold_access : 1 ; unsigned int on_hold : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 stations LEAF_NODE 5 ; SIMPLE_DECL 5 unsigned int num_stations ; VAR_DECL 6 unsigned int num_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 num_stations LEAF_NODE 8 num_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int active_stations ; VAR_DECL 6 unsigned int active_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 active_stations LEAF_NODE 8 active_stations LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int hold_stations ; VAR_DECL 6 unsigned int hold_stations TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 hold_stations LEAF_NODE 8 hold_stations LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 barge_disabled : LEAF_NODE 6 barge_disabled LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 on_hold : LEAF_NODE 6 on_hold LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station_ref LEAF_NODE 5 sla_station_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_station_ref ) entry ; struct sla_station * station ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_station * station ; VAR_DECL 6 struct sla_station * station TYPE 7 struct sla_station * TYPE_NAME 8 struct sla_station LEAF_NODE 9 struct LEAF_NODE 9 sla_station POINTER 8 * LEAF_NODE 9 * NAME 7 station LEAF_NODE 8 station LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } ; CLASS_DEF 2 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } CLASS_DEF 3 enum sla_trunk_state BASE_CLASSES { SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , } LEAF_NODE 4 enum CLASS_NAME 4 sla_trunk_state LEAF_NODE 5 sla_trunk_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_TRUNK_STATE_IDLE , SLA_TRUNK_STATE_RINGING , SLA_TRUNK_STATE_UP , SLA_TRUNK_STATE_ONHOLD , SLA_TRUNK_STATE_ONHOLD_BYME , LEAF_NODE 5 SLA_TRUNK_STATE_IDLE LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_RINGING LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_UP LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD LEAF_NODE 5 , LEAF_NODE 5 SLA_TRUNK_STATE_ONHOLD_BYME LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_trunk_ref BASE_CLASSES { AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_trunk_ref LEAF_NODE 5 sla_trunk_ref LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( sla_trunk_ref ) entry ; struct sla_trunk * trunk ; enum sla_trunk_state state ; struct ast_channel * chan ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int mark : 1 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; SIMPLE_DECL 5 struct sla_trunk * trunk ; VAR_DECL 6 struct sla_trunk * trunk TYPE 7 struct sla_trunk * TYPE_NAME 8 struct sla_trunk LEAF_NODE 9 struct LEAF_NODE 9 sla_trunk POINTER 8 * LEAF_NODE 9 * NAME 7 trunk LEAF_NODE 8 trunk LEAF_NODE 6 ; SIMPLE_DECL 5 enum sla_trunk_state state ; VAR_DECL 6 enum sla_trunk_state state TYPE 7 enum sla_trunk_state TYPE_NAME 8 enum sla_trunk_state LEAF_NODE 9 enum LEAF_NODE 9 sla_trunk_state NAME 7 state LEAF_NODE 8 state LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } ; CLASS_DEF 2 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } CLASS_DEF 3 struct sla_station BASE_CLASSES { AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 sla_station LEAF_NODE 5 sla_station LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_RWLIST_ENTRY ( sla_station ) entry ; AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( name ) ; AST_STRING_FIELD ( device ) ; AST_STRING_FIELD ( autocontext ) ; ) ; AST_LIST_HEAD_NOLOCK ( , sla_trunk_ref ) trunks ; struct ast_dial * dial ; unsigned int ring_timeout ; unsigned int ring_delay ; unsigned int hold_access : 1 ; unsigned int mark : 1 ; LEAF_NODE 5 AST_RWLIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 sla_station LEAF_NODE 5 ) LEAF_NODE 5 entry LEAF_NODE 5 ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 device LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 autocontext LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 sla_trunk_ref LEAF_NODE 5 ) LEAF_NODE 5 trunks LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_dial * dial ; VAR_DECL 6 struct ast_dial * dial TYPE 7 struct ast_dial * TYPE_NAME 8 struct ast_dial LEAF_NODE 9 struct LEAF_NODE 9 ast_dial POINTER 8 * LEAF_NODE 9 * NAME 7 dial LEAF_NODE 8 dial LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_timeout ; VAR_DECL 6 unsigned int ring_timeout TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_timeout LEAF_NODE 8 ring_timeout LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int ring_delay ; VAR_DECL 6 unsigned int ring_delay TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 ring_delay LEAF_NODE 8 ring_delay LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 hold_access : LEAF_NODE 6 hold_access LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 mark : LEAF_NODE 6 mark LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } ; CLASS_DEF 2 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } CLASS_DEF 3 enum sla_hold_access BASE_CLASSES { SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , } LEAF_NODE 4 enum CLASS_NAME 4 sla_hold_access LEAF_NODE 5 sla_hold_access LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 SLA_HOLD_OPEN , SLA_HOLD_PRIVATE , LEAF_NODE 5 SLA_HOLD_OPEN LEAF_NODE 5 , LEAF_NODE 5 SLA_HOLD_PRIVATE LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 int global_vmminmessage ; VAR_DECL 2 int global_vmminmessage TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_vmminmessage LEAF_NODE 4 global_vmminmessage LEAF_NODE 2 ; SIMPLE_DECL 1 int global_vmmaxmessage ; VAR_DECL 2 int global_vmmaxmessage TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_vmmaxmessage LEAF_NODE 4 global_vmmaxmessage LEAF_NODE 2 ; SIMPLE_DECL 1 int global_maxsilence ; VAR_DECL 2 int global_maxsilence TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_maxsilence LEAF_NODE 4 global_maxsilence LEAF_NODE 2 ; SIMPLE_DECL 1 int global_maxgreet ; VAR_DECL 2 int global_maxgreet TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_maxgreet LEAF_NODE 4 global_maxgreet LEAF_NODE 2 ; SIMPLE_DECL 1 int global_silencethreshold ; global_silencethreshold = 128 ; VAR_DECL 2 int global_silencethreshold ; global_silencethreshold = 128 TYPE 3 int TYPE_NAME 4 int LEAF_NODE 5 int NAME 3 global_silencethreshold LEAF_NODE 4 global_silencethreshold LEAF_NODE 3 ; INIT 3 global_silencethreshold = 128 ASSIGN 4 global_silencethreshold = 128 LVAL 5 global_silencethreshold NAME 6 global_silencethreshold LEAF_NODE 7 global_silencethreshold ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 128 FIELD 6 128 LEAF_NODE 7 128 LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 160 ] global_mailcmd ; VAR_DECL 2 char [ 160 ] global_mailcmd TYPE 3 char [ 160 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 160 ] LEAF_NODE 5 [ FIELD 5 160 LEAF_NODE 6 160 LEAF_NODE 5 ] NAME 3 global_mailcmd LEAF_NODE 4 global_mailcmd LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 160 ] global_externnotify ; VAR_DECL 2 char [ 160 ] global_externnotify TYPE 3 char [ 160 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 160 ] LEAF_NODE 5 [ FIELD 5 160 LEAF_NODE 6 160 LEAF_NODE 5 ] NAME 3 global_externnotify LEAF_NODE 4 global_externnotify LEAF_NODE 2 ; SIMPLE_DECL 1 char [ PATH_MAX ] global_logfile ; VAR_DECL 2 char [ PATH_MAX ] global_logfile TYPE 3 char [ PATH_MAX ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ PATH_MAX ] LEAF_NODE 5 [ FIELD 5 PATH_MAX LEAF_NODE 6 PATH_MAX LEAF_NODE 5 ] NAME 3 global_logfile LEAF_NODE 4 global_logfile LEAF_NODE 2 ; SIMPLE_DECL 1 char [ 80 ] default_vmformat ; VAR_DECL 2 char [ 80 ] default_vmformat TYPE 3 char [ 80 ] TYPE_NAME 4 char LEAF_NODE 5 char TYPE_SUFFIX 4 [ 80 ] LEAF_NODE 5 [ FIELD 5 80 LEAF_NODE 6 80 LEAF_NODE 5 ] NAME 3 default_vmformat LEAF_NODE 4 default_vmformat LEAF_NODE 2 ; SIMPLE_DECL 1 const char * ast_config_AST_LOG_DIR ; VAR_DECL 2 const char * ast_config_AST_LOG_DIR TYPE 3 const char * TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 ast_config_AST_LOG_DIR LEAF_NODE 4 ast_config_AST_LOG_DIR LEAF_NODE 2 ; SIMPLE_DECL 1 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } ; CLASS_DEF 2 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } CLASS_DEF 3 struct b64_baseio BASE_CLASSES { int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; } LEAF_NODE 4 struct CLASS_NAME 4 b64_baseio LEAF_NODE 5 b64_baseio LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int iocp ; int iolen ; int linelength ; int ateof ; unsigned char [ B64_BASEMAXINLINE ] iobuf ; SIMPLE_DECL 5 int iocp ; VAR_DECL 6 int iocp TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 iocp LEAF_NODE 8 iocp LEAF_NODE 6 ; SIMPLE_DECL 5 int iolen ; VAR_DECL 6 int iolen TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 iolen LEAF_NODE 8 iolen LEAF_NODE 6 ; SIMPLE_DECL 5 int linelength ; VAR_DECL 6 int linelength TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 linelength LEAF_NODE 8 linelength LEAF_NODE 6 ; SIMPLE_DECL 5 int ateof ; VAR_DECL 6 int ateof TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 ateof LEAF_NODE 8 ateof LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned char [ B64_BASEMAXINLINE ] iobuf ; VAR_DECL 6 unsigned char [ B64_BASEMAXINLINE ] iobuf TYPE 7 unsigned char [ B64_BASEMAXINLINE ] TYPE_NAME 8 unsigned char LEAF_NODE 9 unsigned LEAF_NODE 9 char TYPE_SUFFIX 8 [ B64_BASEMAXINLINE ] LEAF_NODE 9 [ FIELD 9 B64_BASEMAXINLINE LEAF_NODE 10 B64_BASEMAXINLINE LEAF_NODE 9 ] NAME 7 iobuf LEAF_NODE 8 iobuf LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } ; CLASS_DEF 2 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } CLASS_DEF 3 struct minivm_account BASE_CLASSES { char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; } LEAF_NODE 4 struct CLASS_NAME 4 minivm_account LEAF_NODE 5 minivm_account LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char [ AST_MAX_CONTEXT ] username ; char [ AST_MAX_CONTEXT ] domain ; char [ 10 ] pincode ; char [ 120 ] fullname ; char [ 80 ] email ; char [ 80 ] pager ; char [ AST_MAX_ACCOUNT_CODE ] accountcode ; char [ 80 ] serveremail ; char [ 160 ] externnotify ; char [ MAX_LANGUAGE ] language ; char [ 80 ] zonetag ; char [ 20 ] uniqueid ; char [ 80 ] exit ; char [ 80 ] attachfmt ; char [ 80 ] etemplate ; char [ 80 ] ptemplate ; unsigned int flags ; struct ast_variable * chanvars ; double volgain ; AST_LIST_ENTRY ( minivm_account ) list ; SIMPLE_DECL 5 char [ AST_MAX_CONTEXT ] username ; VAR_DECL 6 char [ AST_MAX_CONTEXT ] username TYPE 7 char [ AST_MAX_CONTEXT ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_CONTEXT ] LEAF_NODE 9 [ FIELD 9 AST_MAX_CONTEXT LEAF_NODE 10 AST_MAX_CONTEXT LEAF_NODE 9 ] NAME 7 username LEAF_NODE 8 username LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_CONTEXT ] domain ; VAR_DECL 6 char [ AST_MAX_CONTEXT ] domain TYPE 7 char [ AST_MAX_CONTEXT ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_CONTEXT ] LEAF_NODE 9 [ FIELD 9 AST_MAX_CONTEXT LEAF_NODE 10 AST_MAX_CONTEXT LEAF_NODE 9 ] NAME 7 domain LEAF_NODE 8 domain LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 10 ] pincode ; VAR_DECL 6 char [ 10 ] pincode TYPE 7 char [ 10 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 10 ] LEAF_NODE 9 [ FIELD 9 10 LEAF_NODE 10 10 LEAF_NODE 9 ] NAME 7 pincode LEAF_NODE 8 pincode LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 120 ] fullname ; VAR_DECL 6 char [ 120 ] fullname TYPE 7 char [ 120 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 120 ] LEAF_NODE 9 [ FIELD 9 120 LEAF_NODE 10 120 LEAF_NODE 9 ] NAME 7 fullname LEAF_NODE 8 fullname LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] email ; VAR_DECL 6 char [ 80 ] email TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 email LEAF_NODE 8 email LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] pager ; VAR_DECL 6 char [ 80 ] pager TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 pager LEAF_NODE 8 pager LEAF_NODE 6 ; SIMPLE_DECL 5 char [ AST_MAX_ACCOUNT_CODE ] accountcode ; VAR_DECL 6 char [ AST_MAX_ACCOUNT_CODE ] accountcode TYPE 7 char [ AST_MAX_ACCOUNT_CODE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ AST_MAX_ACCOUNT_CODE ] LEAF_NODE 9 [ FIELD 9 AST_MAX_ACCOUNT_CODE LEAF_NODE 10 AST_MAX_ACCOUNT_CODE LEAF_NODE 9 ] NAME 7 accountcode LEAF_NODE 8 accountcode LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] serveremail ; VAR_DECL 6 char [ 80 ] serveremail TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 serveremail LEAF_NODE 8 serveremail LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 160 ] externnotify ; VAR_DECL 6 char [ 160 ] externnotify TYPE 7 char [ 160 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 160 ] LEAF_NODE 9 [ FIELD 9 160 LEAF_NODE 10 160 LEAF_NODE 9 ] NAME 7 externnotify LEAF_NODE 8 externnotify LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_LANGUAGE ] language ; VAR_DECL 6 char [ MAX_LANGUAGE ] language TYPE 7 char [ MAX_LANGUAGE ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_LANGUAGE ] LEAF_NODE 9 [ FIELD 9 MAX_LANGUAGE LEAF_NODE 10 MAX_LANGUAGE LEAF_NODE 9 ] NAME 7 language LEAF_NODE 8 language LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] zonetag ; VAR_DECL 6 char [ 80 ] zonetag TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 zonetag LEAF_NODE 8 zonetag LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 20 ] uniqueid ; VAR_DECL 6 char [ 20 ] uniqueid TYPE 7 char [ 20 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 20 ] LEAF_NODE 9 [ FIELD 9 20 LEAF_NODE 10 20 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] exit ; VAR_DECL 6 char [ 80 ] exit TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] attachfmt ; VAR_DECL 6 char [ 80 ] attachfmt TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 attachfmt LEAF_NODE 8 attachfmt LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] etemplate ; VAR_DECL 6 char [ 80 ] etemplate TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 etemplate LEAF_NODE 8 etemplate LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 80 ] ptemplate ; VAR_DECL 6 char [ 80 ] ptemplate TYPE 7 char [ 80 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 80 ] LEAF_NODE 9 [ FIELD 9 80 LEAF_NODE 10 80 LEAF_NODE 9 ] NAME 7 ptemplate LEAF_NODE 8 ptemplate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int flags ; VAR_DECL 6 unsigned int flags TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_variable * chanvars ; VAR_DECL 6 struct ast_variable * chanvars TYPE 7 struct ast_variable * TYPE_NAME 8 struct ast_variable LEAF_NODE 9 struct LEAF_NODE 9 ast_variable POINTER 8 * LEAF_NODE 9 * NAME 7 chanvars LEAF_NODE 8 chanvars LEAF_NODE 6 ; SIMPLE_DECL 5 double volgain ; VAR_DECL 6 double volgain TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 volgain LEAF_NODE 8 volgain LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 minivm_account LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_stats BASE_CLASSES { int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; } ; CLASS_DEF 2 struct minivm_stats BASE_CLASSES { int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; } CLASS_DEF 3 struct minivm_stats BASE_CLASSES { int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; } LEAF_NODE 4 struct CLASS_NAME 4 minivm_stats LEAF_NODE 5 minivm_stats LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int voicemailaccounts ; int timezones ; int templates ; struct timeval reset ; int receivedmessages ; struct timeval lastreceived ; SIMPLE_DECL 5 int voicemailaccounts ; VAR_DECL 6 int voicemailaccounts TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 voicemailaccounts LEAF_NODE 8 voicemailaccounts LEAF_NODE 6 ; SIMPLE_DECL 5 int timezones ; VAR_DECL 6 int timezones TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 timezones LEAF_NODE 8 timezones LEAF_NODE 6 ; SIMPLE_DECL 5 int templates ; VAR_DECL 6 int templates TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 templates LEAF_NODE 8 templates LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval reset ; VAR_DECL 6 struct timeval reset TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 reset LEAF_NODE 8 reset LEAF_NODE 6 ; SIMPLE_DECL 5 int receivedmessages ; VAR_DECL 6 int receivedmessages TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 receivedmessages LEAF_NODE 8 receivedmessages LEAF_NODE 6 ; SIMPLE_DECL 5 struct timeval lastreceived ; VAR_DECL 6 struct timeval lastreceived TYPE 7 struct timeval TYPE_NAME 8 struct timeval LEAF_NODE 9 struct LEAF_NODE 9 timeval NAME 7 lastreceived LEAF_NODE 8 lastreceived LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct minivm_stats global_stats ; VAR_DECL 2 struct minivm_stats global_stats TYPE 3 struct minivm_stats TYPE_NAME 4 struct minivm_stats LEAF_NODE 5 struct LEAF_NODE 5 minivm_stats NAME 3 global_stats LEAF_NODE 4 global_stats LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 free_zone LEAF_NODE 3 free_zone PARAMETER_LIST 2 ( struct minivm_zone * z ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct minivm_zone * z TYPE 4 struct minivm_zone * TYPE_NAME 5 struct minivm_zone LEAF_NODE 6 struct LEAF_NODE 6 minivm_zone POINTER 5 * LEAF_NODE 6 * NAME 4 z LEAF_NODE 5 z LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 EXPR_STATEMENT 3 ast_free ( z ) ; EXPR 4 ast_free ( z ) FUNCTION_CALL 5 ast_free ( z ) CALLEE 6 ast_free LEAF_NODE 7 ast_free LEAF_NODE 6 ( ARGUMENT 6 z FIELD 7 z LEAF_NODE 8 z LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 45, "project": "openssl_ast_vul_function_test_adv_8", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct privacy_args BASE_CLASSES { int sentringing ; int privdb_val ; char [ 256 ] privcid ; char [ 1024 ] privintro ; char [ 256 ] status ; int canceled ; } ; CLASS_DEF 2 struct privacy_args BASE_CLASSES { int sentringing ; int privdb_val ; char [ 256 ] privcid ; char [ 1024 ] privintro ; char [ 256 ] status ; int canceled ; } CLASS_DEF 3 struct privacy_args BASE_CLASSES { int sentringing ; int privdb_val ; char [ 256 ] privcid ; char [ 1024 ] privintro ; char [ 256 ] status ; int canceled ; } LEAF_NODE 4 struct CLASS_NAME 4 privacy_args LEAF_NODE 5 privacy_args LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 int sentringing ; int privdb_val ; char [ 256 ] privcid ; char [ 1024 ] privintro ; char [ 256 ] status ; int canceled ; SIMPLE_DECL 5 int sentringing ; VAR_DECL 6 int sentringing TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 sentringing LEAF_NODE 8 sentringing LEAF_NODE 6 ; SIMPLE_DECL 5 int privdb_val ; VAR_DECL 6 int privdb_val TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 privdb_val LEAF_NODE 8 privdb_val LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] privcid ; VAR_DECL 6 char [ 256 ] privcid TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 privcid LEAF_NODE 8 privcid LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 1024 ] privintro ; VAR_DECL 6 char [ 1024 ] privintro TYPE 7 char [ 1024 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1024 ] LEAF_NODE 9 [ FIELD 9 1024 LEAF_NODE 10 1024 LEAF_NODE 9 ] NAME 7 privintro LEAF_NODE 8 privintro LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 256 ] status ; VAR_DECL 6 char [ 256 ] status TYPE 7 char [ 256 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 256 ] LEAF_NODE 9 [ FIELD 9 256 LEAF_NODE 10 256 LEAF_NODE 9 ] NAME 7 status LEAF_NODE 8 status LEAF_NODE 6 ; SIMPLE_DECL 5 int canceled ; VAR_DECL 6 int canceled TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 canceled LEAF_NODE 8 canceled LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPT_ANNOUNCE = ( 1 << 0 ) , OPT_RESETCDR = ( 1 << 1 ) , OPT_DTMF_EXIT = ( 1 << 2 ) , OPT_SENDDTMF = ( 1 << 3 ) , OPT_FORCECLID = ( 1 << 4 ) , OPT_GO_ON = ( 1 << 5 ) , OPT_CALLEE_HANGUP = ( 1 << 6 ) , OPT_CALLER_HANGUP = ( 1 << 7 ) , OPT_ORIGINAL_CLID = ( 1 << 8 ) , OPT_DURATION_LIMIT = ( 1 << 9 ) , OPT_MUSICBACK = ( 1 << 10 ) , OPT_CALLEE_MACRO = ( 1 << 11 ) , OPT_SCREEN_NOINTRO = ( 1 << 12 ) , OPT_SCREEN_NOCALLERID = ( 1 << 13 ) , OPT_IGNORE_CONNECTEDLINE = ( 1 << 14 ) , OPT_SCREENING = ( 1 << 15 ) , OPT_PRIVACY = ( 1 << 16 ) , OPT_RINGBACK = ( 1 << 17 ) , OPT_DURATION_STOP = ( 1 << 18 ) , OPT_CALLEE_TRANSFER = ( 1 << 19 ) , OPT_CALLER_TRANSFER = ( 1 << 20 ) , OPT_CALLEE_MONITOR = ( 1 << 21 ) , OPT_CALLER_MONITOR = ( 1 << 22 ) , OPT_GOTO = ( 1 << 23 ) , OPT_OPERMODE = ( 1 << 24 ) , OPT_CALLEE_PARK = ( 1 << 25 ) , OPT_CALLER_PARK = ( 1 << 26 ) , OPT_IGNORE_FORWARDING = ( 1 << 27 ) , OPT_CALLEE_GOSUB = ( 1 << 28 ) , OPT_CALLEE_MIXMONITOR = ( 1 << 29 ) , OPT_CALLER_MIXMONITOR = ( 1 << 30 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPT_ANNOUNCE = ( 1 << 0 ) , OPT_RESETCDR = ( 1 << 1 ) , OPT_DTMF_EXIT = ( 1 << 2 ) , OPT_SENDDTMF = ( 1 << 3 ) , OPT_FORCECLID = ( 1 << 4 ) , OPT_GO_ON = ( 1 << 5 ) , OPT_CALLEE_HANGUP = ( 1 << 6 ) , OPT_CALLER_HANGUP = ( 1 << 7 ) , OPT_ORIGINAL_CLID = ( 1 << 8 ) , OPT_DURATION_LIMIT = ( 1 << 9 ) , OPT_MUSICBACK = ( 1 << 10 ) , OPT_CALLEE_MACRO = ( 1 << 11 ) , OPT_SCREEN_NOINTRO = ( 1 << 12 ) , OPT_SCREEN_NOCALLERID = ( 1 << 13 ) , OPT_IGNORE_CONNECTEDLINE = ( 1 << 14 ) , OPT_SCREENING = ( 1 << 15 ) , OPT_PRIVACY = ( 1 << 16 ) , OPT_RINGBACK = ( 1 << 17 ) , OPT_DURATION_STOP = ( 1 << 18 ) , OPT_CALLEE_TRANSFER = ( 1 << 19 ) , OPT_CALLER_TRANSFER = ( 1 << 20 ) , OPT_CALLEE_MONITOR = ( 1 << 21 ) , OPT_CALLER_MONITOR = ( 1 << 22 ) , OPT_GOTO = ( 1 << 23 ) , OPT_OPERMODE = ( 1 << 24 ) , OPT_CALLEE_PARK = ( 1 << 25 ) , OPT_CALLER_PARK = ( 1 << 26 ) , OPT_IGNORE_FORWARDING = ( 1 << 27 ) , OPT_CALLEE_GOSUB = ( 1 << 28 ) , OPT_CALLEE_MIXMONITOR = ( 1 << 29 ) , OPT_CALLER_MIXMONITOR = ( 1 << 30 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPT_ANNOUNCE = ( 1 << 0 ) , OPT_RESETCDR = ( 1 << 1 ) , OPT_DTMF_EXIT = ( 1 << 2 ) , OPT_SENDDTMF = ( 1 << 3 ) , OPT_FORCECLID = ( 1 << 4 ) , OPT_GO_ON = ( 1 << 5 ) , OPT_CALLEE_HANGUP = ( 1 << 6 ) , OPT_CALLER_HANGUP = ( 1 << 7 ) , OPT_ORIGINAL_CLID = ( 1 << 8 ) , OPT_DURATION_LIMIT = ( 1 << 9 ) , OPT_MUSICBACK = ( 1 << 10 ) , OPT_CALLEE_MACRO = ( 1 << 11 ) , OPT_SCREEN_NOINTRO = ( 1 << 12 ) , OPT_SCREEN_NOCALLERID = ( 1 << 13 ) , OPT_IGNORE_CONNECTEDLINE = ( 1 << 14 ) , OPT_SCREENING = ( 1 << 15 ) , OPT_PRIVACY = ( 1 << 16 ) , OPT_RINGBACK = ( 1 << 17 ) , OPT_DURATION_STOP = ( 1 << 18 ) , OPT_CALLEE_TRANSFER = ( 1 << 19 ) , OPT_CALLER_TRANSFER = ( 1 << 20 ) , OPT_CALLEE_MONITOR = ( 1 << 21 ) , OPT_CALLER_MONITOR = ( 1 << 22 ) , OPT_GOTO = ( 1 << 23 ) , OPT_OPERMODE = ( 1 << 24 ) , OPT_CALLEE_PARK = ( 1 << 25 ) , OPT_CALLER_PARK = ( 1 << 26 ) , OPT_IGNORE_FORWARDING = ( 1 << 27 ) , OPT_CALLEE_GOSUB = ( 1 << 28 ) , OPT_CALLEE_MIXMONITOR = ( 1 << 29 ) , OPT_CALLER_MIXMONITOR = ( 1 << 30 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPT_ANNOUNCE = ( 1 << 0 ) , OPT_RESETCDR = ( 1 << 1 ) , OPT_DTMF_EXIT = ( 1 << 2 ) , OPT_SENDDTMF = ( 1 << 3 ) , OPT_FORCECLID = ( 1 << 4 ) , OPT_GO_ON = ( 1 << 5 ) , OPT_CALLEE_HANGUP = ( 1 << 6 ) , OPT_CALLER_HANGUP = ( 1 << 7 ) , OPT_ORIGINAL_CLID = ( 1 << 8 ) , OPT_DURATION_LIMIT = ( 1 << 9 ) , OPT_MUSICBACK = ( 1 << 10 ) , OPT_CALLEE_MACRO = ( 1 << 11 ) , OPT_SCREEN_NOINTRO = ( 1 << 12 ) , OPT_SCREEN_NOCALLERID = ( 1 << 13 ) , OPT_IGNORE_CONNECTEDLINE = ( 1 << 14 ) , OPT_SCREENING = ( 1 << 15 ) , OPT_PRIVACY = ( 1 << 16 ) , OPT_RINGBACK = ( 1 << 17 ) , OPT_DURATION_STOP = ( 1 << 18 ) , OPT_CALLEE_TRANSFER = ( 1 << 19 ) , OPT_CALLER_TRANSFER = ( 1 << 20 ) , OPT_CALLEE_MONITOR = ( 1 << 21 ) , OPT_CALLER_MONITOR = ( 1 << 22 ) , OPT_GOTO = ( 1 << 23 ) , OPT_OPERMODE = ( 1 << 24 ) , OPT_CALLEE_PARK = ( 1 << 25 ) , OPT_CALLER_PARK = ( 1 << 26 ) , OPT_IGNORE_FORWARDING = ( 1 << 27 ) , OPT_CALLEE_GOSUB = ( 1 << 28 ) , OPT_CALLEE_MIXMONITOR = ( 1 << 29 ) , OPT_CALLER_MIXMONITOR = ( 1 << 30 ) , LEAF_NODE 5 OPT_ANNOUNCE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_RESETCDR LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_SENDDTMF LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_FORCECLID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_GO_ON LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_HANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLER_HANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_ORIGINAL_CLID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_DURATION_LIMIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_MUSICBACK LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_MACRO LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_SCREEN_NOINTRO LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_SCREEN_NOCALLERID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_IGNORE_CONNECTEDLINE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_SCREENING LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_PRIVACY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_RINGBACK LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_DURATION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_TRANSFER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLER_TRANSFER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_MONITOR LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 21 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLER_MONITOR LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 22 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_GOTO LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 23 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_OPERMODE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 24 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_PARK LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 25 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLER_PARK LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 26 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_IGNORE_FORWARDING LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 27 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_GOSUB LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 28 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLEE_MIXMONITOR LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 29 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPT_CALLER_MIXMONITOR LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 30 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPT_ARG_ANNOUNCE = 0 , OPT_ARG_SENDDTMF , OPT_ARG_GOTO , OPT_ARG_DURATION_LIMIT , OPT_ARG_MUSICBACK , OPT_ARG_CALLEE_MACRO , OPT_ARG_RINGBACK , OPT_ARG_CALLEE_GOSUB , OPT_ARG_CALLEE_GO_ON , OPT_ARG_PRIVACY , OPT_ARG_DURATION_STOP , OPT_ARG_OPERMODE , OPT_ARG_SCREEN_NOINTRO , OPT_ARG_ORIGINAL_CLID , OPT_ARG_FORCECLID , OPT_ARG_FORCE_CID_TAG , OPT_ARG_FORCE_CID_PRES , OPT_ARG_PREDIAL_CALLEE , OPT_ARG_PREDIAL_CALLER , OPT_ARG_HANGUPCAUSE , OPT_ARG_ARRAY_SIZE } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPT_ARG_ANNOUNCE = 0 , OPT_ARG_SENDDTMF , OPT_ARG_GOTO , OPT_ARG_DURATION_LIMIT , OPT_ARG_MUSICBACK , OPT_ARG_CALLEE_MACRO , OPT_ARG_RINGBACK , OPT_ARG_CALLEE_GOSUB , OPT_ARG_CALLEE_GO_ON , OPT_ARG_PRIVACY , OPT_ARG_DURATION_STOP , OPT_ARG_OPERMODE , OPT_ARG_SCREEN_NOINTRO , OPT_ARG_ORIGINAL_CLID , OPT_ARG_FORCECLID , OPT_ARG_FORCE_CID_TAG , OPT_ARG_FORCE_CID_PRES , OPT_ARG_PREDIAL_CALLEE , OPT_ARG_PREDIAL_CALLER , OPT_ARG_HANGUPCAUSE , OPT_ARG_ARRAY_SIZE } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPT_ARG_ANNOUNCE = 0 , OPT_ARG_SENDDTMF , OPT_ARG_GOTO , OPT_ARG_DURATION_LIMIT , OPT_ARG_MUSICBACK , OPT_ARG_CALLEE_MACRO , OPT_ARG_RINGBACK , OPT_ARG_CALLEE_GOSUB , OPT_ARG_CALLEE_GO_ON , OPT_ARG_PRIVACY , OPT_ARG_DURATION_STOP , OPT_ARG_OPERMODE , OPT_ARG_SCREEN_NOINTRO , OPT_ARG_ORIGINAL_CLID , OPT_ARG_FORCECLID , OPT_ARG_FORCE_CID_TAG , OPT_ARG_FORCE_CID_PRES , OPT_ARG_PREDIAL_CALLEE , OPT_ARG_PREDIAL_CALLER , OPT_ARG_HANGUPCAUSE , OPT_ARG_ARRAY_SIZE } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPT_ARG_ANNOUNCE = 0 , OPT_ARG_SENDDTMF , OPT_ARG_GOTO , OPT_ARG_DURATION_LIMIT , OPT_ARG_MUSICBACK , OPT_ARG_CALLEE_MACRO , OPT_ARG_RINGBACK , OPT_ARG_CALLEE_GOSUB , OPT_ARG_CALLEE_GO_ON , OPT_ARG_PRIVACY , OPT_ARG_DURATION_STOP , OPT_ARG_OPERMODE , OPT_ARG_SCREEN_NOINTRO , OPT_ARG_ORIGINAL_CLID , OPT_ARG_FORCECLID , OPT_ARG_FORCE_CID_TAG , OPT_ARG_FORCE_CID_PRES , OPT_ARG_PREDIAL_CALLEE , OPT_ARG_PREDIAL_CALLER , OPT_ARG_HANGUPCAUSE , OPT_ARG_ARRAY_SIZE LEAF_NODE 5 OPT_ARG_ANNOUNCE LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_SENDDTMF LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_GOTO LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_DURATION_LIMIT LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_MUSICBACK LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_CALLEE_MACRO LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_RINGBACK LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_CALLEE_GOSUB LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_CALLEE_GO_ON LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_PRIVACY LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_DURATION_STOP LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_OPERMODE LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_SCREEN_NOINTRO LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_ORIGINAL_CLID LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_FORCECLID LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_FORCE_CID_TAG LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_FORCE_CID_PRES LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_PREDIAL_CALLEE LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_PREDIAL_CALLER LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_HANGUPCAUSE LEAF_NODE 5 , LEAF_NODE 5 OPT_ARG_ARRAY_SIZE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char * ast_config_AST_DATA_DIR ; VAR_DECL 2 const char * ast_config_AST_DATA_DIR TYPE 3 const char * TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char POINTER 4 * LEAF_NODE 5 * NAME 3 ast_config_AST_DATA_DIR LEAF_NODE 4 ast_config_AST_DATA_DIR LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 setup_privacy_args LEAF_NODE 3 setup_privacy_args PARAMETER_LIST 2 ( struct privacy_args * pa , struct ast_flags64 * opts , char * [ ] opt_args , struct ast_channel * chan ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct privacy_args * pa TYPE 4 struct privacy_args * TYPE_NAME 5 struct privacy_args LEAF_NODE 6 struct LEAF_NODE 6 privacy_args POINTER 5 * LEAF_NODE 6 * NAME 4 pa LEAF_NODE 5 pa LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_flags64 * opts TYPE 4 struct ast_flags64 * TYPE_NAME 5 struct ast_flags64 LEAF_NODE 6 struct LEAF_NODE 6 ast_flags64 POINTER 5 * LEAF_NODE 6 * NAME 4 opts LEAF_NODE 5 opts LEAF_NODE 3 , PARAMETER_DECL 3 char * [ ] opt_args TYPE 4 char * [ ] TYPE_NAME 5 char LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * TYPE_SUFFIX 5 [ ] LEAF_NODE 6 [ LEAF_NODE 6 ] NAME 4 opt_args LEAF_NODE 5 opt_args LEAF_NODE 3 , PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char [ 60 ] callerid ; VAR_DECL 4 char [ 60 ] callerid TYPE 5 char [ 60 ] TYPE_NAME 6 char LEAF_NODE 7 char TYPE_SUFFIX 6 [ 60 ] LEAF_NODE 7 [ FIELD 7 60 LEAF_NODE 8 60 LEAF_NODE 7 ] NAME 5 callerid LEAF_NODE 6 callerid LEAF_NODE 4 ; SIMPLE_DECL 3 int res ; VAR_DECL 4 int res TYPE 5 int TYPE_NAME 6 int LEAF_NODE 7 int NAME 5 res LEAF_NODE 6 res LEAF_NODE 4 ; SIMPLE_DECL 3 char * l ; VAR_DECL 4 char * l TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 l LEAF_NODE 6 l LEAF_NODE 4 ; LEAF_NODE 3 if LEAF_NODE 3 ( LEAF_NODE 3 ast_channel_caller LEAF_NODE 3 ( LEAF_NODE 3 chan LEAF_NODE 3 ) LEAF_NODE 3 -> LEAF_NODE 3 id LEAF_NODE 3 . LEAF_NODE 3 number LEAF_NODE 3 . LEAF_NODE 3 valid LEAF_NODE 3 && LEAF_NODE 3 ! LEAF_NODE 3 ast_strlen_zero LEAF_NODE 3 ( LEAF_NODE 3 ast_channel_caller LEAF_NODE 3 ( LEAF_NODE 3 chan LEAF_NODE 3 ) LEAF_NODE 3 -> LEAF_NODE 3 id LEAF_NODE 3 . LEAF_NODE 3 number LEAF_NODE 3 . LEAF_NODE 3 str LEAF_NODE 3 ) LEAF_NODE 3 ) LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 l LEAF_NODE 4 = LEAF_NODE 4 ast_strdupa LEAF_NODE 4 ( LEAF_NODE 4 ast_channel_caller LEAF_NODE 4 ( LEAF_NODE 4 chan LEAF_NODE 4 ) LEAF_NODE 4 -> LEAF_NODE 4 id LEAF_NODE 4 . LEAF_NODE 4 number LEAF_NODE 4 . LEAF_NODE 4 str LEAF_NODE 4 ) LEAF_NODE 4 ; EXPR_STATEMENT 4 ast_shrink_phone_number ( l ) ; EXPR 5 ast_shrink_phone_number ( l ) FUNCTION_CALL 6 ast_shrink_phone_number ( l ) CALLEE 7 ast_shrink_phone_number LEAF_NODE 8 ast_shrink_phone_number LEAF_NODE 7 ( ARGUMENT 7 l FIELD 8 l LEAF_NODE 9 l LEAF_NODE 7 ) LEAF_NODE 5 ; SELECTION 4 KEYWORD 5 if LEAF_NODE 6 if LEAF_NODE 5 ( CONDITION 5 ast_test_flag64 ( opts , OPT_PRIVACY ) EXPR 6 ast_test_flag64 ( opts , OPT_PRIVACY ) FUNCTION_CALL 7 ast_test_flag64 ( opts , OPT_PRIVACY ) CALLEE 8 ast_test_flag64 LEAF_NODE 9 ast_test_flag64 LEAF_NODE 8 ( ARGUMENT 8 opts FIELD 9 opts LEAF_NODE 10 opts LEAF_NODE 8 , ARGUMENT 8 OPT_PRIVACY FIELD 9 OPT_PRIVACY LEAF_NODE 10 OPT_PRIVACY LEAF_NODE 8 ) LEAF_NODE 5 ) STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 ast_verb ( 3 , \"Privacy DB is '%s', clid is '%s'\\n\" , opt_args [ OPT_ARG_PRIVACY ] , l ) ; EXPR 8 ast_verb ( 3 , \"Privacy DB is '%s', clid is '%s'\\n\" , opt_args [ OPT_ARG_PRIVACY ] , l ) FUNCTION_CALL 9 ast_verb ( 3 , \"Privacy DB is '%s', clid is '%s'\\n\" , opt_args [ OPT_ARG_PRIVACY ] , l ) CALLEE 10 ast_verb LEAF_NODE 11 ast_verb LEAF_NODE 10 ( ARGUMENT 10 3 FIELD 11 3 LEAF_NODE 12 3 LEAF_NODE 10 , ARGUMENT 10 \"Privacy DB is '%s', clid is '%s'\\n\" FIELD 11 \"Privacy DB is '%s', clid is '%s'\\n\" LEAF_NODE 12 \"Privacy DB is '%s', clid is '%s'\\n\" LEAF_NODE 10 , ARGUMENT 10 opt_args [ OPT_ARG_PRIVACY ] FIELD 11 opt_args [ OPT_ARG_PRIVACY ] LEAF_NODE 12 opt_args LEAF_NODE 12 [ EXPR 12 OPT_ARG_PRIVACY FIELD 13 OPT_ARG_PRIVACY LEAF_NODE 14 OPT_ARG_PRIVACY LEAF_NODE 12 ] LEAF_NODE 10 , ARGUMENT 10 l FIELD 11 l LEAF_NODE 12 l LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 pa -> privdb_val = ast_privacy_check ( opt_args [ OPT_ARG_PRIVACY ] , l ) ; EXPR 8 pa -> privdb_val = ast_privacy_check ( opt_args [ OPT_ARG_PRIVACY ] , l ) ASSIGN 9 pa -> privdb_val = ast_privacy_check ( opt_args [ OPT_ARG_PRIVACY ] , l ) LVAL 10 pa -> privdb_val FIELD 11 pa -> privdb_val LEAF_NODE 12 pa LEAF_NODE 12 -> LEAF_NODE 12 privdb_val ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 ast_privacy_check ( opt_args [ OPT_ARG_PRIVACY ] , l ) FUNCTION_CALL 11 ast_privacy_check ( opt_args [ OPT_ARG_PRIVACY ] , l ) CALLEE 12 ast_privacy_check LEAF_NODE 13 ast_privacy_check LEAF_NODE 12 ( ARGUMENT 12 opt_args [ OPT_ARG_PRIVACY ] FIELD 13 opt_args [ OPT_ARG_PRIVACY ] LEAF_NODE 14 opt_args LEAF_NODE 14 [ EXPR 14 OPT_ARG_PRIVACY FIELD 15 OPT_ARG_PRIVACY LEAF_NODE 16 OPT_ARG_PRIVACY LEAF_NODE 14 ] LEAF_NODE 12 , ARGUMENT 12 l FIELD 13 l LEAF_NODE 14 l LEAF_NODE 12 ) LEAF_NODE 8 ; LEAF_NODE 6 } SELECTION 4 KEYWORD 5 else LEAF_NODE 6 else STATEMENTS 5 LEAF_NODE 6 { STATEMENTS 6 EXPR_STATEMENT 7 ast_verb ( 3 , \"Privacy Screening, clid is '%s'\\n\" , l ) ; EXPR 8 ast_verb ( 3 , \"Privacy Screening, clid is '%s'\\n\" , l ) FUNCTION_CALL 9 ast_verb ( 3 , \"Privacy Screening, clid is '%s'\\n\" , l ) CALLEE 10 ast_verb LEAF_NODE 11 ast_verb LEAF_NODE 10 ( ARGUMENT 10 3 FIELD 11 3 LEAF_NODE 12 3 LEAF_NODE 10 , ARGUMENT 10 \"Privacy Screening, clid is '%s'\\n\" FIELD 11 \"Privacy Screening, clid is '%s'\\n\" LEAF_NODE 12 \"Privacy Screening, clid is '%s'\\n\" LEAF_NODE 10 , ARGUMENT 10 l FIELD 11 l LEAF_NODE 12 l LEAF_NODE 10 ) LEAF_NODE 8 ; EXPR_STATEMENT 7 pa -> privdb_val = AST_PRIVACY_UNKNOWN ; EXPR 8 pa -> privdb_val = AST_PRIVACY_UNKNOWN ASSIGN 9 pa -> privdb_val = AST_PRIVACY_UNKNOWN LVAL 10 pa -> privdb_val FIELD 11 pa -> privdb_val LEAF_NODE 12 pa LEAF_NODE 12 -> LEAF_NODE 12 privdb_val ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 AST_PRIVACY_UNKNOWN FIELD 11 AST_PRIVACY_UNKNOWN LEAF_NODE 12 AST_PRIVACY_UNKNOWN LEAF_NODE 8 ; LEAF_NODE 6 } LEAF_NODE 3 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 SIMPLE_DECL 6 char * tnam , char * tn2 ; INIT_DECL_LIST 7 char * tnam , char * tn2 VAR_DECL 8 char * tnam TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 tnam LEAF_NODE 10 tnam LEAF_NODE 8 , VAR_DECL 8 char * tn2 TYPE 9 char * TYPE_NAME 10 char LEAF_NODE 11 char POINTER 10 * LEAF_NODE 11 * NAME 9 tn2 LEAF_NODE 10 tn2 LEAF_NODE 7 ; EXPR_STATEMENT 6 tnam = ast_strdupa ( ast_channel_name ( chan ) ) ; EXPR 7 tnam = ast_strdupa ( ast_channel_name ( chan ) ) ASSIGN 8 tnam = ast_strdupa ( ast_channel_name ( chan ) ) LVAL 9 tnam FIELD 10 tnam LEAF_NODE 11 tnam ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 ast_strdupa ( ast_channel_name ( chan ) ) FUNCTION_CALL 10 ast_strdupa ( ast_channel_name ( chan ) ) CALLEE 11 ast_strdupa LEAF_NODE 12 ast_strdupa LEAF_NODE 11 ( ARGUMENT 11 ast_channel_name ( chan ) FUNCTION_CALL 12 ast_channel_name ( chan ) CALLEE 13 ast_channel_name LEAF_NODE 14 ast_channel_name LEAF_NODE 13 ( ARGUMENT 13 chan FIELD 14 chan LEAF_NODE 15 chan LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 7 ; ITERATION 6 KEYWORD 7 for LEAF_NODE 8 for LEAF_NODE 7 ( FOR_INIT 7 tn2 = tnam ; EXPR 8 tn2 = tnam ASSIGN 9 tn2 = tnam LVAL 10 tn2 FIELD 11 tn2 LEAF_NODE 12 tn2 ASSIGN_OP 10 = LEAF_NODE 11 = RVAL 10 tnam FIELD 11 tnam LEAF_NODE 12 tnam LEAF_NODE 8 ; CONDITION 7 * tn2 EXPR 8 * tn2 UNARY_EXPR 9 * tn2 UNARY_OPERATOR 10 * LEAF_NODE 11 * FIELD 10 tn2 LEAF_NODE 11 tn2 LEAF_NODE 7 ; FOR_EXPR 7 tn2 ++ EXPR 8 tn2 ++ FIELD 9 tn2 ++ LEAF_NODE 10 tn2 LEAF_NODE 10 ++ LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 SELECTION 9 KEYWORD 10 if LEAF_NODE 11 if LEAF_NODE 10 ( CONDITION 10 * tn2 == '/' EXPR 11 * tn2 == '/' UNARY_EXPR 12 * tn2 UNARY_OPERATOR 13 * LEAF_NODE 14 * FIELD 13 tn2 LEAF_NODE 14 tn2 EQ_OPERATOR 12 == LEAF_NODE 13 == FIELD 12 '/' LEAF_NODE 13 '/' LEAF_NODE 10 ) STATEMENTS 10 EXPR_STATEMENT 11 * tn2 = '=' ; EXPR 12 * tn2 = '=' ASSIGN 13 * tn2 = '=' LVAL 14 * tn2 UNARY_EXPR 15 * tn2 UNARY_OPERATOR 16 * LEAF_NODE 17 * FIELD 16 tn2 LEAF_NODE 17 tn2 ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 '=' FIELD 15 '=' LEAF_NODE 16 '=' LEAF_NODE 12 ; LEAF_NODE 8 } EXPR_STATEMENT 6 ast_verb ( 3 , \"Privacy-- callerid is empty\\n\" ) ; EXPR 7 ast_verb ( 3 , \"Privacy-- callerid is empty\\n\" ) FUNCTION_CALL 8 ast_verb ( 3 , \"Privacy-- callerid is empty\\n\" ) CALLEE 9 ast_verb LEAF_NODE 10 ast_verb LEAF_NODE 9 ( ARGUMENT 9 3 FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 9 , ARGUMENT 9 \"Privacy-- callerid is empty\\n\" FIELD 10 \"Privacy-- callerid is empty\\n\" LEAF_NODE 11 \"Privacy-- callerid is empty\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 snprintf ( callerid , sizeof ( callerid ) , \"NOCALLERID_%s%s\" , ast_channel_exten ( chan ) , tnam ) ; EXPR 7 snprintf ( callerid , sizeof ( callerid ) , \"NOCALLERID_%s%s\" , ast_channel_exten ( chan ) , tnam ) FUNCTION_CALL 8 snprintf ( callerid , sizeof ( callerid ) , \"NOCALLERID_%s%s\" , ast_channel_exten ( chan ) , tnam ) CALLEE 9 snprintf LEAF_NODE 10 snprintf LEAF_NODE 9 ( ARGUMENT 9 callerid FIELD 10 callerid LEAF_NODE 11 callerid LEAF_NODE 9 , ARGUMENT 9 sizeof ( callerid ) FUNCTION_CALL 10 sizeof ( callerid ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 callerid FIELD 12 callerid LEAF_NODE 13 callerid LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 \"NOCALLERID_%s%s\" FIELD 10 \"NOCALLERID_%s%s\" LEAF_NODE 11 \"NOCALLERID_%s%s\" LEAF_NODE 9 , ARGUMENT 9 ast_channel_exten ( chan ) FUNCTION_CALL 10 ast_channel_exten ( chan ) CALLEE 11 ast_channel_exten LEAF_NODE 12 ast_channel_exten LEAF_NODE 11 ( ARGUMENT 11 chan FIELD 12 chan LEAF_NODE 13 chan LEAF_NODE 11 ) LEAF_NODE 9 , ARGUMENT 9 tnam FIELD 10 tnam LEAF_NODE 11 tnam LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 l = callerid ; EXPR 7 l = callerid ASSIGN 8 l = callerid LVAL 9 l FIELD 10 l LEAF_NODE 11 l ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 callerid FIELD 10 callerid LEAF_NODE 11 callerid LEAF_NODE 7 ; EXPR_STATEMENT 6 pa -> privdb_val = AST_PRIVACY_UNKNOWN ; EXPR 7 pa -> privdb_val = AST_PRIVACY_UNKNOWN ASSIGN 8 pa -> privdb_val = AST_PRIVACY_UNKNOWN LVAL 9 pa -> privdb_val FIELD 10 pa -> privdb_val LEAF_NODE 11 pa LEAF_NODE 11 -> LEAF_NODE 11 privdb_val ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 AST_PRIVACY_UNKNOWN FIELD 10 AST_PRIVACY_UNKNOWN LEAF_NODE 11 AST_PRIVACY_UNKNOWN LEAF_NODE 7 ; LEAF_NODE 5 } EXPR_STATEMENT 3 ast_copy_string ( pa -> privcid , l , sizeof ( pa -> privcid ) ) ; EXPR 4 ast_copy_string ( pa -> privcid , l , sizeof ( pa -> privcid ) ) FUNCTION_CALL 5 ast_copy_string ( pa -> privcid , l , sizeof ( pa -> privcid ) ) CALLEE 6 ast_copy_string LEAF_NODE 7 ast_copy_string LEAF_NODE 6 ( ARGUMENT 6 pa -> privcid FIELD 7 pa -> privcid LEAF_NODE 8 pa LEAF_NODE 8 -> LEAF_NODE 8 privcid LEAF_NODE 6 , ARGUMENT 6 l FIELD 7 l LEAF_NODE 8 l LEAF_NODE 6 , ARGUMENT 6 sizeof ( pa -> privcid ) FUNCTION_CALL 7 sizeof ( pa -> privcid ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 pa -> privcid FIELD 9 pa -> privcid LEAF_NODE 10 pa LEAF_NODE 10 -> LEAF_NODE 10 privcid LEAF_NODE 8 ) LEAF_NODE 6 ) LEAF_NODE 4 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 && ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) EXPR 5 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 && ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) AND 6 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 && ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) EXPR 7 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 FUNCTION_CALL 8 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) CALLEE 9 strncmp LEAF_NODE 10 strncmp LEAF_NODE 9 ( ARGUMENT 9 pa -> privcid FIELD 10 pa -> privcid LEAF_NODE 11 pa LEAF_NODE 11 -> LEAF_NODE 11 privcid LEAF_NODE 9 , ARGUMENT 9 \"NOCALLERID\" FIELD 10 \"NOCALLERID\" LEAF_NODE 11 \"NOCALLERID\" LEAF_NODE 9 , ARGUMENT 9 10 FIELD 10 10 LEAF_NODE 11 10 LEAF_NODE 9 ) EQ_OPERATOR 8 != LEAF_NODE 9 != FIELD 8 0 LEAF_NODE 9 0 LEAF_NODE 7 && EXPR 7 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) FUNCTION_CALL 8 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) CALLEE 9 ast_test_flag64 LEAF_NODE 10 ast_test_flag64 LEAF_NODE 9 ( ARGUMENT 9 opts FIELD 10 opts LEAF_NODE 11 opts LEAF_NODE 9 , ARGUMENT 9 OPT_SCREEN_NOCALLERID FIELD 10 OPT_SCREEN_NOCALLERID LEAF_NODE 11 OPT_SCREEN_NOCALLERID LEAF_NODE 9 ) LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_verb ( 3 , \"CallerID set (%s); N option set; Screening should be off\\n\" , pa -> privcid ) ; EXPR 7 ast_verb ( 3 , \"CallerID set (%s); N option set; Screening should be off\\n\" , pa -> privcid ) FUNCTION_CALL 8 ast_verb ( 3 , \"CallerID set (%s); N option set; Screening should be off\\n\" , pa -> privcid ) CALLEE 9 ast_verb LEAF_NODE 10 ast_verb LEAF_NODE 9 ( ARGUMENT 9 3 FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 9 , ARGUMENT 9 \"CallerID set (%s); N option set; Screening should be off\\n\" FIELD 10 \"CallerID set (%s); N option set; Screening should be off\\n\" LEAF_NODE 11 \"CallerID set (%s); N option set; Screening should be off\\n\" LEAF_NODE 9 , ARGUMENT 9 pa -> privcid FIELD 10 pa -> privcid LEAF_NODE 11 pa LEAF_NODE 11 -> LEAF_NODE 11 privcid LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 pa -> privdb_val = AST_PRIVACY_ALLOW ; EXPR 7 pa -> privdb_val = AST_PRIVACY_ALLOW ASSIGN 8 pa -> privdb_val = AST_PRIVACY_ALLOW LVAL 9 pa -> privdb_val FIELD 10 pa -> privdb_val LEAF_NODE 11 pa LEAF_NODE 11 -> LEAF_NODE 11 privdb_val ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 AST_PRIVACY_ALLOW FIELD 10 AST_PRIVACY_ALLOW LEAF_NODE 11 AST_PRIVACY_ALLOW LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) && strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) == 0 EXPR 7 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) && strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) == 0 AND 8 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) && strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) == 0 EXPR 9 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) FUNCTION_CALL 10 ast_test_flag64 ( opts , OPT_SCREEN_NOCALLERID ) CALLEE 11 ast_test_flag64 LEAF_NODE 12 ast_test_flag64 LEAF_NODE 11 ( ARGUMENT 11 opts FIELD 12 opts LEAF_NODE 13 opts LEAF_NODE 11 , ARGUMENT 11 OPT_SCREEN_NOCALLERID FIELD 12 OPT_SCREEN_NOCALLERID LEAF_NODE 13 OPT_SCREEN_NOCALLERID LEAF_NODE 11 ) LEAF_NODE 9 && EXPR 9 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) == 0 FUNCTION_CALL 10 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) CALLEE 11 strncmp LEAF_NODE 12 strncmp LEAF_NODE 11 ( ARGUMENT 11 pa -> privcid FIELD 12 pa -> privcid LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 privcid LEAF_NODE 11 , ARGUMENT 11 \"NOCALLERID\" FIELD 12 \"NOCALLERID\" LEAF_NODE 13 \"NOCALLERID\" LEAF_NODE 11 , ARGUMENT 11 10 FIELD 12 10 LEAF_NODE 13 10 LEAF_NODE 11 ) EQ_OPERATOR 10 == LEAF_NODE 11 == FIELD 10 0 LEAF_NODE 11 0 LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_verb ( 3 , \"CallerID blank; N option set; Screening should happen; dbval is %d\\n\" , pa -> privdb_val ) ; EXPR 9 ast_verb ( 3 , \"CallerID blank; N option set; Screening should happen; dbval is %d\\n\" , pa -> privdb_val ) FUNCTION_CALL 10 ast_verb ( 3 , \"CallerID blank; N option set; Screening should happen; dbval is %d\\n\" , pa -> privdb_val ) CALLEE 11 ast_verb LEAF_NODE 12 ast_verb LEAF_NODE 11 ( ARGUMENT 11 3 FIELD 12 3 LEAF_NODE 13 3 LEAF_NODE 11 , ARGUMENT 11 \"CallerID blank; N option set; Screening should happen; dbval is %d\\n\" FIELD 12 \"CallerID blank; N option set; Screening should happen; dbval is %d\\n\" LEAF_NODE 13 \"CallerID blank; N option set; Screening should happen; dbval is %d\\n\" LEAF_NODE 11 , ARGUMENT 11 pa -> privdb_val FIELD 12 pa -> privdb_val LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 privdb_val LEAF_NODE 11 ) LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 pa -> privdb_val == AST_PRIVACY_DENY EXPR 5 pa -> privdb_val == AST_PRIVACY_DENY FIELD 6 pa -> privdb_val LEAF_NODE 7 pa LEAF_NODE 7 -> LEAF_NODE 7 privdb_val EQ_OPERATOR 6 == LEAF_NODE 7 == FIELD 6 AST_PRIVACY_DENY LEAF_NODE 7 AST_PRIVACY_DENY LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_verb ( 3 , \"Privacy DB reports PRIVACY_DENY for this callerid. Dial reports unavailable\\n\" ) ; EXPR 7 ast_verb ( 3 , \"Privacy DB reports PRIVACY_DENY for this callerid. Dial reports unavailable\\n\" ) FUNCTION_CALL 8 ast_verb ( 3 , \"Privacy DB reports PRIVACY_DENY for this callerid. Dial reports unavailable\\n\" ) CALLEE 9 ast_verb LEAF_NODE 10 ast_verb LEAF_NODE 9 ( ARGUMENT 9 3 FIELD 10 3 LEAF_NODE 11 3 LEAF_NODE 9 , ARGUMENT 9 \"Privacy DB reports PRIVACY_DENY for this callerid. Dial reports unavailable\\n\" FIELD 10 \"Privacy DB reports PRIVACY_DENY for this callerid. Dial reports unavailable\\n\" LEAF_NODE 11 \"Privacy DB reports PRIVACY_DENY for this callerid. Dial reports unavailable\\n\" LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 ast_copy_string ( pa -> status , \"NOANSWER\" , sizeof ( pa -> status ) ) ; EXPR 7 ast_copy_string ( pa -> status , \"NOANSWER\" , sizeof ( pa -> status ) ) FUNCTION_CALL 8 ast_copy_string ( pa -> status , \"NOANSWER\" , sizeof ( pa -> status ) ) CALLEE 9 ast_copy_string LEAF_NODE 10 ast_copy_string LEAF_NODE 9 ( ARGUMENT 9 pa -> status FIELD 10 pa -> status LEAF_NODE 11 pa LEAF_NODE 11 -> LEAF_NODE 11 status LEAF_NODE 9 , ARGUMENT 9 \"NOANSWER\" FIELD 10 \"NOANSWER\" LEAF_NODE 11 \"NOANSWER\" LEAF_NODE 9 , ARGUMENT 9 sizeof ( pa -> status ) FUNCTION_CALL 10 sizeof ( pa -> status ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 pa -> status FIELD 12 pa -> status LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 status LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; JUMP_STATEMENT 6 return 0 ; KEYWORD 7 return LEAF_NODE 8 return DESTINATION 7 0 EXPR 8 0 FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 pa -> privdb_val == AST_PRIVACY_KILL EXPR 7 pa -> privdb_val == AST_PRIVACY_KILL FIELD 8 pa -> privdb_val LEAF_NODE 9 pa LEAF_NODE 9 -> LEAF_NODE 9 privdb_val EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 AST_PRIVACY_KILL LEAF_NODE 9 AST_PRIVACY_KILL LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_copy_string ( pa -> status , \"DONTCALL\" , sizeof ( pa -> status ) ) ; EXPR 9 ast_copy_string ( pa -> status , \"DONTCALL\" , sizeof ( pa -> status ) ) FUNCTION_CALL 10 ast_copy_string ( pa -> status , \"DONTCALL\" , sizeof ( pa -> status ) ) CALLEE 11 ast_copy_string LEAF_NODE 12 ast_copy_string LEAF_NODE 11 ( ARGUMENT 11 pa -> status FIELD 12 pa -> status LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 status LEAF_NODE 11 , ARGUMENT 11 \"DONTCALL\" FIELD 12 \"DONTCALL\" LEAF_NODE 13 \"DONTCALL\" LEAF_NODE 11 , ARGUMENT 11 sizeof ( pa -> status ) FUNCTION_CALL 12 sizeof ( pa -> status ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 pa -> status FIELD 14 pa -> status LEAF_NODE 15 pa LEAF_NODE 15 -> LEAF_NODE 15 status LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 pa -> privdb_val == AST_PRIVACY_TORTURE EXPR 7 pa -> privdb_val == AST_PRIVACY_TORTURE FIELD 8 pa -> privdb_val LEAF_NODE 9 pa LEAF_NODE 9 -> LEAF_NODE 9 privdb_val EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 AST_PRIVACY_TORTURE LEAF_NODE 9 AST_PRIVACY_TORTURE LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 ast_copy_string ( pa -> status , \"TORTURE\" , sizeof ( pa -> status ) ) ; EXPR 9 ast_copy_string ( pa -> status , \"TORTURE\" , sizeof ( pa -> status ) ) FUNCTION_CALL 10 ast_copy_string ( pa -> status , \"TORTURE\" , sizeof ( pa -> status ) ) CALLEE 11 ast_copy_string LEAF_NODE 12 ast_copy_string LEAF_NODE 11 ( ARGUMENT 11 pa -> status FIELD 12 pa -> status LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 status LEAF_NODE 11 , ARGUMENT 11 \"TORTURE\" FIELD 12 \"TORTURE\" LEAF_NODE 13 \"TORTURE\" LEAF_NODE 11 , ARGUMENT 11 sizeof ( pa -> status ) FUNCTION_CALL 12 sizeof ( pa -> status ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 pa -> status FIELD 14 pa -> status LEAF_NODE 15 pa LEAF_NODE 15 -> LEAF_NODE 15 status LEAF_NODE 13 ) LEAF_NODE 11 ) LEAF_NODE 9 ; JUMP_STATEMENT 8 return 0 ; KEYWORD 9 return LEAF_NODE 10 return DESTINATION 9 0 EXPR 10 0 FIELD 11 0 LEAF_NODE 12 0 LEAF_NODE 9 ; LEAF_NODE 7 } SELECTION 3 KEYWORD 4 else LEAF_NODE 5 else STATEMENTS 4 SELECTION 5 KEYWORD 6 if LEAF_NODE 7 if LEAF_NODE 6 ( CONDITION 6 pa -> privdb_val == AST_PRIVACY_UNKNOWN EXPR 7 pa -> privdb_val == AST_PRIVACY_UNKNOWN FIELD 8 pa -> privdb_val LEAF_NODE 9 pa LEAF_NODE 9 -> LEAF_NODE 9 privdb_val EQ_OPERATOR 8 == LEAF_NODE 9 == FIELD 8 AST_PRIVACY_UNKNOWN LEAF_NODE 9 AST_PRIVACY_UNKNOWN LEAF_NODE 6 ) STATEMENTS 6 LEAF_NODE 7 { STATEMENTS 7 EXPR_STATEMENT 8 snprintf ( pa -> privintro , sizeof ( pa -> privintro ) , \"%s/sounds/priv-callerintros\" , ast_config_AST_DATA_DIR ) ; EXPR 9 snprintf ( pa -> privintro , sizeof ( pa -> privintro ) , \"%s/sounds/priv-callerintros\" , ast_config_AST_DATA_DIR ) FUNCTION_CALL 10 snprintf ( pa -> privintro , sizeof ( pa -> privintro ) , \"%s/sounds/priv-callerintros\" , ast_config_AST_DATA_DIR ) CALLEE 11 snprintf LEAF_NODE 12 snprintf LEAF_NODE 11 ( ARGUMENT 11 pa -> privintro FIELD 12 pa -> privintro LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 privintro LEAF_NODE 11 , ARGUMENT 11 sizeof ( pa -> privintro ) FUNCTION_CALL 12 sizeof ( pa -> privintro ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 pa -> privintro FIELD 14 pa -> privintro LEAF_NODE 15 pa LEAF_NODE 15 -> LEAF_NODE 15 privintro LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 \"%s/sounds/priv-callerintros\" FIELD 12 \"%s/sounds/priv-callerintros\" LEAF_NODE 13 \"%s/sounds/priv-callerintros\" LEAF_NODE 11 , ARGUMENT 11 ast_config_AST_DATA_DIR FIELD 12 ast_config_AST_DATA_DIR LEAF_NODE 13 ast_config_AST_DATA_DIR LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ( res = ast_mkdir ( pa -> privintro , 0755 ) ) EXPR 10 ( res = ast_mkdir ( pa -> privintro , 0755 ) ) LEAF_NODE 11 ( ASSIGN 11 res = ast_mkdir ( pa -> privintro , 0755 ) LVAL 12 res FIELD 13 res LEAF_NODE 14 res ASSIGN_OP 12 = LEAF_NODE 13 = RVAL 12 ast_mkdir ( pa -> privintro , 0755 ) FUNCTION_CALL 13 ast_mkdir ( pa -> privintro , 0755 ) CALLEE 14 ast_mkdir LEAF_NODE 15 ast_mkdir LEAF_NODE 14 ( ARGUMENT 14 pa -> privintro FIELD 15 pa -> privintro LEAF_NODE 16 pa LEAF_NODE 16 -> LEAF_NODE 16 privintro LEAF_NODE 14 , ARGUMENT 14 0755 FIELD 15 0755 LEAF_NODE 16 0755 LEAF_NODE 14 ) LEAF_NODE 11 ) LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 EXPR_STATEMENT 11 ast_log ( LOG_WARNING , \"privacy: can't create directory priv-callerintros: %s\\n\" , strerror ( res ) ) ; EXPR 12 ast_log ( LOG_WARNING , \"privacy: can't create directory priv-callerintros: %s\\n\" , strerror ( res ) ) FUNCTION_CALL 13 ast_log ( LOG_WARNING , \"privacy: can't create directory priv-callerintros: %s\\n\" , strerror ( res ) ) CALLEE 14 ast_log LEAF_NODE 15 ast_log LEAF_NODE 14 ( ARGUMENT 14 LOG_WARNING FIELD 15 LOG_WARNING LEAF_NODE 16 LOG_WARNING LEAF_NODE 14 , ARGUMENT 14 \"privacy: can't create directory priv-callerintros: %s\\n\" FIELD 15 \"privacy: can't create directory priv-callerintros: %s\\n\" LEAF_NODE 16 \"privacy: can't create directory priv-callerintros: %s\\n\" LEAF_NODE 14 , ARGUMENT 14 strerror ( res ) FUNCTION_CALL 15 strerror ( res ) CALLEE 16 strerror LEAF_NODE 17 strerror LEAF_NODE 16 ( ARGUMENT 16 res FIELD 17 res LEAF_NODE 18 res LEAF_NODE 16 ) LEAF_NODE 14 ) LEAF_NODE 12 ; JUMP_STATEMENT 11 return - 1 ; KEYWORD 12 return LEAF_NODE 13 return DESTINATION 12 - 1 EXPR 13 - 1 UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ; LEAF_NODE 10 } EXPR_STATEMENT 8 snprintf ( pa -> privintro , sizeof ( pa -> privintro ) , \"priv-callerintros/%s\" , pa -> privcid ) ; EXPR 9 snprintf ( pa -> privintro , sizeof ( pa -> privintro ) , \"priv-callerintros/%s\" , pa -> privcid ) FUNCTION_CALL 10 snprintf ( pa -> privintro , sizeof ( pa -> privintro ) , \"priv-callerintros/%s\" , pa -> privcid ) CALLEE 11 snprintf LEAF_NODE 12 snprintf LEAF_NODE 11 ( ARGUMENT 11 pa -> privintro FIELD 12 pa -> privintro LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 privintro LEAF_NODE 11 , ARGUMENT 11 sizeof ( pa -> privintro ) FUNCTION_CALL 12 sizeof ( pa -> privintro ) CALLEE 13 sizeof LEAF_NODE 14 sizeof LEAF_NODE 13 ( ARGUMENT 13 pa -> privintro FIELD 14 pa -> privintro LEAF_NODE 15 pa LEAF_NODE 15 -> LEAF_NODE 15 privintro LEAF_NODE 13 ) LEAF_NODE 11 , ARGUMENT 11 \"priv-callerintros/%s\" FIELD 12 \"priv-callerintros/%s\" LEAF_NODE 13 \"priv-callerintros/%s\" LEAF_NODE 11 , ARGUMENT 11 pa -> privcid FIELD 12 pa -> privcid LEAF_NODE 13 pa LEAF_NODE 13 -> LEAF_NODE 13 privcid LEAF_NODE 11 ) LEAF_NODE 9 ; SELECTION 8 KEYWORD 9 if LEAF_NODE 10 if LEAF_NODE 9 ( CONDITION 9 ast_fileexists ( pa -> privintro , NULL , NULL ) > 0 && strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 EXPR 10 ast_fileexists ( pa -> privintro , NULL , NULL ) > 0 && strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 AND 11 ast_fileexists ( pa -> privintro , NULL , NULL ) > 0 && strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 EXPR 12 ast_fileexists ( pa -> privintro , NULL , NULL ) > 0 FUNCTION_CALL 13 ast_fileexists ( pa -> privintro , NULL , NULL ) CALLEE 14 ast_fileexists LEAF_NODE 15 ast_fileexists LEAF_NODE 14 ( ARGUMENT 14 pa -> privintro FIELD 15 pa -> privintro LEAF_NODE 16 pa LEAF_NODE 16 -> LEAF_NODE 16 privintro LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 , ARGUMENT 14 NULL FIELD 15 NULL LEAF_NODE 16 NULL LEAF_NODE 14 ) REL_OPERATOR 13 > LEAF_NODE 14 > FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 12 && EXPR 12 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) != 0 FUNCTION_CALL 13 strncmp ( pa -> privcid , \"NOCALLERID\" , 10 ) CALLEE 14 strncmp LEAF_NODE 15 strncmp LEAF_NODE 14 ( ARGUMENT 14 pa -> privcid FIELD 15 pa -> privcid LEAF_NODE 16 pa LEAF_NODE 16 -> LEAF_NODE 16 privcid LEAF_NODE 14 , ARGUMENT 14 \"NOCALLERID\" FIELD 15 \"NOCALLERID\" LEAF_NODE 16 \"NOCALLERID\" LEAF_NODE 14 , ARGUMENT 14 10 FIELD 15 10 LEAF_NODE 16 10 LEAF_NODE 14 ) EQ_OPERATOR 13 != LEAF_NODE 14 != FIELD 13 0 LEAF_NODE 14 0 LEAF_NODE 9 ) STATEMENTS 9 LEAF_NODE 10 { LEAF_NODE 10 STATEMENTS LEAF_NODE 10 } SELECTION 8 KEYWORD 9 else LEAF_NODE 10 else STATEMENTS 9 LEAF_NODE 10 { STATEMENTS 10 SIMPLE_DECL 11 int duration ; VAR_DECL 12 int duration TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 duration LEAF_NODE 14 duration LEAF_NODE 12 ; SIMPLE_DECL 11 int silencethreshold ; silencethreshold = ast_dsp_get_threshold_from_settings ( THRESHOLD_SILENCE ) ; VAR_DECL 12 int silencethreshold ; silencethreshold = ast_dsp_get_threshold_from_settings ( THRESHOLD_SILENCE ) TYPE 13 int TYPE_NAME 14 int LEAF_NODE 15 int NAME 13 silencethreshold LEAF_NODE 14 silencethreshold LEAF_NODE 13 ; INIT 13 silencethreshold = ast_dsp_get_threshold_from_settings ( THRESHOLD_SILENCE ) ASSIGN 14 silencethreshold = ast_dsp_get_threshold_from_settings ( THRESHOLD_SILENCE ) LVAL 15 silencethreshold NAME 16 silencethreshold LEAF_NODE 17 silencethreshold ASSIGN_OP 15 = LEAF_NODE 16 = RVAL 15 ast_dsp_get_threshold_from_settings ( THRESHOLD_SILENCE ) FUNCTION_CALL 16 ast_dsp_get_threshold_from_settings ( THRESHOLD_SILENCE ) CALLEE 17 ast_dsp_get_threshold_from_settings LEAF_NODE 18 ast_dsp_get_threshold_from_settings LEAF_NODE 17 ( ARGUMENT 17 THRESHOLD_SILENCE FIELD 18 THRESHOLD_SILENCE LEAF_NODE 19 THRESHOLD_SILENCE LEAF_NODE 17 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 ast_answer ( chan ) ; EXPR 12 ast_answer ( chan ) FUNCTION_CALL 13 ast_answer ( chan ) CALLEE 14 ast_answer LEAF_NODE 15 ast_answer LEAF_NODE 14 ( ARGUMENT 14 chan FIELD 15 chan LEAF_NODE 16 chan LEAF_NODE 14 ) LEAF_NODE 12 ; EXPR_STATEMENT 11 res = ast_play_and_record ( chan , \"priv-recordintro\" , pa -> privintro , 4 , \"sln\" , & duration , NULL , silencethreshold , 2000 , 0 ) ; EXPR 12 res = ast_play_and_record ( chan , \"priv-recordintro\" , pa -> privintro , 4 , \"sln\" , & duration , NULL , silencethreshold , 2000 , 0 ) ASSIGN 13 res = ast_play_and_record ( chan , \"priv-recordintro\" , pa -> privintro , 4 , \"sln\" , & duration , NULL , silencethreshold , 2000 , 0 ) LVAL 14 res FIELD 15 res LEAF_NODE 16 res ASSIGN_OP 14 = LEAF_NODE 15 = RVAL 14 ast_play_and_record ( chan , \"priv-recordintro\" , pa -> privintro , 4 , \"sln\" , & duration , NULL , silencethreshold , 2000 , 0 ) FUNCTION_CALL 15 ast_play_and_record ( chan , \"priv-recordintro\" , pa -> privintro , 4 , \"sln\" , & duration , NULL , silencethreshold , 2000 , 0 ) CALLEE 16 ast_play_and_record LEAF_NODE 17 ast_play_and_record LEAF_NODE 16 ( ARGUMENT 16 chan FIELD 17 chan LEAF_NODE 18 chan LEAF_NODE 16 , ARGUMENT 16 \"priv-recordintro\" FIELD 17 \"priv-recordintro\" LEAF_NODE 18 \"priv-recordintro\" LEAF_NODE 16 , ARGUMENT 16 pa -> privintro FIELD 17 pa -> privintro LEAF_NODE 18 pa LEAF_NODE 18 -> LEAF_NODE 18 privintro LEAF_NODE 16 , ARGUMENT 16 4 FIELD 17 4 LEAF_NODE 18 4 LEAF_NODE 16 , ARGUMENT 16 \"sln\" FIELD 17 \"sln\" LEAF_NODE 18 \"sln\" LEAF_NODE 16 , ARGUMENT 16 & duration UNARY_EXPR 17 & duration UNARY_OPERATOR 18 & LEAF_NODE 19 & FIELD 18 duration LEAF_NODE 19 duration LEAF_NODE 16 , ARGUMENT 16 NULL FIELD 17 NULL LEAF_NODE 18 NULL LEAF_NODE 16 , ARGUMENT 16 silencethreshold FIELD 17 silencethreshold LEAF_NODE 18 silencethreshold LEAF_NODE 16 , ARGUMENT 16 2000 FIELD 17 2000 LEAF_NODE 18 2000 LEAF_NODE 16 , ARGUMENT 16 0 FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 16 ) LEAF_NODE 12 ; SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 res == - 1 EXPR 13 res == - 1 FIELD 14 res LEAF_NODE 15 res EQ_OPERATOR 14 == LEAF_NODE 15 == UNARY_EXPR 14 - 1 UNARY_OPERATOR 15 - LEAF_NODE 16 - FIELD 15 1 LEAF_NODE 16 1 LEAF_NODE 12 ) STATEMENTS 12 LEAF_NODE 13 { STATEMENTS 13 EXPR_STATEMENT 14 ast_filedelete ( pa -> privintro , NULL ) ; EXPR 15 ast_filedelete ( pa -> privintro , NULL ) FUNCTION_CALL 16 ast_filedelete ( pa -> privintro , NULL ) CALLEE 17 ast_filedelete LEAF_NODE 18 ast_filedelete LEAF_NODE 17 ( ARGUMENT 17 pa -> privintro FIELD 18 pa -> privintro LEAF_NODE 19 pa LEAF_NODE 19 -> LEAF_NODE 19 privintro LEAF_NODE 17 , ARGUMENT 17 NULL FIELD 18 NULL LEAF_NODE 19 NULL LEAF_NODE 17 ) LEAF_NODE 15 ; SELECTION 14 KEYWORD 15 if LEAF_NODE 16 if LEAF_NODE 15 ( CONDITION 15 ast_fileexists ( pa -> privintro , NULL , NULL ) > 0 EXPR 16 ast_fileexists ( pa -> privintro , NULL , NULL ) > 0 FUNCTION_CALL 17 ast_fileexists ( pa -> privintro , NULL , NULL ) CALLEE 18 ast_fileexists LEAF_NODE 19 ast_fileexists LEAF_NODE 18 ( ARGUMENT 18 pa -> privintro FIELD 19 pa -> privintro LEAF_NODE 20 pa LEAF_NODE 20 -> LEAF_NODE 20 privintro LEAF_NODE 18 , ARGUMENT 18 NULL FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 18 , ARGUMENT 18 NULL FIELD 19 NULL LEAF_NODE 20 NULL LEAF_NODE 18 ) REL_OPERATOR 17 > LEAF_NODE 18 > FIELD 17 0 LEAF_NODE 18 0 LEAF_NODE 15 ) STATEMENTS 15 EXPR_STATEMENT 16 ast_log ( LOG_NOTICE , \"privacy: ast_filedelete didn't do its job on %s\\n\" , pa -> privintro ) ; EXPR 17 ast_log ( LOG_NOTICE , \"privacy: ast_filedelete didn't do its job on %s\\n\" , pa -> privintro ) FUNCTION_CALL 18 ast_log ( LOG_NOTICE , \"privacy: ast_filedelete didn't do its job on %s\\n\" , pa -> privintro ) CALLEE 19 ast_log LEAF_NODE 20 ast_log LEAF_NODE 19 ( ARGUMENT 19 LOG_NOTICE FIELD 20 LOG_NOTICE LEAF_NODE 21 LOG_NOTICE LEAF_NODE 19 , ARGUMENT 19 \"privacy: ast_filedelete didn't do its job on %s\\n\" FIELD 20 \"privacy: ast_filedelete didn't do its job on %s\\n\" LEAF_NODE 21 \"privacy: ast_filedelete didn't do its job on %s\\n\" LEAF_NODE 19 , ARGUMENT 19 pa -> privintro FIELD 20 pa -> privintro LEAF_NODE 21 pa LEAF_NODE 21 -> LEAF_NODE 21 privintro LEAF_NODE 19 ) LEAF_NODE 17 ; SELECTION 14 KEYWORD 15 else LEAF_NODE 16 else STATEMENTS 15 EXPR_STATEMENT 16 ast_verb ( 3 , \"Successfully deleted %s intro file\\n\" , pa -> privintro ) ; EXPR 17 ast_verb ( 3 , \"Successfully deleted %s intro file\\n\" , pa -> privintro ) FUNCTION_CALL 18 ast_verb ( 3 , \"Successfully deleted %s intro file\\n\" , pa -> privintro ) CALLEE 19 ast_verb LEAF_NODE 20 ast_verb LEAF_NODE 19 ( ARGUMENT 19 3 FIELD 20 3 LEAF_NODE 21 3 LEAF_NODE 19 , ARGUMENT 19 \"Successfully deleted %s intro file\\n\" FIELD 20 \"Successfully deleted %s intro file\\n\" LEAF_NODE 21 \"Successfully deleted %s intro file\\n\" LEAF_NODE 19 , ARGUMENT 19 pa -> privintro FIELD 20 pa -> privintro LEAF_NODE 21 pa LEAF_NODE 21 -> LEAF_NODE 21 privintro LEAF_NODE 19 ) LEAF_NODE 17 ; JUMP_STATEMENT 14 return - 1 ; KEYWORD 15 return LEAF_NODE 16 return DESTINATION 15 - 1 EXPR 16 - 1 UNARY_EXPR 17 - 1 UNARY_OPERATOR 18 - LEAF_NODE 19 - FIELD 18 1 LEAF_NODE 19 1 LEAF_NODE 15 ; LEAF_NODE 13 } SELECTION 11 KEYWORD 12 if LEAF_NODE 13 if LEAF_NODE 12 ( CONDITION 12 ! ast_streamfile ( chan , \"vm-dialout\" , ast_channel_language ( chan ) ) EXPR 13 ! ast_streamfile ( chan , \"vm-dialout\" , ast_channel_language ( chan ) ) UNARY_EXPR 14 ! ast_streamfile ( chan , \"vm-dialout\" , ast_channel_language ( chan ) ) UNARY_OPERATOR 15 ! LEAF_NODE 16 ! FUNCTION_CALL 15 ast_streamfile ( chan , \"vm-dialout\" , ast_channel_language ( chan ) ) CALLEE 16 ast_streamfile LEAF_NODE 17 ast_streamfile LEAF_NODE 16 ( ARGUMENT 16 chan FIELD 17 chan LEAF_NODE 18 chan LEAF_NODE 16 , ARGUMENT 16 \"vm-dialout\" FIELD 17 \"vm-dialout\" LEAF_NODE 18 \"vm-dialout\" LEAF_NODE 16 , ARGUMENT 16 ast_channel_language ( chan ) FUNCTION_CALL 17 ast_channel_language ( chan ) CALLEE 18 ast_channel_language LEAF_NODE 19 ast_channel_language LEAF_NODE 18 ( ARGUMENT 18 chan FIELD 19 chan LEAF_NODE 20 chan LEAF_NODE 18 ) LEAF_NODE 16 ) LEAF_NODE 12 ) STATEMENTS 12 EXPR_STATEMENT 13 ast_waitstream ( chan , \"\" ) ; EXPR 14 ast_waitstream ( chan , \"\" ) FUNCTION_CALL 15 ast_waitstream ( chan , \"\" ) CALLEE 16 ast_waitstream LEAF_NODE 17 ast_waitstream LEAF_NODE 16 ( ARGUMENT 16 chan FIELD 17 chan LEAF_NODE 18 chan LEAF_NODE 16 , ARGUMENT 16 \"\" FIELD 17 \"\" LEAF_NODE 18 \"\" LEAF_NODE 16 ) LEAF_NODE 14 ; LEAF_NODE 10 } LEAF_NODE 7 } JUMP_STATEMENT 3 return 1 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 1 EXPR 5 1 FIELD 6 1 LEAF_NODE 7 1 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 46, "project": "openssl_ast_vul_function_test_adv_18", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct playlist_entry BASE_CLASSES { AST_LIST_ENTRY ( playlist_entry ) list ; char [ 1 ] filename ; } ; CLASS_DEF 2 struct playlist_entry BASE_CLASSES { AST_LIST_ENTRY ( playlist_entry ) list ; char [ 1 ] filename ; } CLASS_DEF 3 struct playlist_entry BASE_CLASSES { AST_LIST_ENTRY ( playlist_entry ) list ; char [ 1 ] filename ; } LEAF_NODE 4 struct CLASS_NAME 4 playlist_entry LEAF_NODE 5 playlist_entry LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_LIST_ENTRY ( playlist_entry ) list ; char [ 1 ] filename ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 playlist_entry LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 char [ 1 ] filename ; VAR_DECL 6 char [ 1 ] filename TYPE 7 char [ 1 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 1 ] LEAF_NODE 9 [ FIELD 9 1 LEAF_NODE 10 1 LEAF_NODE 9 ] NAME 7 filename LEAF_NODE 8 filename LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ivr_localuser BASE_CLASSES { struct ast_channel * chan ; AST_LIST_HEAD ( playlist , playlist_entry ) playlist ; AST_LIST_HEAD ( finishlist , playlist_entry ) finishlist ; int abort_current_sound ; int playing_silence ; int option_autoclear ; int gen_active ; } ; CLASS_DEF 2 struct ivr_localuser BASE_CLASSES { struct ast_channel * chan ; AST_LIST_HEAD ( playlist , playlist_entry ) playlist ; AST_LIST_HEAD ( finishlist , playlist_entry ) finishlist ; int abort_current_sound ; int playing_silence ; int option_autoclear ; int gen_active ; } CLASS_DEF 3 struct ivr_localuser BASE_CLASSES { struct ast_channel * chan ; AST_LIST_HEAD ( playlist , playlist_entry ) playlist ; AST_LIST_HEAD ( finishlist , playlist_entry ) finishlist ; int abort_current_sound ; int playing_silence ; int option_autoclear ; int gen_active ; } LEAF_NODE 4 struct CLASS_NAME 4 ivr_localuser LEAF_NODE 5 ivr_localuser LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_HEAD ( playlist , playlist_entry ) playlist ; AST_LIST_HEAD ( finishlist , playlist_entry ) finishlist ; int abort_current_sound ; int playing_silence ; int option_autoclear ; int gen_active ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD LEAF_NODE 5 ( LEAF_NODE 5 playlist LEAF_NODE 5 , LEAF_NODE 5 playlist_entry LEAF_NODE 5 ) LEAF_NODE 5 playlist LEAF_NODE 5 ; LEAF_NODE 5 AST_LIST_HEAD LEAF_NODE 5 ( LEAF_NODE 5 finishlist LEAF_NODE 5 , LEAF_NODE 5 playlist_entry LEAF_NODE 5 ) LEAF_NODE 5 finishlist LEAF_NODE 5 ; SIMPLE_DECL 5 int abort_current_sound ; VAR_DECL 6 int abort_current_sound TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 abort_current_sound LEAF_NODE 8 abort_current_sound LEAF_NODE 6 ; SIMPLE_DECL 5 int playing_silence ; VAR_DECL 6 int playing_silence TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 playing_silence LEAF_NODE 8 playing_silence LEAF_NODE 6 ; SIMPLE_DECL 5 int option_autoclear ; VAR_DECL 6 int option_autoclear TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 option_autoclear LEAF_NODE 8 option_autoclear LEAF_NODE 6 ; SIMPLE_DECL 5 int gen_active ; VAR_DECL 6 int gen_active TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 gen_active LEAF_NODE 8 gen_active LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct gen_state BASE_CLASSES { struct ivr_localuser * u ; struct ast_filestream * stream ; struct playlist_entry * current ; int sample_queue ; } ; CLASS_DEF 2 struct gen_state BASE_CLASSES { struct ivr_localuser * u ; struct ast_filestream * stream ; struct playlist_entry * current ; int sample_queue ; } CLASS_DEF 3 struct gen_state BASE_CLASSES { struct ivr_localuser * u ; struct ast_filestream * stream ; struct playlist_entry * current ; int sample_queue ; } LEAF_NODE 4 struct CLASS_NAME 4 gen_state LEAF_NODE 5 gen_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ivr_localuser * u ; struct ast_filestream * stream ; struct playlist_entry * current ; int sample_queue ; SIMPLE_DECL 5 struct ivr_localuser * u ; VAR_DECL 6 struct ivr_localuser * u TYPE 7 struct ivr_localuser * TYPE_NAME 8 struct ivr_localuser LEAF_NODE 9 struct LEAF_NODE 9 ivr_localuser POINTER 8 * LEAF_NODE 9 * NAME 7 u LEAF_NODE 8 u LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_filestream * stream ; VAR_DECL 6 struct ast_filestream * stream TYPE 7 struct ast_filestream * TYPE_NAME 8 struct ast_filestream LEAF_NODE 9 struct LEAF_NODE 9 ast_filestream POINTER 8 * LEAF_NODE 9 * NAME 7 stream LEAF_NODE 8 stream LEAF_NODE 6 ; SIMPLE_DECL 5 struct playlist_entry * current ; VAR_DECL 6 struct playlist_entry * current TYPE 7 struct playlist_entry * TYPE_NAME 8 struct playlist_entry LEAF_NODE 9 struct LEAF_NODE 9 playlist_entry POINTER 8 * LEAF_NODE 9 * NAME 7 current LEAF_NODE 8 current LEAF_NODE 6 ; SIMPLE_DECL 5 int sample_queue ; VAR_DECL 6 int sample_queue TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 sample_queue LEAF_NODE 8 sample_queue LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct fax_state_s fax_state_t ; VAR_DECL 2 struct fax_state_s fax_state_t TYPE 3 struct fax_state_s TYPE_NAME 4 struct fax_state_s LEAF_NODE 5 struct LEAF_NODE 5 fax_state_s NAME 3 fax_state_t LEAF_NODE 4 fax_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_format * ast_format_slin ; VAR_DECL 2 struct ast_format * ast_format_slin TYPE 3 struct ast_format * TYPE_NAME 4 struct ast_format LEAF_NODE 5 struct LEAF_NODE 5 ast_format POINTER 4 * LEAF_NODE 5 * NAME 3 ast_format_slin LEAF_NODE 4 ast_format_slin LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static int LEAF_NODE 3 static TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 fax_generator_generate LEAF_NODE 3 fax_generator_generate PARAMETER_LIST 2 ( struct ast_channel * chan , void * data , int len , int samples ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 , PARAMETER_DECL 3 void * data TYPE 4 void * TYPE_NAME 5 void LEAF_NODE 6 void POINTER 5 * LEAF_NODE 6 * NAME 4 data LEAF_NODE 5 data LEAF_NODE 3 , PARAMETER_DECL 3 int len TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 len LEAF_NODE 5 len LEAF_NODE 3 , PARAMETER_DECL 3 int samples TYPE 4 int TYPE_NAME 5 int LEAF_NODE 6 int NAME 4 samples LEAF_NODE 5 samples LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 fax_state_t * fax ; fax = ( fax_state_t * ) data ; VAR_DECL 4 fax_state_t * fax ; fax = ( fax_state_t * ) data TYPE 5 fax_state_t * TYPE_NAME 6 fax_state_t LEAF_NODE 7 fax_state_t POINTER 6 * LEAF_NODE 7 * NAME 5 fax LEAF_NODE 6 fax LEAF_NODE 5 ; INIT 5 fax = ( fax_state_t * ) data ASSIGN 6 fax = ( fax_state_t * ) data LVAL 7 fax NAME 8 fax LEAF_NODE 9 fax ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( fax_state_t * ) data LEAF_NODE 8 ( TYPE_NAME 8 fax_state_t LEAF_NODE 9 fax_state_t LEAF_NODE 8 * LEAF_NODE 8 ) FIELD 8 data LEAF_NODE 9 data LEAF_NODE 4 ; SIMPLE_DECL 3 uint8_t [ AST_FRIENDLY_OFFSET + MAX_SAMPLES * sizeof ( uint16_t ) ] buffer ; VAR_DECL 4 uint8_t [ AST_FRIENDLY_OFFSET + MAX_SAMPLES * sizeof ( uint16_t ) ] buffer TYPE 5 uint8_t [ AST_FRIENDLY_OFFSET + MAX_SAMPLES * sizeof ( uint16_t ) ] TYPE_NAME 6 uint8_t LEAF_NODE 7 uint8_t TYPE_SUFFIX 6 [ AST_FRIENDLY_OFFSET + MAX_SAMPLES * sizeof ( uint16_t ) ] LEAF_NODE 7 [ FIELD 7 AST_FRIENDLY_OFFSET LEAF_NODE 8 AST_FRIENDLY_OFFSET LEAF_NODE 7 + FIELD 7 MAX_SAMPLES LEAF_NODE 8 MAX_SAMPLES LEAF_NODE 7 * FUNCTION_CALL 7 sizeof ( uint16_t ) CALLEE 8 sizeof LEAF_NODE 9 sizeof LEAF_NODE 8 ( ARGUMENT 8 uint16_t FIELD 9 uint16_t LEAF_NODE 10 uint16_t LEAF_NODE 8 ) LEAF_NODE 7 ] NAME 5 buffer LEAF_NODE 6 buffer LEAF_NODE 4 ; SIMPLE_DECL 3 int16_t * buf ; buf = ( int16_t * ) ( buffer + AST_FRIENDLY_OFFSET ) ; VAR_DECL 4 int16_t * buf ; buf = ( int16_t * ) ( buffer + AST_FRIENDLY_OFFSET ) TYPE 5 int16_t * TYPE_NAME 6 int16_t LEAF_NODE 7 int16_t POINTER 6 * LEAF_NODE 7 * NAME 5 buf LEAF_NODE 6 buf LEAF_NODE 5 ; INIT 5 buf = ( int16_t * ) ( buffer + AST_FRIENDLY_OFFSET ) ASSIGN 6 buf = ( int16_t * ) ( buffer + AST_FRIENDLY_OFFSET ) LVAL 7 buf NAME 8 buf LEAF_NODE 9 buf ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 ( int16_t * ) ( buffer + AST_FRIENDLY_OFFSET ) LEAF_NODE 8 ( TYPE_NAME 8 int16_t LEAF_NODE 9 int16_t LEAF_NODE 8 * LEAF_NODE 8 ) LEAF_NODE 8 ( FIELD 8 buffer LEAF_NODE 9 buffer LEAF_NODE 8 + FIELD 8 AST_FRIENDLY_OFFSET LEAF_NODE 9 AST_FRIENDLY_OFFSET LEAF_NODE 8 ) LEAF_NODE 4 ; LEAF_NODE 3 struct LEAF_NODE 3 ast_frame LEAF_NODE 3 outf LEAF_NODE 3 = LEAF_NODE 3 { STATEMENTS 3 LEAF_NODE 4 . LEAF_NODE 4 frametype LEAF_NODE 4 = LEAF_NODE 4 AST_FRAME_VOICE LEAF_NODE 4 , LEAF_NODE 4 . LEAF_NODE 4 subclass LEAF_NODE 4 . LEAF_NODE 4 format LEAF_NODE 4 = LEAF_NODE 4 ast_format_slin LEAF_NODE 4 , LEAF_NODE 4 . LEAF_NODE 4 src LEAF_NODE 4 = LEAF_NODE 4 __FUNCTION__ LEAF_NODE 4 , LEAF_NODE 3 } LEAF_NODE 3 ; SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 samples > MAX_SAMPLES EXPR 5 samples > MAX_SAMPLES FIELD 6 samples LEAF_NODE 7 samples REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 MAX_SAMPLES LEAF_NODE 7 MAX_SAMPLES LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 ast_log ( LOG_WARNING , \"Only generating %d samples, where %d requested\\n\" , MAX_SAMPLES , samples ) ; EXPR 7 ast_log ( LOG_WARNING , \"Only generating %d samples, where %d requested\\n\" , MAX_SAMPLES , samples ) FUNCTION_CALL 8 ast_log ( LOG_WARNING , \"Only generating %d samples, where %d requested\\n\" , MAX_SAMPLES , samples ) CALLEE 9 ast_log LEAF_NODE 10 ast_log LEAF_NODE 9 ( ARGUMENT 9 LOG_WARNING FIELD 10 LOG_WARNING LEAF_NODE 11 LOG_WARNING LEAF_NODE 9 , ARGUMENT 9 \"Only generating %d samples, where %d requested\\n\" FIELD 10 \"Only generating %d samples, where %d requested\\n\" LEAF_NODE 11 \"Only generating %d samples, where %d requested\\n\" LEAF_NODE 9 , ARGUMENT 9 MAX_SAMPLES FIELD 10 MAX_SAMPLES LEAF_NODE 11 MAX_SAMPLES LEAF_NODE 9 , ARGUMENT 9 samples FIELD 10 samples LEAF_NODE 11 samples LEAF_NODE 9 ) LEAF_NODE 7 ; EXPR_STATEMENT 6 samples = MAX_SAMPLES ; EXPR 7 samples = MAX_SAMPLES ASSIGN 8 samples = MAX_SAMPLES LVAL 9 samples FIELD 10 samples LEAF_NODE 11 samples ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 MAX_SAMPLES FIELD 10 MAX_SAMPLES LEAF_NODE 11 MAX_SAMPLES LEAF_NODE 7 ; LEAF_NODE 5 } SELECTION 3 KEYWORD 4 if LEAF_NODE 5 if LEAF_NODE 4 ( CONDITION 4 ( len = fax_tx ( fax , buf , samples ) ) > 0 EXPR 5 ( len = fax_tx ( fax , buf , samples ) ) > 0 LEAF_NODE 6 ( ASSIGN 6 len = fax_tx ( fax , buf , samples ) LVAL 7 len FIELD 8 len LEAF_NODE 9 len ASSIGN_OP 7 = LEAF_NODE 8 = RVAL 7 fax_tx ( fax , buf , samples ) FUNCTION_CALL 8 fax_tx ( fax , buf , samples ) CALLEE 9 fax_tx LEAF_NODE 10 fax_tx LEAF_NODE 9 ( ARGUMENT 9 fax FIELD 10 fax LEAF_NODE 11 fax LEAF_NODE 9 , ARGUMENT 9 buf FIELD 10 buf LEAF_NODE 11 buf LEAF_NODE 9 , ARGUMENT 9 samples FIELD 10 samples LEAF_NODE 11 samples LEAF_NODE 9 ) LEAF_NODE 6 ) REL_OPERATOR 6 > LEAF_NODE 7 > FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ) STATEMENTS 4 LEAF_NODE 5 { STATEMENTS 5 EXPR_STATEMENT 6 outf . samples = len ; EXPR 7 outf . samples = len ASSIGN 8 outf . samples = len LVAL 9 outf . samples FIELD 10 outf . samples LEAF_NODE 11 outf LEAF_NODE 11 . LEAF_NODE 11 samples ASSIGN_OP 9 = LEAF_NODE 10 = RVAL 9 len FIELD 10 len LEAF_NODE 11 len LEAF_NODE 7 ; EXPR_STATEMENT 6 AST_FRAME_SET_BUFFER ( & outf , buffer , AST_FRIENDLY_OFFSET , len * sizeof ( int16_t ) ) ; EXPR 7 AST_FRAME_SET_BUFFER ( & outf , buffer , AST_FRIENDLY_OFFSET , len * sizeof ( int16_t ) ) FUNCTION_CALL 8 AST_FRAME_SET_BUFFER ( & outf , buffer , AST_FRIENDLY_OFFSET , len * sizeof ( int16_t ) ) CALLEE 9 AST_FRAME_SET_BUFFER LEAF_NODE 10 AST_FRAME_SET_BUFFER LEAF_NODE 9 ( ARGUMENT 9 & outf UNARY_EXPR 10 & outf UNARY_OPERATOR 11 & LEAF_NODE 12 & FIELD 11 outf LEAF_NODE 12 outf LEAF_NODE 9 , ARGUMENT 9 buffer FIELD 10 buffer LEAF_NODE 11 buffer LEAF_NODE 9 , ARGUMENT 9 AST_FRIENDLY_OFFSET FIELD 10 AST_FRIENDLY_OFFSET LEAF_NODE 11 AST_FRIENDLY_OFFSET LEAF_NODE 9 , ARGUMENT 9 len * sizeof ( int16_t ) FIELD 10 len LEAF_NODE 11 len LEAF_NODE 10 * FUNCTION_CALL 10 sizeof ( int16_t ) CALLEE 11 sizeof LEAF_NODE 12 sizeof LEAF_NODE 11 ( ARGUMENT 11 int16_t FIELD 12 int16_t LEAF_NODE 13 int16_t LEAF_NODE 11 ) LEAF_NODE 9 ) LEAF_NODE 7 ; SELECTION 6 KEYWORD 7 if LEAF_NODE 8 if LEAF_NODE 7 ( CONDITION 7 ast_write ( chan , & outf ) < 0 EXPR 8 ast_write ( chan , & outf ) < 0 FUNCTION_CALL 9 ast_write ( chan , & outf ) CALLEE 10 ast_write LEAF_NODE 11 ast_write LEAF_NODE 10 ( ARGUMENT 10 chan FIELD 11 chan LEAF_NODE 12 chan LEAF_NODE 10 , ARGUMENT 10 & outf UNARY_EXPR 11 & outf UNARY_OPERATOR 12 & LEAF_NODE 13 & FIELD 12 outf LEAF_NODE 13 outf LEAF_NODE 10 ) REL_OPERATOR 9 < LEAF_NODE 10 < FIELD 9 0 LEAF_NODE 10 0 LEAF_NODE 7 ) STATEMENTS 7 LEAF_NODE 8 { STATEMENTS 8 EXPR_STATEMENT 9 ast_log ( LOG_WARNING , \"Failed to write frame to '%s': %s\\n\" , ast_channel_name ( chan ) , strerror ( errno ) ) ; EXPR 10 ast_log ( LOG_WARNING , \"Failed to write frame to '%s': %s\\n\" , ast_channel_name ( chan ) , strerror ( errno ) ) FUNCTION_CALL 11 ast_log ( LOG_WARNING , \"Failed to write frame to '%s': %s\\n\" , ast_channel_name ( chan ) , strerror ( errno ) ) CALLEE 12 ast_log LEAF_NODE 13 ast_log LEAF_NODE 12 ( ARGUMENT 12 LOG_WARNING FIELD 13 LOG_WARNING LEAF_NODE 14 LOG_WARNING LEAF_NODE 12 , ARGUMENT 12 \"Failed to write frame to '%s': %s\\n\" FIELD 13 \"Failed to write frame to '%s': %s\\n\" LEAF_NODE 14 \"Failed to write frame to '%s': %s\\n\" LEAF_NODE 12 , ARGUMENT 12 ast_channel_name ( chan ) FUNCTION_CALL 13 ast_channel_name ( chan ) CALLEE 14 ast_channel_name LEAF_NODE 15 ast_channel_name LEAF_NODE 14 ( ARGUMENT 14 chan FIELD 15 chan LEAF_NODE 16 chan LEAF_NODE 14 ) LEAF_NODE 12 , ARGUMENT 12 strerror ( errno ) FUNCTION_CALL 13 strerror ( errno ) CALLEE 14 strerror LEAF_NODE 15 strerror LEAF_NODE 14 ( ARGUMENT 14 errno FIELD 15 errno LEAF_NODE 16 errno LEAF_NODE 14 ) LEAF_NODE 12 ) LEAF_NODE 10 ; JUMP_STATEMENT 9 return - 1 ; KEYWORD 10 return LEAF_NODE 11 return DESTINATION 10 - 1 EXPR 11 - 1 UNARY_EXPR 12 - 1 UNARY_OPERATOR 13 - LEAF_NODE 14 - FIELD 13 1 LEAF_NODE 14 1 LEAF_NODE 10 ; LEAF_NODE 8 } LEAF_NODE 5 } JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 47, "project": "openssl_ast_vul_function_test_adv_5", "target": 1}
{"func": "SIMPLE_DECL 1 void __ast_cli_register_multiple ; __ast_cli_register_multiple __ast_cli_register_multiple ( void ) ; VAR_DECL 2 void __ast_cli_register_multiple ; __ast_cli_register_multiple __ast_cli_register_multiple ( void ) TYPE 3 void TYPE_NAME 4 void LEAF_NODE 5 void NAME 3 __ast_cli_register_multiple LEAF_NODE 4 __ast_cli_register_multiple LEAF_NODE 3 ; INIT 3 __ast_cli_register_multiple __ast_cli_register_multiple ( void ) ASSIGN 4 __ast_cli_register_multiple __ast_cli_register_multiple ( void ) LVAL 5 __ast_cli_register_multiple NAME 6 __ast_cli_register_multiple LEAF_NODE 7 __ast_cli_register_multiple ASSIGN_OP 5 __ast_cli_register_multiple NAME 6 __ast_cli_register_multiple LEAF_NODE 7 __ast_cli_register_multiple RVAL 5 ( void ) LEAF_NODE 6 ( EXPR 6 void FIELD 7 void LEAF_NODE 8 void LEAF_NODE 6 ) LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 void TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 __ast_cli_register_multiple LEAF_NODE 3 __ast_cli_register_multiple PARAMETER_LIST 2 ( void ) LEAF_NODE 3 ( PARAMETER_DECL 3 void LEAF_NODE 4 void LEAF_NODE 3 ) LEAF_NODE 2 { LEAF_NODE 2 STATEMENTS LEAF_NODE 2 } FUNCTION_DEF 1 RETURN_TYPE 2 int TYPE_NAME 3 int LEAF_NODE 4 int FUNCTION_NAME 2 main LEAF_NODE 3 main PARAMETER_LIST 2 ( ) LEAF_NODE 3 ( LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 JUMP_STATEMENT 3 return 0 ; KEYWORD 4 return LEAF_NODE 5 return DESTINATION 4 0 EXPR 5 0 FIELD 6 0 LEAF_NODE 7 0 LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 48, "project": "openssl_ast_vul_function_test_adv_19", "target": 1}
{"func": "SIMPLE_DECL 1 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } ; CLASS_DEF 2 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } CLASS_DEF 3 struct chanspy_translation_helper BASE_CLASSES { struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; } LEAF_NODE 4 struct CLASS_NAME 4 chanspy_translation_helper LEAF_NODE 5 chanspy_translation_helper LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_audiohook spy_audiohook ; struct ast_audiohook whisper_audiohook ; struct ast_audiohook bridge_whisper_audiohook ; int fd ; int volfactor ; struct ast_flags flags ; SIMPLE_DECL 5 struct ast_audiohook spy_audiohook ; VAR_DECL 6 struct ast_audiohook spy_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 spy_audiohook LEAF_NODE 8 spy_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook whisper_audiohook ; VAR_DECL 6 struct ast_audiohook whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 whisper_audiohook LEAF_NODE 8 whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_audiohook bridge_whisper_audiohook ; VAR_DECL 6 struct ast_audiohook bridge_whisper_audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 bridge_whisper_audiohook LEAF_NODE 8 bridge_whisper_audiohook LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int volfactor ; VAR_DECL 6 int volfactor TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 volfactor LEAF_NODE 8 volfactor LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_flags flags ; VAR_DECL 6 struct ast_flags flags TYPE 7 struct ast_flags TYPE_NAME 8 struct ast_flags LEAF_NODE 9 struct LEAF_NODE 9 ast_flags NAME 7 flags LEAF_NODE 8 flags LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } ; CLASS_DEF 2 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } CLASS_DEF 3 struct ast_autochan BASE_CLASSES { struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_autochan LEAF_NODE 5 ast_autochan LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 struct ast_channel * chan ; AST_LIST_ENTRY ( ast_autochan ) list ; ast_mutex_t lock ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_autochan LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t lock ; VAR_DECL 6 ast_mutex_t lock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 lock LEAF_NODE 8 lock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 OPTION_QUIET = ( 1 << 0 ) , OPTION_BRIDGED = ( 1 << 1 ) , OPTION_VOLUME = ( 1 << 2 ) , OPTION_GROUP = ( 1 << 3 ) , OPTION_RECORD = ( 1 << 4 ) , OPTION_WHISPER = ( 1 << 5 ) , OPTION_PRIVATE = ( 1 << 6 ) , OPTION_READONLY = ( 1 << 7 ) , OPTION_EXIT = ( 1 << 8 ) , OPTION_ENFORCED = ( 1 << 9 ) , OPTION_NOTECH = ( 1 << 10 ) , OPTION_BARGE = ( 1 << 11 ) , OPTION_NAME = ( 1 << 12 ) , OPTION_DTMF_SWITCH_MODES = ( 1 << 13 ) , OPTION_DTMF_EXIT = ( 1 << 14 ) , OPTION_DTMF_CYCLE = ( 1 << 15 ) , OPTION_DAHDI_SCAN = ( 1 << 16 ) , OPTION_STOP = ( 1 << 17 ) , OPTION_EXITONHANGUP = ( 1 << 18 ) , OPTION_UNIQUEID = ( 1 << 19 ) , OPTION_LONG_QUEUE = ( 1 << 20 ) , LEAF_NODE 5 OPTION_QUIET LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 0 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BRIDGED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 1 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_VOLUME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 2 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_GROUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 3 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_RECORD LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 4 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_WHISPER LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 5 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_PRIVATE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 6 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_READONLY LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 7 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 8 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_ENFORCED LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 9 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NOTECH LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 10 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_BARGE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 11 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_NAME LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 12 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_SWITCH_MODES LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 13 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_EXIT LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 14 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DTMF_CYCLE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 15 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_DAHDI_SCAN LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 16 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_STOP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 17 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_EXITONHANGUP LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 18 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_UNIQUEID LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 19 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 5 OPTION_LONG_QUEUE LEAF_NODE 5 = LEAF_NODE 5 ( LEAF_NODE 5 1 LEAF_NODE 5 << LEAF_NODE 5 20 LEAF_NODE 5 ) LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_generator spygen ; VAR_DECL 2 struct ast_generator spygen TYPE 3 struct ast_generator TYPE_NAME 4 struct ast_generator LEAF_NODE 5 struct LEAF_NODE 5 ast_generator NAME 3 spygen LEAF_NODE 4 spygen LEAF_NODE 2 ; SIMPLE_DECL 1 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } ; CLASS_DEF 2 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } CLASS_DEF 3 struct spy_dtmf_options BASE_CLASSES { char exit ; char cycle ; char volume ; } LEAF_NODE 4 struct CLASS_NAME 4 spy_dtmf_options LEAF_NODE 5 spy_dtmf_options LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 char exit ; char cycle ; char volume ; SIMPLE_DECL 5 char exit ; VAR_DECL 6 char exit TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 exit LEAF_NODE 8 exit LEAF_NODE 6 ; SIMPLE_DECL 5 char cycle ; VAR_DECL 6 char cycle TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 cycle LEAF_NODE 8 cycle LEAF_NODE 6 ; SIMPLE_DECL 5 char volume ; VAR_DECL 6 char volume TYPE 7 char TYPE_NAME 8 char LEAF_NODE 9 char NAME 7 volume LEAF_NODE 8 volume LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } ; CLASS_DEF 2 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } CLASS_DEF 3 enum ast_say_case_sensitivity BASE_CLASSES { AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL } LEAF_NODE 4 enum CLASS_NAME 4 ast_say_case_sensitivity LEAF_NODE 5 ast_say_case_sensitivity LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_SAY_CASE_NONE , AST_SAY_CASE_LOWER , AST_SAY_CASE_UPPER , AST_SAY_CASE_ALL LEAF_NODE 5 AST_SAY_CASE_NONE LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_LOWER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_UPPER LEAF_NODE 5 , LEAF_NODE 5 AST_SAY_CASE_ALL LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] app ; app = \"ControlPlayback\" ; VAR_DECL 2 const char [ ] app ; app = \"ControlPlayback\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 app LEAF_NODE 4 app LEAF_NODE 3 ; INIT 3 app = \"ControlPlayback\" ASSIGN 4 app = \"ControlPlayback\" LVAL 5 app NAME 6 app LEAF_NODE 7 app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"ControlPlayback\" FIELD 6 \"ControlPlayback\" LEAF_NODE 7 \"ControlPlayback\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct t30_state_s t30_state_t ; VAR_DECL 2 struct t30_state_s t30_state_t TYPE 3 struct t30_state_s TYPE_NAME 4 struct t30_state_s LEAF_NODE 5 struct LEAF_NODE 5 t30_state_s NAME 3 t30_state_t LEAF_NODE 4 t30_state_t LEAF_NODE 2 ; SIMPLE_DECL 1 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } ; CLASS_DEF 2 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } CLASS_DEF 3 enum CLASS_NAME BASE_CLASSES { T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 } LEAF_NODE 4 enum LEAF_NODE 4 CLASS_NAME LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 T30_SUPPORT_NO_COMPRESSION = 0x01 , T30_SUPPORT_T4_1D_COMPRESSION = 0x02 , T30_SUPPORT_T4_2D_COMPRESSION = 0x04 , T30_SUPPORT_T6_COMPRESSION = 0x08 , T30_SUPPORT_T85_COMPRESSION = 0x10 , T30_SUPPORT_T43_COMPRESSION = 0x20 , T30_SUPPORT_T45_COMPRESSION = 0x40 , T30_SUPPORT_T81_COMPRESSION = 0x80 , T30_SUPPORT_SYCC_T81_COMPRESSION = 0x100 , T30_SUPPORT_T88_COMPRESSION = 0x200 LEAF_NODE 5 T30_SUPPORT_NO_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x01 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_1D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x02 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T4_2D_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x04 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T6_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x08 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T85_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x10 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T43_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x20 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T45_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x40 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x80 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_SYCC_T81_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x100 LEAF_NODE 5 , LEAF_NODE 5 T30_SUPPORT_T88_COMPRESSION LEAF_NODE 5 = LEAF_NODE 5 0x200 LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } ; CLASS_DEF 2 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } CLASS_DEF 3 enum ast_control_t38 BASE_CLASSES { AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38 LEAF_NODE 5 ast_control_t38 LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_REQUEST_NEGOTIATE = 1 , AST_T38_REQUEST_TERMINATE , AST_T38_NEGOTIATED , AST_T38_TERMINATED , AST_T38_REFUSED , AST_T38_REQUEST_PARMS , LEAF_NODE 5 AST_T38_REQUEST_NEGOTIATE LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_TERMINATE LEAF_NODE 5 , LEAF_NODE 5 AST_T38_NEGOTIATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_TERMINATED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REFUSED LEAF_NODE 5 , LEAF_NODE 5 AST_T38_REQUEST_PARMS LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } ; CLASS_DEF 2 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } CLASS_DEF 3 enum ast_control_t38_rate BASE_CLASSES { AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate LEAF_NODE 5 ast_control_t38_rate LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_2400 = 1 , AST_T38_RATE_4800 , AST_T38_RATE_7200 , AST_T38_RATE_9600 , AST_T38_RATE_12000 , AST_T38_RATE_14400 = 0 , LEAF_NODE 5 AST_T38_RATE_2400 LEAF_NODE 5 = LEAF_NODE 5 1 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_4800 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_7200 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_9600 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_12000 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_14400 LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } ; CLASS_DEF 2 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } CLASS_DEF 3 enum ast_control_t38_rate_management BASE_CLASSES { AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , } LEAF_NODE 4 enum CLASS_NAME 4 ast_control_t38_rate_management LEAF_NODE 5 ast_control_t38_rate_management LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF = 0 , AST_T38_RATE_MANAGEMENT_LOCAL_TCF , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_TRANSFERRED_TCF LEAF_NODE 5 = LEAF_NODE 5 0 LEAF_NODE 5 , LEAF_NODE 5 AST_T38_RATE_MANAGEMENT_LOCAL_TCF LEAF_NODE 5 , LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } ; CLASS_DEF 2 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } CLASS_DEF 3 struct ast_control_t38_parameters BASE_CLASSES { enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_control_t38_parameters LEAF_NODE 5 ast_control_t38_parameters LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 enum ast_control_t38 request_response ; unsigned int version ; unsigned int max_ifp ; enum ast_control_t38_rate rate ; enum ast_control_t38_rate_management rate_management ; unsigned int fill_bit_removal : 1 ; unsigned int transcoding_mmr : 1 ; unsigned int transcoding_jbig : 1 ; SIMPLE_DECL 5 enum ast_control_t38 request_response ; VAR_DECL 6 enum ast_control_t38 request_response TYPE 7 enum ast_control_t38 TYPE_NAME 8 enum ast_control_t38 LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38 NAME 7 request_response LEAF_NODE 8 request_response LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int version ; VAR_DECL 6 unsigned int version TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 version LEAF_NODE 8 version LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int max_ifp ; VAR_DECL 6 unsigned int max_ifp TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 max_ifp LEAF_NODE 8 max_ifp LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate rate ; VAR_DECL 6 enum ast_control_t38_rate rate TYPE 7 enum ast_control_t38_rate TYPE_NAME 8 enum ast_control_t38_rate LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate NAME 7 rate LEAF_NODE 8 rate LEAF_NODE 6 ; SIMPLE_DECL 5 enum ast_control_t38_rate_management rate_management ; VAR_DECL 6 enum ast_control_t38_rate_management rate_management TYPE 7 enum ast_control_t38_rate_management TYPE_NAME 8 enum ast_control_t38_rate_management LEAF_NODE 9 enum LEAF_NODE 9 ast_control_t38_rate_management NAME 7 rate_management LEAF_NODE 8 rate_management LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 fill_bit_removal : LEAF_NODE 6 fill_bit_removal LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_mmr : LEAF_NODE 6 transcoding_mmr LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 transcoding_jbig : LEAF_NODE 6 transcoding_jbig LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session ; VAR_DECL 2 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } fax_session TYPE 3 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } CLASS_DEF 4 struct CLASS_NAME BASE_CLASSES { struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; } LEAF_NODE 5 struct LEAF_NODE 5 CLASS_NAME LEAF_NODE 5 BASE_CLASSES LEAF_NODE 5 { CLASS_CONTENT 5 struct ast_channel * chan ; enum ast_t38_state t38state ; int direction ; int caller_mode ; char * file_name ; struct ast_control_t38_parameters t38parameters ; volatile int finished ; SIMPLE_DECL 6 struct ast_channel * chan ; VAR_DECL 7 struct ast_channel * chan TYPE 8 struct ast_channel * TYPE_NAME 9 struct ast_channel LEAF_NODE 10 struct LEAF_NODE 10 ast_channel POINTER 9 * LEAF_NODE 10 * NAME 8 chan LEAF_NODE 9 chan LEAF_NODE 7 ; SIMPLE_DECL 6 enum ast_t38_state t38state ; VAR_DECL 7 enum ast_t38_state t38state TYPE 8 enum ast_t38_state TYPE_NAME 9 enum ast_t38_state LEAF_NODE 10 enum LEAF_NODE 10 ast_t38_state NAME 8 t38state LEAF_NODE 9 t38state LEAF_NODE 7 ; SIMPLE_DECL 6 int direction ; VAR_DECL 7 int direction TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 direction LEAF_NODE 9 direction LEAF_NODE 7 ; SIMPLE_DECL 6 int caller_mode ; VAR_DECL 7 int caller_mode TYPE 8 int TYPE_NAME 9 int LEAF_NODE 10 int NAME 8 caller_mode LEAF_NODE 9 caller_mode LEAF_NODE 7 ; SIMPLE_DECL 6 char * file_name ; VAR_DECL 7 char * file_name TYPE 8 char * TYPE_NAME 9 char LEAF_NODE 10 char POINTER 9 * LEAF_NODE 10 * NAME 8 file_name LEAF_NODE 9 file_name LEAF_NODE 7 ; SIMPLE_DECL 6 struct ast_control_t38_parameters t38parameters ; VAR_DECL 7 struct ast_control_t38_parameters t38parameters TYPE 8 struct ast_control_t38_parameters TYPE_NAME 9 struct ast_control_t38_parameters LEAF_NODE 10 struct LEAF_NODE 10 ast_control_t38_parameters NAME 8 t38parameters LEAF_NODE 9 t38parameters LEAF_NODE 7 ; SIMPLE_DECL 6 volatile int finished ; VAR_DECL 7 volatile int finished TYPE 8 volatile int TYPE_NAME 9 volatile int LEAF_NODE 10 volatile LEAF_NODE 10 int NAME 8 finished LEAF_NODE 9 finished LEAF_NODE 7 ; LEAF_NODE 5 } NAME 3 fax_session LEAF_NODE 4 fax_session LEAF_NODE 2 ; SIMPLE_DECL 1 const char [ ] jack_app ; jack_app = \"JACK\" ; VAR_DECL 2 const char [ ] jack_app ; jack_app = \"JACK\" TYPE 3 const char [ ] TYPE_NAME 4 const char LEAF_NODE 5 const LEAF_NODE 5 char TYPE_SUFFIX 4 [ ] LEAF_NODE 5 [ LEAF_NODE 5 ] NAME 3 jack_app LEAF_NODE 4 jack_app LEAF_NODE 3 ; INIT 3 jack_app = \"JACK\" ASSIGN 4 jack_app = \"JACK\" LVAL 5 jack_app NAME 6 jack_app LEAF_NODE 7 jack_app ASSIGN_OP 5 = LEAF_NODE 6 = RVAL 5 \"JACK\" FIELD 6 \"JACK\" LEAF_NODE 7 \"JACK\" LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_client_t jack_client_t ; VAR_DECL 2 struct jack_client_t jack_client_t TYPE 3 struct jack_client_t TYPE_NAME 4 struct jack_client_t LEAF_NODE 5 struct LEAF_NODE 5 jack_client_t NAME 3 jack_client_t LEAF_NODE 4 jack_client_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_port_t jack_port_t ; VAR_DECL 2 struct jack_port_t jack_port_t TYPE 3 struct jack_port_t TYPE_NAME 4 struct jack_port_t LEAF_NODE 5 struct LEAF_NODE 5 jack_port_t NAME 3 jack_port_t LEAF_NODE 4 jack_port_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_ringbuffer_t jack_ringbuffer_t ; VAR_DECL 2 struct jack_ringbuffer_t jack_ringbuffer_t TYPE 3 struct jack_ringbuffer_t TYPE_NAME 4 struct jack_ringbuffer_t LEAF_NODE 5 struct LEAF_NODE 5 jack_ringbuffer_t NAME 3 jack_ringbuffer_t LEAF_NODE 4 jack_ringbuffer_t LEAF_NODE 2 ; SIMPLE_DECL 1 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } ; CLASS_DEF 2 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } CLASS_DEF 3 struct jack_data BASE_CLASSES { AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; } LEAF_NODE 4 struct CLASS_NAME 4 jack_data LEAF_NODE 5 jack_data LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 AST_DECLARE_STRING_FIELDS ( AST_STRING_FIELD ( server_name ) ; AST_STRING_FIELD ( client_name ) ; AST_STRING_FIELD ( connect_input_port ) ; AST_STRING_FIELD ( connect_output_port ) ; ) ; jack_client_t * client ; jack_port_t * input_port ; jack_port_t * output_port ; jack_ringbuffer_t * input_rb ; jack_ringbuffer_t * output_rb ; struct ast_format * audiohook_format ; unsigned int audiohook_rate ; unsigned int frame_datalen ; void * output_resampler ; double output_resample_factor ; void * input_resampler ; double input_resample_factor ; unsigned int stop : 1 ; unsigned int has_audiohook : 1 ; unsigned int no_start_server : 1 ; struct ast_audiohook audiohook ; LEAF_NODE 5 AST_DECLARE_STRING_FIELDS LEAF_NODE 5 ( LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 server_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 client_name LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_input_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 AST_STRING_FIELD LEAF_NODE 5 ( LEAF_NODE 5 connect_output_port LEAF_NODE 5 ) LEAF_NODE 5 ; LEAF_NODE 5 ) LEAF_NODE 5 ; SIMPLE_DECL 5 jack_client_t * client ; VAR_DECL 6 jack_client_t * client TYPE 7 jack_client_t * TYPE_NAME 8 jack_client_t LEAF_NODE 9 jack_client_t POINTER 8 * LEAF_NODE 9 * NAME 7 client LEAF_NODE 8 client LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * input_port ; VAR_DECL 6 jack_port_t * input_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_port LEAF_NODE 8 input_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_port_t * output_port ; VAR_DECL 6 jack_port_t * output_port TYPE 7 jack_port_t * TYPE_NAME 8 jack_port_t LEAF_NODE 9 jack_port_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_port LEAF_NODE 8 output_port LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * input_rb ; VAR_DECL 6 jack_ringbuffer_t * input_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 input_rb LEAF_NODE 8 input_rb LEAF_NODE 6 ; SIMPLE_DECL 5 jack_ringbuffer_t * output_rb ; VAR_DECL 6 jack_ringbuffer_t * output_rb TYPE 7 jack_ringbuffer_t * TYPE_NAME 8 jack_ringbuffer_t LEAF_NODE 9 jack_ringbuffer_t POINTER 8 * LEAF_NODE 9 * NAME 7 output_rb LEAF_NODE 8 output_rb LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_format * audiohook_format ; VAR_DECL 6 struct ast_format * audiohook_format TYPE 7 struct ast_format * TYPE_NAME 8 struct ast_format LEAF_NODE 9 struct LEAF_NODE 9 ast_format POINTER 8 * LEAF_NODE 9 * NAME 7 audiohook_format LEAF_NODE 8 audiohook_format LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int audiohook_rate ; VAR_DECL 6 unsigned int audiohook_rate TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 audiohook_rate LEAF_NODE 8 audiohook_rate LEAF_NODE 6 ; SIMPLE_DECL 5 unsigned int frame_datalen ; VAR_DECL 6 unsigned int frame_datalen TYPE 7 unsigned int TYPE_NAME 8 unsigned int LEAF_NODE 9 unsigned LEAF_NODE 9 int NAME 7 frame_datalen LEAF_NODE 8 frame_datalen LEAF_NODE 6 ; SIMPLE_DECL 5 void * output_resampler ; VAR_DECL 6 void * output_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 output_resampler LEAF_NODE 8 output_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double output_resample_factor ; VAR_DECL 6 double output_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 output_resample_factor LEAF_NODE 8 output_resample_factor LEAF_NODE 6 ; SIMPLE_DECL 5 void * input_resampler ; VAR_DECL 6 void * input_resampler TYPE 7 void * TYPE_NAME 8 void LEAF_NODE 9 void POINTER 8 * LEAF_NODE 9 * NAME 7 input_resampler LEAF_NODE 8 input_resampler LEAF_NODE 6 ; SIMPLE_DECL 5 double input_resample_factor ; VAR_DECL 6 double input_resample_factor TYPE 7 double TYPE_NAME 8 double LEAF_NODE 9 double NAME 7 input_resample_factor LEAF_NODE 8 input_resample_factor LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 stop : LEAF_NODE 6 stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 has_audiohook : LEAF_NODE 6 has_audiohook LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 no_start_server : LEAF_NODE 6 no_start_server LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 struct ast_audiohook audiohook ; VAR_DECL 6 struct ast_audiohook audiohook TYPE 7 struct ast_audiohook TYPE_NAME 8 struct ast_audiohook LEAF_NODE 9 struct LEAF_NODE 9 ast_audiohook NAME 7 audiohook LEAF_NODE 8 audiohook LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } ; CLASS_DEF 2 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } CLASS_DEF 3 enum recording_state BASE_CLASSES { MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE } LEAF_NODE 4 enum CLASS_NAME 4 recording_state LEAF_NODE 5 recording_state LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 MEETME_RECORD_OFF , MEETME_RECORD_STARTED , MEETME_RECORD_ACTIVE , MEETME_RECORD_TERMINATE LEAF_NODE 5 MEETME_RECORD_OFF LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_STARTED LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_ACTIVE LEAF_NODE 5 , LEAF_NODE 5 MEETME_RECORD_TERMINATE LEAF_NODE 4 } LEAF_NODE 2 ; SIMPLE_DECL 1 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } ; CLASS_DEF 2 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } CLASS_DEF 3 struct ast_conference BASE_CLASSES { ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; } LEAF_NODE 4 struct CLASS_NAME 4 ast_conference LEAF_NODE 5 ast_conference LEAF_NODE 4 BASE_CLASSES LEAF_NODE 4 { CLASS_CONTENT 4 ast_mutex_t playlock ; ast_mutex_t listenlock ; char [ MAX_CONFNUM ] confno ; struct ast_channel * chan ; struct ast_channel * lchan ; int fd ; int dahdiconf ; int users ; int markedusers ; int maxusers ; int endalert ; time_t start ; int refcount ; enum recording_state recording : 2 ; unsigned int isdynamic : 1 ; unsigned int locked : 1 ; unsigned int gmuted : 1 ; pthread_t recordthread ; ast_mutex_t recordthreadlock ; pthread_attr_t attr ; char * recordingfilename ; char * recordingformat ; char [ MAX_PIN ] pin ; char [ MAX_PIN ] pinadmin ; char [ 32 ] uniqueid ; long endtime ; const char * useropts ; const char * adminopts ; const char * bookid ; struct ast_frame * [ 32 ] transframe ; struct ast_frame * origframe ; struct ast_trans_pvt * [ 32 ] transpath ; struct ao2_container * usercontainer ; AST_LIST_ENTRY ( ast_conference ) list ; pthread_t announcethread ; ast_mutex_t announcethreadlock ; unsigned int announcethread_stop : 1 ; ast_cond_t announcelist_addition ; AST_LIST_HEAD_NOLOCK ( , announce_listitem ) announcelist ; ast_mutex_t announcelistlock ; SIMPLE_DECL 5 ast_mutex_t playlock ; VAR_DECL 6 ast_mutex_t playlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 playlock LEAF_NODE 8 playlock LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t listenlock ; VAR_DECL 6 ast_mutex_t listenlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 listenlock LEAF_NODE 8 listenlock LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_CONFNUM ] confno ; VAR_DECL 6 char [ MAX_CONFNUM ] confno TYPE 7 char [ MAX_CONFNUM ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_CONFNUM ] LEAF_NODE 9 [ FIELD 9 MAX_CONFNUM LEAF_NODE 10 MAX_CONFNUM LEAF_NODE 9 ] NAME 7 confno LEAF_NODE 8 confno LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * chan ; VAR_DECL 6 struct ast_channel * chan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_channel * lchan ; VAR_DECL 6 struct ast_channel * lchan TYPE 7 struct ast_channel * TYPE_NAME 8 struct ast_channel LEAF_NODE 9 struct LEAF_NODE 9 ast_channel POINTER 8 * LEAF_NODE 9 * NAME 7 lchan LEAF_NODE 8 lchan LEAF_NODE 6 ; SIMPLE_DECL 5 int fd ; VAR_DECL 6 int fd TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 fd LEAF_NODE 8 fd LEAF_NODE 6 ; SIMPLE_DECL 5 int dahdiconf ; VAR_DECL 6 int dahdiconf TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 dahdiconf LEAF_NODE 8 dahdiconf LEAF_NODE 6 ; SIMPLE_DECL 5 int users ; VAR_DECL 6 int users TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 users LEAF_NODE 8 users LEAF_NODE 6 ; SIMPLE_DECL 5 int markedusers ; VAR_DECL 6 int markedusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 markedusers LEAF_NODE 8 markedusers LEAF_NODE 6 ; SIMPLE_DECL 5 int maxusers ; VAR_DECL 6 int maxusers TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 maxusers LEAF_NODE 8 maxusers LEAF_NODE 6 ; SIMPLE_DECL 5 int endalert ; VAR_DECL 6 int endalert TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 endalert LEAF_NODE 8 endalert LEAF_NODE 6 ; SIMPLE_DECL 5 time_t start ; VAR_DECL 6 time_t start TYPE 7 time_t TYPE_NAME 8 time_t LEAF_NODE 9 time_t NAME 7 start LEAF_NODE 8 start LEAF_NODE 6 ; SIMPLE_DECL 5 int refcount ; VAR_DECL 6 int refcount TYPE 7 int TYPE_NAME 8 int LEAF_NODE 9 int NAME 7 refcount LEAF_NODE 8 refcount LEAF_NODE 6 ; LEAF_NODE 5 enum LEAF_NODE 5 recording_state LABEL 5 recording : LEAF_NODE 6 recording LEAF_NODE 6 : LEAF_NODE 5 2 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 isdynamic : LEAF_NODE 6 isdynamic LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 locked : LEAF_NODE 6 locked LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 gmuted : LEAF_NODE 6 gmuted LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t recordthread ; VAR_DECL 6 pthread_t recordthread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 recordthread LEAF_NODE 8 recordthread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t recordthreadlock ; VAR_DECL 6 ast_mutex_t recordthreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 recordthreadlock LEAF_NODE 8 recordthreadlock LEAF_NODE 6 ; SIMPLE_DECL 5 pthread_attr_t attr ; VAR_DECL 6 pthread_attr_t attr TYPE 7 pthread_attr_t TYPE_NAME 8 pthread_attr_t LEAF_NODE 9 pthread_attr_t NAME 7 attr LEAF_NODE 8 attr LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingfilename ; VAR_DECL 6 char * recordingfilename TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingfilename LEAF_NODE 8 recordingfilename LEAF_NODE 6 ; SIMPLE_DECL 5 char * recordingformat ; VAR_DECL 6 char * recordingformat TYPE 7 char * TYPE_NAME 8 char LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 recordingformat LEAF_NODE 8 recordingformat LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pin ; VAR_DECL 6 char [ MAX_PIN ] pin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pin LEAF_NODE 8 pin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ MAX_PIN ] pinadmin ; VAR_DECL 6 char [ MAX_PIN ] pinadmin TYPE 7 char [ MAX_PIN ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ MAX_PIN ] LEAF_NODE 9 [ FIELD 9 MAX_PIN LEAF_NODE 10 MAX_PIN LEAF_NODE 9 ] NAME 7 pinadmin LEAF_NODE 8 pinadmin LEAF_NODE 6 ; SIMPLE_DECL 5 char [ 32 ] uniqueid ; VAR_DECL 6 char [ 32 ] uniqueid TYPE 7 char [ 32 ] TYPE_NAME 8 char LEAF_NODE 9 char TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 uniqueid LEAF_NODE 8 uniqueid LEAF_NODE 6 ; SIMPLE_DECL 5 long endtime ; VAR_DECL 6 long endtime TYPE 7 long TYPE_NAME 8 long LEAF_NODE 9 long NAME 7 endtime LEAF_NODE 8 endtime LEAF_NODE 6 ; SIMPLE_DECL 5 const char * useropts ; VAR_DECL 6 const char * useropts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 useropts LEAF_NODE 8 useropts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * adminopts ; VAR_DECL 6 const char * adminopts TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 adminopts LEAF_NODE 8 adminopts LEAF_NODE 6 ; SIMPLE_DECL 5 const char * bookid ; VAR_DECL 6 const char * bookid TYPE 7 const char * TYPE_NAME 8 const char LEAF_NODE 9 const LEAF_NODE 9 char POINTER 8 * LEAF_NODE 9 * NAME 7 bookid LEAF_NODE 8 bookid LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * [ 32 ] transframe ; VAR_DECL 6 struct ast_frame * [ 32 ] transframe TYPE 7 struct ast_frame * [ 32 ] TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transframe LEAF_NODE 8 transframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_frame * origframe ; VAR_DECL 6 struct ast_frame * origframe TYPE 7 struct ast_frame * TYPE_NAME 8 struct ast_frame LEAF_NODE 9 struct LEAF_NODE 9 ast_frame POINTER 8 * LEAF_NODE 9 * NAME 7 origframe LEAF_NODE 8 origframe LEAF_NODE 6 ; SIMPLE_DECL 5 struct ast_trans_pvt * [ 32 ] transpath ; VAR_DECL 6 struct ast_trans_pvt * [ 32 ] transpath TYPE 7 struct ast_trans_pvt * [ 32 ] TYPE_NAME 8 struct ast_trans_pvt LEAF_NODE 9 struct LEAF_NODE 9 ast_trans_pvt POINTER 8 * LEAF_NODE 9 * TYPE_SUFFIX 8 [ 32 ] LEAF_NODE 9 [ FIELD 9 32 LEAF_NODE 10 32 LEAF_NODE 9 ] NAME 7 transpath LEAF_NODE 8 transpath LEAF_NODE 6 ; SIMPLE_DECL 5 struct ao2_container * usercontainer ; VAR_DECL 6 struct ao2_container * usercontainer TYPE 7 struct ao2_container * TYPE_NAME 8 struct ao2_container LEAF_NODE 9 struct LEAF_NODE 9 ao2_container POINTER 8 * LEAF_NODE 9 * NAME 7 usercontainer LEAF_NODE 8 usercontainer LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_ENTRY LEAF_NODE 5 ( LEAF_NODE 5 ast_conference LEAF_NODE 5 ) LEAF_NODE 5 list LEAF_NODE 5 ; SIMPLE_DECL 5 pthread_t announcethread ; VAR_DECL 6 pthread_t announcethread TYPE 7 pthread_t TYPE_NAME 8 pthread_t LEAF_NODE 9 pthread_t NAME 7 announcethread LEAF_NODE 8 announcethread LEAF_NODE 6 ; SIMPLE_DECL 5 ast_mutex_t announcethreadlock ; VAR_DECL 6 ast_mutex_t announcethreadlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcethreadlock LEAF_NODE 8 announcethreadlock LEAF_NODE 6 ; LEAF_NODE 5 unsigned LEAF_NODE 5 int LABEL 5 announcethread_stop : LEAF_NODE 6 announcethread_stop LEAF_NODE 6 : LEAF_NODE 5 1 LEAF_NODE 5 ; SIMPLE_DECL 5 ast_cond_t announcelist_addition ; VAR_DECL 6 ast_cond_t announcelist_addition TYPE 7 ast_cond_t TYPE_NAME 8 ast_cond_t LEAF_NODE 9 ast_cond_t NAME 7 announcelist_addition LEAF_NODE 8 announcelist_addition LEAF_NODE 6 ; LEAF_NODE 5 AST_LIST_HEAD_NOLOCK LEAF_NODE 5 ( LEAF_NODE 5 , LEAF_NODE 5 announce_listitem LEAF_NODE 5 ) LEAF_NODE 5 announcelist LEAF_NODE 5 ; SIMPLE_DECL 5 ast_mutex_t announcelistlock ; VAR_DECL 6 ast_mutex_t announcelistlock TYPE 7 ast_mutex_t TYPE_NAME 8 ast_mutex_t LEAF_NODE 9 ast_mutex_t NAME 7 announcelistlock LEAF_NODE 8 announcelistlock LEAF_NODE 6 ; LEAF_NODE 4 } LEAF_NODE 2 ; FUNCTION_DEF 1 RETURN_TYPE 2 static void LEAF_NODE 3 static TYPE_NAME 3 void LEAF_NODE 4 void FUNCTION_NAME 2 conf_start_moh LEAF_NODE 3 conf_start_moh PARAMETER_LIST 2 ( struct ast_channel * chan , const char * musicclass ) LEAF_NODE 3 ( PARAMETER_DECL 3 struct ast_channel * chan TYPE 4 struct ast_channel * TYPE_NAME 5 struct ast_channel LEAF_NODE 6 struct LEAF_NODE 6 ast_channel POINTER 5 * LEAF_NODE 6 * NAME 4 chan LEAF_NODE 5 chan LEAF_NODE 3 , PARAMETER_DECL 3 const char * musicclass TYPE 4 const char * TYPE_NAME 5 const char LEAF_NODE 6 const LEAF_NODE 6 char POINTER 5 * LEAF_NODE 6 * NAME 4 musicclass LEAF_NODE 5 musicclass LEAF_NODE 3 ) LEAF_NODE 2 { STATEMENTS 2 SIMPLE_DECL 3 char * original_moh ; VAR_DECL 4 char * original_moh TYPE 5 char * TYPE_NAME 6 char LEAF_NODE 7 char POINTER 6 * LEAF_NODE 7 * NAME 5 original_moh LEAF_NODE 6 original_moh LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_channel_lock ( chan ) ; EXPR 4 ast_channel_lock ( chan ) FUNCTION_CALL 5 ast_channel_lock ( chan ) CALLEE 6 ast_channel_lock LEAF_NODE 7 ast_channel_lock LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 original_moh = ast_strdupa ( ast_channel_musicclass ( chan ) ) ; EXPR 4 original_moh = ast_strdupa ( ast_channel_musicclass ( chan ) ) ASSIGN 5 original_moh = ast_strdupa ( ast_channel_musicclass ( chan ) ) LVAL 6 original_moh FIELD 7 original_moh LEAF_NODE 8 original_moh ASSIGN_OP 6 = LEAF_NODE 7 = RVAL 6 ast_strdupa ( ast_channel_musicclass ( chan ) ) FUNCTION_CALL 7 ast_strdupa ( ast_channel_musicclass ( chan ) ) CALLEE 8 ast_strdupa LEAF_NODE 9 ast_strdupa LEAF_NODE 8 ( ARGUMENT 8 ast_channel_musicclass ( chan ) FUNCTION_CALL 9 ast_channel_musicclass ( chan ) CALLEE 10 ast_channel_musicclass LEAF_NODE 11 ast_channel_musicclass LEAF_NODE 10 ( ARGUMENT 10 chan FIELD 11 chan LEAF_NODE 12 chan LEAF_NODE 10 ) LEAF_NODE 8 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_channel_musicclass_set ( chan , musicclass ) ; EXPR 4 ast_channel_musicclass_set ( chan , musicclass ) FUNCTION_CALL 5 ast_channel_musicclass_set ( chan , musicclass ) CALLEE 6 ast_channel_musicclass_set LEAF_NODE 7 ast_channel_musicclass_set LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 , ARGUMENT 6 musicclass FIELD 7 musicclass LEAF_NODE 8 musicclass LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_channel_unlock ( chan ) ; EXPR 4 ast_channel_unlock ( chan ) FUNCTION_CALL 5 ast_channel_unlock ( chan ) CALLEE 6 ast_channel_unlock LEAF_NODE 7 ast_channel_unlock LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_moh_start ( chan , original_moh , NULL ) ; EXPR 4 ast_moh_start ( chan , original_moh , NULL ) FUNCTION_CALL 5 ast_moh_start ( chan , original_moh , NULL ) CALLEE 6 ast_moh_start LEAF_NODE 7 ast_moh_start LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 , ARGUMENT 6 original_moh FIELD 7 original_moh LEAF_NODE 8 original_moh LEAF_NODE 6 , ARGUMENT 6 NULL FIELD 7 NULL LEAF_NODE 8 NULL LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_channel_lock ( chan ) ; EXPR 4 ast_channel_lock ( chan ) FUNCTION_CALL 5 ast_channel_lock ( chan ) CALLEE 6 ast_channel_lock LEAF_NODE 7 ast_channel_lock LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_channel_musicclass_set ( chan , original_moh ) ; EXPR 4 ast_channel_musicclass_set ( chan , original_moh ) FUNCTION_CALL 5 ast_channel_musicclass_set ( chan , original_moh ) CALLEE 6 ast_channel_musicclass_set LEAF_NODE 7 ast_channel_musicclass_set LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 , ARGUMENT 6 original_moh FIELD 7 original_moh LEAF_NODE 8 original_moh LEAF_NODE 6 ) LEAF_NODE 4 ; EXPR_STATEMENT 3 ast_channel_unlock ( chan ) ; EXPR 4 ast_channel_unlock ( chan ) FUNCTION_CALL 5 ast_channel_unlock ( chan ) CALLEE 6 ast_channel_unlock LEAF_NODE 7 ast_channel_unlock LEAF_NODE 6 ( ARGUMENT 6 chan FIELD 7 chan LEAF_NODE 8 chan LEAF_NODE 6 ) LEAF_NODE 4 ; LEAF_NODE 2 }", "idx": 49, "project": "openssl_ast_vul_function_test_adv_10", "target": 1}
